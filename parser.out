Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    PROTECTED
    COMMENT
    ASS_AND
    ELLIPSIS
    GOTO
    ENUM
    EXTENDS
    STRCITFP
    THROWS
    TRANSIENT
    INTERFACE
    SYNCHRONIZED
    FINAL
    ASS_XOR
    ASS_DIV
    TRY
    LITERAL
    ASS_SHRR
    OPERATOR
    AND
    WHITESPACE
    ASS_OR
    NATIVE
    SWITCH
    CATCH
    INSTANCEOF
    ASS_SHR
    ASS_MOD
    ASS_SHL
    IMPLEMENTS
    VOLATILE
    CONST
    KEYWORD
    ABSTRACT
    ASSERT
    FINALLY
    SEPERATOR
    THROW

Grammar

Rule 0     S' -> CompilationUnit
Rule 1     CompilationUnit -> ProgramFile
Rule 2     OP_DIM -> LSQPAREN RSQPAREN
Rule 3     TypeSpecifier -> TypeName
Rule 4     TypeSpecifier -> TypeName Dims
Rule 5     TypeName -> PrimitiveType
Rule 6     TypeName -> QualifiedName
Rule 7     ClassNameList -> QualifiedName
Rule 8     ClassNameList -> ClassNameList COMMA QualifiedName
Rule 9     PrimitiveType -> BOOLEAN
Rule 10    PrimitiveType -> CHAR
Rule 11    PrimitiveType -> BYTE
Rule 12    PrimitiveType -> SHORT
Rule 13    PrimitiveType -> INT
Rule 14    PrimitiveType -> LONG
Rule 15    PrimitiveType -> FLOAT
Rule 16    PrimitiveType -> DOUBLE
Rule 17    PrimitiveType -> VOID
Rule 18    SemiColons -> SEMICOLON
Rule 19    SemiColons -> SemiColons SEMICOLON
Rule 20    ProgramFile -> PackageStatement ImportStatements TypeDeclarations
Rule 21    ProgramFile -> PackageStatement TypeDeclarations
Rule 22    ProgramFile -> ImportStatements TypeDeclarations
Rule 23    ProgramFile -> TypeDeclarations
Rule 24    PackageStatement -> PACKAGE QualifiedName SemiColons
Rule 25    TypeDeclarations -> TypeDeclarationOptSemi
Rule 26    TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi
Rule 27    TypeDeclarationOptSemi -> TypeDeclaration
Rule 28    TypeDeclarationOptSemi -> TypeDeclaration SemiColons
Rule 29    ImportStatements -> ImportStatement
Rule 30    ImportStatements -> ImportStatements ImportStatement
Rule 31    ImportStatement -> IMPORT QualifiedName SemiColons
Rule 32    ImportStatement -> IMPORT QualifiedName DOT MULT SemiColons
Rule 33    QualifiedName -> IDENTIFIER
Rule 34    QualifiedName -> QualifiedName DOT IDENTIFIER
Rule 35    TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN
Rule 36    TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN
Rule 37    ClassHeader -> Modifiers ClassWord IDENTIFIER
Rule 38    ClassHeader -> ClassWord IDENTIFIER
Rule 39    Modifiers -> Modifier
Rule 40    Modifiers -> Modifiers Modifier
Rule 41    Modifier -> PUBLIC
Rule 42    Modifier -> PRIVATE
Rule 43    Modifier -> STATIC
Rule 44    ClassWord -> CLASS
Rule 45    FieldDeclarations -> FieldDeclarationOptSemi
Rule 46    FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi
Rule 47    FieldDeclarationOptSemi -> FieldDeclaration
Rule 48    FieldDeclarationOptSemi -> FieldDeclaration SemiColons
Rule 49    FieldDeclaration -> FieldVariableDeclaration SEMICOLON
Rule 50    FieldDeclaration -> MethodDeclaration
Rule 51    FieldDeclaration -> ConstructorDeclaration
Rule 52    FieldDeclaration -> StaticInitializer
Rule 53    FieldDeclaration -> NonStaticInitializer
Rule 54    FieldDeclaration -> TypeDeclaration
Rule 55    FieldVariableDeclaration -> Modifiers TypeSpecifier VariableDeclarators
Rule 56    FieldVariableDeclaration -> TypeSpecifier VariableDeclarators
Rule 57    VariableDeclarators -> VariableDeclarator
Rule 58    VariableDeclarators -> VariableDeclarators COMMA VariableDeclarator
Rule 59    VariableDeclarator -> DeclaratorName
Rule 60    VariableDeclarator -> DeclaratorName EQUAL VariableInitializer
Rule 61    VariableInitializer -> Expression
Rule 62    MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody
Rule 63    MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody
Rule 64    MethodDeclarator -> DeclaratorName LROUNPAREN ParameterList RROUNPAREN
Rule 65    MethodDeclarator -> DeclaratorName LROUNPAREN RROUNPAREN
Rule 66    ParameterList -> Parameter
Rule 67    ParameterList -> ParameterList COMMA Parameter
Rule 68    Parameter -> TypeSpecifier DeclaratorName
Rule 69    DeclaratorName -> IDENTIFIER
Rule 70    DeclaratorName -> DeclaratorName OP_DIM
Rule 71    MethodBody -> Block
Rule 72    MethodBody -> SEMICOLON
Rule 73    ConstructorDeclaration -> Modifiers ConstructorDeclarator Block
Rule 74    ConstructorDeclaration -> ConstructorDeclarator Block
Rule 75    ConstructorDeclarator -> IDENTIFIER LROUNPAREN ParameterList RROUNPAREN
Rule 76    ConstructorDeclarator -> IDENTIFIER LROUNPAREN RROUNPAREN
Rule 77    StaticInitializer -> STATIC Block
Rule 78    NonStaticInitializer -> Block
Rule 79    Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN
Rule 80    Block -> LCURPAREN RCURPAREN
Rule 81    LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement
Rule 82    LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement
Rule 83    LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement
Rule 84    LocalVariableDeclarationOrStatement -> Statement
Rule 85    LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON
Rule 86    Statement -> EmptyStatement Mark_quad
Rule 87    Statement -> LabelStatement Mark_quad
Rule 88    Statement -> ExpressionStatement SEMICOLON Mark_quad
Rule 89    Statement -> JumpStatement Mark_quad
Rule 90    Statement -> Block Mark_quad
Rule 91    Statement -> IterationStatement Mark_quad
Rule 92    Statement -> SelectionStatement Mark_quad
Rule 93    Mark_quad -> <empty>
Rule 94    EmptyStatement -> SEMICOLON
Rule 95    LabelStatement -> IDENTIFIER COLON
Rule 96    LabelStatement -> CASE ConstantExpression COLON
Rule 97    LabelStatement -> DEFAULT COLON
Rule 98    ExpressionStatement -> Expression
Rule 99    SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement
Rule 100   SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement
Rule 101   Mark_if -> <empty>
Rule 102   Mark_else -> <empty>
Rule 103   IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement
Rule 104   Mark_while -> <empty>
Rule 105   IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON
Rule 106   Do -> DO
Rule 107   Mark_dowhile -> <empty>
Rule 108   IterationStatement -> FOR LROUNPAREN ForInit ForExpr Mark_quad ForIncr RROUNPAREN Mark_quad Statement
Rule 109   IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement
Rule 110   ForInit -> ExpressionStatements SEMICOLON
Rule 111   ForInit -> LocalVariableDeclarationStatement
Rule 112   ForInit -> SEMICOLON
Rule 113   ForExpr -> Mark_quad Expression SEMICOLON
Rule 114   ForExpr -> Mark_quad SEMICOLON
Rule 115   ForIncr -> ExpressionStatements
Rule 116   ExpressionStatements -> ExpressionStatement
Rule 117   ExpressionStatements -> ExpressionStatements COMMA ExpressionStatement
Rule 118   JumpStatement -> BREAK SEMICOLON
Rule 119   JumpStatement -> CONTINUE SEMICOLON
Rule 120   JumpStatement -> RETURN Expression SEMICOLON
Rule 121   JumpStatement -> RETURN SEMICOLON
Rule 122   PrimaryExpression -> QualifiedName
Rule 123   PrimaryExpression -> NotJustName
Rule 124   NotJustName -> SpecialName
Rule 125   NotJustName -> NewAllocationExpression
Rule 126   NotJustName -> ComplexPrimary
Rule 127   ComplexPrimary -> LROUNPAREN Expression RROUNPAREN
Rule 128   ComplexPrimary -> ComplexPrimaryNoParenthesis
Rule 129   ComplexPrimaryNoParenthesis -> INT_CONST
Rule 130   ComplexPrimaryNoParenthesis -> FLOAT_CONST
Rule 131   ComplexPrimaryNoParenthesis -> STRING
Rule 132   ComplexPrimaryNoParenthesis -> CHAR_CONST
Rule 133   ComplexPrimaryNoParenthesis -> BOOLEAN_CONST
Rule 134   ComplexPrimaryNoParenthesis -> ArrayAccess
Rule 135   ComplexPrimaryNoParenthesis -> FieldAccess
Rule 136   ComplexPrimaryNoParenthesis -> MethodCall
Rule 137   ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN
Rule 138   ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN
Rule 139   FieldAccess -> NotJustName DOT IDENTIFIER
Rule 140   FieldAccess -> RealPostfixExpression DOT IDENTIFIER
Rule 141   FieldAccess -> QualifiedName DOT THIS
Rule 142   FieldAccess -> QualifiedName DOT CLASS
Rule 143   FieldAccess -> PrimitiveType DOT CLASS
Rule 144   MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN
Rule 145   MethodCall -> MethodAccess LROUNPAREN RROUNPAREN
Rule 146   MethodAccess -> QualifiedName
Rule 147   SpecialName -> THIS
Rule 148   SpecialName -> SUPER
Rule 149   SpecialName -> NULL
Rule 150   ArgumentList -> Expression
Rule 151   ArgumentList -> ArgumentList COMMA Expression
Rule 152   NewAllocationExpression -> PlainNewAllocationExpression
Rule 153   NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression
Rule 154   PlainNewAllocationExpression -> ArrayAllocationExpression
Rule 155   PlainNewAllocationExpression -> ClassAllocationExpression
Rule 156   PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN
Rule 157   PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN
Rule 158   PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
Rule 159   ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
Rule 160   ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN
Rule 161   ArrayAllocationExpression -> NEW TypeName DimExprs Dims
Rule 162   ArrayAllocationExpression -> NEW TypeName DimExprs
Rule 163   ArrayAllocationExpression -> NEW TypeName Dims
Rule 164   DimExprs -> DimExpr
Rule 165   DimExprs -> DimExprs DimExpr
Rule 166   DimExpr -> LSQPAREN Expression RSQPAREN
Rule 167   Dims -> OP_DIM
Rule 168   Dims -> Dims OP_DIM
Rule 169   PostfixExpression -> PrimaryExpression
Rule 170   PostfixExpression -> RealPostfixExpression
Rule 171   RealPostfixExpression -> PostfixExpression OP_INC
Rule 172   RealPostfixExpression -> PostfixExpression OP_DEC
Rule 173   UnaryExpression -> OP_INC UnaryExpression
Rule 174   UnaryExpression -> OP_DEC UnaryExpression
Rule 175   UnaryExpression -> ArithmeticUnaryOperator CastExpression
Rule 176   UnaryExpression -> LogicalUnaryExpression
Rule 177   LogicalUnaryExpression -> PostfixExpression
Rule 178   LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression
Rule 179   LogicalUnaryOperator -> ~
Rule 180   LogicalUnaryOperator -> NOT
Rule 181   ArithmeticUnaryOperator -> PLUS
Rule 182   ArithmeticUnaryOperator -> MINUS
Rule 183   CastExpression -> UnaryExpression
Rule 184   PrimitiveTypeExpression -> PrimitiveType
Rule 185   PrimitiveTypeExpression -> PrimitiveType Dims
Rule 186   ClassTypeExpression -> QualifiedName Dims
Rule 187   MultiplicativeExpression -> CastExpression
Rule 188   MultiplicativeExpression -> MultiplicativeExpression MULT CastExpression
Rule 189   MultiplicativeExpression -> MultiplicativeExpression DIV CastExpression
Rule 190   MultiplicativeExpression -> MultiplicativeExpression MOD CastExpression
Rule 191   AdditiveExpression -> MultiplicativeExpression
Rule 192   AdditiveExpression -> AdditiveExpression PLUS MultiplicativeExpression
Rule 193   AdditiveExpression -> AdditiveExpression MINUS MultiplicativeExpression
Rule 194   ShiftExpression -> AdditiveExpression
Rule 195   ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression
Rule 196   ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression
Rule 197   ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression
Rule 198   RelationalExpression -> ShiftExpression
Rule 199   RelationalExpression -> RelationalExpression LESS ShiftExpression
Rule 200   RelationalExpression -> RelationalExpression MORE ShiftExpression
Rule 201   RelationalExpression -> RelationalExpression OP_LE ShiftExpression
Rule 202   RelationalExpression -> RelationalExpression OP_GE ShiftExpression
Rule 203   EqualityExpression -> RelationalExpression
Rule 204   EqualityExpression -> EqualityExpression OP_EQ RelationalExpression
Rule 205   EqualityExpression -> EqualityExpression OP_NE RelationalExpression
Rule 206   AndExpression -> EqualityExpression
Rule 207   AndExpression -> AndExpression & EqualityExpression
Rule 208   ExclusiveOrExpression -> AndExpression
Rule 209   ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression
Rule 210   InclusiveOrExpression -> ExclusiveOrExpression
Rule 211   InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression
Rule 212   ConditionalAndExpression -> InclusiveOrExpression
Rule 213   ConditionalAndExpression -> ConditionalAndExpression OP_LAND InclusiveOrExpression
Rule 214   ConditionalOrExpression -> ConditionalAndExpression
Rule 215   ConditionalOrExpression -> ConditionalOrExpression OP_LOR ConditionalAndExpression
Rule 216   ConditionalExpression -> ConditionalOrExpression
Rule 217   ConditionalExpression -> ConditionalOrExpression ? Expression COLON ConditionalExpression
Rule 218   AssignmentExpression -> ConditionalExpression
Rule 219   AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression
Rule 220   AssignmentOperator -> EQUAL
Rule 221   AssignmentOperator -> ASS_MUL
Rule 222   AssignmentOperator -> ASS_ADD
Rule 223   AssignmentOperator -> ASS_SUB
Rule 224   Expression -> AssignmentExpression
Rule 225   ConstantExpression -> ConditionalExpression

Terminals, with rules where they appear

&                    : 207
?                    : 217
ABSTRACT             : 
AND                  : 
ASSERT               : 
ASS_ADD              : 222
ASS_AND              : 
ASS_DIV              : 
ASS_MOD              : 
ASS_MUL              : 221
ASS_OR               : 
ASS_SHL              : 
ASS_SHR              : 
ASS_SHRR             : 
ASS_SUB              : 223
ASS_XOR              : 
BOOLEAN              : 9
BOOLEAN_CONST        : 133
BREAK                : 118
BYTE                 : 11
CASE                 : 96
CATCH                : 
CHAR                 : 10
CHAR_CONST           : 132
CLASS                : 44 142 143
COLON                : 95 96 97 217
COMMA                : 8 58 67 117 151
COMMENT              : 
CONST                : 
CONTINUE             : 119
DEFAULT              : 97
DIV                  : 189
DO                   : 106
DOT                  : 32 34 139 140 141 142 143 153
DOUBLE               : 16
ELLIPSIS             : 
ELSE                 : 100
ENUM                 : 
EQUAL                : 60 220
EXTENDS              : 
FINAL                : 
FINALLY              : 
FLOAT                : 15
FLOAT_CONST          : 130
FOR                  : 108 109
GOTO                 : 
IDENTIFIER           : 33 34 37 38 69 75 76 95 139 140
IF                   : 99 100
IMPLEMENTS           : 
IMPORT               : 31 32
INSTANCEOF           : 
INT                  : 13
INTERFACE            : 
INT_CONST            : 129
KEYWORD              : 
LCURPAREN            : 35 36 79 80 156 157 158
LESS                 : 199
LITERAL              : 
LONG                 : 14
LROUNPAREN           : 64 65 75 76 99 100 103 105 108 109 127 144 145 159 160
LSQPAREN             : 2 137 138 166
MINUS                : 182 193
MOD                  : 190
MORE                 : 200
MULT                 : 32 188
NATIVE               : 
NEW                  : 159 160 161 162 163
NOT                  : 180
NULL                 : 149
OPERATOR             : 
OP_DEC               : 172 174
OP_EQ                : 204
OP_GE                : 202
OP_INC               : 171 173
OP_LAND              : 213
OP_LE                : 201
OP_LOR               : 215
OP_NE                : 205
OP_SHL               : 195
OP_SHR               : 196
OP_SHRR              : 197
PACKAGE              : 24
PLUS                 : 181 192
PRIVATE              : 42
PROTECTED            : 
PUBLIC               : 41
RCURPAREN            : 35 36 79 80 156 157 158
RETURN               : 120 121
RROUNPAREN           : 64 65 75 76 99 100 103 105 108 109 127 144 145 159 160
RSQPAREN             : 2 137 138 166
SEMICOLON            : 18 19 49 72 85 88 94 105 110 112 113 114 118 119 120 121
SEPERATOR            : 
SHORT                : 12
STATIC               : 43 77
STRCITFP             : 
STRING               : 131
SUPER                : 148
SWITCH               : 
SYNCHRONIZED         : 
THIS                 : 141 147
THROW                : 
THROWS               : 
TRANSIENT            : 
TRY                  : 
VOID                 : 17
VOLATILE             : 
WHILE                : 103 105
WHITESPACE           : 
^                    : 209
error                : 
|                    : 211
~                    : 179

Nonterminals, with rules where they appear

AdditiveExpression   : 192 193 194 195 196 197
AndExpression        : 207 208 209
ArgumentList         : 144 151 159
ArithmeticUnaryOperator : 175
ArrayAccess          : 134
ArrayAllocationExpression : 154 156
AssignmentExpression : 219 224
AssignmentOperator   : 219
Block                : 71 73 74 77 78 90
CastExpression       : 175 187 188 189 190
ClassAllocationExpression : 155 157 158
ClassHeader          : 35 36
ClassNameList        : 8
ClassTypeExpression  : 
ClassWord            : 37 38
CompilationUnit      : 0
ComplexPrimary       : 126 138
ComplexPrimaryNoParenthesis : 128
ConditionalAndExpression : 213 214 215
ConditionalExpression : 217 218 225
ConditionalOrExpression : 215 216 217
ConstantExpression   : 96
ConstructorDeclaration : 51
ConstructorDeclarator : 73 74
DeclaratorName       : 59 60 64 65 68 70
DimExpr              : 164 165
DimExprs             : 161 162 165
Dims                 : 4 161 163 168 185 186
Do                   : 105
EmptyStatement       : 86
EqualityExpression   : 204 205 206 207
ExclusiveOrExpression : 209 210 211
Expression           : 61 98 99 100 103 105 113 120 127 137 138 150 151 166 217
ExpressionStatement  : 88 116 117
ExpressionStatements : 110 115 117
FieldAccess          : 135
FieldDeclaration     : 47 48
FieldDeclarationOptSemi : 45 46
FieldDeclarations    : 35 46 158
FieldVariableDeclaration : 49
ForExpr              : 108 109
ForIncr              : 108
ForInit              : 108 109
ImportStatement      : 29 30
ImportStatements     : 20 22 30
InclusiveOrExpression : 211 212 213
IterationStatement   : 91
JumpStatement        : 89
LabelStatement       : 87
LocalVariableDeclarationOrStatement : 81 82
LocalVariableDeclarationStatement : 83 111
LocalVariableDeclarationsAndStatements : 79 82
LogicalUnaryExpression : 176
LogicalUnaryOperator : 178
Mark_dowhile         : 105
Mark_else            : 100
Mark_if              : 99 100
Mark_quad            : 86 87 88 89 90 91 92 103 105 108 108 113 114
Mark_while           : 103
MethodAccess         : 144 145
MethodBody           : 62 63
MethodCall           : 136
MethodDeclaration    : 50
MethodDeclarator     : 62 63
Modifier             : 39 40
Modifiers            : 37 40 55 62 73
MultiplicativeExpression : 188 189 190 191 192 193
NewAllocationExpression : 125
NonStaticInitializer : 53
NotJustName          : 123 139
OP_DIM               : 70 167 168
PackageStatement     : 20 21
Parameter            : 66 67
ParameterList        : 64 67 75
PlainNewAllocationExpression : 152 153
PostfixExpression    : 171 172 177
PrimaryExpression    : 169
PrimitiveType        : 5 143 184 185
PrimitiveTypeExpression : 
ProgramFile          : 1
QualifiedName        : 6 7 8 24 31 32 34 122 137 141 142 146 153 186
RealPostfixExpression : 140 170
RelationalExpression : 199 200 201 202 203 204 205
SelectionStatement   : 92
SemiColons           : 19 24 28 31 32 48
ShiftExpression      : 195 196 197 198 199 200 201 202
SpecialName          : 124
Statement            : 84 99 100 100 103 105 108 109
StaticInitializer    : 52
TypeDeclaration      : 27 28 54
TypeDeclarationOptSemi : 25 26
TypeDeclarations     : 20 21 22 23 26
TypeName             : 3 4 159 160 161 162 163
TypeSpecifier        : 55 56 62 63 68 85
UnaryExpression      : 173 174 178 183 219
VariableDeclarator   : 57 58
VariableDeclarators  : 55 56 58 85
VariableInitializer  : 60

Parsing method: LALR

state 0

    (0) S' -> . CompilationUnit
    (1) CompilationUnit -> . ProgramFile
    (20) ProgramFile -> . PackageStatement ImportStatements TypeDeclarations
    (21) ProgramFile -> . PackageStatement TypeDeclarations
    (22) ProgramFile -> . ImportStatements TypeDeclarations
    (23) ProgramFile -> . TypeDeclarations
    (24) PackageStatement -> . PACKAGE QualifiedName SemiColons
    (29) ImportStatements -> . ImportStatement
    (30) ImportStatements -> . ImportStatements ImportStatement
    (25) TypeDeclarations -> . TypeDeclarationOptSemi
    (26) TypeDeclarations -> . TypeDeclarations TypeDeclarationOptSemi
    (31) ImportStatement -> . IMPORT QualifiedName SemiColons
    (32) ImportStatement -> . IMPORT QualifiedName DOT MULT SemiColons
    (27) TypeDeclarationOptSemi -> . TypeDeclaration
    (28) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (35) TypeDeclaration -> . ClassHeader LCURPAREN FieldDeclarations RCURPAREN
    (36) TypeDeclaration -> . ClassHeader LCURPAREN RCURPAREN
    (37) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (38) ClassHeader -> . ClassWord IDENTIFIER
    (39) Modifiers -> . Modifier
    (40) Modifiers -> . Modifiers Modifier
    (44) ClassWord -> . CLASS
    (41) Modifier -> . PUBLIC
    (42) Modifier -> . PRIVATE
    (43) Modifier -> . STATIC

    PACKAGE         shift and go to state 9
    IMPORT          shift and go to state 5
    CLASS           shift and go to state 6
    PUBLIC          shift and go to state 18
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3

    ClassWord                      shift and go to state 14
    Modifiers                      shift and go to state 2
    ProgramFile                    shift and go to state 1
    Modifier                       shift and go to state 12
    TypeDeclaration                shift and go to state 8
    ImportStatements               shift and go to state 15
    TypeDeclarations               shift and go to state 16
    ImportStatement                shift and go to state 11
    ClassHeader                    shift and go to state 17
    PackageStatement               shift and go to state 10
    CompilationUnit                shift and go to state 13
    TypeDeclarationOptSemi         shift and go to state 7

state 1

    (1) CompilationUnit -> ProgramFile .

    $end            reduce using rule 1 (CompilationUnit -> ProgramFile .)


state 2

    (37) ClassHeader -> Modifiers . ClassWord IDENTIFIER
    (40) Modifiers -> Modifiers . Modifier
    (44) ClassWord -> . CLASS
    (41) Modifier -> . PUBLIC
    (42) Modifier -> . PRIVATE
    (43) Modifier -> . STATIC

    CLASS           shift and go to state 6
    PUBLIC          shift and go to state 18
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3

    ClassWord                      shift and go to state 19
    Modifier                       shift and go to state 20

state 3

    (43) Modifier -> STATIC .

    CLASS           reduce using rule 43 (Modifier -> STATIC .)
    PUBLIC          reduce using rule 43 (Modifier -> STATIC .)
    PRIVATE         reduce using rule 43 (Modifier -> STATIC .)
    STATIC          reduce using rule 43 (Modifier -> STATIC .)
    IDENTIFIER      reduce using rule 43 (Modifier -> STATIC .)
    BOOLEAN         reduce using rule 43 (Modifier -> STATIC .)
    CHAR            reduce using rule 43 (Modifier -> STATIC .)
    BYTE            reduce using rule 43 (Modifier -> STATIC .)
    SHORT           reduce using rule 43 (Modifier -> STATIC .)
    INT             reduce using rule 43 (Modifier -> STATIC .)
    LONG            reduce using rule 43 (Modifier -> STATIC .)
    FLOAT           reduce using rule 43 (Modifier -> STATIC .)
    DOUBLE          reduce using rule 43 (Modifier -> STATIC .)
    VOID            reduce using rule 43 (Modifier -> STATIC .)


state 4

    (42) Modifier -> PRIVATE .

    CLASS           reduce using rule 42 (Modifier -> PRIVATE .)
    PUBLIC          reduce using rule 42 (Modifier -> PRIVATE .)
    PRIVATE         reduce using rule 42 (Modifier -> PRIVATE .)
    STATIC          reduce using rule 42 (Modifier -> PRIVATE .)
    IDENTIFIER      reduce using rule 42 (Modifier -> PRIVATE .)
    BOOLEAN         reduce using rule 42 (Modifier -> PRIVATE .)
    CHAR            reduce using rule 42 (Modifier -> PRIVATE .)
    BYTE            reduce using rule 42 (Modifier -> PRIVATE .)
    SHORT           reduce using rule 42 (Modifier -> PRIVATE .)
    INT             reduce using rule 42 (Modifier -> PRIVATE .)
    LONG            reduce using rule 42 (Modifier -> PRIVATE .)
    FLOAT           reduce using rule 42 (Modifier -> PRIVATE .)
    DOUBLE          reduce using rule 42 (Modifier -> PRIVATE .)
    VOID            reduce using rule 42 (Modifier -> PRIVATE .)


state 5

    (31) ImportStatement -> IMPORT . QualifiedName SemiColons
    (32) ImportStatement -> IMPORT . QualifiedName DOT MULT SemiColons
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER

    IDENTIFIER      shift and go to state 22

    QualifiedName                  shift and go to state 21

state 6

    (44) ClassWord -> CLASS .

    IDENTIFIER      reduce using rule 44 (ClassWord -> CLASS .)


state 7

    (25) TypeDeclarations -> TypeDeclarationOptSemi .

    CLASS           reduce using rule 25 (TypeDeclarations -> TypeDeclarationOptSemi .)
    PUBLIC          reduce using rule 25 (TypeDeclarations -> TypeDeclarationOptSemi .)
    PRIVATE         reduce using rule 25 (TypeDeclarations -> TypeDeclarationOptSemi .)
    STATIC          reduce using rule 25 (TypeDeclarations -> TypeDeclarationOptSemi .)
    $end            reduce using rule 25 (TypeDeclarations -> TypeDeclarationOptSemi .)


state 8

    (27) TypeDeclarationOptSemi -> TypeDeclaration .
    (28) TypeDeclarationOptSemi -> TypeDeclaration . SemiColons
    (18) SemiColons -> . SEMICOLON
    (19) SemiColons -> . SemiColons SEMICOLON

    CLASS           reduce using rule 27 (TypeDeclarationOptSemi -> TypeDeclaration .)
    PUBLIC          reduce using rule 27 (TypeDeclarationOptSemi -> TypeDeclaration .)
    PRIVATE         reduce using rule 27 (TypeDeclarationOptSemi -> TypeDeclaration .)
    STATIC          reduce using rule 27 (TypeDeclarationOptSemi -> TypeDeclaration .)
    $end            reduce using rule 27 (TypeDeclarationOptSemi -> TypeDeclaration .)
    SEMICOLON       shift and go to state 24

    SemiColons                     shift and go to state 23

state 9

    (24) PackageStatement -> PACKAGE . QualifiedName SemiColons
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER

    IDENTIFIER      shift and go to state 22

    QualifiedName                  shift and go to state 25

state 10

    (20) ProgramFile -> PackageStatement . ImportStatements TypeDeclarations
    (21) ProgramFile -> PackageStatement . TypeDeclarations
    (29) ImportStatements -> . ImportStatement
    (30) ImportStatements -> . ImportStatements ImportStatement
    (25) TypeDeclarations -> . TypeDeclarationOptSemi
    (26) TypeDeclarations -> . TypeDeclarations TypeDeclarationOptSemi
    (31) ImportStatement -> . IMPORT QualifiedName SemiColons
    (32) ImportStatement -> . IMPORT QualifiedName DOT MULT SemiColons
    (27) TypeDeclarationOptSemi -> . TypeDeclaration
    (28) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (35) TypeDeclaration -> . ClassHeader LCURPAREN FieldDeclarations RCURPAREN
    (36) TypeDeclaration -> . ClassHeader LCURPAREN RCURPAREN
    (37) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (38) ClassHeader -> . ClassWord IDENTIFIER
    (39) Modifiers -> . Modifier
    (40) Modifiers -> . Modifiers Modifier
    (44) ClassWord -> . CLASS
    (41) Modifier -> . PUBLIC
    (42) Modifier -> . PRIVATE
    (43) Modifier -> . STATIC

    IMPORT          shift and go to state 5
    CLASS           shift and go to state 6
    PUBLIC          shift and go to state 18
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3

    ClassWord                      shift and go to state 14
    Modifiers                      shift and go to state 2
    Modifier                       shift and go to state 12
    TypeDeclaration                shift and go to state 8
    ImportStatements               shift and go to state 26
    TypeDeclarations               shift and go to state 27
    ImportStatement                shift and go to state 11
    ClassHeader                    shift and go to state 17
    TypeDeclarationOptSemi         shift and go to state 7

state 11

    (29) ImportStatements -> ImportStatement .

    IMPORT          reduce using rule 29 (ImportStatements -> ImportStatement .)
    CLASS           reduce using rule 29 (ImportStatements -> ImportStatement .)
    PUBLIC          reduce using rule 29 (ImportStatements -> ImportStatement .)
    PRIVATE         reduce using rule 29 (ImportStatements -> ImportStatement .)
    STATIC          reduce using rule 29 (ImportStatements -> ImportStatement .)


state 12

    (39) Modifiers -> Modifier .

    CLASS           reduce using rule 39 (Modifiers -> Modifier .)
    PUBLIC          reduce using rule 39 (Modifiers -> Modifier .)
    PRIVATE         reduce using rule 39 (Modifiers -> Modifier .)
    STATIC          reduce using rule 39 (Modifiers -> Modifier .)
    IDENTIFIER      reduce using rule 39 (Modifiers -> Modifier .)
    BOOLEAN         reduce using rule 39 (Modifiers -> Modifier .)
    CHAR            reduce using rule 39 (Modifiers -> Modifier .)
    BYTE            reduce using rule 39 (Modifiers -> Modifier .)
    SHORT           reduce using rule 39 (Modifiers -> Modifier .)
    INT             reduce using rule 39 (Modifiers -> Modifier .)
    LONG            reduce using rule 39 (Modifiers -> Modifier .)
    FLOAT           reduce using rule 39 (Modifiers -> Modifier .)
    DOUBLE          reduce using rule 39 (Modifiers -> Modifier .)
    VOID            reduce using rule 39 (Modifiers -> Modifier .)


state 13

    (0) S' -> CompilationUnit .



state 14

    (38) ClassHeader -> ClassWord . IDENTIFIER

    IDENTIFIER      shift and go to state 28


state 15

    (22) ProgramFile -> ImportStatements . TypeDeclarations
    (30) ImportStatements -> ImportStatements . ImportStatement
    (25) TypeDeclarations -> . TypeDeclarationOptSemi
    (26) TypeDeclarations -> . TypeDeclarations TypeDeclarationOptSemi
    (31) ImportStatement -> . IMPORT QualifiedName SemiColons
    (32) ImportStatement -> . IMPORT QualifiedName DOT MULT SemiColons
    (27) TypeDeclarationOptSemi -> . TypeDeclaration
    (28) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (35) TypeDeclaration -> . ClassHeader LCURPAREN FieldDeclarations RCURPAREN
    (36) TypeDeclaration -> . ClassHeader LCURPAREN RCURPAREN
    (37) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (38) ClassHeader -> . ClassWord IDENTIFIER
    (39) Modifiers -> . Modifier
    (40) Modifiers -> . Modifiers Modifier
    (44) ClassWord -> . CLASS
    (41) Modifier -> . PUBLIC
    (42) Modifier -> . PRIVATE
    (43) Modifier -> . STATIC

    IMPORT          shift and go to state 5
    CLASS           shift and go to state 6
    PUBLIC          shift and go to state 18
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3

    ClassWord                      shift and go to state 14
    Modifiers                      shift and go to state 2
    TypeDeclaration                shift and go to state 8
    TypeDeclarations               shift and go to state 30
    ImportStatement                shift and go to state 29
    ClassHeader                    shift and go to state 17
    Modifier                       shift and go to state 12
    TypeDeclarationOptSemi         shift and go to state 7

state 16

    (23) ProgramFile -> TypeDeclarations .
    (26) TypeDeclarations -> TypeDeclarations . TypeDeclarationOptSemi
    (27) TypeDeclarationOptSemi -> . TypeDeclaration
    (28) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (35) TypeDeclaration -> . ClassHeader LCURPAREN FieldDeclarations RCURPAREN
    (36) TypeDeclaration -> . ClassHeader LCURPAREN RCURPAREN
    (37) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (38) ClassHeader -> . ClassWord IDENTIFIER
    (39) Modifiers -> . Modifier
    (40) Modifiers -> . Modifiers Modifier
    (44) ClassWord -> . CLASS
    (41) Modifier -> . PUBLIC
    (42) Modifier -> . PRIVATE
    (43) Modifier -> . STATIC

    $end            reduce using rule 23 (ProgramFile -> TypeDeclarations .)
    CLASS           shift and go to state 6
    PUBLIC          shift and go to state 18
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3

    ClassWord                      shift and go to state 14
    Modifiers                      shift and go to state 2
    TypeDeclaration                shift and go to state 8
    ClassHeader                    shift and go to state 17
    Modifier                       shift and go to state 12
    TypeDeclarationOptSemi         shift and go to state 31

state 17

    (35) TypeDeclaration -> ClassHeader . LCURPAREN FieldDeclarations RCURPAREN
    (36) TypeDeclaration -> ClassHeader . LCURPAREN RCURPAREN

    LCURPAREN       shift and go to state 32


state 18

    (41) Modifier -> PUBLIC .

    CLASS           reduce using rule 41 (Modifier -> PUBLIC .)
    PUBLIC          reduce using rule 41 (Modifier -> PUBLIC .)
    PRIVATE         reduce using rule 41 (Modifier -> PUBLIC .)
    STATIC          reduce using rule 41 (Modifier -> PUBLIC .)
    IDENTIFIER      reduce using rule 41 (Modifier -> PUBLIC .)
    BOOLEAN         reduce using rule 41 (Modifier -> PUBLIC .)
    CHAR            reduce using rule 41 (Modifier -> PUBLIC .)
    BYTE            reduce using rule 41 (Modifier -> PUBLIC .)
    SHORT           reduce using rule 41 (Modifier -> PUBLIC .)
    INT             reduce using rule 41 (Modifier -> PUBLIC .)
    LONG            reduce using rule 41 (Modifier -> PUBLIC .)
    FLOAT           reduce using rule 41 (Modifier -> PUBLIC .)
    DOUBLE          reduce using rule 41 (Modifier -> PUBLIC .)
    VOID            reduce using rule 41 (Modifier -> PUBLIC .)


state 19

    (37) ClassHeader -> Modifiers ClassWord . IDENTIFIER

    IDENTIFIER      shift and go to state 33


state 20

    (40) Modifiers -> Modifiers Modifier .

    CLASS           reduce using rule 40 (Modifiers -> Modifiers Modifier .)
    PUBLIC          reduce using rule 40 (Modifiers -> Modifiers Modifier .)
    PRIVATE         reduce using rule 40 (Modifiers -> Modifiers Modifier .)
    STATIC          reduce using rule 40 (Modifiers -> Modifiers Modifier .)
    IDENTIFIER      reduce using rule 40 (Modifiers -> Modifiers Modifier .)
    BOOLEAN         reduce using rule 40 (Modifiers -> Modifiers Modifier .)
    CHAR            reduce using rule 40 (Modifiers -> Modifiers Modifier .)
    BYTE            reduce using rule 40 (Modifiers -> Modifiers Modifier .)
    SHORT           reduce using rule 40 (Modifiers -> Modifiers Modifier .)
    INT             reduce using rule 40 (Modifiers -> Modifiers Modifier .)
    LONG            reduce using rule 40 (Modifiers -> Modifiers Modifier .)
    FLOAT           reduce using rule 40 (Modifiers -> Modifiers Modifier .)
    DOUBLE          reduce using rule 40 (Modifiers -> Modifiers Modifier .)
    VOID            reduce using rule 40 (Modifiers -> Modifiers Modifier .)


state 21

    (31) ImportStatement -> IMPORT QualifiedName . SemiColons
    (32) ImportStatement -> IMPORT QualifiedName . DOT MULT SemiColons
    (34) QualifiedName -> QualifiedName . DOT IDENTIFIER
    (18) SemiColons -> . SEMICOLON
    (19) SemiColons -> . SemiColons SEMICOLON

    DOT             shift and go to state 35
    SEMICOLON       shift and go to state 24

    SemiColons                     shift and go to state 34

state 22

    (33) QualifiedName -> IDENTIFIER .

    DOT             reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    LSQPAREN        reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    OP_INC          reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    OP_DEC          reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    MULT            reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    DIV             reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    MOD             reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    PLUS            reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    MINUS           reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    OP_SHL          reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    OP_SHR          reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    OP_SHRR         reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    LESS            reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    MORE            reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    OP_LE           reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    OP_GE           reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    OP_EQ           reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    OP_NE           reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    &               reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    ^               reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    |               reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    OP_LAND         reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    ?               reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    OP_LOR          reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    SEMICOLON       reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    RROUNPAREN      reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    COLON           reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    COMMA           reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    RSQPAREN        reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    LROUNPAREN      reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    EQUAL           reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    ASS_MUL         reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    ASS_ADD         reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    ASS_SUB         reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 33 (QualifiedName -> IDENTIFIER .)


state 23

    (28) TypeDeclarationOptSemi -> TypeDeclaration SemiColons .
    (19) SemiColons -> SemiColons . SEMICOLON

    CLASS           reduce using rule 28 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    PUBLIC          reduce using rule 28 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    PRIVATE         reduce using rule 28 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    STATIC          reduce using rule 28 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    $end            reduce using rule 28 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    SEMICOLON       shift and go to state 36


state 24

    (18) SemiColons -> SEMICOLON .

    SEMICOLON       reduce using rule 18 (SemiColons -> SEMICOLON .)
    IMPORT          reduce using rule 18 (SemiColons -> SEMICOLON .)
    CLASS           reduce using rule 18 (SemiColons -> SEMICOLON .)
    PUBLIC          reduce using rule 18 (SemiColons -> SEMICOLON .)
    PRIVATE         reduce using rule 18 (SemiColons -> SEMICOLON .)
    STATIC          reduce using rule 18 (SemiColons -> SEMICOLON .)
    $end            reduce using rule 18 (SemiColons -> SEMICOLON .)
    RCURPAREN       reduce using rule 18 (SemiColons -> SEMICOLON .)
    IDENTIFIER      reduce using rule 18 (SemiColons -> SEMICOLON .)
    LCURPAREN       reduce using rule 18 (SemiColons -> SEMICOLON .)
    BOOLEAN         reduce using rule 18 (SemiColons -> SEMICOLON .)
    CHAR            reduce using rule 18 (SemiColons -> SEMICOLON .)
    BYTE            reduce using rule 18 (SemiColons -> SEMICOLON .)
    SHORT           reduce using rule 18 (SemiColons -> SEMICOLON .)
    INT             reduce using rule 18 (SemiColons -> SEMICOLON .)
    LONG            reduce using rule 18 (SemiColons -> SEMICOLON .)
    FLOAT           reduce using rule 18 (SemiColons -> SEMICOLON .)
    DOUBLE          reduce using rule 18 (SemiColons -> SEMICOLON .)
    VOID            reduce using rule 18 (SemiColons -> SEMICOLON .)


state 25

    (24) PackageStatement -> PACKAGE QualifiedName . SemiColons
    (34) QualifiedName -> QualifiedName . DOT IDENTIFIER
    (18) SemiColons -> . SEMICOLON
    (19) SemiColons -> . SemiColons SEMICOLON

    DOT             shift and go to state 38
    SEMICOLON       shift and go to state 24

    SemiColons                     shift and go to state 37

state 26

    (20) ProgramFile -> PackageStatement ImportStatements . TypeDeclarations
    (30) ImportStatements -> ImportStatements . ImportStatement
    (25) TypeDeclarations -> . TypeDeclarationOptSemi
    (26) TypeDeclarations -> . TypeDeclarations TypeDeclarationOptSemi
    (31) ImportStatement -> . IMPORT QualifiedName SemiColons
    (32) ImportStatement -> . IMPORT QualifiedName DOT MULT SemiColons
    (27) TypeDeclarationOptSemi -> . TypeDeclaration
    (28) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (35) TypeDeclaration -> . ClassHeader LCURPAREN FieldDeclarations RCURPAREN
    (36) TypeDeclaration -> . ClassHeader LCURPAREN RCURPAREN
    (37) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (38) ClassHeader -> . ClassWord IDENTIFIER
    (39) Modifiers -> . Modifier
    (40) Modifiers -> . Modifiers Modifier
    (44) ClassWord -> . CLASS
    (41) Modifier -> . PUBLIC
    (42) Modifier -> . PRIVATE
    (43) Modifier -> . STATIC

    IMPORT          shift and go to state 5
    CLASS           shift and go to state 6
    PUBLIC          shift and go to state 18
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3

    ClassWord                      shift and go to state 14
    Modifiers                      shift and go to state 2
    Modifier                       shift and go to state 12
    TypeDeclaration                shift and go to state 8
    TypeDeclarations               shift and go to state 39
    ImportStatement                shift and go to state 29
    ClassHeader                    shift and go to state 17
    TypeDeclarationOptSemi         shift and go to state 7

state 27

    (21) ProgramFile -> PackageStatement TypeDeclarations .
    (26) TypeDeclarations -> TypeDeclarations . TypeDeclarationOptSemi
    (27) TypeDeclarationOptSemi -> . TypeDeclaration
    (28) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (35) TypeDeclaration -> . ClassHeader LCURPAREN FieldDeclarations RCURPAREN
    (36) TypeDeclaration -> . ClassHeader LCURPAREN RCURPAREN
    (37) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (38) ClassHeader -> . ClassWord IDENTIFIER
    (39) Modifiers -> . Modifier
    (40) Modifiers -> . Modifiers Modifier
    (44) ClassWord -> . CLASS
    (41) Modifier -> . PUBLIC
    (42) Modifier -> . PRIVATE
    (43) Modifier -> . STATIC

    $end            reduce using rule 21 (ProgramFile -> PackageStatement TypeDeclarations .)
    CLASS           shift and go to state 6
    PUBLIC          shift and go to state 18
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3

    ClassWord                      shift and go to state 14
    Modifiers                      shift and go to state 2
    Modifier                       shift and go to state 12
    TypeDeclaration                shift and go to state 8
    ClassHeader                    shift and go to state 17
    TypeDeclarationOptSemi         shift and go to state 31

state 28

    (38) ClassHeader -> ClassWord IDENTIFIER .

    LCURPAREN       reduce using rule 38 (ClassHeader -> ClassWord IDENTIFIER .)


state 29

    (30) ImportStatements -> ImportStatements ImportStatement .

    IMPORT          reduce using rule 30 (ImportStatements -> ImportStatements ImportStatement .)
    CLASS           reduce using rule 30 (ImportStatements -> ImportStatements ImportStatement .)
    PUBLIC          reduce using rule 30 (ImportStatements -> ImportStatements ImportStatement .)
    PRIVATE         reduce using rule 30 (ImportStatements -> ImportStatements ImportStatement .)
    STATIC          reduce using rule 30 (ImportStatements -> ImportStatements ImportStatement .)


state 30

    (22) ProgramFile -> ImportStatements TypeDeclarations .
    (26) TypeDeclarations -> TypeDeclarations . TypeDeclarationOptSemi
    (27) TypeDeclarationOptSemi -> . TypeDeclaration
    (28) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (35) TypeDeclaration -> . ClassHeader LCURPAREN FieldDeclarations RCURPAREN
    (36) TypeDeclaration -> . ClassHeader LCURPAREN RCURPAREN
    (37) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (38) ClassHeader -> . ClassWord IDENTIFIER
    (39) Modifiers -> . Modifier
    (40) Modifiers -> . Modifiers Modifier
    (44) ClassWord -> . CLASS
    (41) Modifier -> . PUBLIC
    (42) Modifier -> . PRIVATE
    (43) Modifier -> . STATIC

    $end            reduce using rule 22 (ProgramFile -> ImportStatements TypeDeclarations .)
    CLASS           shift and go to state 6
    PUBLIC          shift and go to state 18
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3

    ClassWord                      shift and go to state 14
    Modifiers                      shift and go to state 2
    TypeDeclaration                shift and go to state 8
    ClassHeader                    shift and go to state 17
    Modifier                       shift and go to state 12
    TypeDeclarationOptSemi         shift and go to state 31

state 31

    (26) TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .

    CLASS           reduce using rule 26 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)
    PUBLIC          reduce using rule 26 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)
    PRIVATE         reduce using rule 26 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)
    STATIC          reduce using rule 26 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)
    $end            reduce using rule 26 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)


state 32

    (35) TypeDeclaration -> ClassHeader LCURPAREN . FieldDeclarations RCURPAREN
    (36) TypeDeclaration -> ClassHeader LCURPAREN . RCURPAREN
    (45) FieldDeclarations -> . FieldDeclarationOptSemi
    (46) FieldDeclarations -> . FieldDeclarations FieldDeclarationOptSemi
    (47) FieldDeclarationOptSemi -> . FieldDeclaration
    (48) FieldDeclarationOptSemi -> . FieldDeclaration SemiColons
    (49) FieldDeclaration -> . FieldVariableDeclaration SEMICOLON
    (50) FieldDeclaration -> . MethodDeclaration
    (51) FieldDeclaration -> . ConstructorDeclaration
    (52) FieldDeclaration -> . StaticInitializer
    (53) FieldDeclaration -> . NonStaticInitializer
    (54) FieldDeclaration -> . TypeDeclaration
    (55) FieldVariableDeclaration -> . Modifiers TypeSpecifier VariableDeclarators
    (56) FieldVariableDeclaration -> . TypeSpecifier VariableDeclarators
    (62) MethodDeclaration -> . Modifiers TypeSpecifier MethodDeclarator MethodBody
    (63) MethodDeclaration -> . TypeSpecifier MethodDeclarator MethodBody
    (73) ConstructorDeclaration -> . Modifiers ConstructorDeclarator Block
    (74) ConstructorDeclaration -> . ConstructorDeclarator Block
    (77) StaticInitializer -> . STATIC Block
    (78) NonStaticInitializer -> . Block
    (35) TypeDeclaration -> . ClassHeader LCURPAREN FieldDeclarations RCURPAREN
    (36) TypeDeclaration -> . ClassHeader LCURPAREN RCURPAREN
    (39) Modifiers -> . Modifier
    (40) Modifiers -> . Modifiers Modifier
    (3) TypeSpecifier -> . TypeName
    (4) TypeSpecifier -> . TypeName Dims
    (75) ConstructorDeclarator -> . IDENTIFIER LROUNPAREN ParameterList RROUNPAREN
    (76) ConstructorDeclarator -> . IDENTIFIER LROUNPAREN RROUNPAREN
    (79) Block -> . LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN
    (80) Block -> . LCURPAREN RCURPAREN
    (37) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (38) ClassHeader -> . ClassWord IDENTIFIER
    (41) Modifier -> . PUBLIC
    (42) Modifier -> . PRIVATE
    (43) Modifier -> . STATIC
    (5) TypeName -> . PrimitiveType
    (6) TypeName -> . QualifiedName
    (44) ClassWord -> . CLASS
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER

    RCURPAREN       shift and go to state 58
    STATIC          shift and go to state 48
    IDENTIFIER      shift and go to state 54
    LCURPAREN       shift and go to state 57
    PUBLIC          shift and go to state 18
    PRIVATE         shift and go to state 4
    CLASS           shift and go to state 6
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43

    ConstructorDeclaration         shift and go to state 41
    FieldVariableDeclaration       shift and go to state 42
    TypeDeclaration                shift and go to state 44
    PrimitiveType                  shift and go to state 45
    StaticInitializer              shift and go to state 46
    NonStaticInitializer           shift and go to state 50
    TypeSpecifier                  shift and go to state 51
    QualifiedName                  shift and go to state 52
    TypeName                       shift and go to state 53
    MethodDeclaration              shift and go to state 55
    Modifiers                      shift and go to state 47
    FieldDeclarations              shift and go to state 59
    Modifier                       shift and go to state 12
    Block                          shift and go to state 60
    ClassWord                      shift and go to state 14
    FieldDeclarationOptSemi        shift and go to state 61
    ConstructorDeclarator          shift and go to state 62
    ClassHeader                    shift and go to state 17
    FieldDeclaration               shift and go to state 68

state 33

    (37) ClassHeader -> Modifiers ClassWord IDENTIFIER .

    LCURPAREN       reduce using rule 37 (ClassHeader -> Modifiers ClassWord IDENTIFIER .)


state 34

    (31) ImportStatement -> IMPORT QualifiedName SemiColons .
    (19) SemiColons -> SemiColons . SEMICOLON

    IMPORT          reduce using rule 31 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    CLASS           reduce using rule 31 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    PUBLIC          reduce using rule 31 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    PRIVATE         reduce using rule 31 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    STATIC          reduce using rule 31 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    SEMICOLON       shift and go to state 36


state 35

    (32) ImportStatement -> IMPORT QualifiedName DOT . MULT SemiColons
    (34) QualifiedName -> QualifiedName DOT . IDENTIFIER

    MULT            shift and go to state 70
    IDENTIFIER      shift and go to state 69


state 36

    (19) SemiColons -> SemiColons SEMICOLON .

    SEMICOLON       reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    IMPORT          reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    CLASS           reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    PUBLIC          reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    PRIVATE         reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    STATIC          reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    $end            reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    RCURPAREN       reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    IDENTIFIER      reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    LCURPAREN       reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    BOOLEAN         reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    CHAR            reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    BYTE            reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    SHORT           reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    INT             reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    LONG            reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    FLOAT           reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    DOUBLE          reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    VOID            reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)


state 37

    (24) PackageStatement -> PACKAGE QualifiedName SemiColons .
    (19) SemiColons -> SemiColons . SEMICOLON

    IMPORT          reduce using rule 24 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    CLASS           reduce using rule 24 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    PUBLIC          reduce using rule 24 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    PRIVATE         reduce using rule 24 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    STATIC          reduce using rule 24 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    SEMICOLON       shift and go to state 36


state 38

    (34) QualifiedName -> QualifiedName DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 69


state 39

    (20) ProgramFile -> PackageStatement ImportStatements TypeDeclarations .
    (26) TypeDeclarations -> TypeDeclarations . TypeDeclarationOptSemi
    (27) TypeDeclarationOptSemi -> . TypeDeclaration
    (28) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (35) TypeDeclaration -> . ClassHeader LCURPAREN FieldDeclarations RCURPAREN
    (36) TypeDeclaration -> . ClassHeader LCURPAREN RCURPAREN
    (37) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (38) ClassHeader -> . ClassWord IDENTIFIER
    (39) Modifiers -> . Modifier
    (40) Modifiers -> . Modifiers Modifier
    (44) ClassWord -> . CLASS
    (41) Modifier -> . PUBLIC
    (42) Modifier -> . PRIVATE
    (43) Modifier -> . STATIC

    $end            reduce using rule 20 (ProgramFile -> PackageStatement ImportStatements TypeDeclarations .)
    CLASS           shift and go to state 6
    PUBLIC          shift and go to state 18
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3

    ClassWord                      shift and go to state 14
    Modifiers                      shift and go to state 2
    Modifier                       shift and go to state 12
    TypeDeclaration                shift and go to state 8
    ClassHeader                    shift and go to state 17
    TypeDeclarationOptSemi         shift and go to state 31

state 40

    (12) PrimitiveType -> SHORT .

    LSQPAREN        reduce using rule 12 (PrimitiveType -> SHORT .)
    IDENTIFIER      reduce using rule 12 (PrimitiveType -> SHORT .)
    DOT             reduce using rule 12 (PrimitiveType -> SHORT .)
    LROUNPAREN      reduce using rule 12 (PrimitiveType -> SHORT .)


state 41

    (51) FieldDeclaration -> ConstructorDeclaration .

    SEMICOLON       reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    RCURPAREN       reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    STATIC          reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    IDENTIFIER      reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    LCURPAREN       reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    PUBLIC          reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    PRIVATE         reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    CLASS           reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    BOOLEAN         reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    CHAR            reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    BYTE            reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    SHORT           reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    INT             reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    LONG            reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    FLOAT           reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    DOUBLE          reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    VOID            reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)


state 42

    (49) FieldDeclaration -> FieldVariableDeclaration . SEMICOLON

    SEMICOLON       shift and go to state 71


state 43

    (17) PrimitiveType -> VOID .

    LSQPAREN        reduce using rule 17 (PrimitiveType -> VOID .)
    IDENTIFIER      reduce using rule 17 (PrimitiveType -> VOID .)
    DOT             reduce using rule 17 (PrimitiveType -> VOID .)
    LROUNPAREN      reduce using rule 17 (PrimitiveType -> VOID .)


state 44

    (54) FieldDeclaration -> TypeDeclaration .

    SEMICOLON       reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    RCURPAREN       reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    STATIC          reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    IDENTIFIER      reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    LCURPAREN       reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    PUBLIC          reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    PRIVATE         reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    CLASS           reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    BOOLEAN         reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    CHAR            reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    BYTE            reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    SHORT           reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    INT             reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    LONG            reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    FLOAT           reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    DOUBLE          reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    VOID            reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)


state 45

    (5) TypeName -> PrimitiveType .

    LSQPAREN        reduce using rule 5 (TypeName -> PrimitiveType .)
    IDENTIFIER      reduce using rule 5 (TypeName -> PrimitiveType .)
    LROUNPAREN      reduce using rule 5 (TypeName -> PrimitiveType .)


state 46

    (52) FieldDeclaration -> StaticInitializer .

    SEMICOLON       reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    RCURPAREN       reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    STATIC          reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    IDENTIFIER      reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    LCURPAREN       reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    PUBLIC          reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    PRIVATE         reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    CLASS           reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    BOOLEAN         reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    CHAR            reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    BYTE            reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    SHORT           reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    INT             reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    LONG            reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    FLOAT           reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    DOUBLE          reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    VOID            reduce using rule 52 (FieldDeclaration -> StaticInitializer .)


state 47

    (55) FieldVariableDeclaration -> Modifiers . TypeSpecifier VariableDeclarators
    (62) MethodDeclaration -> Modifiers . TypeSpecifier MethodDeclarator MethodBody
    (73) ConstructorDeclaration -> Modifiers . ConstructorDeclarator Block
    (40) Modifiers -> Modifiers . Modifier
    (37) ClassHeader -> Modifiers . ClassWord IDENTIFIER
    (3) TypeSpecifier -> . TypeName
    (4) TypeSpecifier -> . TypeName Dims
    (75) ConstructorDeclarator -> . IDENTIFIER LROUNPAREN ParameterList RROUNPAREN
    (76) ConstructorDeclarator -> . IDENTIFIER LROUNPAREN RROUNPAREN
    (41) Modifier -> . PUBLIC
    (42) Modifier -> . PRIVATE
    (43) Modifier -> . STATIC
    (44) ClassWord -> . CLASS
    (5) TypeName -> . PrimitiveType
    (6) TypeName -> . QualifiedName
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER

    IDENTIFIER      shift and go to state 54
    PUBLIC          shift and go to state 18
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3
    CLASS           shift and go to state 6
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43

    QualifiedName                  shift and go to state 52
    ConstructorDeclarator          shift and go to state 73
    PrimitiveType                  shift and go to state 45
    ClassWord                      shift and go to state 19
    TypeName                       shift and go to state 53
    Modifier                       shift and go to state 20
    TypeSpecifier                  shift and go to state 72

state 48

    (77) StaticInitializer -> STATIC . Block
    (43) Modifier -> STATIC .
    (79) Block -> . LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN
    (80) Block -> . LCURPAREN RCURPAREN

    IDENTIFIER      reduce using rule 43 (Modifier -> STATIC .)
    PUBLIC          reduce using rule 43 (Modifier -> STATIC .)
    PRIVATE         reduce using rule 43 (Modifier -> STATIC .)
    STATIC          reduce using rule 43 (Modifier -> STATIC .)
    CLASS           reduce using rule 43 (Modifier -> STATIC .)
    BOOLEAN         reduce using rule 43 (Modifier -> STATIC .)
    CHAR            reduce using rule 43 (Modifier -> STATIC .)
    BYTE            reduce using rule 43 (Modifier -> STATIC .)
    SHORT           reduce using rule 43 (Modifier -> STATIC .)
    INT             reduce using rule 43 (Modifier -> STATIC .)
    LONG            reduce using rule 43 (Modifier -> STATIC .)
    FLOAT           reduce using rule 43 (Modifier -> STATIC .)
    DOUBLE          reduce using rule 43 (Modifier -> STATIC .)
    VOID            reduce using rule 43 (Modifier -> STATIC .)
    LCURPAREN       shift and go to state 57

    Block                          shift and go to state 74

state 49

    (14) PrimitiveType -> LONG .

    LSQPAREN        reduce using rule 14 (PrimitiveType -> LONG .)
    IDENTIFIER      reduce using rule 14 (PrimitiveType -> LONG .)
    DOT             reduce using rule 14 (PrimitiveType -> LONG .)
    LROUNPAREN      reduce using rule 14 (PrimitiveType -> LONG .)


state 50

    (53) FieldDeclaration -> NonStaticInitializer .

    SEMICOLON       reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    RCURPAREN       reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    STATIC          reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    IDENTIFIER      reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    LCURPAREN       reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    PUBLIC          reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    PRIVATE         reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    CLASS           reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    BOOLEAN         reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    CHAR            reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    BYTE            reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    SHORT           reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    INT             reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    LONG            reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    FLOAT           reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    DOUBLE          reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    VOID            reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)


state 51

    (56) FieldVariableDeclaration -> TypeSpecifier . VariableDeclarators
    (63) MethodDeclaration -> TypeSpecifier . MethodDeclarator MethodBody
    (57) VariableDeclarators -> . VariableDeclarator
    (58) VariableDeclarators -> . VariableDeclarators COMMA VariableDeclarator
    (64) MethodDeclarator -> . DeclaratorName LROUNPAREN ParameterList RROUNPAREN
    (65) MethodDeclarator -> . DeclaratorName LROUNPAREN RROUNPAREN
    (59) VariableDeclarator -> . DeclaratorName
    (60) VariableDeclarator -> . DeclaratorName EQUAL VariableInitializer
    (69) DeclaratorName -> . IDENTIFIER
    (70) DeclaratorName -> . DeclaratorName OP_DIM

    IDENTIFIER      shift and go to state 78

    VariableDeclarators            shift and go to state 75
    DeclaratorName                 shift and go to state 76
    MethodDeclarator               shift and go to state 77
    VariableDeclarator             shift and go to state 79

state 52

    (6) TypeName -> QualifiedName .
    (34) QualifiedName -> QualifiedName . DOT IDENTIFIER

    LSQPAREN        reduce using rule 6 (TypeName -> QualifiedName .)
    IDENTIFIER      reduce using rule 6 (TypeName -> QualifiedName .)
    LROUNPAREN      reduce using rule 6 (TypeName -> QualifiedName .)
    DOT             shift and go to state 38


state 53

    (3) TypeSpecifier -> TypeName .
    (4) TypeSpecifier -> TypeName . Dims
    (167) Dims -> . OP_DIM
    (168) Dims -> . Dims OP_DIM
    (2) OP_DIM -> . LSQPAREN RSQPAREN

    IDENTIFIER      reduce using rule 3 (TypeSpecifier -> TypeName .)
    LSQPAREN        shift and go to state 80

    OP_DIM                         shift and go to state 81
    Dims                           shift and go to state 82

state 54

    (75) ConstructorDeclarator -> IDENTIFIER . LROUNPAREN ParameterList RROUNPAREN
    (76) ConstructorDeclarator -> IDENTIFIER . LROUNPAREN RROUNPAREN
    (33) QualifiedName -> IDENTIFIER .

    LROUNPAREN      shift and go to state 83
    DOT             reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    LSQPAREN        reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 33 (QualifiedName -> IDENTIFIER .)


state 55

    (50) FieldDeclaration -> MethodDeclaration .

    SEMICOLON       reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    RCURPAREN       reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    STATIC          reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    IDENTIFIER      reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    LCURPAREN       reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    PUBLIC          reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    PRIVATE         reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    CLASS           reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    BOOLEAN         reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    CHAR            reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    BYTE            reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    SHORT           reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    INT             reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    LONG            reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    FLOAT           reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    DOUBLE          reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    VOID            reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)


state 56

    (10) PrimitiveType -> CHAR .

    LSQPAREN        reduce using rule 10 (PrimitiveType -> CHAR .)
    IDENTIFIER      reduce using rule 10 (PrimitiveType -> CHAR .)
    DOT             reduce using rule 10 (PrimitiveType -> CHAR .)
    LROUNPAREN      reduce using rule 10 (PrimitiveType -> CHAR .)


state 57

    (79) Block -> LCURPAREN . LocalVariableDeclarationsAndStatements RCURPAREN
    (80) Block -> LCURPAREN . RCURPAREN
    (81) LocalVariableDeclarationsAndStatements -> . LocalVariableDeclarationOrStatement
    (82) LocalVariableDeclarationsAndStatements -> . LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement
    (83) LocalVariableDeclarationOrStatement -> . LocalVariableDeclarationStatement
    (84) LocalVariableDeclarationOrStatement -> . Statement
    (85) LocalVariableDeclarationStatement -> . TypeSpecifier VariableDeclarators SEMICOLON
    (86) Statement -> . EmptyStatement Mark_quad
    (87) Statement -> . LabelStatement Mark_quad
    (88) Statement -> . ExpressionStatement SEMICOLON Mark_quad
    (89) Statement -> . JumpStatement Mark_quad
    (90) Statement -> . Block Mark_quad
    (91) Statement -> . IterationStatement Mark_quad
    (92) Statement -> . SelectionStatement Mark_quad
    (3) TypeSpecifier -> . TypeName
    (4) TypeSpecifier -> . TypeName Dims
    (94) EmptyStatement -> . SEMICOLON
    (95) LabelStatement -> . IDENTIFIER COLON
    (96) LabelStatement -> . CASE ConstantExpression COLON
    (97) LabelStatement -> . DEFAULT COLON
    (98) ExpressionStatement -> . Expression
    (118) JumpStatement -> . BREAK SEMICOLON
    (119) JumpStatement -> . CONTINUE SEMICOLON
    (120) JumpStatement -> . RETURN Expression SEMICOLON
    (121) JumpStatement -> . RETURN SEMICOLON
    (79) Block -> . LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN
    (80) Block -> . LCURPAREN RCURPAREN
    (103) IterationStatement -> . WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement
    (105) IterationStatement -> . Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON
    (108) IterationStatement -> . FOR LROUNPAREN ForInit ForExpr Mark_quad ForIncr RROUNPAREN Mark_quad Statement
    (109) IterationStatement -> . FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement
    (99) SelectionStatement -> . IF LROUNPAREN Expression RROUNPAREN Mark_if Statement
    (100) SelectionStatement -> . IF LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement
    (5) TypeName -> . PrimitiveType
    (6) TypeName -> . QualifiedName
    (224) Expression -> . AssignmentExpression
    (106) Do -> . DO
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (218) AssignmentExpression -> . ConditionalExpression
    (219) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (216) ConditionalExpression -> . ConditionalOrExpression
    (217) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (173) UnaryExpression -> . OP_INC UnaryExpression
    (174) UnaryExpression -> . OP_DEC UnaryExpression
    (175) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (176) UnaryExpression -> . LogicalUnaryExpression
    (214) ConditionalOrExpression -> . ConditionalAndExpression
    (215) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (181) ArithmeticUnaryOperator -> . PLUS
    (182) ArithmeticUnaryOperator -> . MINUS
    (177) LogicalUnaryExpression -> . PostfixExpression
    (178) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (212) ConditionalAndExpression -> . InclusiveOrExpression
    (213) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (169) PostfixExpression -> . PrimaryExpression
    (170) PostfixExpression -> . RealPostfixExpression
    (179) LogicalUnaryOperator -> . ~
    (180) LogicalUnaryOperator -> . NOT
    (210) InclusiveOrExpression -> . ExclusiveOrExpression
    (211) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (122) PrimaryExpression -> . QualifiedName
    (123) PrimaryExpression -> . NotJustName
    (171) RealPostfixExpression -> . PostfixExpression OP_INC
    (172) RealPostfixExpression -> . PostfixExpression OP_DEC
    (208) ExclusiveOrExpression -> . AndExpression
    (209) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (124) NotJustName -> . SpecialName
    (125) NotJustName -> . NewAllocationExpression
    (126) NotJustName -> . ComplexPrimary
    (206) AndExpression -> . EqualityExpression
    (207) AndExpression -> . AndExpression & EqualityExpression
    (147) SpecialName -> . THIS
    (148) SpecialName -> . SUPER
    (149) SpecialName -> . NULL
    (152) NewAllocationExpression -> . PlainNewAllocationExpression
    (153) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (127) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (128) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (203) EqualityExpression -> . RelationalExpression
    (204) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (205) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (154) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (155) PlainNewAllocationExpression -> . ClassAllocationExpression
    (156) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (157) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (158) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (129) ComplexPrimaryNoParenthesis -> . INT_CONST
    (130) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (131) ComplexPrimaryNoParenthesis -> . STRING
    (132) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (133) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (134) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (135) ComplexPrimaryNoParenthesis -> . FieldAccess
    (136) ComplexPrimaryNoParenthesis -> . MethodCall
    (198) RelationalExpression -> . ShiftExpression
    (199) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (200) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (201) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (202) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (161) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (162) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (163) ArrayAllocationExpression -> . NEW TypeName Dims
    (159) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (160) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (137) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (138) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (139) FieldAccess -> . NotJustName DOT IDENTIFIER
    (140) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (141) FieldAccess -> . QualifiedName DOT THIS
    (142) FieldAccess -> . QualifiedName DOT CLASS
    (143) FieldAccess -> . PrimitiveType DOT CLASS
    (144) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (145) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (194) ShiftExpression -> . AdditiveExpression
    (195) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (196) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (197) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (146) MethodAccess -> . QualifiedName
    (191) AdditiveExpression -> . MultiplicativeExpression
    (192) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (193) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (187) MultiplicativeExpression -> . CastExpression
    (188) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (189) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (190) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (183) CastExpression -> . UnaryExpression

    RCURPAREN       shift and go to state 107
    SEMICOLON       shift and go to state 132
    IDENTIFIER      shift and go to state 134
    CASE            shift and go to state 130
    DEFAULT         shift and go to state 123
    BREAK           shift and go to state 99
    CONTINUE        shift and go to state 116
    RETURN          shift and go to state 95
    LCURPAREN       shift and go to state 57
    WHILE           shift and go to state 125
    FOR             shift and go to state 105
    IF              shift and go to state 155
    DO              shift and go to state 142
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43
    OP_INC          shift and go to state 106
    OP_DEC          shift and go to state 126
    PLUS            shift and go to state 90
    MINUS           shift and go to state 89
    ~               shift and go to state 141
    NOT             shift and go to state 119
    THIS            shift and go to state 91
    SUPER           shift and go to state 158
    NULL            shift and go to state 145
    LROUNPAREN      shift and go to state 118
    INT_CONST       shift and go to state 131
    FLOAT_CONST     shift and go to state 86
    STRING          shift and go to state 151
    CHAR_CONST      shift and go to state 144
    BOOLEAN_CONST   shift and go to state 157
    NEW             shift and go to state 127

    PostfixExpression              shift and go to state 112
    LabelStatement                 shift and go to state 94
    ArithmeticUnaryOperator        shift and go to state 97
    AssignmentExpression           shift and go to state 104
    ExpressionStatement            shift and go to state 84
    JumpStatement                  shift and go to state 124
    RealPostfixExpression          shift and go to state 96
    Statement                      shift and go to state 87
    AndExpression                  shift and go to state 88
    MultiplicativeExpression       shift and go to state 101
    TypeSpecifier                  shift and go to state 128
    CastExpression                 shift and go to state 143
    EqualityExpression             shift and go to state 98
    Do                             shift and go to state 146
    QualifiedName                  shift and go to state 147
    MethodAccess                   shift and go to state 111
    ComplexPrimaryNoParenthesis    shift and go to state 100
    ArrayAccess                    shift and go to state 108
    ClassAllocationExpression      shift and go to state 122
    MethodCall                     shift and go to state 102
    TypeName                       shift and go to state 53
    ConditionalOrExpression        shift and go to state 133
    LocalVariableDeclarationStatement shift and go to state 148
    ShiftExpression                shift and go to state 149
    SelectionStatement             shift and go to state 103
    LocalVariableDeclarationsAndStatements shift and go to state 150
    NewAllocationExpression        shift and go to state 135
    NotJustName                    shift and go to state 152
    LogicalUnaryOperator           shift and go to state 153
    ComplexPrimary                 shift and go to state 121
    PrimitiveType                  shift and go to state 85
    LogicalUnaryExpression         shift and go to state 154
    UnaryExpression                shift and go to state 139
    Expression                     shift and go to state 136
    Block                          shift and go to state 109
    AdditiveExpression             shift and go to state 137
    ArrayAllocationExpression      shift and go to state 110
    ConditionalExpression          shift and go to state 138
    InclusiveOrExpression          shift and go to state 140
    PrimaryExpression              shift and go to state 129
    ExclusiveOrExpression          shift and go to state 113
    ConditionalAndExpression       shift and go to state 92
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    LocalVariableDeclarationOrStatement shift and go to state 117
    FieldAccess                    shift and go to state 156
    EmptyStatement                 shift and go to state 93
    SpecialName                    shift and go to state 120
    IterationStatement             shift and go to state 159

state 58

    (36) TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .

    SEMICOLON       reduce using rule 36 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    CLASS           reduce using rule 36 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    PUBLIC          reduce using rule 36 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    PRIVATE         reduce using rule 36 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    STATIC          reduce using rule 36 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    $end            reduce using rule 36 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    RCURPAREN       reduce using rule 36 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    IDENTIFIER      reduce using rule 36 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    LCURPAREN       reduce using rule 36 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    BOOLEAN         reduce using rule 36 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    CHAR            reduce using rule 36 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    BYTE            reduce using rule 36 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    SHORT           reduce using rule 36 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    INT             reduce using rule 36 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    LONG            reduce using rule 36 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    FLOAT           reduce using rule 36 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    DOUBLE          reduce using rule 36 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    VOID            reduce using rule 36 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)


state 59

    (35) TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations . RCURPAREN
    (46) FieldDeclarations -> FieldDeclarations . FieldDeclarationOptSemi
    (47) FieldDeclarationOptSemi -> . FieldDeclaration
    (48) FieldDeclarationOptSemi -> . FieldDeclaration SemiColons
    (49) FieldDeclaration -> . FieldVariableDeclaration SEMICOLON
    (50) FieldDeclaration -> . MethodDeclaration
    (51) FieldDeclaration -> . ConstructorDeclaration
    (52) FieldDeclaration -> . StaticInitializer
    (53) FieldDeclaration -> . NonStaticInitializer
    (54) FieldDeclaration -> . TypeDeclaration
    (55) FieldVariableDeclaration -> . Modifiers TypeSpecifier VariableDeclarators
    (56) FieldVariableDeclaration -> . TypeSpecifier VariableDeclarators
    (62) MethodDeclaration -> . Modifiers TypeSpecifier MethodDeclarator MethodBody
    (63) MethodDeclaration -> . TypeSpecifier MethodDeclarator MethodBody
    (73) ConstructorDeclaration -> . Modifiers ConstructorDeclarator Block
    (74) ConstructorDeclaration -> . ConstructorDeclarator Block
    (77) StaticInitializer -> . STATIC Block
    (78) NonStaticInitializer -> . Block
    (35) TypeDeclaration -> . ClassHeader LCURPAREN FieldDeclarations RCURPAREN
    (36) TypeDeclaration -> . ClassHeader LCURPAREN RCURPAREN
    (39) Modifiers -> . Modifier
    (40) Modifiers -> . Modifiers Modifier
    (3) TypeSpecifier -> . TypeName
    (4) TypeSpecifier -> . TypeName Dims
    (75) ConstructorDeclarator -> . IDENTIFIER LROUNPAREN ParameterList RROUNPAREN
    (76) ConstructorDeclarator -> . IDENTIFIER LROUNPAREN RROUNPAREN
    (79) Block -> . LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN
    (80) Block -> . LCURPAREN RCURPAREN
    (37) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (38) ClassHeader -> . ClassWord IDENTIFIER
    (41) Modifier -> . PUBLIC
    (42) Modifier -> . PRIVATE
    (43) Modifier -> . STATIC
    (5) TypeName -> . PrimitiveType
    (6) TypeName -> . QualifiedName
    (44) ClassWord -> . CLASS
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER

    RCURPAREN       shift and go to state 160
    STATIC          shift and go to state 48
    IDENTIFIER      shift and go to state 54
    LCURPAREN       shift and go to state 57
    PUBLIC          shift and go to state 18
    PRIVATE         shift and go to state 4
    CLASS           shift and go to state 6
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43

    ConstructorDeclaration         shift and go to state 41
    FieldVariableDeclaration       shift and go to state 42
    TypeDeclaration                shift and go to state 44
    PrimitiveType                  shift and go to state 45
    StaticInitializer              shift and go to state 46
    NonStaticInitializer           shift and go to state 50
    TypeSpecifier                  shift and go to state 51
    QualifiedName                  shift and go to state 52
    TypeName                       shift and go to state 53
    MethodDeclaration              shift and go to state 55
    Modifiers                      shift and go to state 47
    Modifier                       shift and go to state 12
    Block                          shift and go to state 60
    ClassWord                      shift and go to state 14
    FieldDeclarationOptSemi        shift and go to state 161
    ConstructorDeclarator          shift and go to state 62
    ClassHeader                    shift and go to state 17
    FieldDeclaration               shift and go to state 68

state 60

    (78) NonStaticInitializer -> Block .

    SEMICOLON       reduce using rule 78 (NonStaticInitializer -> Block .)
    RCURPAREN       reduce using rule 78 (NonStaticInitializer -> Block .)
    STATIC          reduce using rule 78 (NonStaticInitializer -> Block .)
    IDENTIFIER      reduce using rule 78 (NonStaticInitializer -> Block .)
    LCURPAREN       reduce using rule 78 (NonStaticInitializer -> Block .)
    PUBLIC          reduce using rule 78 (NonStaticInitializer -> Block .)
    PRIVATE         reduce using rule 78 (NonStaticInitializer -> Block .)
    CLASS           reduce using rule 78 (NonStaticInitializer -> Block .)
    BOOLEAN         reduce using rule 78 (NonStaticInitializer -> Block .)
    CHAR            reduce using rule 78 (NonStaticInitializer -> Block .)
    BYTE            reduce using rule 78 (NonStaticInitializer -> Block .)
    SHORT           reduce using rule 78 (NonStaticInitializer -> Block .)
    INT             reduce using rule 78 (NonStaticInitializer -> Block .)
    LONG            reduce using rule 78 (NonStaticInitializer -> Block .)
    FLOAT           reduce using rule 78 (NonStaticInitializer -> Block .)
    DOUBLE          reduce using rule 78 (NonStaticInitializer -> Block .)
    VOID            reduce using rule 78 (NonStaticInitializer -> Block .)


state 61

    (45) FieldDeclarations -> FieldDeclarationOptSemi .

    RCURPAREN       reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    STATIC          reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    IDENTIFIER      reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    LCURPAREN       reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    PUBLIC          reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    PRIVATE         reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    CLASS           reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    BOOLEAN         reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    CHAR            reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    BYTE            reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    SHORT           reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    INT             reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    LONG            reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    FLOAT           reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    DOUBLE          reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    VOID            reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)


state 62

    (74) ConstructorDeclaration -> ConstructorDeclarator . Block
    (79) Block -> . LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN
    (80) Block -> . LCURPAREN RCURPAREN

    LCURPAREN       shift and go to state 57

    Block                          shift and go to state 162

state 63

    (13) PrimitiveType -> INT .

    LSQPAREN        reduce using rule 13 (PrimitiveType -> INT .)
    IDENTIFIER      reduce using rule 13 (PrimitiveType -> INT .)
    DOT             reduce using rule 13 (PrimitiveType -> INT .)
    LROUNPAREN      reduce using rule 13 (PrimitiveType -> INT .)


state 64

    (16) PrimitiveType -> DOUBLE .

    LSQPAREN        reduce using rule 16 (PrimitiveType -> DOUBLE .)
    IDENTIFIER      reduce using rule 16 (PrimitiveType -> DOUBLE .)
    DOT             reduce using rule 16 (PrimitiveType -> DOUBLE .)
    LROUNPAREN      reduce using rule 16 (PrimitiveType -> DOUBLE .)


state 65

    (15) PrimitiveType -> FLOAT .

    LSQPAREN        reduce using rule 15 (PrimitiveType -> FLOAT .)
    IDENTIFIER      reduce using rule 15 (PrimitiveType -> FLOAT .)
    DOT             reduce using rule 15 (PrimitiveType -> FLOAT .)
    LROUNPAREN      reduce using rule 15 (PrimitiveType -> FLOAT .)


state 66

    (9) PrimitiveType -> BOOLEAN .

    LSQPAREN        reduce using rule 9 (PrimitiveType -> BOOLEAN .)
    IDENTIFIER      reduce using rule 9 (PrimitiveType -> BOOLEAN .)
    DOT             reduce using rule 9 (PrimitiveType -> BOOLEAN .)
    LROUNPAREN      reduce using rule 9 (PrimitiveType -> BOOLEAN .)


state 67

    (11) PrimitiveType -> BYTE .

    LSQPAREN        reduce using rule 11 (PrimitiveType -> BYTE .)
    IDENTIFIER      reduce using rule 11 (PrimitiveType -> BYTE .)
    DOT             reduce using rule 11 (PrimitiveType -> BYTE .)
    LROUNPAREN      reduce using rule 11 (PrimitiveType -> BYTE .)


state 68

    (47) FieldDeclarationOptSemi -> FieldDeclaration .
    (48) FieldDeclarationOptSemi -> FieldDeclaration . SemiColons
    (18) SemiColons -> . SEMICOLON
    (19) SemiColons -> . SemiColons SEMICOLON

    RCURPAREN       reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    STATIC          reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    IDENTIFIER      reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    LCURPAREN       reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    PUBLIC          reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    PRIVATE         reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    CLASS           reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    BOOLEAN         reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    CHAR            reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    BYTE            reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    SHORT           reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    INT             reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    LONG            reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    FLOAT           reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    DOUBLE          reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    VOID            reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    SEMICOLON       shift and go to state 24

    SemiColons                     shift and go to state 163

state 69

    (34) QualifiedName -> QualifiedName DOT IDENTIFIER .

    DOT             reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    LSQPAREN        reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    OP_INC          reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    OP_DEC          reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    MULT            reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    DIV             reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    MOD             reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    PLUS            reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    MINUS           reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    OP_SHL          reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    OP_SHR          reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    OP_SHRR         reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    LESS            reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    MORE            reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    OP_LE           reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    OP_GE           reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    OP_EQ           reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    OP_NE           reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    &               reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    ^               reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    |               reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    OP_LAND         reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    ?               reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    OP_LOR          reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    SEMICOLON       reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    RROUNPAREN      reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    COLON           reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    COMMA           reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    RSQPAREN        reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    LROUNPAREN      reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    IDENTIFIER      reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    EQUAL           reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    ASS_MUL         reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    ASS_ADD         reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    ASS_SUB         reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)


state 70

    (32) ImportStatement -> IMPORT QualifiedName DOT MULT . SemiColons
    (18) SemiColons -> . SEMICOLON
    (19) SemiColons -> . SemiColons SEMICOLON

    SEMICOLON       shift and go to state 24

    SemiColons                     shift and go to state 164

state 71

    (49) FieldDeclaration -> FieldVariableDeclaration SEMICOLON .

    SEMICOLON       reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)
    RCURPAREN       reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)
    STATIC          reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)
    IDENTIFIER      reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)
    LCURPAREN       reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)
    PUBLIC          reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)
    PRIVATE         reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)
    CLASS           reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)
    BOOLEAN         reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)
    CHAR            reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)
    BYTE            reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)
    SHORT           reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)
    INT             reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)
    LONG            reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)
    FLOAT           reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)
    DOUBLE          reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)
    VOID            reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)


state 72

    (55) FieldVariableDeclaration -> Modifiers TypeSpecifier . VariableDeclarators
    (62) MethodDeclaration -> Modifiers TypeSpecifier . MethodDeclarator MethodBody
    (57) VariableDeclarators -> . VariableDeclarator
    (58) VariableDeclarators -> . VariableDeclarators COMMA VariableDeclarator
    (64) MethodDeclarator -> . DeclaratorName LROUNPAREN ParameterList RROUNPAREN
    (65) MethodDeclarator -> . DeclaratorName LROUNPAREN RROUNPAREN
    (59) VariableDeclarator -> . DeclaratorName
    (60) VariableDeclarator -> . DeclaratorName EQUAL VariableInitializer
    (69) DeclaratorName -> . IDENTIFIER
    (70) DeclaratorName -> . DeclaratorName OP_DIM

    IDENTIFIER      shift and go to state 78

    VariableDeclarators            shift and go to state 165
    DeclaratorName                 shift and go to state 76
    MethodDeclarator               shift and go to state 166
    VariableDeclarator             shift and go to state 79

state 73

    (73) ConstructorDeclaration -> Modifiers ConstructorDeclarator . Block
    (79) Block -> . LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN
    (80) Block -> . LCURPAREN RCURPAREN

    LCURPAREN       shift and go to state 57

    Block                          shift and go to state 167

state 74

    (77) StaticInitializer -> STATIC Block .

    SEMICOLON       reduce using rule 77 (StaticInitializer -> STATIC Block .)
    RCURPAREN       reduce using rule 77 (StaticInitializer -> STATIC Block .)
    STATIC          reduce using rule 77 (StaticInitializer -> STATIC Block .)
    IDENTIFIER      reduce using rule 77 (StaticInitializer -> STATIC Block .)
    LCURPAREN       reduce using rule 77 (StaticInitializer -> STATIC Block .)
    PUBLIC          reduce using rule 77 (StaticInitializer -> STATIC Block .)
    PRIVATE         reduce using rule 77 (StaticInitializer -> STATIC Block .)
    CLASS           reduce using rule 77 (StaticInitializer -> STATIC Block .)
    BOOLEAN         reduce using rule 77 (StaticInitializer -> STATIC Block .)
    CHAR            reduce using rule 77 (StaticInitializer -> STATIC Block .)
    BYTE            reduce using rule 77 (StaticInitializer -> STATIC Block .)
    SHORT           reduce using rule 77 (StaticInitializer -> STATIC Block .)
    INT             reduce using rule 77 (StaticInitializer -> STATIC Block .)
    LONG            reduce using rule 77 (StaticInitializer -> STATIC Block .)
    FLOAT           reduce using rule 77 (StaticInitializer -> STATIC Block .)
    DOUBLE          reduce using rule 77 (StaticInitializer -> STATIC Block .)
    VOID            reduce using rule 77 (StaticInitializer -> STATIC Block .)


state 75

    (56) FieldVariableDeclaration -> TypeSpecifier VariableDeclarators .
    (58) VariableDeclarators -> VariableDeclarators . COMMA VariableDeclarator

    SEMICOLON       reduce using rule 56 (FieldVariableDeclaration -> TypeSpecifier VariableDeclarators .)
    COMMA           shift and go to state 168


state 76

    (64) MethodDeclarator -> DeclaratorName . LROUNPAREN ParameterList RROUNPAREN
    (65) MethodDeclarator -> DeclaratorName . LROUNPAREN RROUNPAREN
    (59) VariableDeclarator -> DeclaratorName .
    (60) VariableDeclarator -> DeclaratorName . EQUAL VariableInitializer
    (70) DeclaratorName -> DeclaratorName . OP_DIM
    (2) OP_DIM -> . LSQPAREN RSQPAREN

    LROUNPAREN      shift and go to state 171
    COMMA           reduce using rule 59 (VariableDeclarator -> DeclaratorName .)
    SEMICOLON       reduce using rule 59 (VariableDeclarator -> DeclaratorName .)
    EQUAL           shift and go to state 169
    LSQPAREN        shift and go to state 80

    OP_DIM                         shift and go to state 170

state 77

    (63) MethodDeclaration -> TypeSpecifier MethodDeclarator . MethodBody
    (71) MethodBody -> . Block
    (72) MethodBody -> . SEMICOLON
    (79) Block -> . LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN
    (80) Block -> . LCURPAREN RCURPAREN

    SEMICOLON       shift and go to state 173
    LCURPAREN       shift and go to state 57

    Block                          shift and go to state 174
    MethodBody                     shift and go to state 172

state 78

    (69) DeclaratorName -> IDENTIFIER .

    LROUNPAREN      reduce using rule 69 (DeclaratorName -> IDENTIFIER .)
    EQUAL           reduce using rule 69 (DeclaratorName -> IDENTIFIER .)
    LSQPAREN        reduce using rule 69 (DeclaratorName -> IDENTIFIER .)
    COMMA           reduce using rule 69 (DeclaratorName -> IDENTIFIER .)
    SEMICOLON       reduce using rule 69 (DeclaratorName -> IDENTIFIER .)
    RROUNPAREN      reduce using rule 69 (DeclaratorName -> IDENTIFIER .)


state 79

    (57) VariableDeclarators -> VariableDeclarator .

    SEMICOLON       reduce using rule 57 (VariableDeclarators -> VariableDeclarator .)
    COMMA           reduce using rule 57 (VariableDeclarators -> VariableDeclarator .)


state 80

    (2) OP_DIM -> LSQPAREN . RSQPAREN

    RSQPAREN        shift and go to state 175


state 81

    (167) Dims -> OP_DIM .

    LSQPAREN        reduce using rule 167 (Dims -> OP_DIM .)
    LCURPAREN       reduce using rule 167 (Dims -> OP_DIM .)
    DOT             reduce using rule 167 (Dims -> OP_DIM .)
    OP_INC          reduce using rule 167 (Dims -> OP_DIM .)
    OP_DEC          reduce using rule 167 (Dims -> OP_DIM .)
    EQUAL           reduce using rule 167 (Dims -> OP_DIM .)
    ASS_MUL         reduce using rule 167 (Dims -> OP_DIM .)
    ASS_ADD         reduce using rule 167 (Dims -> OP_DIM .)
    ASS_SUB         reduce using rule 167 (Dims -> OP_DIM .)
    MULT            reduce using rule 167 (Dims -> OP_DIM .)
    DIV             reduce using rule 167 (Dims -> OP_DIM .)
    MOD             reduce using rule 167 (Dims -> OP_DIM .)
    PLUS            reduce using rule 167 (Dims -> OP_DIM .)
    MINUS           reduce using rule 167 (Dims -> OP_DIM .)
    OP_SHL          reduce using rule 167 (Dims -> OP_DIM .)
    OP_SHR          reduce using rule 167 (Dims -> OP_DIM .)
    OP_SHRR         reduce using rule 167 (Dims -> OP_DIM .)
    LESS            reduce using rule 167 (Dims -> OP_DIM .)
    MORE            reduce using rule 167 (Dims -> OP_DIM .)
    OP_LE           reduce using rule 167 (Dims -> OP_DIM .)
    OP_GE           reduce using rule 167 (Dims -> OP_DIM .)
    OP_EQ           reduce using rule 167 (Dims -> OP_DIM .)
    OP_NE           reduce using rule 167 (Dims -> OP_DIM .)
    &               reduce using rule 167 (Dims -> OP_DIM .)
    ^               reduce using rule 167 (Dims -> OP_DIM .)
    |               reduce using rule 167 (Dims -> OP_DIM .)
    OP_LAND         reduce using rule 167 (Dims -> OP_DIM .)
    ?               reduce using rule 167 (Dims -> OP_DIM .)
    OP_LOR          reduce using rule 167 (Dims -> OP_DIM .)
    SEMICOLON       reduce using rule 167 (Dims -> OP_DIM .)
    RROUNPAREN      reduce using rule 167 (Dims -> OP_DIM .)
    COLON           reduce using rule 167 (Dims -> OP_DIM .)
    COMMA           reduce using rule 167 (Dims -> OP_DIM .)
    RSQPAREN        reduce using rule 167 (Dims -> OP_DIM .)
    IDENTIFIER      reduce using rule 167 (Dims -> OP_DIM .)


state 82

    (4) TypeSpecifier -> TypeName Dims .
    (168) Dims -> Dims . OP_DIM
    (2) OP_DIM -> . LSQPAREN RSQPAREN

    IDENTIFIER      reduce using rule 4 (TypeSpecifier -> TypeName Dims .)
    LSQPAREN        shift and go to state 80

    OP_DIM                         shift and go to state 176

state 83

    (75) ConstructorDeclarator -> IDENTIFIER LROUNPAREN . ParameterList RROUNPAREN
    (76) ConstructorDeclarator -> IDENTIFIER LROUNPAREN . RROUNPAREN
    (66) ParameterList -> . Parameter
    (67) ParameterList -> . ParameterList COMMA Parameter
    (68) Parameter -> . TypeSpecifier DeclaratorName
    (3) TypeSpecifier -> . TypeName
    (4) TypeSpecifier -> . TypeName Dims
    (5) TypeName -> . PrimitiveType
    (6) TypeName -> . QualifiedName
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER

    RROUNPAREN      shift and go to state 177
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43
    IDENTIFIER      shift and go to state 22

    QualifiedName                  shift and go to state 52
    PrimitiveType                  shift and go to state 45
    ParameterList                  shift and go to state 180
    TypeName                       shift and go to state 53
    Parameter                      shift and go to state 178
    TypeSpecifier                  shift and go to state 179

state 84

    (88) Statement -> ExpressionStatement . SEMICOLON Mark_quad

    SEMICOLON       shift and go to state 181


state 85

    (5) TypeName -> PrimitiveType .
    (143) FieldAccess -> PrimitiveType . DOT CLASS

    LSQPAREN        reduce using rule 5 (TypeName -> PrimitiveType .)
    IDENTIFIER      reduce using rule 5 (TypeName -> PrimitiveType .)
    DOT             shift and go to state 182


state 86

    (130) ComplexPrimaryNoParenthesis -> FLOAT_CONST .

    LSQPAREN        reduce using rule 130 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    DOT             reduce using rule 130 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    OP_INC          reduce using rule 130 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    OP_DEC          reduce using rule 130 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    MULT            reduce using rule 130 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    DIV             reduce using rule 130 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    MOD             reduce using rule 130 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    PLUS            reduce using rule 130 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    MINUS           reduce using rule 130 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    OP_SHL          reduce using rule 130 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    OP_SHR          reduce using rule 130 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    OP_SHRR         reduce using rule 130 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    LESS            reduce using rule 130 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    MORE            reduce using rule 130 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    OP_LE           reduce using rule 130 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    OP_GE           reduce using rule 130 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    OP_EQ           reduce using rule 130 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    OP_NE           reduce using rule 130 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    &               reduce using rule 130 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    ^               reduce using rule 130 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    |               reduce using rule 130 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    OP_LAND         reduce using rule 130 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    ?               reduce using rule 130 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    OP_LOR          reduce using rule 130 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    SEMICOLON       reduce using rule 130 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    RROUNPAREN      reduce using rule 130 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    COLON           reduce using rule 130 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    COMMA           reduce using rule 130 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    RSQPAREN        reduce using rule 130 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    EQUAL           reduce using rule 130 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    ASS_MUL         reduce using rule 130 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    ASS_ADD         reduce using rule 130 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    ASS_SUB         reduce using rule 130 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)


state 87

    (84) LocalVariableDeclarationOrStatement -> Statement .

    RCURPAREN       reduce using rule 84 (LocalVariableDeclarationOrStatement -> Statement .)
    SEMICOLON       reduce using rule 84 (LocalVariableDeclarationOrStatement -> Statement .)
    IDENTIFIER      reduce using rule 84 (LocalVariableDeclarationOrStatement -> Statement .)
    CASE            reduce using rule 84 (LocalVariableDeclarationOrStatement -> Statement .)
    DEFAULT         reduce using rule 84 (LocalVariableDeclarationOrStatement -> Statement .)
    BREAK           reduce using rule 84 (LocalVariableDeclarationOrStatement -> Statement .)
    CONTINUE        reduce using rule 84 (LocalVariableDeclarationOrStatement -> Statement .)
    RETURN          reduce using rule 84 (LocalVariableDeclarationOrStatement -> Statement .)
    LCURPAREN       reduce using rule 84 (LocalVariableDeclarationOrStatement -> Statement .)
    WHILE           reduce using rule 84 (LocalVariableDeclarationOrStatement -> Statement .)
    FOR             reduce using rule 84 (LocalVariableDeclarationOrStatement -> Statement .)
    IF              reduce using rule 84 (LocalVariableDeclarationOrStatement -> Statement .)
    DO              reduce using rule 84 (LocalVariableDeclarationOrStatement -> Statement .)
    BOOLEAN         reduce using rule 84 (LocalVariableDeclarationOrStatement -> Statement .)
    CHAR            reduce using rule 84 (LocalVariableDeclarationOrStatement -> Statement .)
    BYTE            reduce using rule 84 (LocalVariableDeclarationOrStatement -> Statement .)
    SHORT           reduce using rule 84 (LocalVariableDeclarationOrStatement -> Statement .)
    INT             reduce using rule 84 (LocalVariableDeclarationOrStatement -> Statement .)
    LONG            reduce using rule 84 (LocalVariableDeclarationOrStatement -> Statement .)
    FLOAT           reduce using rule 84 (LocalVariableDeclarationOrStatement -> Statement .)
    DOUBLE          reduce using rule 84 (LocalVariableDeclarationOrStatement -> Statement .)
    VOID            reduce using rule 84 (LocalVariableDeclarationOrStatement -> Statement .)
    OP_INC          reduce using rule 84 (LocalVariableDeclarationOrStatement -> Statement .)
    OP_DEC          reduce using rule 84 (LocalVariableDeclarationOrStatement -> Statement .)
    PLUS            reduce using rule 84 (LocalVariableDeclarationOrStatement -> Statement .)
    MINUS           reduce using rule 84 (LocalVariableDeclarationOrStatement -> Statement .)
    ~               reduce using rule 84 (LocalVariableDeclarationOrStatement -> Statement .)
    NOT             reduce using rule 84 (LocalVariableDeclarationOrStatement -> Statement .)
    THIS            reduce using rule 84 (LocalVariableDeclarationOrStatement -> Statement .)
    SUPER           reduce using rule 84 (LocalVariableDeclarationOrStatement -> Statement .)
    NULL            reduce using rule 84 (LocalVariableDeclarationOrStatement -> Statement .)
    LROUNPAREN      reduce using rule 84 (LocalVariableDeclarationOrStatement -> Statement .)
    INT_CONST       reduce using rule 84 (LocalVariableDeclarationOrStatement -> Statement .)
    FLOAT_CONST     reduce using rule 84 (LocalVariableDeclarationOrStatement -> Statement .)
    STRING          reduce using rule 84 (LocalVariableDeclarationOrStatement -> Statement .)
    CHAR_CONST      reduce using rule 84 (LocalVariableDeclarationOrStatement -> Statement .)
    BOOLEAN_CONST   reduce using rule 84 (LocalVariableDeclarationOrStatement -> Statement .)
    NEW             reduce using rule 84 (LocalVariableDeclarationOrStatement -> Statement .)


state 88

    (208) ExclusiveOrExpression -> AndExpression .
    (207) AndExpression -> AndExpression . & EqualityExpression

    ^               reduce using rule 208 (ExclusiveOrExpression -> AndExpression .)
    |               reduce using rule 208 (ExclusiveOrExpression -> AndExpression .)
    OP_LAND         reduce using rule 208 (ExclusiveOrExpression -> AndExpression .)
    ?               reduce using rule 208 (ExclusiveOrExpression -> AndExpression .)
    OP_LOR          reduce using rule 208 (ExclusiveOrExpression -> AndExpression .)
    RSQPAREN        reduce using rule 208 (ExclusiveOrExpression -> AndExpression .)
    SEMICOLON       reduce using rule 208 (ExclusiveOrExpression -> AndExpression .)
    RROUNPAREN      reduce using rule 208 (ExclusiveOrExpression -> AndExpression .)
    COLON           reduce using rule 208 (ExclusiveOrExpression -> AndExpression .)
    COMMA           reduce using rule 208 (ExclusiveOrExpression -> AndExpression .)
    &               shift and go to state 183


state 89

    (182) ArithmeticUnaryOperator -> MINUS .

    OP_INC          reduce using rule 182 (ArithmeticUnaryOperator -> MINUS .)
    OP_DEC          reduce using rule 182 (ArithmeticUnaryOperator -> MINUS .)
    PLUS            reduce using rule 182 (ArithmeticUnaryOperator -> MINUS .)
    MINUS           reduce using rule 182 (ArithmeticUnaryOperator -> MINUS .)
    ~               reduce using rule 182 (ArithmeticUnaryOperator -> MINUS .)
    NOT             reduce using rule 182 (ArithmeticUnaryOperator -> MINUS .)
    IDENTIFIER      reduce using rule 182 (ArithmeticUnaryOperator -> MINUS .)
    THIS            reduce using rule 182 (ArithmeticUnaryOperator -> MINUS .)
    SUPER           reduce using rule 182 (ArithmeticUnaryOperator -> MINUS .)
    NULL            reduce using rule 182 (ArithmeticUnaryOperator -> MINUS .)
    LROUNPAREN      reduce using rule 182 (ArithmeticUnaryOperator -> MINUS .)
    INT_CONST       reduce using rule 182 (ArithmeticUnaryOperator -> MINUS .)
    FLOAT_CONST     reduce using rule 182 (ArithmeticUnaryOperator -> MINUS .)
    STRING          reduce using rule 182 (ArithmeticUnaryOperator -> MINUS .)
    CHAR_CONST      reduce using rule 182 (ArithmeticUnaryOperator -> MINUS .)
    BOOLEAN_CONST   reduce using rule 182 (ArithmeticUnaryOperator -> MINUS .)
    NEW             reduce using rule 182 (ArithmeticUnaryOperator -> MINUS .)
    BOOLEAN         reduce using rule 182 (ArithmeticUnaryOperator -> MINUS .)
    CHAR            reduce using rule 182 (ArithmeticUnaryOperator -> MINUS .)
    BYTE            reduce using rule 182 (ArithmeticUnaryOperator -> MINUS .)
    SHORT           reduce using rule 182 (ArithmeticUnaryOperator -> MINUS .)
    INT             reduce using rule 182 (ArithmeticUnaryOperator -> MINUS .)
    LONG            reduce using rule 182 (ArithmeticUnaryOperator -> MINUS .)
    FLOAT           reduce using rule 182 (ArithmeticUnaryOperator -> MINUS .)
    DOUBLE          reduce using rule 182 (ArithmeticUnaryOperator -> MINUS .)
    VOID            reduce using rule 182 (ArithmeticUnaryOperator -> MINUS .)


state 90

    (181) ArithmeticUnaryOperator -> PLUS .

    OP_INC          reduce using rule 181 (ArithmeticUnaryOperator -> PLUS .)
    OP_DEC          reduce using rule 181 (ArithmeticUnaryOperator -> PLUS .)
    PLUS            reduce using rule 181 (ArithmeticUnaryOperator -> PLUS .)
    MINUS           reduce using rule 181 (ArithmeticUnaryOperator -> PLUS .)
    ~               reduce using rule 181 (ArithmeticUnaryOperator -> PLUS .)
    NOT             reduce using rule 181 (ArithmeticUnaryOperator -> PLUS .)
    IDENTIFIER      reduce using rule 181 (ArithmeticUnaryOperator -> PLUS .)
    THIS            reduce using rule 181 (ArithmeticUnaryOperator -> PLUS .)
    SUPER           reduce using rule 181 (ArithmeticUnaryOperator -> PLUS .)
    NULL            reduce using rule 181 (ArithmeticUnaryOperator -> PLUS .)
    LROUNPAREN      reduce using rule 181 (ArithmeticUnaryOperator -> PLUS .)
    INT_CONST       reduce using rule 181 (ArithmeticUnaryOperator -> PLUS .)
    FLOAT_CONST     reduce using rule 181 (ArithmeticUnaryOperator -> PLUS .)
    STRING          reduce using rule 181 (ArithmeticUnaryOperator -> PLUS .)
    CHAR_CONST      reduce using rule 181 (ArithmeticUnaryOperator -> PLUS .)
    BOOLEAN_CONST   reduce using rule 181 (ArithmeticUnaryOperator -> PLUS .)
    NEW             reduce using rule 181 (ArithmeticUnaryOperator -> PLUS .)
    BOOLEAN         reduce using rule 181 (ArithmeticUnaryOperator -> PLUS .)
    CHAR            reduce using rule 181 (ArithmeticUnaryOperator -> PLUS .)
    BYTE            reduce using rule 181 (ArithmeticUnaryOperator -> PLUS .)
    SHORT           reduce using rule 181 (ArithmeticUnaryOperator -> PLUS .)
    INT             reduce using rule 181 (ArithmeticUnaryOperator -> PLUS .)
    LONG            reduce using rule 181 (ArithmeticUnaryOperator -> PLUS .)
    FLOAT           reduce using rule 181 (ArithmeticUnaryOperator -> PLUS .)
    DOUBLE          reduce using rule 181 (ArithmeticUnaryOperator -> PLUS .)
    VOID            reduce using rule 181 (ArithmeticUnaryOperator -> PLUS .)


state 91

    (147) SpecialName -> THIS .

    DOT             reduce using rule 147 (SpecialName -> THIS .)
    OP_INC          reduce using rule 147 (SpecialName -> THIS .)
    OP_DEC          reduce using rule 147 (SpecialName -> THIS .)
    MULT            reduce using rule 147 (SpecialName -> THIS .)
    DIV             reduce using rule 147 (SpecialName -> THIS .)
    MOD             reduce using rule 147 (SpecialName -> THIS .)
    PLUS            reduce using rule 147 (SpecialName -> THIS .)
    MINUS           reduce using rule 147 (SpecialName -> THIS .)
    OP_SHL          reduce using rule 147 (SpecialName -> THIS .)
    OP_SHR          reduce using rule 147 (SpecialName -> THIS .)
    OP_SHRR         reduce using rule 147 (SpecialName -> THIS .)
    LESS            reduce using rule 147 (SpecialName -> THIS .)
    MORE            reduce using rule 147 (SpecialName -> THIS .)
    OP_LE           reduce using rule 147 (SpecialName -> THIS .)
    OP_GE           reduce using rule 147 (SpecialName -> THIS .)
    OP_EQ           reduce using rule 147 (SpecialName -> THIS .)
    OP_NE           reduce using rule 147 (SpecialName -> THIS .)
    &               reduce using rule 147 (SpecialName -> THIS .)
    ^               reduce using rule 147 (SpecialName -> THIS .)
    |               reduce using rule 147 (SpecialName -> THIS .)
    OP_LAND         reduce using rule 147 (SpecialName -> THIS .)
    ?               reduce using rule 147 (SpecialName -> THIS .)
    OP_LOR          reduce using rule 147 (SpecialName -> THIS .)
    SEMICOLON       reduce using rule 147 (SpecialName -> THIS .)
    RROUNPAREN      reduce using rule 147 (SpecialName -> THIS .)
    COLON           reduce using rule 147 (SpecialName -> THIS .)
    COMMA           reduce using rule 147 (SpecialName -> THIS .)
    RSQPAREN        reduce using rule 147 (SpecialName -> THIS .)
    EQUAL           reduce using rule 147 (SpecialName -> THIS .)
    ASS_MUL         reduce using rule 147 (SpecialName -> THIS .)
    ASS_ADD         reduce using rule 147 (SpecialName -> THIS .)
    ASS_SUB         reduce using rule 147 (SpecialName -> THIS .)


state 92

    (214) ConditionalOrExpression -> ConditionalAndExpression .
    (213) ConditionalAndExpression -> ConditionalAndExpression . OP_LAND InclusiveOrExpression

    ?               reduce using rule 214 (ConditionalOrExpression -> ConditionalAndExpression .)
    OP_LOR          reduce using rule 214 (ConditionalOrExpression -> ConditionalAndExpression .)
    SEMICOLON       reduce using rule 214 (ConditionalOrExpression -> ConditionalAndExpression .)
    RROUNPAREN      reduce using rule 214 (ConditionalOrExpression -> ConditionalAndExpression .)
    COLON           reduce using rule 214 (ConditionalOrExpression -> ConditionalAndExpression .)
    COMMA           reduce using rule 214 (ConditionalOrExpression -> ConditionalAndExpression .)
    RSQPAREN        reduce using rule 214 (ConditionalOrExpression -> ConditionalAndExpression .)
    OP_LAND         shift and go to state 184


state 93

    (86) Statement -> EmptyStatement . Mark_quad
    (93) Mark_quad -> .

    RCURPAREN       reduce using rule 93 (Mark_quad -> .)
    SEMICOLON       reduce using rule 93 (Mark_quad -> .)
    IDENTIFIER      reduce using rule 93 (Mark_quad -> .)
    CASE            reduce using rule 93 (Mark_quad -> .)
    DEFAULT         reduce using rule 93 (Mark_quad -> .)
    BREAK           reduce using rule 93 (Mark_quad -> .)
    CONTINUE        reduce using rule 93 (Mark_quad -> .)
    RETURN          reduce using rule 93 (Mark_quad -> .)
    LCURPAREN       reduce using rule 93 (Mark_quad -> .)
    WHILE           reduce using rule 93 (Mark_quad -> .)
    FOR             reduce using rule 93 (Mark_quad -> .)
    IF              reduce using rule 93 (Mark_quad -> .)
    DO              reduce using rule 93 (Mark_quad -> .)
    BOOLEAN         reduce using rule 93 (Mark_quad -> .)
    CHAR            reduce using rule 93 (Mark_quad -> .)
    BYTE            reduce using rule 93 (Mark_quad -> .)
    SHORT           reduce using rule 93 (Mark_quad -> .)
    INT             reduce using rule 93 (Mark_quad -> .)
    LONG            reduce using rule 93 (Mark_quad -> .)
    FLOAT           reduce using rule 93 (Mark_quad -> .)
    DOUBLE          reduce using rule 93 (Mark_quad -> .)
    VOID            reduce using rule 93 (Mark_quad -> .)
    OP_INC          reduce using rule 93 (Mark_quad -> .)
    OP_DEC          reduce using rule 93 (Mark_quad -> .)
    PLUS            reduce using rule 93 (Mark_quad -> .)
    MINUS           reduce using rule 93 (Mark_quad -> .)
    ~               reduce using rule 93 (Mark_quad -> .)
    NOT             reduce using rule 93 (Mark_quad -> .)
    THIS            reduce using rule 93 (Mark_quad -> .)
    SUPER           reduce using rule 93 (Mark_quad -> .)
    NULL            reduce using rule 93 (Mark_quad -> .)
    LROUNPAREN      reduce using rule 93 (Mark_quad -> .)
    INT_CONST       reduce using rule 93 (Mark_quad -> .)
    FLOAT_CONST     reduce using rule 93 (Mark_quad -> .)
    STRING          reduce using rule 93 (Mark_quad -> .)
    CHAR_CONST      reduce using rule 93 (Mark_quad -> .)
    BOOLEAN_CONST   reduce using rule 93 (Mark_quad -> .)
    NEW             reduce using rule 93 (Mark_quad -> .)
    ELSE            reduce using rule 93 (Mark_quad -> .)

    Mark_quad                      shift and go to state 185

state 94

    (87) Statement -> LabelStatement . Mark_quad
    (93) Mark_quad -> .

    RCURPAREN       reduce using rule 93 (Mark_quad -> .)
    SEMICOLON       reduce using rule 93 (Mark_quad -> .)
    IDENTIFIER      reduce using rule 93 (Mark_quad -> .)
    CASE            reduce using rule 93 (Mark_quad -> .)
    DEFAULT         reduce using rule 93 (Mark_quad -> .)
    BREAK           reduce using rule 93 (Mark_quad -> .)
    CONTINUE        reduce using rule 93 (Mark_quad -> .)
    RETURN          reduce using rule 93 (Mark_quad -> .)
    LCURPAREN       reduce using rule 93 (Mark_quad -> .)
    WHILE           reduce using rule 93 (Mark_quad -> .)
    FOR             reduce using rule 93 (Mark_quad -> .)
    IF              reduce using rule 93 (Mark_quad -> .)
    DO              reduce using rule 93 (Mark_quad -> .)
    BOOLEAN         reduce using rule 93 (Mark_quad -> .)
    CHAR            reduce using rule 93 (Mark_quad -> .)
    BYTE            reduce using rule 93 (Mark_quad -> .)
    SHORT           reduce using rule 93 (Mark_quad -> .)
    INT             reduce using rule 93 (Mark_quad -> .)
    LONG            reduce using rule 93 (Mark_quad -> .)
    FLOAT           reduce using rule 93 (Mark_quad -> .)
    DOUBLE          reduce using rule 93 (Mark_quad -> .)
    VOID            reduce using rule 93 (Mark_quad -> .)
    OP_INC          reduce using rule 93 (Mark_quad -> .)
    OP_DEC          reduce using rule 93 (Mark_quad -> .)
    PLUS            reduce using rule 93 (Mark_quad -> .)
    MINUS           reduce using rule 93 (Mark_quad -> .)
    ~               reduce using rule 93 (Mark_quad -> .)
    NOT             reduce using rule 93 (Mark_quad -> .)
    THIS            reduce using rule 93 (Mark_quad -> .)
    SUPER           reduce using rule 93 (Mark_quad -> .)
    NULL            reduce using rule 93 (Mark_quad -> .)
    LROUNPAREN      reduce using rule 93 (Mark_quad -> .)
    INT_CONST       reduce using rule 93 (Mark_quad -> .)
    FLOAT_CONST     reduce using rule 93 (Mark_quad -> .)
    STRING          reduce using rule 93 (Mark_quad -> .)
    CHAR_CONST      reduce using rule 93 (Mark_quad -> .)
    BOOLEAN_CONST   reduce using rule 93 (Mark_quad -> .)
    NEW             reduce using rule 93 (Mark_quad -> .)
    ELSE            reduce using rule 93 (Mark_quad -> .)

    Mark_quad                      shift and go to state 186

state 95

    (120) JumpStatement -> RETURN . Expression SEMICOLON
    (121) JumpStatement -> RETURN . SEMICOLON
    (224) Expression -> . AssignmentExpression
    (218) AssignmentExpression -> . ConditionalExpression
    (219) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (216) ConditionalExpression -> . ConditionalOrExpression
    (217) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (173) UnaryExpression -> . OP_INC UnaryExpression
    (174) UnaryExpression -> . OP_DEC UnaryExpression
    (175) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (176) UnaryExpression -> . LogicalUnaryExpression
    (214) ConditionalOrExpression -> . ConditionalAndExpression
    (215) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (181) ArithmeticUnaryOperator -> . PLUS
    (182) ArithmeticUnaryOperator -> . MINUS
    (177) LogicalUnaryExpression -> . PostfixExpression
    (178) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (212) ConditionalAndExpression -> . InclusiveOrExpression
    (213) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (169) PostfixExpression -> . PrimaryExpression
    (170) PostfixExpression -> . RealPostfixExpression
    (179) LogicalUnaryOperator -> . ~
    (180) LogicalUnaryOperator -> . NOT
    (210) InclusiveOrExpression -> . ExclusiveOrExpression
    (211) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (122) PrimaryExpression -> . QualifiedName
    (123) PrimaryExpression -> . NotJustName
    (171) RealPostfixExpression -> . PostfixExpression OP_INC
    (172) RealPostfixExpression -> . PostfixExpression OP_DEC
    (208) ExclusiveOrExpression -> . AndExpression
    (209) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (124) NotJustName -> . SpecialName
    (125) NotJustName -> . NewAllocationExpression
    (126) NotJustName -> . ComplexPrimary
    (206) AndExpression -> . EqualityExpression
    (207) AndExpression -> . AndExpression & EqualityExpression
    (147) SpecialName -> . THIS
    (148) SpecialName -> . SUPER
    (149) SpecialName -> . NULL
    (152) NewAllocationExpression -> . PlainNewAllocationExpression
    (153) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (127) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (128) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (203) EqualityExpression -> . RelationalExpression
    (204) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (205) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (154) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (155) PlainNewAllocationExpression -> . ClassAllocationExpression
    (156) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (157) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (158) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (129) ComplexPrimaryNoParenthesis -> . INT_CONST
    (130) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (131) ComplexPrimaryNoParenthesis -> . STRING
    (132) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (133) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (134) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (135) ComplexPrimaryNoParenthesis -> . FieldAccess
    (136) ComplexPrimaryNoParenthesis -> . MethodCall
    (198) RelationalExpression -> . ShiftExpression
    (199) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (200) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (201) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (202) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (161) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (162) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (163) ArrayAllocationExpression -> . NEW TypeName Dims
    (159) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (160) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (137) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (138) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (139) FieldAccess -> . NotJustName DOT IDENTIFIER
    (140) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (141) FieldAccess -> . QualifiedName DOT THIS
    (142) FieldAccess -> . QualifiedName DOT CLASS
    (143) FieldAccess -> . PrimitiveType DOT CLASS
    (144) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (145) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (194) ShiftExpression -> . AdditiveExpression
    (195) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (196) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (197) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (146) MethodAccess -> . QualifiedName
    (191) AdditiveExpression -> . MultiplicativeExpression
    (192) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (193) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (187) MultiplicativeExpression -> . CastExpression
    (188) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (189) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (190) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (183) CastExpression -> . UnaryExpression

    SEMICOLON       shift and go to state 188
    OP_INC          shift and go to state 106
    OP_DEC          shift and go to state 126
    PLUS            shift and go to state 90
    MINUS           shift and go to state 89
    ~               shift and go to state 141
    NOT             shift and go to state 119
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 91
    SUPER           shift and go to state 158
    NULL            shift and go to state 145
    LROUNPAREN      shift and go to state 118
    INT_CONST       shift and go to state 131
    FLOAT_CONST     shift and go to state 86
    STRING          shift and go to state 151
    CHAR_CONST      shift and go to state 144
    BOOLEAN_CONST   shift and go to state 157
    NEW             shift and go to state 127
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 121
    PrimaryExpression              shift and go to state 129
    PrimitiveType                  shift and go to state 187
    RealPostfixExpression          shift and go to state 96
    ArithmeticUnaryOperator        shift and go to state 97
    AndExpression                  shift and go to state 88
    ArrayAccess                    shift and go to state 108
    CastExpression                 shift and go to state 143
    EqualityExpression             shift and go to state 98
    LogicalUnaryOperator           shift and go to state 153
    ComplexPrimaryNoParenthesis    shift and go to state 100
    MultiplicativeExpression       shift and go to state 101
    ClassAllocationExpression      shift and go to state 122
    MethodCall                     shift and go to state 102
    ConditionalOrExpression        shift and go to state 133
    ShiftExpression                shift and go to state 149
    AssignmentExpression           shift and go to state 104
    NewAllocationExpression        shift and go to state 135
    NotJustName                    shift and go to state 152
    QualifiedName                  shift and go to state 190
    LogicalUnaryExpression         shift and go to state 154
    Expression                     shift and go to state 189
    AdditiveExpression             shift and go to state 137
    ArrayAllocationExpression      shift and go to state 110
    ConditionalExpression          shift and go to state 138
    UnaryExpression                shift and go to state 139
    InclusiveOrExpression          shift and go to state 140
    MethodAccess                   shift and go to state 111
    ExclusiveOrExpression          shift and go to state 113
    ConditionalAndExpression       shift and go to state 92
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    FieldAccess                    shift and go to state 156
    SpecialName                    shift and go to state 120

state 96

    (170) PostfixExpression -> RealPostfixExpression .
    (140) FieldAccess -> RealPostfixExpression . DOT IDENTIFIER

    OP_INC          reduce using rule 170 (PostfixExpression -> RealPostfixExpression .)
    OP_DEC          reduce using rule 170 (PostfixExpression -> RealPostfixExpression .)
    EQUAL           reduce using rule 170 (PostfixExpression -> RealPostfixExpression .)
    ASS_MUL         reduce using rule 170 (PostfixExpression -> RealPostfixExpression .)
    ASS_ADD         reduce using rule 170 (PostfixExpression -> RealPostfixExpression .)
    ASS_SUB         reduce using rule 170 (PostfixExpression -> RealPostfixExpression .)
    MULT            reduce using rule 170 (PostfixExpression -> RealPostfixExpression .)
    DIV             reduce using rule 170 (PostfixExpression -> RealPostfixExpression .)
    MOD             reduce using rule 170 (PostfixExpression -> RealPostfixExpression .)
    PLUS            reduce using rule 170 (PostfixExpression -> RealPostfixExpression .)
    MINUS           reduce using rule 170 (PostfixExpression -> RealPostfixExpression .)
    OP_SHL          reduce using rule 170 (PostfixExpression -> RealPostfixExpression .)
    OP_SHR          reduce using rule 170 (PostfixExpression -> RealPostfixExpression .)
    OP_SHRR         reduce using rule 170 (PostfixExpression -> RealPostfixExpression .)
    LESS            reduce using rule 170 (PostfixExpression -> RealPostfixExpression .)
    MORE            reduce using rule 170 (PostfixExpression -> RealPostfixExpression .)
    OP_LE           reduce using rule 170 (PostfixExpression -> RealPostfixExpression .)
    OP_GE           reduce using rule 170 (PostfixExpression -> RealPostfixExpression .)
    OP_EQ           reduce using rule 170 (PostfixExpression -> RealPostfixExpression .)
    OP_NE           reduce using rule 170 (PostfixExpression -> RealPostfixExpression .)
    &               reduce using rule 170 (PostfixExpression -> RealPostfixExpression .)
    ^               reduce using rule 170 (PostfixExpression -> RealPostfixExpression .)
    |               reduce using rule 170 (PostfixExpression -> RealPostfixExpression .)
    OP_LAND         reduce using rule 170 (PostfixExpression -> RealPostfixExpression .)
    ?               reduce using rule 170 (PostfixExpression -> RealPostfixExpression .)
    OP_LOR          reduce using rule 170 (PostfixExpression -> RealPostfixExpression .)
    SEMICOLON       reduce using rule 170 (PostfixExpression -> RealPostfixExpression .)
    COMMA           reduce using rule 170 (PostfixExpression -> RealPostfixExpression .)
    RROUNPAREN      reduce using rule 170 (PostfixExpression -> RealPostfixExpression .)
    COLON           reduce using rule 170 (PostfixExpression -> RealPostfixExpression .)
    RSQPAREN        reduce using rule 170 (PostfixExpression -> RealPostfixExpression .)
    DOT             shift and go to state 191


state 97

    (175) UnaryExpression -> ArithmeticUnaryOperator . CastExpression
    (183) CastExpression -> . UnaryExpression
    (173) UnaryExpression -> . OP_INC UnaryExpression
    (174) UnaryExpression -> . OP_DEC UnaryExpression
    (175) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (176) UnaryExpression -> . LogicalUnaryExpression
    (181) ArithmeticUnaryOperator -> . PLUS
    (182) ArithmeticUnaryOperator -> . MINUS
    (177) LogicalUnaryExpression -> . PostfixExpression
    (178) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (169) PostfixExpression -> . PrimaryExpression
    (170) PostfixExpression -> . RealPostfixExpression
    (179) LogicalUnaryOperator -> . ~
    (180) LogicalUnaryOperator -> . NOT
    (122) PrimaryExpression -> . QualifiedName
    (123) PrimaryExpression -> . NotJustName
    (171) RealPostfixExpression -> . PostfixExpression OP_INC
    (172) RealPostfixExpression -> . PostfixExpression OP_DEC
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (124) NotJustName -> . SpecialName
    (125) NotJustName -> . NewAllocationExpression
    (126) NotJustName -> . ComplexPrimary
    (147) SpecialName -> . THIS
    (148) SpecialName -> . SUPER
    (149) SpecialName -> . NULL
    (152) NewAllocationExpression -> . PlainNewAllocationExpression
    (153) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (127) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (128) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (154) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (155) PlainNewAllocationExpression -> . ClassAllocationExpression
    (156) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (157) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (158) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (129) ComplexPrimaryNoParenthesis -> . INT_CONST
    (130) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (131) ComplexPrimaryNoParenthesis -> . STRING
    (132) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (133) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (134) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (135) ComplexPrimaryNoParenthesis -> . FieldAccess
    (136) ComplexPrimaryNoParenthesis -> . MethodCall
    (161) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (162) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (163) ArrayAllocationExpression -> . NEW TypeName Dims
    (159) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (160) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (137) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (138) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (139) FieldAccess -> . NotJustName DOT IDENTIFIER
    (140) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (141) FieldAccess -> . QualifiedName DOT THIS
    (142) FieldAccess -> . QualifiedName DOT CLASS
    (143) FieldAccess -> . PrimitiveType DOT CLASS
    (144) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (145) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (146) MethodAccess -> . QualifiedName

    OP_INC          shift and go to state 106
    OP_DEC          shift and go to state 126
    PLUS            shift and go to state 90
    MINUS           shift and go to state 89
    ~               shift and go to state 141
    NOT             shift and go to state 119
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 91
    SUPER           shift and go to state 158
    NULL            shift and go to state 145
    LROUNPAREN      shift and go to state 118
    INT_CONST       shift and go to state 131
    FLOAT_CONST     shift and go to state 86
    STRING          shift and go to state 151
    CHAR_CONST      shift and go to state 144
    BOOLEAN_CONST   shift and go to state 157
    NEW             shift and go to state 127
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 121
    CastExpression                 shift and go to state 192
    PrimitiveType                  shift and go to state 187
    RealPostfixExpression          shift and go to state 96
    ArithmeticUnaryOperator        shift and go to state 97
    MethodCall                     shift and go to state 102
    ClassAllocationExpression      shift and go to state 122
    LogicalUnaryOperator           shift and go to state 153
    ComplexPrimaryNoParenthesis    shift and go to state 100
    ArrayAccess                    shift and go to state 108
    NewAllocationExpression        shift and go to state 135
    NotJustName                    shift and go to state 152
    QualifiedName                  shift and go to state 190
    LogicalUnaryExpression         shift and go to state 154
    ArrayAllocationExpression      shift and go to state 110
    UnaryExpression                shift and go to state 193
    PrimaryExpression              shift and go to state 129
    FieldAccess                    shift and go to state 156
    PlainNewAllocationExpression   shift and go to state 115
    MethodAccess                   shift and go to state 111
    SpecialName                    shift and go to state 120

state 98

    (206) AndExpression -> EqualityExpression .
    (204) EqualityExpression -> EqualityExpression . OP_EQ RelationalExpression
    (205) EqualityExpression -> EqualityExpression . OP_NE RelationalExpression

    &               reduce using rule 206 (AndExpression -> EqualityExpression .)
    ^               reduce using rule 206 (AndExpression -> EqualityExpression .)
    |               reduce using rule 206 (AndExpression -> EqualityExpression .)
    OP_LAND         reduce using rule 206 (AndExpression -> EqualityExpression .)
    ?               reduce using rule 206 (AndExpression -> EqualityExpression .)
    OP_LOR          reduce using rule 206 (AndExpression -> EqualityExpression .)
    RROUNPAREN      reduce using rule 206 (AndExpression -> EqualityExpression .)
    COMMA           reduce using rule 206 (AndExpression -> EqualityExpression .)
    SEMICOLON       reduce using rule 206 (AndExpression -> EqualityExpression .)
    RSQPAREN        reduce using rule 206 (AndExpression -> EqualityExpression .)
    COLON           reduce using rule 206 (AndExpression -> EqualityExpression .)
    OP_EQ           shift and go to state 195
    OP_NE           shift and go to state 194


state 99

    (118) JumpStatement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 196


state 100

    (128) ComplexPrimary -> ComplexPrimaryNoParenthesis .

    LSQPAREN        reduce using rule 128 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    DOT             reduce using rule 128 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_INC          reduce using rule 128 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_DEC          reduce using rule 128 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    MULT            reduce using rule 128 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    DIV             reduce using rule 128 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    MOD             reduce using rule 128 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    PLUS            reduce using rule 128 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    MINUS           reduce using rule 128 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_SHL          reduce using rule 128 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_SHR          reduce using rule 128 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_SHRR         reduce using rule 128 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    LESS            reduce using rule 128 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    MORE            reduce using rule 128 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_LE           reduce using rule 128 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_GE           reduce using rule 128 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_EQ           reduce using rule 128 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_NE           reduce using rule 128 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    &               reduce using rule 128 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    ^               reduce using rule 128 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    |               reduce using rule 128 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_LAND         reduce using rule 128 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    ?               reduce using rule 128 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_LOR          reduce using rule 128 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    SEMICOLON       reduce using rule 128 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    RROUNPAREN      reduce using rule 128 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    COLON           reduce using rule 128 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    COMMA           reduce using rule 128 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    RSQPAREN        reduce using rule 128 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    EQUAL           reduce using rule 128 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    ASS_MUL         reduce using rule 128 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    ASS_ADD         reduce using rule 128 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    ASS_SUB         reduce using rule 128 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)


state 101

    (191) AdditiveExpression -> MultiplicativeExpression .
    (188) MultiplicativeExpression -> MultiplicativeExpression . MULT CastExpression
    (189) MultiplicativeExpression -> MultiplicativeExpression . DIV CastExpression
    (190) MultiplicativeExpression -> MultiplicativeExpression . MOD CastExpression

    PLUS            reduce using rule 191 (AdditiveExpression -> MultiplicativeExpression .)
    MINUS           reduce using rule 191 (AdditiveExpression -> MultiplicativeExpression .)
    OP_SHL          reduce using rule 191 (AdditiveExpression -> MultiplicativeExpression .)
    OP_SHR          reduce using rule 191 (AdditiveExpression -> MultiplicativeExpression .)
    OP_SHRR         reduce using rule 191 (AdditiveExpression -> MultiplicativeExpression .)
    LESS            reduce using rule 191 (AdditiveExpression -> MultiplicativeExpression .)
    MORE            reduce using rule 191 (AdditiveExpression -> MultiplicativeExpression .)
    OP_LE           reduce using rule 191 (AdditiveExpression -> MultiplicativeExpression .)
    OP_GE           reduce using rule 191 (AdditiveExpression -> MultiplicativeExpression .)
    OP_EQ           reduce using rule 191 (AdditiveExpression -> MultiplicativeExpression .)
    OP_NE           reduce using rule 191 (AdditiveExpression -> MultiplicativeExpression .)
    &               reduce using rule 191 (AdditiveExpression -> MultiplicativeExpression .)
    ^               reduce using rule 191 (AdditiveExpression -> MultiplicativeExpression .)
    |               reduce using rule 191 (AdditiveExpression -> MultiplicativeExpression .)
    OP_LAND         reduce using rule 191 (AdditiveExpression -> MultiplicativeExpression .)
    ?               reduce using rule 191 (AdditiveExpression -> MultiplicativeExpression .)
    OP_LOR          reduce using rule 191 (AdditiveExpression -> MultiplicativeExpression .)
    SEMICOLON       reduce using rule 191 (AdditiveExpression -> MultiplicativeExpression .)
    COMMA           reduce using rule 191 (AdditiveExpression -> MultiplicativeExpression .)
    RROUNPAREN      reduce using rule 191 (AdditiveExpression -> MultiplicativeExpression .)
    COLON           reduce using rule 191 (AdditiveExpression -> MultiplicativeExpression .)
    RSQPAREN        reduce using rule 191 (AdditiveExpression -> MultiplicativeExpression .)
    MULT            shift and go to state 198
    DIV             shift and go to state 197
    MOD             shift and go to state 199


state 102

    (136) ComplexPrimaryNoParenthesis -> MethodCall .

    LSQPAREN        reduce using rule 136 (ComplexPrimaryNoParenthesis -> MethodCall .)
    DOT             reduce using rule 136 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_INC          reduce using rule 136 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_DEC          reduce using rule 136 (ComplexPrimaryNoParenthesis -> MethodCall .)
    MULT            reduce using rule 136 (ComplexPrimaryNoParenthesis -> MethodCall .)
    DIV             reduce using rule 136 (ComplexPrimaryNoParenthesis -> MethodCall .)
    MOD             reduce using rule 136 (ComplexPrimaryNoParenthesis -> MethodCall .)
    PLUS            reduce using rule 136 (ComplexPrimaryNoParenthesis -> MethodCall .)
    MINUS           reduce using rule 136 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_SHL          reduce using rule 136 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_SHR          reduce using rule 136 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_SHRR         reduce using rule 136 (ComplexPrimaryNoParenthesis -> MethodCall .)
    LESS            reduce using rule 136 (ComplexPrimaryNoParenthesis -> MethodCall .)
    MORE            reduce using rule 136 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_LE           reduce using rule 136 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_GE           reduce using rule 136 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_EQ           reduce using rule 136 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_NE           reduce using rule 136 (ComplexPrimaryNoParenthesis -> MethodCall .)
    &               reduce using rule 136 (ComplexPrimaryNoParenthesis -> MethodCall .)
    ^               reduce using rule 136 (ComplexPrimaryNoParenthesis -> MethodCall .)
    |               reduce using rule 136 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_LAND         reduce using rule 136 (ComplexPrimaryNoParenthesis -> MethodCall .)
    ?               reduce using rule 136 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_LOR          reduce using rule 136 (ComplexPrimaryNoParenthesis -> MethodCall .)
    SEMICOLON       reduce using rule 136 (ComplexPrimaryNoParenthesis -> MethodCall .)
    RROUNPAREN      reduce using rule 136 (ComplexPrimaryNoParenthesis -> MethodCall .)
    COLON           reduce using rule 136 (ComplexPrimaryNoParenthesis -> MethodCall .)
    COMMA           reduce using rule 136 (ComplexPrimaryNoParenthesis -> MethodCall .)
    RSQPAREN        reduce using rule 136 (ComplexPrimaryNoParenthesis -> MethodCall .)
    EQUAL           reduce using rule 136 (ComplexPrimaryNoParenthesis -> MethodCall .)
    ASS_MUL         reduce using rule 136 (ComplexPrimaryNoParenthesis -> MethodCall .)
    ASS_ADD         reduce using rule 136 (ComplexPrimaryNoParenthesis -> MethodCall .)
    ASS_SUB         reduce using rule 136 (ComplexPrimaryNoParenthesis -> MethodCall .)


state 103

    (92) Statement -> SelectionStatement . Mark_quad
    (93) Mark_quad -> .

    RCURPAREN       reduce using rule 93 (Mark_quad -> .)
    SEMICOLON       reduce using rule 93 (Mark_quad -> .)
    IDENTIFIER      reduce using rule 93 (Mark_quad -> .)
    CASE            reduce using rule 93 (Mark_quad -> .)
    DEFAULT         reduce using rule 93 (Mark_quad -> .)
    BREAK           reduce using rule 93 (Mark_quad -> .)
    CONTINUE        reduce using rule 93 (Mark_quad -> .)
    RETURN          reduce using rule 93 (Mark_quad -> .)
    LCURPAREN       reduce using rule 93 (Mark_quad -> .)
    WHILE           reduce using rule 93 (Mark_quad -> .)
    FOR             reduce using rule 93 (Mark_quad -> .)
    IF              reduce using rule 93 (Mark_quad -> .)
    DO              reduce using rule 93 (Mark_quad -> .)
    BOOLEAN         reduce using rule 93 (Mark_quad -> .)
    CHAR            reduce using rule 93 (Mark_quad -> .)
    BYTE            reduce using rule 93 (Mark_quad -> .)
    SHORT           reduce using rule 93 (Mark_quad -> .)
    INT             reduce using rule 93 (Mark_quad -> .)
    LONG            reduce using rule 93 (Mark_quad -> .)
    FLOAT           reduce using rule 93 (Mark_quad -> .)
    DOUBLE          reduce using rule 93 (Mark_quad -> .)
    VOID            reduce using rule 93 (Mark_quad -> .)
    OP_INC          reduce using rule 93 (Mark_quad -> .)
    OP_DEC          reduce using rule 93 (Mark_quad -> .)
    PLUS            reduce using rule 93 (Mark_quad -> .)
    MINUS           reduce using rule 93 (Mark_quad -> .)
    ~               reduce using rule 93 (Mark_quad -> .)
    NOT             reduce using rule 93 (Mark_quad -> .)
    THIS            reduce using rule 93 (Mark_quad -> .)
    SUPER           reduce using rule 93 (Mark_quad -> .)
    NULL            reduce using rule 93 (Mark_quad -> .)
    LROUNPAREN      reduce using rule 93 (Mark_quad -> .)
    INT_CONST       reduce using rule 93 (Mark_quad -> .)
    FLOAT_CONST     reduce using rule 93 (Mark_quad -> .)
    STRING          reduce using rule 93 (Mark_quad -> .)
    CHAR_CONST      reduce using rule 93 (Mark_quad -> .)
    BOOLEAN_CONST   reduce using rule 93 (Mark_quad -> .)
    NEW             reduce using rule 93 (Mark_quad -> .)
    ELSE            reduce using rule 93 (Mark_quad -> .)

    Mark_quad                      shift and go to state 200

state 104

    (224) Expression -> AssignmentExpression .

    SEMICOLON       reduce using rule 224 (Expression -> AssignmentExpression .)
    RROUNPAREN      reduce using rule 224 (Expression -> AssignmentExpression .)
    RSQPAREN        reduce using rule 224 (Expression -> AssignmentExpression .)
    COMMA           reduce using rule 224 (Expression -> AssignmentExpression .)
    COLON           reduce using rule 224 (Expression -> AssignmentExpression .)


state 105

    (108) IterationStatement -> FOR . LROUNPAREN ForInit ForExpr Mark_quad ForIncr RROUNPAREN Mark_quad Statement
    (109) IterationStatement -> FOR . LROUNPAREN ForInit ForExpr RROUNPAREN Statement

    LROUNPAREN      shift and go to state 201


state 106

    (173) UnaryExpression -> OP_INC . UnaryExpression
    (173) UnaryExpression -> . OP_INC UnaryExpression
    (174) UnaryExpression -> . OP_DEC UnaryExpression
    (175) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (176) UnaryExpression -> . LogicalUnaryExpression
    (181) ArithmeticUnaryOperator -> . PLUS
    (182) ArithmeticUnaryOperator -> . MINUS
    (177) LogicalUnaryExpression -> . PostfixExpression
    (178) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (169) PostfixExpression -> . PrimaryExpression
    (170) PostfixExpression -> . RealPostfixExpression
    (179) LogicalUnaryOperator -> . ~
    (180) LogicalUnaryOperator -> . NOT
    (122) PrimaryExpression -> . QualifiedName
    (123) PrimaryExpression -> . NotJustName
    (171) RealPostfixExpression -> . PostfixExpression OP_INC
    (172) RealPostfixExpression -> . PostfixExpression OP_DEC
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (124) NotJustName -> . SpecialName
    (125) NotJustName -> . NewAllocationExpression
    (126) NotJustName -> . ComplexPrimary
    (147) SpecialName -> . THIS
    (148) SpecialName -> . SUPER
    (149) SpecialName -> . NULL
    (152) NewAllocationExpression -> . PlainNewAllocationExpression
    (153) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (127) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (128) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (154) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (155) PlainNewAllocationExpression -> . ClassAllocationExpression
    (156) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (157) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (158) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (129) ComplexPrimaryNoParenthesis -> . INT_CONST
    (130) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (131) ComplexPrimaryNoParenthesis -> . STRING
    (132) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (133) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (134) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (135) ComplexPrimaryNoParenthesis -> . FieldAccess
    (136) ComplexPrimaryNoParenthesis -> . MethodCall
    (161) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (162) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (163) ArrayAllocationExpression -> . NEW TypeName Dims
    (159) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (160) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (137) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (138) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (139) FieldAccess -> . NotJustName DOT IDENTIFIER
    (140) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (141) FieldAccess -> . QualifiedName DOT THIS
    (142) FieldAccess -> . QualifiedName DOT CLASS
    (143) FieldAccess -> . PrimitiveType DOT CLASS
    (144) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (145) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (146) MethodAccess -> . QualifiedName

    OP_INC          shift and go to state 106
    OP_DEC          shift and go to state 126
    PLUS            shift and go to state 90
    MINUS           shift and go to state 89
    ~               shift and go to state 141
    NOT             shift and go to state 119
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 91
    SUPER           shift and go to state 158
    NULL            shift and go to state 145
    LROUNPAREN      shift and go to state 118
    INT_CONST       shift and go to state 131
    FLOAT_CONST     shift and go to state 86
    STRING          shift and go to state 151
    CHAR_CONST      shift and go to state 144
    BOOLEAN_CONST   shift and go to state 157
    NEW             shift and go to state 127
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 121
    PrimitiveType                  shift and go to state 187
    RealPostfixExpression          shift and go to state 96
    ArithmeticUnaryOperator        shift and go to state 97
    MethodCall                     shift and go to state 102
    ClassAllocationExpression      shift and go to state 122
    LogicalUnaryOperator           shift and go to state 153
    ComplexPrimaryNoParenthesis    shift and go to state 100
    ArrayAccess                    shift and go to state 108
    NewAllocationExpression        shift and go to state 135
    NotJustName                    shift and go to state 152
    QualifiedName                  shift and go to state 190
    LogicalUnaryExpression         shift and go to state 154
    ArrayAllocationExpression      shift and go to state 110
    UnaryExpression                shift and go to state 202
    PrimaryExpression              shift and go to state 129
    FieldAccess                    shift and go to state 156
    PlainNewAllocationExpression   shift and go to state 115
    MethodAccess                   shift and go to state 111
    SpecialName                    shift and go to state 120

state 107

    (80) Block -> LCURPAREN RCURPAREN .

    SEMICOLON       reduce using rule 80 (Block -> LCURPAREN RCURPAREN .)
    RCURPAREN       reduce using rule 80 (Block -> LCURPAREN RCURPAREN .)
    STATIC          reduce using rule 80 (Block -> LCURPAREN RCURPAREN .)
    IDENTIFIER      reduce using rule 80 (Block -> LCURPAREN RCURPAREN .)
    LCURPAREN       reduce using rule 80 (Block -> LCURPAREN RCURPAREN .)
    PUBLIC          reduce using rule 80 (Block -> LCURPAREN RCURPAREN .)
    PRIVATE         reduce using rule 80 (Block -> LCURPAREN RCURPAREN .)
    CLASS           reduce using rule 80 (Block -> LCURPAREN RCURPAREN .)
    BOOLEAN         reduce using rule 80 (Block -> LCURPAREN RCURPAREN .)
    CHAR            reduce using rule 80 (Block -> LCURPAREN RCURPAREN .)
    BYTE            reduce using rule 80 (Block -> LCURPAREN RCURPAREN .)
    SHORT           reduce using rule 80 (Block -> LCURPAREN RCURPAREN .)
    INT             reduce using rule 80 (Block -> LCURPAREN RCURPAREN .)
    LONG            reduce using rule 80 (Block -> LCURPAREN RCURPAREN .)
    FLOAT           reduce using rule 80 (Block -> LCURPAREN RCURPAREN .)
    DOUBLE          reduce using rule 80 (Block -> LCURPAREN RCURPAREN .)
    VOID            reduce using rule 80 (Block -> LCURPAREN RCURPAREN .)
    CASE            reduce using rule 80 (Block -> LCURPAREN RCURPAREN .)
    DEFAULT         reduce using rule 80 (Block -> LCURPAREN RCURPAREN .)
    BREAK           reduce using rule 80 (Block -> LCURPAREN RCURPAREN .)
    CONTINUE        reduce using rule 80 (Block -> LCURPAREN RCURPAREN .)
    RETURN          reduce using rule 80 (Block -> LCURPAREN RCURPAREN .)
    WHILE           reduce using rule 80 (Block -> LCURPAREN RCURPAREN .)
    FOR             reduce using rule 80 (Block -> LCURPAREN RCURPAREN .)
    IF              reduce using rule 80 (Block -> LCURPAREN RCURPAREN .)
    DO              reduce using rule 80 (Block -> LCURPAREN RCURPAREN .)
    OP_INC          reduce using rule 80 (Block -> LCURPAREN RCURPAREN .)
    OP_DEC          reduce using rule 80 (Block -> LCURPAREN RCURPAREN .)
    PLUS            reduce using rule 80 (Block -> LCURPAREN RCURPAREN .)
    MINUS           reduce using rule 80 (Block -> LCURPAREN RCURPAREN .)
    ~               reduce using rule 80 (Block -> LCURPAREN RCURPAREN .)
    NOT             reduce using rule 80 (Block -> LCURPAREN RCURPAREN .)
    THIS            reduce using rule 80 (Block -> LCURPAREN RCURPAREN .)
    SUPER           reduce using rule 80 (Block -> LCURPAREN RCURPAREN .)
    NULL            reduce using rule 80 (Block -> LCURPAREN RCURPAREN .)
    LROUNPAREN      reduce using rule 80 (Block -> LCURPAREN RCURPAREN .)
    INT_CONST       reduce using rule 80 (Block -> LCURPAREN RCURPAREN .)
    FLOAT_CONST     reduce using rule 80 (Block -> LCURPAREN RCURPAREN .)
    STRING          reduce using rule 80 (Block -> LCURPAREN RCURPAREN .)
    CHAR_CONST      reduce using rule 80 (Block -> LCURPAREN RCURPAREN .)
    BOOLEAN_CONST   reduce using rule 80 (Block -> LCURPAREN RCURPAREN .)
    NEW             reduce using rule 80 (Block -> LCURPAREN RCURPAREN .)
    ELSE            reduce using rule 80 (Block -> LCURPAREN RCURPAREN .)


state 108

    (134) ComplexPrimaryNoParenthesis -> ArrayAccess .

    LSQPAREN        reduce using rule 134 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    DOT             reduce using rule 134 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_INC          reduce using rule 134 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_DEC          reduce using rule 134 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    MULT            reduce using rule 134 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    DIV             reduce using rule 134 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    MOD             reduce using rule 134 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    PLUS            reduce using rule 134 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    MINUS           reduce using rule 134 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_SHL          reduce using rule 134 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_SHR          reduce using rule 134 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_SHRR         reduce using rule 134 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    LESS            reduce using rule 134 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    MORE            reduce using rule 134 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_LE           reduce using rule 134 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_GE           reduce using rule 134 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_EQ           reduce using rule 134 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_NE           reduce using rule 134 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    &               reduce using rule 134 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    ^               reduce using rule 134 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    |               reduce using rule 134 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_LAND         reduce using rule 134 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    ?               reduce using rule 134 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_LOR          reduce using rule 134 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    SEMICOLON       reduce using rule 134 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    RROUNPAREN      reduce using rule 134 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    COLON           reduce using rule 134 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    COMMA           reduce using rule 134 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    RSQPAREN        reduce using rule 134 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    EQUAL           reduce using rule 134 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    ASS_MUL         reduce using rule 134 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    ASS_ADD         reduce using rule 134 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    ASS_SUB         reduce using rule 134 (ComplexPrimaryNoParenthesis -> ArrayAccess .)


state 109

    (90) Statement -> Block . Mark_quad
    (93) Mark_quad -> .

    RCURPAREN       reduce using rule 93 (Mark_quad -> .)
    SEMICOLON       reduce using rule 93 (Mark_quad -> .)
    IDENTIFIER      reduce using rule 93 (Mark_quad -> .)
    CASE            reduce using rule 93 (Mark_quad -> .)
    DEFAULT         reduce using rule 93 (Mark_quad -> .)
    BREAK           reduce using rule 93 (Mark_quad -> .)
    CONTINUE        reduce using rule 93 (Mark_quad -> .)
    RETURN          reduce using rule 93 (Mark_quad -> .)
    LCURPAREN       reduce using rule 93 (Mark_quad -> .)
    WHILE           reduce using rule 93 (Mark_quad -> .)
    FOR             reduce using rule 93 (Mark_quad -> .)
    IF              reduce using rule 93 (Mark_quad -> .)
    DO              reduce using rule 93 (Mark_quad -> .)
    BOOLEAN         reduce using rule 93 (Mark_quad -> .)
    CHAR            reduce using rule 93 (Mark_quad -> .)
    BYTE            reduce using rule 93 (Mark_quad -> .)
    SHORT           reduce using rule 93 (Mark_quad -> .)
    INT             reduce using rule 93 (Mark_quad -> .)
    LONG            reduce using rule 93 (Mark_quad -> .)
    FLOAT           reduce using rule 93 (Mark_quad -> .)
    DOUBLE          reduce using rule 93 (Mark_quad -> .)
    VOID            reduce using rule 93 (Mark_quad -> .)
    OP_INC          reduce using rule 93 (Mark_quad -> .)
    OP_DEC          reduce using rule 93 (Mark_quad -> .)
    PLUS            reduce using rule 93 (Mark_quad -> .)
    MINUS           reduce using rule 93 (Mark_quad -> .)
    ~               reduce using rule 93 (Mark_quad -> .)
    NOT             reduce using rule 93 (Mark_quad -> .)
    THIS            reduce using rule 93 (Mark_quad -> .)
    SUPER           reduce using rule 93 (Mark_quad -> .)
    NULL            reduce using rule 93 (Mark_quad -> .)
    LROUNPAREN      reduce using rule 93 (Mark_quad -> .)
    INT_CONST       reduce using rule 93 (Mark_quad -> .)
    FLOAT_CONST     reduce using rule 93 (Mark_quad -> .)
    STRING          reduce using rule 93 (Mark_quad -> .)
    CHAR_CONST      reduce using rule 93 (Mark_quad -> .)
    BOOLEAN_CONST   reduce using rule 93 (Mark_quad -> .)
    NEW             reduce using rule 93 (Mark_quad -> .)
    ELSE            reduce using rule 93 (Mark_quad -> .)

    Mark_quad                      shift and go to state 203

state 110

    (154) PlainNewAllocationExpression -> ArrayAllocationExpression .
    (156) PlainNewAllocationExpression -> ArrayAllocationExpression . LCURPAREN RCURPAREN

    DOT             reduce using rule 154 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_INC          reduce using rule 154 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_DEC          reduce using rule 154 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    MULT            reduce using rule 154 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    DIV             reduce using rule 154 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    MOD             reduce using rule 154 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    PLUS            reduce using rule 154 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    MINUS           reduce using rule 154 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_SHL          reduce using rule 154 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_SHR          reduce using rule 154 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_SHRR         reduce using rule 154 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    LESS            reduce using rule 154 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    MORE            reduce using rule 154 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_LE           reduce using rule 154 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_GE           reduce using rule 154 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_EQ           reduce using rule 154 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_NE           reduce using rule 154 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    &               reduce using rule 154 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    ^               reduce using rule 154 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    |               reduce using rule 154 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_LAND         reduce using rule 154 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    ?               reduce using rule 154 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_LOR          reduce using rule 154 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    SEMICOLON       reduce using rule 154 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    RROUNPAREN      reduce using rule 154 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    COLON           reduce using rule 154 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    COMMA           reduce using rule 154 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    RSQPAREN        reduce using rule 154 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    EQUAL           reduce using rule 154 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    ASS_MUL         reduce using rule 154 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    ASS_ADD         reduce using rule 154 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    ASS_SUB         reduce using rule 154 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    LCURPAREN       shift and go to state 204


state 111

    (144) MethodCall -> MethodAccess . LROUNPAREN ArgumentList RROUNPAREN
    (145) MethodCall -> MethodAccess . LROUNPAREN RROUNPAREN

    LROUNPAREN      shift and go to state 205


state 112

    (177) LogicalUnaryExpression -> PostfixExpression .
    (171) RealPostfixExpression -> PostfixExpression . OP_INC
    (172) RealPostfixExpression -> PostfixExpression . OP_DEC

    EQUAL           reduce using rule 177 (LogicalUnaryExpression -> PostfixExpression .)
    ASS_MUL         reduce using rule 177 (LogicalUnaryExpression -> PostfixExpression .)
    ASS_ADD         reduce using rule 177 (LogicalUnaryExpression -> PostfixExpression .)
    ASS_SUB         reduce using rule 177 (LogicalUnaryExpression -> PostfixExpression .)
    MULT            reduce using rule 177 (LogicalUnaryExpression -> PostfixExpression .)
    DIV             reduce using rule 177 (LogicalUnaryExpression -> PostfixExpression .)
    MOD             reduce using rule 177 (LogicalUnaryExpression -> PostfixExpression .)
    PLUS            reduce using rule 177 (LogicalUnaryExpression -> PostfixExpression .)
    MINUS           reduce using rule 177 (LogicalUnaryExpression -> PostfixExpression .)
    OP_SHL          reduce using rule 177 (LogicalUnaryExpression -> PostfixExpression .)
    OP_SHR          reduce using rule 177 (LogicalUnaryExpression -> PostfixExpression .)
    OP_SHRR         reduce using rule 177 (LogicalUnaryExpression -> PostfixExpression .)
    LESS            reduce using rule 177 (LogicalUnaryExpression -> PostfixExpression .)
    MORE            reduce using rule 177 (LogicalUnaryExpression -> PostfixExpression .)
    OP_LE           reduce using rule 177 (LogicalUnaryExpression -> PostfixExpression .)
    OP_GE           reduce using rule 177 (LogicalUnaryExpression -> PostfixExpression .)
    OP_EQ           reduce using rule 177 (LogicalUnaryExpression -> PostfixExpression .)
    OP_NE           reduce using rule 177 (LogicalUnaryExpression -> PostfixExpression .)
    &               reduce using rule 177 (LogicalUnaryExpression -> PostfixExpression .)
    ^               reduce using rule 177 (LogicalUnaryExpression -> PostfixExpression .)
    |               reduce using rule 177 (LogicalUnaryExpression -> PostfixExpression .)
    OP_LAND         reduce using rule 177 (LogicalUnaryExpression -> PostfixExpression .)
    ?               reduce using rule 177 (LogicalUnaryExpression -> PostfixExpression .)
    OP_LOR          reduce using rule 177 (LogicalUnaryExpression -> PostfixExpression .)
    RROUNPAREN      reduce using rule 177 (LogicalUnaryExpression -> PostfixExpression .)
    SEMICOLON       reduce using rule 177 (LogicalUnaryExpression -> PostfixExpression .)
    COLON           reduce using rule 177 (LogicalUnaryExpression -> PostfixExpression .)
    COMMA           reduce using rule 177 (LogicalUnaryExpression -> PostfixExpression .)
    RSQPAREN        reduce using rule 177 (LogicalUnaryExpression -> PostfixExpression .)
    OP_INC          shift and go to state 206
    OP_DEC          shift and go to state 207


state 113

    (210) InclusiveOrExpression -> ExclusiveOrExpression .
    (209) ExclusiveOrExpression -> ExclusiveOrExpression . ^ AndExpression

    |               reduce using rule 210 (InclusiveOrExpression -> ExclusiveOrExpression .)
    OP_LAND         reduce using rule 210 (InclusiveOrExpression -> ExclusiveOrExpression .)
    ?               reduce using rule 210 (InclusiveOrExpression -> ExclusiveOrExpression .)
    OP_LOR          reduce using rule 210 (InclusiveOrExpression -> ExclusiveOrExpression .)
    SEMICOLON       reduce using rule 210 (InclusiveOrExpression -> ExclusiveOrExpression .)
    RROUNPAREN      reduce using rule 210 (InclusiveOrExpression -> ExclusiveOrExpression .)
    COMMA           reduce using rule 210 (InclusiveOrExpression -> ExclusiveOrExpression .)
    RSQPAREN        reduce using rule 210 (InclusiveOrExpression -> ExclusiveOrExpression .)
    COLON           reduce using rule 210 (InclusiveOrExpression -> ExclusiveOrExpression .)
    ^               shift and go to state 208


state 114

    (203) EqualityExpression -> RelationalExpression .
    (199) RelationalExpression -> RelationalExpression . LESS ShiftExpression
    (200) RelationalExpression -> RelationalExpression . MORE ShiftExpression
    (201) RelationalExpression -> RelationalExpression . OP_LE ShiftExpression
    (202) RelationalExpression -> RelationalExpression . OP_GE ShiftExpression

    OP_EQ           reduce using rule 203 (EqualityExpression -> RelationalExpression .)
    OP_NE           reduce using rule 203 (EqualityExpression -> RelationalExpression .)
    &               reduce using rule 203 (EqualityExpression -> RelationalExpression .)
    ^               reduce using rule 203 (EqualityExpression -> RelationalExpression .)
    |               reduce using rule 203 (EqualityExpression -> RelationalExpression .)
    OP_LAND         reduce using rule 203 (EqualityExpression -> RelationalExpression .)
    ?               reduce using rule 203 (EqualityExpression -> RelationalExpression .)
    OP_LOR          reduce using rule 203 (EqualityExpression -> RelationalExpression .)
    SEMICOLON       reduce using rule 203 (EqualityExpression -> RelationalExpression .)
    RROUNPAREN      reduce using rule 203 (EqualityExpression -> RelationalExpression .)
    COLON           reduce using rule 203 (EqualityExpression -> RelationalExpression .)
    COMMA           reduce using rule 203 (EqualityExpression -> RelationalExpression .)
    RSQPAREN        reduce using rule 203 (EqualityExpression -> RelationalExpression .)
    LESS            shift and go to state 209
    MORE            shift and go to state 212
    OP_LE           shift and go to state 210
    OP_GE           shift and go to state 211


state 115

    (152) NewAllocationExpression -> PlainNewAllocationExpression .

    DOT             reduce using rule 152 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_INC          reduce using rule 152 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_DEC          reduce using rule 152 (NewAllocationExpression -> PlainNewAllocationExpression .)
    MULT            reduce using rule 152 (NewAllocationExpression -> PlainNewAllocationExpression .)
    DIV             reduce using rule 152 (NewAllocationExpression -> PlainNewAllocationExpression .)
    MOD             reduce using rule 152 (NewAllocationExpression -> PlainNewAllocationExpression .)
    PLUS            reduce using rule 152 (NewAllocationExpression -> PlainNewAllocationExpression .)
    MINUS           reduce using rule 152 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_SHL          reduce using rule 152 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_SHR          reduce using rule 152 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_SHRR         reduce using rule 152 (NewAllocationExpression -> PlainNewAllocationExpression .)
    LESS            reduce using rule 152 (NewAllocationExpression -> PlainNewAllocationExpression .)
    MORE            reduce using rule 152 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_LE           reduce using rule 152 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_GE           reduce using rule 152 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_EQ           reduce using rule 152 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_NE           reduce using rule 152 (NewAllocationExpression -> PlainNewAllocationExpression .)
    &               reduce using rule 152 (NewAllocationExpression -> PlainNewAllocationExpression .)
    ^               reduce using rule 152 (NewAllocationExpression -> PlainNewAllocationExpression .)
    |               reduce using rule 152 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_LAND         reduce using rule 152 (NewAllocationExpression -> PlainNewAllocationExpression .)
    ?               reduce using rule 152 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_LOR          reduce using rule 152 (NewAllocationExpression -> PlainNewAllocationExpression .)
    SEMICOLON       reduce using rule 152 (NewAllocationExpression -> PlainNewAllocationExpression .)
    RROUNPAREN      reduce using rule 152 (NewAllocationExpression -> PlainNewAllocationExpression .)
    COLON           reduce using rule 152 (NewAllocationExpression -> PlainNewAllocationExpression .)
    COMMA           reduce using rule 152 (NewAllocationExpression -> PlainNewAllocationExpression .)
    RSQPAREN        reduce using rule 152 (NewAllocationExpression -> PlainNewAllocationExpression .)
    EQUAL           reduce using rule 152 (NewAllocationExpression -> PlainNewAllocationExpression .)
    ASS_MUL         reduce using rule 152 (NewAllocationExpression -> PlainNewAllocationExpression .)
    ASS_ADD         reduce using rule 152 (NewAllocationExpression -> PlainNewAllocationExpression .)
    ASS_SUB         reduce using rule 152 (NewAllocationExpression -> PlainNewAllocationExpression .)


state 116

    (119) JumpStatement -> CONTINUE . SEMICOLON

    SEMICOLON       shift and go to state 213


state 117

    (81) LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .

    RCURPAREN       reduce using rule 81 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    SEMICOLON       reduce using rule 81 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    IDENTIFIER      reduce using rule 81 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    CASE            reduce using rule 81 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    DEFAULT         reduce using rule 81 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    BREAK           reduce using rule 81 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    CONTINUE        reduce using rule 81 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    RETURN          reduce using rule 81 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    LCURPAREN       reduce using rule 81 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    WHILE           reduce using rule 81 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    FOR             reduce using rule 81 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    IF              reduce using rule 81 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    DO              reduce using rule 81 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    BOOLEAN         reduce using rule 81 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    CHAR            reduce using rule 81 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    BYTE            reduce using rule 81 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    SHORT           reduce using rule 81 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    INT             reduce using rule 81 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    LONG            reduce using rule 81 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    FLOAT           reduce using rule 81 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    DOUBLE          reduce using rule 81 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    VOID            reduce using rule 81 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    OP_INC          reduce using rule 81 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    OP_DEC          reduce using rule 81 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    PLUS            reduce using rule 81 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    MINUS           reduce using rule 81 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    ~               reduce using rule 81 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    NOT             reduce using rule 81 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    THIS            reduce using rule 81 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    SUPER           reduce using rule 81 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    NULL            reduce using rule 81 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    LROUNPAREN      reduce using rule 81 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    INT_CONST       reduce using rule 81 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    FLOAT_CONST     reduce using rule 81 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    STRING          reduce using rule 81 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    CHAR_CONST      reduce using rule 81 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    BOOLEAN_CONST   reduce using rule 81 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    NEW             reduce using rule 81 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)


state 118

    (127) ComplexPrimary -> LROUNPAREN . Expression RROUNPAREN
    (224) Expression -> . AssignmentExpression
    (218) AssignmentExpression -> . ConditionalExpression
    (219) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (216) ConditionalExpression -> . ConditionalOrExpression
    (217) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (173) UnaryExpression -> . OP_INC UnaryExpression
    (174) UnaryExpression -> . OP_DEC UnaryExpression
    (175) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (176) UnaryExpression -> . LogicalUnaryExpression
    (214) ConditionalOrExpression -> . ConditionalAndExpression
    (215) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (181) ArithmeticUnaryOperator -> . PLUS
    (182) ArithmeticUnaryOperator -> . MINUS
    (177) LogicalUnaryExpression -> . PostfixExpression
    (178) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (212) ConditionalAndExpression -> . InclusiveOrExpression
    (213) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (169) PostfixExpression -> . PrimaryExpression
    (170) PostfixExpression -> . RealPostfixExpression
    (179) LogicalUnaryOperator -> . ~
    (180) LogicalUnaryOperator -> . NOT
    (210) InclusiveOrExpression -> . ExclusiveOrExpression
    (211) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (122) PrimaryExpression -> . QualifiedName
    (123) PrimaryExpression -> . NotJustName
    (171) RealPostfixExpression -> . PostfixExpression OP_INC
    (172) RealPostfixExpression -> . PostfixExpression OP_DEC
    (208) ExclusiveOrExpression -> . AndExpression
    (209) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (124) NotJustName -> . SpecialName
    (125) NotJustName -> . NewAllocationExpression
    (126) NotJustName -> . ComplexPrimary
    (206) AndExpression -> . EqualityExpression
    (207) AndExpression -> . AndExpression & EqualityExpression
    (147) SpecialName -> . THIS
    (148) SpecialName -> . SUPER
    (149) SpecialName -> . NULL
    (152) NewAllocationExpression -> . PlainNewAllocationExpression
    (153) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (127) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (128) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (203) EqualityExpression -> . RelationalExpression
    (204) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (205) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (154) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (155) PlainNewAllocationExpression -> . ClassAllocationExpression
    (156) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (157) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (158) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (129) ComplexPrimaryNoParenthesis -> . INT_CONST
    (130) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (131) ComplexPrimaryNoParenthesis -> . STRING
    (132) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (133) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (134) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (135) ComplexPrimaryNoParenthesis -> . FieldAccess
    (136) ComplexPrimaryNoParenthesis -> . MethodCall
    (198) RelationalExpression -> . ShiftExpression
    (199) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (200) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (201) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (202) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (161) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (162) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (163) ArrayAllocationExpression -> . NEW TypeName Dims
    (159) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (160) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (137) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (138) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (139) FieldAccess -> . NotJustName DOT IDENTIFIER
    (140) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (141) FieldAccess -> . QualifiedName DOT THIS
    (142) FieldAccess -> . QualifiedName DOT CLASS
    (143) FieldAccess -> . PrimitiveType DOT CLASS
    (144) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (145) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (194) ShiftExpression -> . AdditiveExpression
    (195) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (196) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (197) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (146) MethodAccess -> . QualifiedName
    (191) AdditiveExpression -> . MultiplicativeExpression
    (192) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (193) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (187) MultiplicativeExpression -> . CastExpression
    (188) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (189) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (190) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (183) CastExpression -> . UnaryExpression

    OP_INC          shift and go to state 106
    OP_DEC          shift and go to state 126
    PLUS            shift and go to state 90
    MINUS           shift and go to state 89
    ~               shift and go to state 141
    NOT             shift and go to state 119
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 91
    SUPER           shift and go to state 158
    NULL            shift and go to state 145
    LROUNPAREN      shift and go to state 118
    INT_CONST       shift and go to state 131
    FLOAT_CONST     shift and go to state 86
    STRING          shift and go to state 151
    CHAR_CONST      shift and go to state 144
    BOOLEAN_CONST   shift and go to state 157
    NEW             shift and go to state 127
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 121
    PrimaryExpression              shift and go to state 129
    PrimitiveType                  shift and go to state 187
    RealPostfixExpression          shift and go to state 96
    ArithmeticUnaryOperator        shift and go to state 97
    AndExpression                  shift and go to state 88
    ArrayAccess                    shift and go to state 108
    CastExpression                 shift and go to state 143
    EqualityExpression             shift and go to state 98
    LogicalUnaryOperator           shift and go to state 153
    ComplexPrimaryNoParenthesis    shift and go to state 100
    MultiplicativeExpression       shift and go to state 101
    ClassAllocationExpression      shift and go to state 122
    MethodCall                     shift and go to state 102
    ConditionalOrExpression        shift and go to state 133
    ShiftExpression                shift and go to state 149
    AssignmentExpression           shift and go to state 104
    NewAllocationExpression        shift and go to state 135
    NotJustName                    shift and go to state 152
    QualifiedName                  shift and go to state 190
    LogicalUnaryExpression         shift and go to state 154
    Expression                     shift and go to state 214
    AdditiveExpression             shift and go to state 137
    ArrayAllocationExpression      shift and go to state 110
    ConditionalExpression          shift and go to state 138
    UnaryExpression                shift and go to state 139
    InclusiveOrExpression          shift and go to state 140
    MethodAccess                   shift and go to state 111
    ExclusiveOrExpression          shift and go to state 113
    ConditionalAndExpression       shift and go to state 92
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    FieldAccess                    shift and go to state 156
    SpecialName                    shift and go to state 120

state 119

    (180) LogicalUnaryOperator -> NOT .

    OP_INC          reduce using rule 180 (LogicalUnaryOperator -> NOT .)
    OP_DEC          reduce using rule 180 (LogicalUnaryOperator -> NOT .)
    PLUS            reduce using rule 180 (LogicalUnaryOperator -> NOT .)
    MINUS           reduce using rule 180 (LogicalUnaryOperator -> NOT .)
    ~               reduce using rule 180 (LogicalUnaryOperator -> NOT .)
    NOT             reduce using rule 180 (LogicalUnaryOperator -> NOT .)
    IDENTIFIER      reduce using rule 180 (LogicalUnaryOperator -> NOT .)
    THIS            reduce using rule 180 (LogicalUnaryOperator -> NOT .)
    SUPER           reduce using rule 180 (LogicalUnaryOperator -> NOT .)
    NULL            reduce using rule 180 (LogicalUnaryOperator -> NOT .)
    LROUNPAREN      reduce using rule 180 (LogicalUnaryOperator -> NOT .)
    INT_CONST       reduce using rule 180 (LogicalUnaryOperator -> NOT .)
    FLOAT_CONST     reduce using rule 180 (LogicalUnaryOperator -> NOT .)
    STRING          reduce using rule 180 (LogicalUnaryOperator -> NOT .)
    CHAR_CONST      reduce using rule 180 (LogicalUnaryOperator -> NOT .)
    BOOLEAN_CONST   reduce using rule 180 (LogicalUnaryOperator -> NOT .)
    NEW             reduce using rule 180 (LogicalUnaryOperator -> NOT .)
    BOOLEAN         reduce using rule 180 (LogicalUnaryOperator -> NOT .)
    CHAR            reduce using rule 180 (LogicalUnaryOperator -> NOT .)
    BYTE            reduce using rule 180 (LogicalUnaryOperator -> NOT .)
    SHORT           reduce using rule 180 (LogicalUnaryOperator -> NOT .)
    INT             reduce using rule 180 (LogicalUnaryOperator -> NOT .)
    LONG            reduce using rule 180 (LogicalUnaryOperator -> NOT .)
    FLOAT           reduce using rule 180 (LogicalUnaryOperator -> NOT .)
    DOUBLE          reduce using rule 180 (LogicalUnaryOperator -> NOT .)
    VOID            reduce using rule 180 (LogicalUnaryOperator -> NOT .)


state 120

    (124) NotJustName -> SpecialName .

    DOT             reduce using rule 124 (NotJustName -> SpecialName .)
    OP_INC          reduce using rule 124 (NotJustName -> SpecialName .)
    OP_DEC          reduce using rule 124 (NotJustName -> SpecialName .)
    EQUAL           reduce using rule 124 (NotJustName -> SpecialName .)
    ASS_MUL         reduce using rule 124 (NotJustName -> SpecialName .)
    ASS_ADD         reduce using rule 124 (NotJustName -> SpecialName .)
    ASS_SUB         reduce using rule 124 (NotJustName -> SpecialName .)
    MULT            reduce using rule 124 (NotJustName -> SpecialName .)
    DIV             reduce using rule 124 (NotJustName -> SpecialName .)
    MOD             reduce using rule 124 (NotJustName -> SpecialName .)
    PLUS            reduce using rule 124 (NotJustName -> SpecialName .)
    MINUS           reduce using rule 124 (NotJustName -> SpecialName .)
    OP_SHL          reduce using rule 124 (NotJustName -> SpecialName .)
    OP_SHR          reduce using rule 124 (NotJustName -> SpecialName .)
    OP_SHRR         reduce using rule 124 (NotJustName -> SpecialName .)
    LESS            reduce using rule 124 (NotJustName -> SpecialName .)
    MORE            reduce using rule 124 (NotJustName -> SpecialName .)
    OP_LE           reduce using rule 124 (NotJustName -> SpecialName .)
    OP_GE           reduce using rule 124 (NotJustName -> SpecialName .)
    OP_EQ           reduce using rule 124 (NotJustName -> SpecialName .)
    OP_NE           reduce using rule 124 (NotJustName -> SpecialName .)
    &               reduce using rule 124 (NotJustName -> SpecialName .)
    ^               reduce using rule 124 (NotJustName -> SpecialName .)
    |               reduce using rule 124 (NotJustName -> SpecialName .)
    OP_LAND         reduce using rule 124 (NotJustName -> SpecialName .)
    ?               reduce using rule 124 (NotJustName -> SpecialName .)
    OP_LOR          reduce using rule 124 (NotJustName -> SpecialName .)
    SEMICOLON       reduce using rule 124 (NotJustName -> SpecialName .)
    RROUNPAREN      reduce using rule 124 (NotJustName -> SpecialName .)
    COLON           reduce using rule 124 (NotJustName -> SpecialName .)
    COMMA           reduce using rule 124 (NotJustName -> SpecialName .)
    RSQPAREN        reduce using rule 124 (NotJustName -> SpecialName .)


state 121

    (126) NotJustName -> ComplexPrimary .
    (138) ArrayAccess -> ComplexPrimary . LSQPAREN Expression RSQPAREN

    DOT             reduce using rule 126 (NotJustName -> ComplexPrimary .)
    OP_INC          reduce using rule 126 (NotJustName -> ComplexPrimary .)
    OP_DEC          reduce using rule 126 (NotJustName -> ComplexPrimary .)
    EQUAL           reduce using rule 126 (NotJustName -> ComplexPrimary .)
    ASS_MUL         reduce using rule 126 (NotJustName -> ComplexPrimary .)
    ASS_ADD         reduce using rule 126 (NotJustName -> ComplexPrimary .)
    ASS_SUB         reduce using rule 126 (NotJustName -> ComplexPrimary .)
    MULT            reduce using rule 126 (NotJustName -> ComplexPrimary .)
    DIV             reduce using rule 126 (NotJustName -> ComplexPrimary .)
    MOD             reduce using rule 126 (NotJustName -> ComplexPrimary .)
    PLUS            reduce using rule 126 (NotJustName -> ComplexPrimary .)
    MINUS           reduce using rule 126 (NotJustName -> ComplexPrimary .)
    OP_SHL          reduce using rule 126 (NotJustName -> ComplexPrimary .)
    OP_SHR          reduce using rule 126 (NotJustName -> ComplexPrimary .)
    OP_SHRR         reduce using rule 126 (NotJustName -> ComplexPrimary .)
    LESS            reduce using rule 126 (NotJustName -> ComplexPrimary .)
    MORE            reduce using rule 126 (NotJustName -> ComplexPrimary .)
    OP_LE           reduce using rule 126 (NotJustName -> ComplexPrimary .)
    OP_GE           reduce using rule 126 (NotJustName -> ComplexPrimary .)
    OP_EQ           reduce using rule 126 (NotJustName -> ComplexPrimary .)
    OP_NE           reduce using rule 126 (NotJustName -> ComplexPrimary .)
    &               reduce using rule 126 (NotJustName -> ComplexPrimary .)
    ^               reduce using rule 126 (NotJustName -> ComplexPrimary .)
    |               reduce using rule 126 (NotJustName -> ComplexPrimary .)
    OP_LAND         reduce using rule 126 (NotJustName -> ComplexPrimary .)
    ?               reduce using rule 126 (NotJustName -> ComplexPrimary .)
    OP_LOR          reduce using rule 126 (NotJustName -> ComplexPrimary .)
    SEMICOLON       reduce using rule 126 (NotJustName -> ComplexPrimary .)
    RROUNPAREN      reduce using rule 126 (NotJustName -> ComplexPrimary .)
    COLON           reduce using rule 126 (NotJustName -> ComplexPrimary .)
    COMMA           reduce using rule 126 (NotJustName -> ComplexPrimary .)
    RSQPAREN        reduce using rule 126 (NotJustName -> ComplexPrimary .)
    LSQPAREN        shift and go to state 215


state 122

    (155) PlainNewAllocationExpression -> ClassAllocationExpression .
    (157) PlainNewAllocationExpression -> ClassAllocationExpression . LCURPAREN RCURPAREN
    (158) PlainNewAllocationExpression -> ClassAllocationExpression . LCURPAREN FieldDeclarations RCURPAREN

    DOT             reduce using rule 155 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_INC          reduce using rule 155 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_DEC          reduce using rule 155 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    MULT            reduce using rule 155 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    DIV             reduce using rule 155 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    MOD             reduce using rule 155 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    PLUS            reduce using rule 155 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    MINUS           reduce using rule 155 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_SHL          reduce using rule 155 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_SHR          reduce using rule 155 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_SHRR         reduce using rule 155 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    LESS            reduce using rule 155 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    MORE            reduce using rule 155 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_LE           reduce using rule 155 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_GE           reduce using rule 155 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_EQ           reduce using rule 155 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_NE           reduce using rule 155 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    &               reduce using rule 155 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    ^               reduce using rule 155 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    |               reduce using rule 155 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_LAND         reduce using rule 155 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    ?               reduce using rule 155 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_LOR          reduce using rule 155 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    SEMICOLON       reduce using rule 155 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    RROUNPAREN      reduce using rule 155 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    COLON           reduce using rule 155 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    COMMA           reduce using rule 155 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    RSQPAREN        reduce using rule 155 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    EQUAL           reduce using rule 155 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    ASS_MUL         reduce using rule 155 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    ASS_ADD         reduce using rule 155 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    ASS_SUB         reduce using rule 155 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    LCURPAREN       shift and go to state 216


state 123

    (97) LabelStatement -> DEFAULT . COLON

    COLON           shift and go to state 217


state 124

    (89) Statement -> JumpStatement . Mark_quad
    (93) Mark_quad -> .

    RCURPAREN       reduce using rule 93 (Mark_quad -> .)
    SEMICOLON       reduce using rule 93 (Mark_quad -> .)
    IDENTIFIER      reduce using rule 93 (Mark_quad -> .)
    CASE            reduce using rule 93 (Mark_quad -> .)
    DEFAULT         reduce using rule 93 (Mark_quad -> .)
    BREAK           reduce using rule 93 (Mark_quad -> .)
    CONTINUE        reduce using rule 93 (Mark_quad -> .)
    RETURN          reduce using rule 93 (Mark_quad -> .)
    LCURPAREN       reduce using rule 93 (Mark_quad -> .)
    WHILE           reduce using rule 93 (Mark_quad -> .)
    FOR             reduce using rule 93 (Mark_quad -> .)
    IF              reduce using rule 93 (Mark_quad -> .)
    DO              reduce using rule 93 (Mark_quad -> .)
    BOOLEAN         reduce using rule 93 (Mark_quad -> .)
    CHAR            reduce using rule 93 (Mark_quad -> .)
    BYTE            reduce using rule 93 (Mark_quad -> .)
    SHORT           reduce using rule 93 (Mark_quad -> .)
    INT             reduce using rule 93 (Mark_quad -> .)
    LONG            reduce using rule 93 (Mark_quad -> .)
    FLOAT           reduce using rule 93 (Mark_quad -> .)
    DOUBLE          reduce using rule 93 (Mark_quad -> .)
    VOID            reduce using rule 93 (Mark_quad -> .)
    OP_INC          reduce using rule 93 (Mark_quad -> .)
    OP_DEC          reduce using rule 93 (Mark_quad -> .)
    PLUS            reduce using rule 93 (Mark_quad -> .)
    MINUS           reduce using rule 93 (Mark_quad -> .)
    ~               reduce using rule 93 (Mark_quad -> .)
    NOT             reduce using rule 93 (Mark_quad -> .)
    THIS            reduce using rule 93 (Mark_quad -> .)
    SUPER           reduce using rule 93 (Mark_quad -> .)
    NULL            reduce using rule 93 (Mark_quad -> .)
    LROUNPAREN      reduce using rule 93 (Mark_quad -> .)
    INT_CONST       reduce using rule 93 (Mark_quad -> .)
    FLOAT_CONST     reduce using rule 93 (Mark_quad -> .)
    STRING          reduce using rule 93 (Mark_quad -> .)
    CHAR_CONST      reduce using rule 93 (Mark_quad -> .)
    BOOLEAN_CONST   reduce using rule 93 (Mark_quad -> .)
    NEW             reduce using rule 93 (Mark_quad -> .)
    ELSE            reduce using rule 93 (Mark_quad -> .)

    Mark_quad                      shift and go to state 218

state 125

    (103) IterationStatement -> WHILE . Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement
    (93) Mark_quad -> .

    LROUNPAREN      reduce using rule 93 (Mark_quad -> .)

    Mark_quad                      shift and go to state 219

state 126

    (174) UnaryExpression -> OP_DEC . UnaryExpression
    (173) UnaryExpression -> . OP_INC UnaryExpression
    (174) UnaryExpression -> . OP_DEC UnaryExpression
    (175) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (176) UnaryExpression -> . LogicalUnaryExpression
    (181) ArithmeticUnaryOperator -> . PLUS
    (182) ArithmeticUnaryOperator -> . MINUS
    (177) LogicalUnaryExpression -> . PostfixExpression
    (178) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (169) PostfixExpression -> . PrimaryExpression
    (170) PostfixExpression -> . RealPostfixExpression
    (179) LogicalUnaryOperator -> . ~
    (180) LogicalUnaryOperator -> . NOT
    (122) PrimaryExpression -> . QualifiedName
    (123) PrimaryExpression -> . NotJustName
    (171) RealPostfixExpression -> . PostfixExpression OP_INC
    (172) RealPostfixExpression -> . PostfixExpression OP_DEC
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (124) NotJustName -> . SpecialName
    (125) NotJustName -> . NewAllocationExpression
    (126) NotJustName -> . ComplexPrimary
    (147) SpecialName -> . THIS
    (148) SpecialName -> . SUPER
    (149) SpecialName -> . NULL
    (152) NewAllocationExpression -> . PlainNewAllocationExpression
    (153) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (127) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (128) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (154) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (155) PlainNewAllocationExpression -> . ClassAllocationExpression
    (156) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (157) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (158) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (129) ComplexPrimaryNoParenthesis -> . INT_CONST
    (130) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (131) ComplexPrimaryNoParenthesis -> . STRING
    (132) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (133) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (134) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (135) ComplexPrimaryNoParenthesis -> . FieldAccess
    (136) ComplexPrimaryNoParenthesis -> . MethodCall
    (161) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (162) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (163) ArrayAllocationExpression -> . NEW TypeName Dims
    (159) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (160) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (137) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (138) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (139) FieldAccess -> . NotJustName DOT IDENTIFIER
    (140) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (141) FieldAccess -> . QualifiedName DOT THIS
    (142) FieldAccess -> . QualifiedName DOT CLASS
    (143) FieldAccess -> . PrimitiveType DOT CLASS
    (144) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (145) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (146) MethodAccess -> . QualifiedName

    OP_INC          shift and go to state 106
    OP_DEC          shift and go to state 126
    PLUS            shift and go to state 90
    MINUS           shift and go to state 89
    ~               shift and go to state 141
    NOT             shift and go to state 119
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 91
    SUPER           shift and go to state 158
    NULL            shift and go to state 145
    LROUNPAREN      shift and go to state 118
    INT_CONST       shift and go to state 131
    FLOAT_CONST     shift and go to state 86
    STRING          shift and go to state 151
    CHAR_CONST      shift and go to state 144
    BOOLEAN_CONST   shift and go to state 157
    NEW             shift and go to state 127
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 121
    PrimitiveType                  shift and go to state 187
    RealPostfixExpression          shift and go to state 96
    ArithmeticUnaryOperator        shift and go to state 97
    MethodCall                     shift and go to state 102
    ClassAllocationExpression      shift and go to state 122
    LogicalUnaryOperator           shift and go to state 153
    ComplexPrimaryNoParenthesis    shift and go to state 100
    ArrayAccess                    shift and go to state 108
    NewAllocationExpression        shift and go to state 135
    NotJustName                    shift and go to state 152
    QualifiedName                  shift and go to state 190
    LogicalUnaryExpression         shift and go to state 154
    ArrayAllocationExpression      shift and go to state 110
    UnaryExpression                shift and go to state 220
    PrimaryExpression              shift and go to state 129
    FieldAccess                    shift and go to state 156
    PlainNewAllocationExpression   shift and go to state 115
    MethodAccess                   shift and go to state 111
    SpecialName                    shift and go to state 120

state 127

    (161) ArrayAllocationExpression -> NEW . TypeName DimExprs Dims
    (162) ArrayAllocationExpression -> NEW . TypeName DimExprs
    (163) ArrayAllocationExpression -> NEW . TypeName Dims
    (159) ClassAllocationExpression -> NEW . TypeName LROUNPAREN ArgumentList RROUNPAREN
    (160) ClassAllocationExpression -> NEW . TypeName LROUNPAREN RROUNPAREN
    (5) TypeName -> . PrimitiveType
    (6) TypeName -> . QualifiedName
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER

    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43
    IDENTIFIER      shift and go to state 22

    QualifiedName                  shift and go to state 52
    PrimitiveType                  shift and go to state 45
    TypeName                       shift and go to state 221

state 128

    (85) LocalVariableDeclarationStatement -> TypeSpecifier . VariableDeclarators SEMICOLON
    (57) VariableDeclarators -> . VariableDeclarator
    (58) VariableDeclarators -> . VariableDeclarators COMMA VariableDeclarator
    (59) VariableDeclarator -> . DeclaratorName
    (60) VariableDeclarator -> . DeclaratorName EQUAL VariableInitializer
    (69) DeclaratorName -> . IDENTIFIER
    (70) DeclaratorName -> . DeclaratorName OP_DIM

    IDENTIFIER      shift and go to state 78

    VariableDeclarators            shift and go to state 222
    DeclaratorName                 shift and go to state 223
    VariableDeclarator             shift and go to state 79

state 129

    (169) PostfixExpression -> PrimaryExpression .

    OP_INC          reduce using rule 169 (PostfixExpression -> PrimaryExpression .)
    OP_DEC          reduce using rule 169 (PostfixExpression -> PrimaryExpression .)
    EQUAL           reduce using rule 169 (PostfixExpression -> PrimaryExpression .)
    ASS_MUL         reduce using rule 169 (PostfixExpression -> PrimaryExpression .)
    ASS_ADD         reduce using rule 169 (PostfixExpression -> PrimaryExpression .)
    ASS_SUB         reduce using rule 169 (PostfixExpression -> PrimaryExpression .)
    MULT            reduce using rule 169 (PostfixExpression -> PrimaryExpression .)
    DIV             reduce using rule 169 (PostfixExpression -> PrimaryExpression .)
    MOD             reduce using rule 169 (PostfixExpression -> PrimaryExpression .)
    PLUS            reduce using rule 169 (PostfixExpression -> PrimaryExpression .)
    MINUS           reduce using rule 169 (PostfixExpression -> PrimaryExpression .)
    OP_SHL          reduce using rule 169 (PostfixExpression -> PrimaryExpression .)
    OP_SHR          reduce using rule 169 (PostfixExpression -> PrimaryExpression .)
    OP_SHRR         reduce using rule 169 (PostfixExpression -> PrimaryExpression .)
    LESS            reduce using rule 169 (PostfixExpression -> PrimaryExpression .)
    MORE            reduce using rule 169 (PostfixExpression -> PrimaryExpression .)
    OP_LE           reduce using rule 169 (PostfixExpression -> PrimaryExpression .)
    OP_GE           reduce using rule 169 (PostfixExpression -> PrimaryExpression .)
    OP_EQ           reduce using rule 169 (PostfixExpression -> PrimaryExpression .)
    OP_NE           reduce using rule 169 (PostfixExpression -> PrimaryExpression .)
    &               reduce using rule 169 (PostfixExpression -> PrimaryExpression .)
    ^               reduce using rule 169 (PostfixExpression -> PrimaryExpression .)
    |               reduce using rule 169 (PostfixExpression -> PrimaryExpression .)
    OP_LAND         reduce using rule 169 (PostfixExpression -> PrimaryExpression .)
    ?               reduce using rule 169 (PostfixExpression -> PrimaryExpression .)
    OP_LOR          reduce using rule 169 (PostfixExpression -> PrimaryExpression .)
    SEMICOLON       reduce using rule 169 (PostfixExpression -> PrimaryExpression .)
    COMMA           reduce using rule 169 (PostfixExpression -> PrimaryExpression .)
    RROUNPAREN      reduce using rule 169 (PostfixExpression -> PrimaryExpression .)
    COLON           reduce using rule 169 (PostfixExpression -> PrimaryExpression .)
    RSQPAREN        reduce using rule 169 (PostfixExpression -> PrimaryExpression .)


state 130

    (96) LabelStatement -> CASE . ConstantExpression COLON
    (225) ConstantExpression -> . ConditionalExpression
    (216) ConditionalExpression -> . ConditionalOrExpression
    (217) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (214) ConditionalOrExpression -> . ConditionalAndExpression
    (215) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (212) ConditionalAndExpression -> . InclusiveOrExpression
    (213) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (210) InclusiveOrExpression -> . ExclusiveOrExpression
    (211) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (208) ExclusiveOrExpression -> . AndExpression
    (209) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (206) AndExpression -> . EqualityExpression
    (207) AndExpression -> . AndExpression & EqualityExpression
    (203) EqualityExpression -> . RelationalExpression
    (204) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (205) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (198) RelationalExpression -> . ShiftExpression
    (199) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (200) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (201) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (202) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (194) ShiftExpression -> . AdditiveExpression
    (195) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (196) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (197) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (191) AdditiveExpression -> . MultiplicativeExpression
    (192) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (193) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (187) MultiplicativeExpression -> . CastExpression
    (188) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (189) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (190) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (183) CastExpression -> . UnaryExpression
    (173) UnaryExpression -> . OP_INC UnaryExpression
    (174) UnaryExpression -> . OP_DEC UnaryExpression
    (175) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (176) UnaryExpression -> . LogicalUnaryExpression
    (181) ArithmeticUnaryOperator -> . PLUS
    (182) ArithmeticUnaryOperator -> . MINUS
    (177) LogicalUnaryExpression -> . PostfixExpression
    (178) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (169) PostfixExpression -> . PrimaryExpression
    (170) PostfixExpression -> . RealPostfixExpression
    (179) LogicalUnaryOperator -> . ~
    (180) LogicalUnaryOperator -> . NOT
    (122) PrimaryExpression -> . QualifiedName
    (123) PrimaryExpression -> . NotJustName
    (171) RealPostfixExpression -> . PostfixExpression OP_INC
    (172) RealPostfixExpression -> . PostfixExpression OP_DEC
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (124) NotJustName -> . SpecialName
    (125) NotJustName -> . NewAllocationExpression
    (126) NotJustName -> . ComplexPrimary
    (147) SpecialName -> . THIS
    (148) SpecialName -> . SUPER
    (149) SpecialName -> . NULL
    (152) NewAllocationExpression -> . PlainNewAllocationExpression
    (153) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (127) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (128) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (154) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (155) PlainNewAllocationExpression -> . ClassAllocationExpression
    (156) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (157) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (158) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (129) ComplexPrimaryNoParenthesis -> . INT_CONST
    (130) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (131) ComplexPrimaryNoParenthesis -> . STRING
    (132) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (133) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (134) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (135) ComplexPrimaryNoParenthesis -> . FieldAccess
    (136) ComplexPrimaryNoParenthesis -> . MethodCall
    (161) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (162) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (163) ArrayAllocationExpression -> . NEW TypeName Dims
    (159) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (160) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (137) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (138) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (139) FieldAccess -> . NotJustName DOT IDENTIFIER
    (140) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (141) FieldAccess -> . QualifiedName DOT THIS
    (142) FieldAccess -> . QualifiedName DOT CLASS
    (143) FieldAccess -> . PrimitiveType DOT CLASS
    (144) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (145) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (146) MethodAccess -> . QualifiedName

    OP_INC          shift and go to state 106
    OP_DEC          shift and go to state 126
    PLUS            shift and go to state 90
    MINUS           shift and go to state 89
    ~               shift and go to state 141
    NOT             shift and go to state 119
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 91
    SUPER           shift and go to state 158
    NULL            shift and go to state 145
    LROUNPAREN      shift and go to state 118
    INT_CONST       shift and go to state 131
    FLOAT_CONST     shift and go to state 86
    STRING          shift and go to state 151
    CHAR_CONST      shift and go to state 144
    BOOLEAN_CONST   shift and go to state 157
    NEW             shift and go to state 127
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43

    ConstantExpression             shift and go to state 224
    PostfixExpression              shift and go to state 112
    CastExpression                 shift and go to state 143
    PrimitiveType                  shift and go to state 187
    RealPostfixExpression          shift and go to state 96
    ArithmeticUnaryOperator        shift and go to state 97
    AndExpression                  shift and go to state 88
    ArrayAccess                    shift and go to state 108
    PrimaryExpression              shift and go to state 129
    EqualityExpression             shift and go to state 98
    LogicalUnaryOperator           shift and go to state 153
    ComplexPrimaryNoParenthesis    shift and go to state 100
    MultiplicativeExpression       shift and go to state 101
    ClassAllocationExpression      shift and go to state 122
    MethodCall                     shift and go to state 102
    ConditionalOrExpression        shift and go to state 133
    ShiftExpression                shift and go to state 149
    NewAllocationExpression        shift and go to state 135
    NotJustName                    shift and go to state 152
    QualifiedName                  shift and go to state 190
    ComplexPrimary                 shift and go to state 121
    LogicalUnaryExpression         shift and go to state 154
    AdditiveExpression             shift and go to state 137
    ArrayAllocationExpression      shift and go to state 110
    ConditionalExpression          shift and go to state 225
    UnaryExpression                shift and go to state 193
    InclusiveOrExpression          shift and go to state 140
    FieldAccess                    shift and go to state 156
    ExclusiveOrExpression          shift and go to state 113
    ConditionalAndExpression       shift and go to state 92
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    MethodAccess                   shift and go to state 111
    SpecialName                    shift and go to state 120

state 131

    (129) ComplexPrimaryNoParenthesis -> INT_CONST .

    LSQPAREN        reduce using rule 129 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    DOT             reduce using rule 129 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    OP_INC          reduce using rule 129 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    OP_DEC          reduce using rule 129 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    MULT            reduce using rule 129 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    DIV             reduce using rule 129 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    MOD             reduce using rule 129 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    PLUS            reduce using rule 129 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    MINUS           reduce using rule 129 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    OP_SHL          reduce using rule 129 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    OP_SHR          reduce using rule 129 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    OP_SHRR         reduce using rule 129 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    LESS            reduce using rule 129 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    MORE            reduce using rule 129 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    OP_LE           reduce using rule 129 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    OP_GE           reduce using rule 129 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    OP_EQ           reduce using rule 129 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    OP_NE           reduce using rule 129 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    &               reduce using rule 129 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    ^               reduce using rule 129 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    |               reduce using rule 129 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    OP_LAND         reduce using rule 129 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    ?               reduce using rule 129 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    OP_LOR          reduce using rule 129 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    SEMICOLON       reduce using rule 129 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    RROUNPAREN      reduce using rule 129 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    COLON           reduce using rule 129 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    COMMA           reduce using rule 129 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    RSQPAREN        reduce using rule 129 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    EQUAL           reduce using rule 129 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    ASS_MUL         reduce using rule 129 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    ASS_ADD         reduce using rule 129 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    ASS_SUB         reduce using rule 129 (ComplexPrimaryNoParenthesis -> INT_CONST .)


state 132

    (94) EmptyStatement -> SEMICOLON .

    RCURPAREN       reduce using rule 94 (EmptyStatement -> SEMICOLON .)
    SEMICOLON       reduce using rule 94 (EmptyStatement -> SEMICOLON .)
    IDENTIFIER      reduce using rule 94 (EmptyStatement -> SEMICOLON .)
    CASE            reduce using rule 94 (EmptyStatement -> SEMICOLON .)
    DEFAULT         reduce using rule 94 (EmptyStatement -> SEMICOLON .)
    BREAK           reduce using rule 94 (EmptyStatement -> SEMICOLON .)
    CONTINUE        reduce using rule 94 (EmptyStatement -> SEMICOLON .)
    RETURN          reduce using rule 94 (EmptyStatement -> SEMICOLON .)
    LCURPAREN       reduce using rule 94 (EmptyStatement -> SEMICOLON .)
    WHILE           reduce using rule 94 (EmptyStatement -> SEMICOLON .)
    FOR             reduce using rule 94 (EmptyStatement -> SEMICOLON .)
    IF              reduce using rule 94 (EmptyStatement -> SEMICOLON .)
    DO              reduce using rule 94 (EmptyStatement -> SEMICOLON .)
    BOOLEAN         reduce using rule 94 (EmptyStatement -> SEMICOLON .)
    CHAR            reduce using rule 94 (EmptyStatement -> SEMICOLON .)
    BYTE            reduce using rule 94 (EmptyStatement -> SEMICOLON .)
    SHORT           reduce using rule 94 (EmptyStatement -> SEMICOLON .)
    INT             reduce using rule 94 (EmptyStatement -> SEMICOLON .)
    LONG            reduce using rule 94 (EmptyStatement -> SEMICOLON .)
    FLOAT           reduce using rule 94 (EmptyStatement -> SEMICOLON .)
    DOUBLE          reduce using rule 94 (EmptyStatement -> SEMICOLON .)
    VOID            reduce using rule 94 (EmptyStatement -> SEMICOLON .)
    OP_INC          reduce using rule 94 (EmptyStatement -> SEMICOLON .)
    OP_DEC          reduce using rule 94 (EmptyStatement -> SEMICOLON .)
    PLUS            reduce using rule 94 (EmptyStatement -> SEMICOLON .)
    MINUS           reduce using rule 94 (EmptyStatement -> SEMICOLON .)
    ~               reduce using rule 94 (EmptyStatement -> SEMICOLON .)
    NOT             reduce using rule 94 (EmptyStatement -> SEMICOLON .)
    THIS            reduce using rule 94 (EmptyStatement -> SEMICOLON .)
    SUPER           reduce using rule 94 (EmptyStatement -> SEMICOLON .)
    NULL            reduce using rule 94 (EmptyStatement -> SEMICOLON .)
    LROUNPAREN      reduce using rule 94 (EmptyStatement -> SEMICOLON .)
    INT_CONST       reduce using rule 94 (EmptyStatement -> SEMICOLON .)
    FLOAT_CONST     reduce using rule 94 (EmptyStatement -> SEMICOLON .)
    STRING          reduce using rule 94 (EmptyStatement -> SEMICOLON .)
    CHAR_CONST      reduce using rule 94 (EmptyStatement -> SEMICOLON .)
    BOOLEAN_CONST   reduce using rule 94 (EmptyStatement -> SEMICOLON .)
    NEW             reduce using rule 94 (EmptyStatement -> SEMICOLON .)
    ELSE            reduce using rule 94 (EmptyStatement -> SEMICOLON .)


state 133

    (216) ConditionalExpression -> ConditionalOrExpression .
    (217) ConditionalExpression -> ConditionalOrExpression . ? Expression COLON ConditionalExpression
    (215) ConditionalOrExpression -> ConditionalOrExpression . OP_LOR ConditionalAndExpression

    RROUNPAREN      reduce using rule 216 (ConditionalExpression -> ConditionalOrExpression .)
    SEMICOLON       reduce using rule 216 (ConditionalExpression -> ConditionalOrExpression .)
    COMMA           reduce using rule 216 (ConditionalExpression -> ConditionalOrExpression .)
    RSQPAREN        reduce using rule 216 (ConditionalExpression -> ConditionalOrExpression .)
    COLON           reduce using rule 216 (ConditionalExpression -> ConditionalOrExpression .)
    ?               shift and go to state 227
    OP_LOR          shift and go to state 226


state 134

    (95) LabelStatement -> IDENTIFIER . COLON
    (33) QualifiedName -> IDENTIFIER .

    COLON           shift and go to state 228
    DOT             reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    LSQPAREN        reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    OP_INC          reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    OP_DEC          reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    EQUAL           reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    ASS_MUL         reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    ASS_ADD         reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    ASS_SUB         reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    MULT            reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    DIV             reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    MOD             reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    PLUS            reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    MINUS           reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    OP_SHL          reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    OP_SHR          reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    OP_SHRR         reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    LESS            reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    MORE            reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    OP_LE           reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    OP_GE           reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    OP_EQ           reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    OP_NE           reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    &               reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    ^               reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    |               reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    OP_LAND         reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    ?               reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    OP_LOR          reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    SEMICOLON       reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    LROUNPAREN      reduce using rule 33 (QualifiedName -> IDENTIFIER .)


state 135

    (125) NotJustName -> NewAllocationExpression .

    DOT             reduce using rule 125 (NotJustName -> NewAllocationExpression .)
    OP_INC          reduce using rule 125 (NotJustName -> NewAllocationExpression .)
    OP_DEC          reduce using rule 125 (NotJustName -> NewAllocationExpression .)
    EQUAL           reduce using rule 125 (NotJustName -> NewAllocationExpression .)
    ASS_MUL         reduce using rule 125 (NotJustName -> NewAllocationExpression .)
    ASS_ADD         reduce using rule 125 (NotJustName -> NewAllocationExpression .)
    ASS_SUB         reduce using rule 125 (NotJustName -> NewAllocationExpression .)
    MULT            reduce using rule 125 (NotJustName -> NewAllocationExpression .)
    DIV             reduce using rule 125 (NotJustName -> NewAllocationExpression .)
    MOD             reduce using rule 125 (NotJustName -> NewAllocationExpression .)
    PLUS            reduce using rule 125 (NotJustName -> NewAllocationExpression .)
    MINUS           reduce using rule 125 (NotJustName -> NewAllocationExpression .)
    OP_SHL          reduce using rule 125 (NotJustName -> NewAllocationExpression .)
    OP_SHR          reduce using rule 125 (NotJustName -> NewAllocationExpression .)
    OP_SHRR         reduce using rule 125 (NotJustName -> NewAllocationExpression .)
    LESS            reduce using rule 125 (NotJustName -> NewAllocationExpression .)
    MORE            reduce using rule 125 (NotJustName -> NewAllocationExpression .)
    OP_LE           reduce using rule 125 (NotJustName -> NewAllocationExpression .)
    OP_GE           reduce using rule 125 (NotJustName -> NewAllocationExpression .)
    OP_EQ           reduce using rule 125 (NotJustName -> NewAllocationExpression .)
    OP_NE           reduce using rule 125 (NotJustName -> NewAllocationExpression .)
    &               reduce using rule 125 (NotJustName -> NewAllocationExpression .)
    ^               reduce using rule 125 (NotJustName -> NewAllocationExpression .)
    |               reduce using rule 125 (NotJustName -> NewAllocationExpression .)
    OP_LAND         reduce using rule 125 (NotJustName -> NewAllocationExpression .)
    ?               reduce using rule 125 (NotJustName -> NewAllocationExpression .)
    OP_LOR          reduce using rule 125 (NotJustName -> NewAllocationExpression .)
    SEMICOLON       reduce using rule 125 (NotJustName -> NewAllocationExpression .)
    RROUNPAREN      reduce using rule 125 (NotJustName -> NewAllocationExpression .)
    COLON           reduce using rule 125 (NotJustName -> NewAllocationExpression .)
    COMMA           reduce using rule 125 (NotJustName -> NewAllocationExpression .)
    RSQPAREN        reduce using rule 125 (NotJustName -> NewAllocationExpression .)


state 136

    (98) ExpressionStatement -> Expression .

    SEMICOLON       reduce using rule 98 (ExpressionStatement -> Expression .)
    COMMA           reduce using rule 98 (ExpressionStatement -> Expression .)
    RROUNPAREN      reduce using rule 98 (ExpressionStatement -> Expression .)


state 137

    (194) ShiftExpression -> AdditiveExpression .
    (192) AdditiveExpression -> AdditiveExpression . PLUS MultiplicativeExpression
    (193) AdditiveExpression -> AdditiveExpression . MINUS MultiplicativeExpression

    OP_SHL          reduce using rule 194 (ShiftExpression -> AdditiveExpression .)
    OP_SHR          reduce using rule 194 (ShiftExpression -> AdditiveExpression .)
    OP_SHRR         reduce using rule 194 (ShiftExpression -> AdditiveExpression .)
    LESS            reduce using rule 194 (ShiftExpression -> AdditiveExpression .)
    MORE            reduce using rule 194 (ShiftExpression -> AdditiveExpression .)
    OP_LE           reduce using rule 194 (ShiftExpression -> AdditiveExpression .)
    OP_GE           reduce using rule 194 (ShiftExpression -> AdditiveExpression .)
    OP_EQ           reduce using rule 194 (ShiftExpression -> AdditiveExpression .)
    OP_NE           reduce using rule 194 (ShiftExpression -> AdditiveExpression .)
    &               reduce using rule 194 (ShiftExpression -> AdditiveExpression .)
    ^               reduce using rule 194 (ShiftExpression -> AdditiveExpression .)
    |               reduce using rule 194 (ShiftExpression -> AdditiveExpression .)
    OP_LAND         reduce using rule 194 (ShiftExpression -> AdditiveExpression .)
    ?               reduce using rule 194 (ShiftExpression -> AdditiveExpression .)
    OP_LOR          reduce using rule 194 (ShiftExpression -> AdditiveExpression .)
    RROUNPAREN      reduce using rule 194 (ShiftExpression -> AdditiveExpression .)
    SEMICOLON       reduce using rule 194 (ShiftExpression -> AdditiveExpression .)
    COLON           reduce using rule 194 (ShiftExpression -> AdditiveExpression .)
    COMMA           reduce using rule 194 (ShiftExpression -> AdditiveExpression .)
    RSQPAREN        reduce using rule 194 (ShiftExpression -> AdditiveExpression .)
    PLUS            shift and go to state 229
    MINUS           shift and go to state 230


state 138

    (218) AssignmentExpression -> ConditionalExpression .

    COLON           reduce using rule 218 (AssignmentExpression -> ConditionalExpression .)
    SEMICOLON       reduce using rule 218 (AssignmentExpression -> ConditionalExpression .)
    COMMA           reduce using rule 218 (AssignmentExpression -> ConditionalExpression .)
    RROUNPAREN      reduce using rule 218 (AssignmentExpression -> ConditionalExpression .)
    RSQPAREN        reduce using rule 218 (AssignmentExpression -> ConditionalExpression .)


state 139

    (219) AssignmentExpression -> UnaryExpression . AssignmentOperator AssignmentExpression
    (183) CastExpression -> UnaryExpression .
    (220) AssignmentOperator -> . EQUAL
    (221) AssignmentOperator -> . ASS_MUL
    (222) AssignmentOperator -> . ASS_ADD
    (223) AssignmentOperator -> . ASS_SUB

    MULT            reduce using rule 183 (CastExpression -> UnaryExpression .)
    DIV             reduce using rule 183 (CastExpression -> UnaryExpression .)
    MOD             reduce using rule 183 (CastExpression -> UnaryExpression .)
    PLUS            reduce using rule 183 (CastExpression -> UnaryExpression .)
    MINUS           reduce using rule 183 (CastExpression -> UnaryExpression .)
    OP_SHL          reduce using rule 183 (CastExpression -> UnaryExpression .)
    OP_SHR          reduce using rule 183 (CastExpression -> UnaryExpression .)
    OP_SHRR         reduce using rule 183 (CastExpression -> UnaryExpression .)
    LESS            reduce using rule 183 (CastExpression -> UnaryExpression .)
    MORE            reduce using rule 183 (CastExpression -> UnaryExpression .)
    OP_LE           reduce using rule 183 (CastExpression -> UnaryExpression .)
    OP_GE           reduce using rule 183 (CastExpression -> UnaryExpression .)
    OP_EQ           reduce using rule 183 (CastExpression -> UnaryExpression .)
    OP_NE           reduce using rule 183 (CastExpression -> UnaryExpression .)
    &               reduce using rule 183 (CastExpression -> UnaryExpression .)
    ^               reduce using rule 183 (CastExpression -> UnaryExpression .)
    |               reduce using rule 183 (CastExpression -> UnaryExpression .)
    OP_LAND         reduce using rule 183 (CastExpression -> UnaryExpression .)
    ?               reduce using rule 183 (CastExpression -> UnaryExpression .)
    OP_LOR          reduce using rule 183 (CastExpression -> UnaryExpression .)
    SEMICOLON       reduce using rule 183 (CastExpression -> UnaryExpression .)
    COMMA           reduce using rule 183 (CastExpression -> UnaryExpression .)
    RROUNPAREN      reduce using rule 183 (CastExpression -> UnaryExpression .)
    RSQPAREN        reduce using rule 183 (CastExpression -> UnaryExpression .)
    COLON           reduce using rule 183 (CastExpression -> UnaryExpression .)
    EQUAL           shift and go to state 234
    ASS_MUL         shift and go to state 231
    ASS_ADD         shift and go to state 232
    ASS_SUB         shift and go to state 235

    AssignmentOperator             shift and go to state 233

state 140

    (212) ConditionalAndExpression -> InclusiveOrExpression .
    (211) InclusiveOrExpression -> InclusiveOrExpression . | ExclusiveOrExpression

    OP_LAND         reduce using rule 212 (ConditionalAndExpression -> InclusiveOrExpression .)
    ?               reduce using rule 212 (ConditionalAndExpression -> InclusiveOrExpression .)
    OP_LOR          reduce using rule 212 (ConditionalAndExpression -> InclusiveOrExpression .)
    RSQPAREN        reduce using rule 212 (ConditionalAndExpression -> InclusiveOrExpression .)
    SEMICOLON       reduce using rule 212 (ConditionalAndExpression -> InclusiveOrExpression .)
    RROUNPAREN      reduce using rule 212 (ConditionalAndExpression -> InclusiveOrExpression .)
    COLON           reduce using rule 212 (ConditionalAndExpression -> InclusiveOrExpression .)
    COMMA           reduce using rule 212 (ConditionalAndExpression -> InclusiveOrExpression .)
    |               shift and go to state 236


state 141

    (179) LogicalUnaryOperator -> ~ .

    OP_INC          reduce using rule 179 (LogicalUnaryOperator -> ~ .)
    OP_DEC          reduce using rule 179 (LogicalUnaryOperator -> ~ .)
    PLUS            reduce using rule 179 (LogicalUnaryOperator -> ~ .)
    MINUS           reduce using rule 179 (LogicalUnaryOperator -> ~ .)
    ~               reduce using rule 179 (LogicalUnaryOperator -> ~ .)
    NOT             reduce using rule 179 (LogicalUnaryOperator -> ~ .)
    IDENTIFIER      reduce using rule 179 (LogicalUnaryOperator -> ~ .)
    THIS            reduce using rule 179 (LogicalUnaryOperator -> ~ .)
    SUPER           reduce using rule 179 (LogicalUnaryOperator -> ~ .)
    NULL            reduce using rule 179 (LogicalUnaryOperator -> ~ .)
    LROUNPAREN      reduce using rule 179 (LogicalUnaryOperator -> ~ .)
    INT_CONST       reduce using rule 179 (LogicalUnaryOperator -> ~ .)
    FLOAT_CONST     reduce using rule 179 (LogicalUnaryOperator -> ~ .)
    STRING          reduce using rule 179 (LogicalUnaryOperator -> ~ .)
    CHAR_CONST      reduce using rule 179 (LogicalUnaryOperator -> ~ .)
    BOOLEAN_CONST   reduce using rule 179 (LogicalUnaryOperator -> ~ .)
    NEW             reduce using rule 179 (LogicalUnaryOperator -> ~ .)
    BOOLEAN         reduce using rule 179 (LogicalUnaryOperator -> ~ .)
    CHAR            reduce using rule 179 (LogicalUnaryOperator -> ~ .)
    BYTE            reduce using rule 179 (LogicalUnaryOperator -> ~ .)
    SHORT           reduce using rule 179 (LogicalUnaryOperator -> ~ .)
    INT             reduce using rule 179 (LogicalUnaryOperator -> ~ .)
    LONG            reduce using rule 179 (LogicalUnaryOperator -> ~ .)
    FLOAT           reduce using rule 179 (LogicalUnaryOperator -> ~ .)
    DOUBLE          reduce using rule 179 (LogicalUnaryOperator -> ~ .)
    VOID            reduce using rule 179 (LogicalUnaryOperator -> ~ .)


state 142

    (106) Do -> DO .

    SEMICOLON       reduce using rule 106 (Do -> DO .)
    IDENTIFIER      reduce using rule 106 (Do -> DO .)
    CASE            reduce using rule 106 (Do -> DO .)
    DEFAULT         reduce using rule 106 (Do -> DO .)
    BREAK           reduce using rule 106 (Do -> DO .)
    CONTINUE        reduce using rule 106 (Do -> DO .)
    RETURN          reduce using rule 106 (Do -> DO .)
    LCURPAREN       reduce using rule 106 (Do -> DO .)
    WHILE           reduce using rule 106 (Do -> DO .)
    FOR             reduce using rule 106 (Do -> DO .)
    IF              reduce using rule 106 (Do -> DO .)
    DO              reduce using rule 106 (Do -> DO .)
    OP_INC          reduce using rule 106 (Do -> DO .)
    OP_DEC          reduce using rule 106 (Do -> DO .)
    PLUS            reduce using rule 106 (Do -> DO .)
    MINUS           reduce using rule 106 (Do -> DO .)
    ~               reduce using rule 106 (Do -> DO .)
    NOT             reduce using rule 106 (Do -> DO .)
    THIS            reduce using rule 106 (Do -> DO .)
    SUPER           reduce using rule 106 (Do -> DO .)
    NULL            reduce using rule 106 (Do -> DO .)
    LROUNPAREN      reduce using rule 106 (Do -> DO .)
    INT_CONST       reduce using rule 106 (Do -> DO .)
    FLOAT_CONST     reduce using rule 106 (Do -> DO .)
    STRING          reduce using rule 106 (Do -> DO .)
    CHAR_CONST      reduce using rule 106 (Do -> DO .)
    BOOLEAN_CONST   reduce using rule 106 (Do -> DO .)
    NEW             reduce using rule 106 (Do -> DO .)
    BOOLEAN         reduce using rule 106 (Do -> DO .)
    CHAR            reduce using rule 106 (Do -> DO .)
    BYTE            reduce using rule 106 (Do -> DO .)
    SHORT           reduce using rule 106 (Do -> DO .)
    INT             reduce using rule 106 (Do -> DO .)
    LONG            reduce using rule 106 (Do -> DO .)
    FLOAT           reduce using rule 106 (Do -> DO .)
    DOUBLE          reduce using rule 106 (Do -> DO .)
    VOID            reduce using rule 106 (Do -> DO .)


state 143

    (187) MultiplicativeExpression -> CastExpression .

    MULT            reduce using rule 187 (MultiplicativeExpression -> CastExpression .)
    DIV             reduce using rule 187 (MultiplicativeExpression -> CastExpression .)
    MOD             reduce using rule 187 (MultiplicativeExpression -> CastExpression .)
    PLUS            reduce using rule 187 (MultiplicativeExpression -> CastExpression .)
    MINUS           reduce using rule 187 (MultiplicativeExpression -> CastExpression .)
    OP_SHL          reduce using rule 187 (MultiplicativeExpression -> CastExpression .)
    OP_SHR          reduce using rule 187 (MultiplicativeExpression -> CastExpression .)
    OP_SHRR         reduce using rule 187 (MultiplicativeExpression -> CastExpression .)
    LESS            reduce using rule 187 (MultiplicativeExpression -> CastExpression .)
    MORE            reduce using rule 187 (MultiplicativeExpression -> CastExpression .)
    OP_LE           reduce using rule 187 (MultiplicativeExpression -> CastExpression .)
    OP_GE           reduce using rule 187 (MultiplicativeExpression -> CastExpression .)
    OP_EQ           reduce using rule 187 (MultiplicativeExpression -> CastExpression .)
    OP_NE           reduce using rule 187 (MultiplicativeExpression -> CastExpression .)
    &               reduce using rule 187 (MultiplicativeExpression -> CastExpression .)
    ^               reduce using rule 187 (MultiplicativeExpression -> CastExpression .)
    |               reduce using rule 187 (MultiplicativeExpression -> CastExpression .)
    OP_LAND         reduce using rule 187 (MultiplicativeExpression -> CastExpression .)
    ?               reduce using rule 187 (MultiplicativeExpression -> CastExpression .)
    OP_LOR          reduce using rule 187 (MultiplicativeExpression -> CastExpression .)
    SEMICOLON       reduce using rule 187 (MultiplicativeExpression -> CastExpression .)
    RROUNPAREN      reduce using rule 187 (MultiplicativeExpression -> CastExpression .)
    COLON           reduce using rule 187 (MultiplicativeExpression -> CastExpression .)
    COMMA           reduce using rule 187 (MultiplicativeExpression -> CastExpression .)
    RSQPAREN        reduce using rule 187 (MultiplicativeExpression -> CastExpression .)


state 144

    (132) ComplexPrimaryNoParenthesis -> CHAR_CONST .

    LSQPAREN        reduce using rule 132 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    DOT             reduce using rule 132 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    OP_INC          reduce using rule 132 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    OP_DEC          reduce using rule 132 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    MULT            reduce using rule 132 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    DIV             reduce using rule 132 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    MOD             reduce using rule 132 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    PLUS            reduce using rule 132 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    MINUS           reduce using rule 132 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    OP_SHL          reduce using rule 132 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    OP_SHR          reduce using rule 132 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    OP_SHRR         reduce using rule 132 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    LESS            reduce using rule 132 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    MORE            reduce using rule 132 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    OP_LE           reduce using rule 132 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    OP_GE           reduce using rule 132 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    OP_EQ           reduce using rule 132 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    OP_NE           reduce using rule 132 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    &               reduce using rule 132 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    ^               reduce using rule 132 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    |               reduce using rule 132 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    OP_LAND         reduce using rule 132 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    ?               reduce using rule 132 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    OP_LOR          reduce using rule 132 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    SEMICOLON       reduce using rule 132 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    RROUNPAREN      reduce using rule 132 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    COLON           reduce using rule 132 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    COMMA           reduce using rule 132 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    RSQPAREN        reduce using rule 132 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    EQUAL           reduce using rule 132 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    ASS_MUL         reduce using rule 132 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    ASS_ADD         reduce using rule 132 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    ASS_SUB         reduce using rule 132 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)


state 145

    (149) SpecialName -> NULL .

    DOT             reduce using rule 149 (SpecialName -> NULL .)
    OP_INC          reduce using rule 149 (SpecialName -> NULL .)
    OP_DEC          reduce using rule 149 (SpecialName -> NULL .)
    MULT            reduce using rule 149 (SpecialName -> NULL .)
    DIV             reduce using rule 149 (SpecialName -> NULL .)
    MOD             reduce using rule 149 (SpecialName -> NULL .)
    PLUS            reduce using rule 149 (SpecialName -> NULL .)
    MINUS           reduce using rule 149 (SpecialName -> NULL .)
    OP_SHL          reduce using rule 149 (SpecialName -> NULL .)
    OP_SHR          reduce using rule 149 (SpecialName -> NULL .)
    OP_SHRR         reduce using rule 149 (SpecialName -> NULL .)
    LESS            reduce using rule 149 (SpecialName -> NULL .)
    MORE            reduce using rule 149 (SpecialName -> NULL .)
    OP_LE           reduce using rule 149 (SpecialName -> NULL .)
    OP_GE           reduce using rule 149 (SpecialName -> NULL .)
    OP_EQ           reduce using rule 149 (SpecialName -> NULL .)
    OP_NE           reduce using rule 149 (SpecialName -> NULL .)
    &               reduce using rule 149 (SpecialName -> NULL .)
    ^               reduce using rule 149 (SpecialName -> NULL .)
    |               reduce using rule 149 (SpecialName -> NULL .)
    OP_LAND         reduce using rule 149 (SpecialName -> NULL .)
    ?               reduce using rule 149 (SpecialName -> NULL .)
    OP_LOR          reduce using rule 149 (SpecialName -> NULL .)
    SEMICOLON       reduce using rule 149 (SpecialName -> NULL .)
    RROUNPAREN      reduce using rule 149 (SpecialName -> NULL .)
    COLON           reduce using rule 149 (SpecialName -> NULL .)
    COMMA           reduce using rule 149 (SpecialName -> NULL .)
    RSQPAREN        reduce using rule 149 (SpecialName -> NULL .)
    EQUAL           reduce using rule 149 (SpecialName -> NULL .)
    ASS_MUL         reduce using rule 149 (SpecialName -> NULL .)
    ASS_ADD         reduce using rule 149 (SpecialName -> NULL .)
    ASS_SUB         reduce using rule 149 (SpecialName -> NULL .)


state 146

    (105) IterationStatement -> Do . Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON
    (93) Mark_quad -> .

    SEMICOLON       reduce using rule 93 (Mark_quad -> .)
    IDENTIFIER      reduce using rule 93 (Mark_quad -> .)
    CASE            reduce using rule 93 (Mark_quad -> .)
    DEFAULT         reduce using rule 93 (Mark_quad -> .)
    BREAK           reduce using rule 93 (Mark_quad -> .)
    CONTINUE        reduce using rule 93 (Mark_quad -> .)
    RETURN          reduce using rule 93 (Mark_quad -> .)
    LCURPAREN       reduce using rule 93 (Mark_quad -> .)
    WHILE           reduce using rule 93 (Mark_quad -> .)
    FOR             reduce using rule 93 (Mark_quad -> .)
    IF              reduce using rule 93 (Mark_quad -> .)
    DO              reduce using rule 93 (Mark_quad -> .)
    OP_INC          reduce using rule 93 (Mark_quad -> .)
    OP_DEC          reduce using rule 93 (Mark_quad -> .)
    PLUS            reduce using rule 93 (Mark_quad -> .)
    MINUS           reduce using rule 93 (Mark_quad -> .)
    ~               reduce using rule 93 (Mark_quad -> .)
    NOT             reduce using rule 93 (Mark_quad -> .)
    THIS            reduce using rule 93 (Mark_quad -> .)
    SUPER           reduce using rule 93 (Mark_quad -> .)
    NULL            reduce using rule 93 (Mark_quad -> .)
    LROUNPAREN      reduce using rule 93 (Mark_quad -> .)
    INT_CONST       reduce using rule 93 (Mark_quad -> .)
    FLOAT_CONST     reduce using rule 93 (Mark_quad -> .)
    STRING          reduce using rule 93 (Mark_quad -> .)
    CHAR_CONST      reduce using rule 93 (Mark_quad -> .)
    BOOLEAN_CONST   reduce using rule 93 (Mark_quad -> .)
    NEW             reduce using rule 93 (Mark_quad -> .)
    BOOLEAN         reduce using rule 93 (Mark_quad -> .)
    CHAR            reduce using rule 93 (Mark_quad -> .)
    BYTE            reduce using rule 93 (Mark_quad -> .)
    SHORT           reduce using rule 93 (Mark_quad -> .)
    INT             reduce using rule 93 (Mark_quad -> .)
    LONG            reduce using rule 93 (Mark_quad -> .)
    FLOAT           reduce using rule 93 (Mark_quad -> .)
    DOUBLE          reduce using rule 93 (Mark_quad -> .)
    VOID            reduce using rule 93 (Mark_quad -> .)

    Mark_quad                      shift and go to state 237

state 147

    (6) TypeName -> QualifiedName .
    (34) QualifiedName -> QualifiedName . DOT IDENTIFIER
    (122) PrimaryExpression -> QualifiedName .
    (153) NewAllocationExpression -> QualifiedName . DOT PlainNewAllocationExpression
    (137) ArrayAccess -> QualifiedName . LSQPAREN Expression RSQPAREN
    (141) FieldAccess -> QualifiedName . DOT THIS
    (142) FieldAccess -> QualifiedName . DOT CLASS
    (146) MethodAccess -> QualifiedName .

  ! shift/reduce conflict for LSQPAREN resolved as shift
    IDENTIFIER      reduce using rule 6 (TypeName -> QualifiedName .)
    DOT             shift and go to state 239
    OP_INC          reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    OP_DEC          reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    EQUAL           reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    ASS_MUL         reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    ASS_ADD         reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    ASS_SUB         reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    MULT            reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    DIV             reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    MOD             reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    PLUS            reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    MINUS           reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    OP_SHL          reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    OP_SHR          reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    OP_SHRR         reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    LESS            reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    MORE            reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    OP_LE           reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    OP_GE           reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    OP_EQ           reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    OP_NE           reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    &               reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    ^               reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    |               reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    OP_LAND         reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    ?               reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    OP_LOR          reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    SEMICOLON       reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    COMMA           reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    LSQPAREN        shift and go to state 238
    LROUNPAREN      reduce using rule 146 (MethodAccess -> QualifiedName .)

  ! LSQPAREN        [ reduce using rule 6 (TypeName -> QualifiedName .) ]


state 148

    (83) LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .

    RCURPAREN       reduce using rule 83 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    SEMICOLON       reduce using rule 83 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    IDENTIFIER      reduce using rule 83 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    CASE            reduce using rule 83 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    DEFAULT         reduce using rule 83 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    BREAK           reduce using rule 83 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    CONTINUE        reduce using rule 83 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    RETURN          reduce using rule 83 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    LCURPAREN       reduce using rule 83 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    WHILE           reduce using rule 83 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    FOR             reduce using rule 83 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    IF              reduce using rule 83 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    DO              reduce using rule 83 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    BOOLEAN         reduce using rule 83 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    CHAR            reduce using rule 83 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    BYTE            reduce using rule 83 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    SHORT           reduce using rule 83 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    INT             reduce using rule 83 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    LONG            reduce using rule 83 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    FLOAT           reduce using rule 83 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    DOUBLE          reduce using rule 83 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    VOID            reduce using rule 83 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    OP_INC          reduce using rule 83 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    OP_DEC          reduce using rule 83 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    PLUS            reduce using rule 83 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    MINUS           reduce using rule 83 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    ~               reduce using rule 83 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    NOT             reduce using rule 83 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    THIS            reduce using rule 83 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    SUPER           reduce using rule 83 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    NULL            reduce using rule 83 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    LROUNPAREN      reduce using rule 83 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    INT_CONST       reduce using rule 83 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    FLOAT_CONST     reduce using rule 83 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    STRING          reduce using rule 83 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    CHAR_CONST      reduce using rule 83 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    BOOLEAN_CONST   reduce using rule 83 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    NEW             reduce using rule 83 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)


state 149

    (198) RelationalExpression -> ShiftExpression .
    (195) ShiftExpression -> ShiftExpression . OP_SHL AdditiveExpression
    (196) ShiftExpression -> ShiftExpression . OP_SHR AdditiveExpression
    (197) ShiftExpression -> ShiftExpression . OP_SHRR AdditiveExpression

    LESS            reduce using rule 198 (RelationalExpression -> ShiftExpression .)
    MORE            reduce using rule 198 (RelationalExpression -> ShiftExpression .)
    OP_LE           reduce using rule 198 (RelationalExpression -> ShiftExpression .)
    OP_GE           reduce using rule 198 (RelationalExpression -> ShiftExpression .)
    OP_EQ           reduce using rule 198 (RelationalExpression -> ShiftExpression .)
    OP_NE           reduce using rule 198 (RelationalExpression -> ShiftExpression .)
    &               reduce using rule 198 (RelationalExpression -> ShiftExpression .)
    ^               reduce using rule 198 (RelationalExpression -> ShiftExpression .)
    |               reduce using rule 198 (RelationalExpression -> ShiftExpression .)
    OP_LAND         reduce using rule 198 (RelationalExpression -> ShiftExpression .)
    ?               reduce using rule 198 (RelationalExpression -> ShiftExpression .)
    OP_LOR          reduce using rule 198 (RelationalExpression -> ShiftExpression .)
    RROUNPAREN      reduce using rule 198 (RelationalExpression -> ShiftExpression .)
    SEMICOLON       reduce using rule 198 (RelationalExpression -> ShiftExpression .)
    COLON           reduce using rule 198 (RelationalExpression -> ShiftExpression .)
    COMMA           reduce using rule 198 (RelationalExpression -> ShiftExpression .)
    RSQPAREN        reduce using rule 198 (RelationalExpression -> ShiftExpression .)
    OP_SHL          shift and go to state 240
    OP_SHR          shift and go to state 242
    OP_SHRR         shift and go to state 241


state 150

    (79) Block -> LCURPAREN LocalVariableDeclarationsAndStatements . RCURPAREN
    (82) LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements . LocalVariableDeclarationOrStatement
    (83) LocalVariableDeclarationOrStatement -> . LocalVariableDeclarationStatement
    (84) LocalVariableDeclarationOrStatement -> . Statement
    (85) LocalVariableDeclarationStatement -> . TypeSpecifier VariableDeclarators SEMICOLON
    (86) Statement -> . EmptyStatement Mark_quad
    (87) Statement -> . LabelStatement Mark_quad
    (88) Statement -> . ExpressionStatement SEMICOLON Mark_quad
    (89) Statement -> . JumpStatement Mark_quad
    (90) Statement -> . Block Mark_quad
    (91) Statement -> . IterationStatement Mark_quad
    (92) Statement -> . SelectionStatement Mark_quad
    (3) TypeSpecifier -> . TypeName
    (4) TypeSpecifier -> . TypeName Dims
    (94) EmptyStatement -> . SEMICOLON
    (95) LabelStatement -> . IDENTIFIER COLON
    (96) LabelStatement -> . CASE ConstantExpression COLON
    (97) LabelStatement -> . DEFAULT COLON
    (98) ExpressionStatement -> . Expression
    (118) JumpStatement -> . BREAK SEMICOLON
    (119) JumpStatement -> . CONTINUE SEMICOLON
    (120) JumpStatement -> . RETURN Expression SEMICOLON
    (121) JumpStatement -> . RETURN SEMICOLON
    (79) Block -> . LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN
    (80) Block -> . LCURPAREN RCURPAREN
    (103) IterationStatement -> . WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement
    (105) IterationStatement -> . Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON
    (108) IterationStatement -> . FOR LROUNPAREN ForInit ForExpr Mark_quad ForIncr RROUNPAREN Mark_quad Statement
    (109) IterationStatement -> . FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement
    (99) SelectionStatement -> . IF LROUNPAREN Expression RROUNPAREN Mark_if Statement
    (100) SelectionStatement -> . IF LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement
    (5) TypeName -> . PrimitiveType
    (6) TypeName -> . QualifiedName
    (224) Expression -> . AssignmentExpression
    (106) Do -> . DO
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (218) AssignmentExpression -> . ConditionalExpression
    (219) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (216) ConditionalExpression -> . ConditionalOrExpression
    (217) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (173) UnaryExpression -> . OP_INC UnaryExpression
    (174) UnaryExpression -> . OP_DEC UnaryExpression
    (175) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (176) UnaryExpression -> . LogicalUnaryExpression
    (214) ConditionalOrExpression -> . ConditionalAndExpression
    (215) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (181) ArithmeticUnaryOperator -> . PLUS
    (182) ArithmeticUnaryOperator -> . MINUS
    (177) LogicalUnaryExpression -> . PostfixExpression
    (178) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (212) ConditionalAndExpression -> . InclusiveOrExpression
    (213) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (169) PostfixExpression -> . PrimaryExpression
    (170) PostfixExpression -> . RealPostfixExpression
    (179) LogicalUnaryOperator -> . ~
    (180) LogicalUnaryOperator -> . NOT
    (210) InclusiveOrExpression -> . ExclusiveOrExpression
    (211) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (122) PrimaryExpression -> . QualifiedName
    (123) PrimaryExpression -> . NotJustName
    (171) RealPostfixExpression -> . PostfixExpression OP_INC
    (172) RealPostfixExpression -> . PostfixExpression OP_DEC
    (208) ExclusiveOrExpression -> . AndExpression
    (209) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (124) NotJustName -> . SpecialName
    (125) NotJustName -> . NewAllocationExpression
    (126) NotJustName -> . ComplexPrimary
    (206) AndExpression -> . EqualityExpression
    (207) AndExpression -> . AndExpression & EqualityExpression
    (147) SpecialName -> . THIS
    (148) SpecialName -> . SUPER
    (149) SpecialName -> . NULL
    (152) NewAllocationExpression -> . PlainNewAllocationExpression
    (153) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (127) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (128) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (203) EqualityExpression -> . RelationalExpression
    (204) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (205) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (154) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (155) PlainNewAllocationExpression -> . ClassAllocationExpression
    (156) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (157) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (158) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (129) ComplexPrimaryNoParenthesis -> . INT_CONST
    (130) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (131) ComplexPrimaryNoParenthesis -> . STRING
    (132) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (133) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (134) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (135) ComplexPrimaryNoParenthesis -> . FieldAccess
    (136) ComplexPrimaryNoParenthesis -> . MethodCall
    (198) RelationalExpression -> . ShiftExpression
    (199) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (200) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (201) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (202) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (161) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (162) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (163) ArrayAllocationExpression -> . NEW TypeName Dims
    (159) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (160) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (137) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (138) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (139) FieldAccess -> . NotJustName DOT IDENTIFIER
    (140) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (141) FieldAccess -> . QualifiedName DOT THIS
    (142) FieldAccess -> . QualifiedName DOT CLASS
    (143) FieldAccess -> . PrimitiveType DOT CLASS
    (144) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (145) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (194) ShiftExpression -> . AdditiveExpression
    (195) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (196) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (197) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (146) MethodAccess -> . QualifiedName
    (191) AdditiveExpression -> . MultiplicativeExpression
    (192) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (193) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (187) MultiplicativeExpression -> . CastExpression
    (188) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (189) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (190) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (183) CastExpression -> . UnaryExpression

    RCURPAREN       shift and go to state 243
    SEMICOLON       shift and go to state 132
    IDENTIFIER      shift and go to state 134
    CASE            shift and go to state 130
    DEFAULT         shift and go to state 123
    BREAK           shift and go to state 99
    CONTINUE        shift and go to state 116
    RETURN          shift and go to state 95
    LCURPAREN       shift and go to state 57
    WHILE           shift and go to state 125
    FOR             shift and go to state 105
    IF              shift and go to state 155
    DO              shift and go to state 142
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43
    OP_INC          shift and go to state 106
    OP_DEC          shift and go to state 126
    PLUS            shift and go to state 90
    MINUS           shift and go to state 89
    ~               shift and go to state 141
    NOT             shift and go to state 119
    THIS            shift and go to state 91
    SUPER           shift and go to state 158
    NULL            shift and go to state 145
    LROUNPAREN      shift and go to state 118
    INT_CONST       shift and go to state 131
    FLOAT_CONST     shift and go to state 86
    STRING          shift and go to state 151
    CHAR_CONST      shift and go to state 144
    BOOLEAN_CONST   shift and go to state 157
    NEW             shift and go to state 127

    PostfixExpression              shift and go to state 112
    LabelStatement                 shift and go to state 94
    ArithmeticUnaryOperator        shift and go to state 97
    AssignmentExpression           shift and go to state 104
    ExpressionStatement            shift and go to state 84
    JumpStatement                  shift and go to state 124
    RealPostfixExpression          shift and go to state 96
    Statement                      shift and go to state 87
    AndExpression                  shift and go to state 88
    MultiplicativeExpression       shift and go to state 101
    TypeSpecifier                  shift and go to state 128
    CastExpression                 shift and go to state 143
    EqualityExpression             shift and go to state 98
    Do                             shift and go to state 146
    QualifiedName                  shift and go to state 147
    MethodAccess                   shift and go to state 111
    ComplexPrimaryNoParenthesis    shift and go to state 100
    ArrayAccess                    shift and go to state 108
    ClassAllocationExpression      shift and go to state 122
    MethodCall                     shift and go to state 102
    TypeName                       shift and go to state 53
    ConditionalOrExpression        shift and go to state 133
    LocalVariableDeclarationStatement shift and go to state 148
    ShiftExpression                shift and go to state 149
    SelectionStatement             shift and go to state 103
    NewAllocationExpression        shift and go to state 135
    NotJustName                    shift and go to state 152
    LogicalUnaryOperator           shift and go to state 153
    ComplexPrimary                 shift and go to state 121
    PrimitiveType                  shift and go to state 85
    LogicalUnaryExpression         shift and go to state 154
    UnaryExpression                shift and go to state 139
    Expression                     shift and go to state 136
    Block                          shift and go to state 109
    AdditiveExpression             shift and go to state 137
    ArrayAllocationExpression      shift and go to state 110
    ConditionalExpression          shift and go to state 138
    InclusiveOrExpression          shift and go to state 140
    PrimaryExpression              shift and go to state 129
    ExclusiveOrExpression          shift and go to state 113
    ConditionalAndExpression       shift and go to state 92
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    LocalVariableDeclarationOrStatement shift and go to state 244
    FieldAccess                    shift and go to state 156
    EmptyStatement                 shift and go to state 93
    SpecialName                    shift and go to state 120
    IterationStatement             shift and go to state 159

state 151

    (131) ComplexPrimaryNoParenthesis -> STRING .

    LSQPAREN        reduce using rule 131 (ComplexPrimaryNoParenthesis -> STRING .)
    DOT             reduce using rule 131 (ComplexPrimaryNoParenthesis -> STRING .)
    OP_INC          reduce using rule 131 (ComplexPrimaryNoParenthesis -> STRING .)
    OP_DEC          reduce using rule 131 (ComplexPrimaryNoParenthesis -> STRING .)
    MULT            reduce using rule 131 (ComplexPrimaryNoParenthesis -> STRING .)
    DIV             reduce using rule 131 (ComplexPrimaryNoParenthesis -> STRING .)
    MOD             reduce using rule 131 (ComplexPrimaryNoParenthesis -> STRING .)
    PLUS            reduce using rule 131 (ComplexPrimaryNoParenthesis -> STRING .)
    MINUS           reduce using rule 131 (ComplexPrimaryNoParenthesis -> STRING .)
    OP_SHL          reduce using rule 131 (ComplexPrimaryNoParenthesis -> STRING .)
    OP_SHR          reduce using rule 131 (ComplexPrimaryNoParenthesis -> STRING .)
    OP_SHRR         reduce using rule 131 (ComplexPrimaryNoParenthesis -> STRING .)
    LESS            reduce using rule 131 (ComplexPrimaryNoParenthesis -> STRING .)
    MORE            reduce using rule 131 (ComplexPrimaryNoParenthesis -> STRING .)
    OP_LE           reduce using rule 131 (ComplexPrimaryNoParenthesis -> STRING .)
    OP_GE           reduce using rule 131 (ComplexPrimaryNoParenthesis -> STRING .)
    OP_EQ           reduce using rule 131 (ComplexPrimaryNoParenthesis -> STRING .)
    OP_NE           reduce using rule 131 (ComplexPrimaryNoParenthesis -> STRING .)
    &               reduce using rule 131 (ComplexPrimaryNoParenthesis -> STRING .)
    ^               reduce using rule 131 (ComplexPrimaryNoParenthesis -> STRING .)
    |               reduce using rule 131 (ComplexPrimaryNoParenthesis -> STRING .)
    OP_LAND         reduce using rule 131 (ComplexPrimaryNoParenthesis -> STRING .)
    ?               reduce using rule 131 (ComplexPrimaryNoParenthesis -> STRING .)
    OP_LOR          reduce using rule 131 (ComplexPrimaryNoParenthesis -> STRING .)
    SEMICOLON       reduce using rule 131 (ComplexPrimaryNoParenthesis -> STRING .)
    RROUNPAREN      reduce using rule 131 (ComplexPrimaryNoParenthesis -> STRING .)
    COLON           reduce using rule 131 (ComplexPrimaryNoParenthesis -> STRING .)
    COMMA           reduce using rule 131 (ComplexPrimaryNoParenthesis -> STRING .)
    RSQPAREN        reduce using rule 131 (ComplexPrimaryNoParenthesis -> STRING .)
    EQUAL           reduce using rule 131 (ComplexPrimaryNoParenthesis -> STRING .)
    ASS_MUL         reduce using rule 131 (ComplexPrimaryNoParenthesis -> STRING .)
    ASS_ADD         reduce using rule 131 (ComplexPrimaryNoParenthesis -> STRING .)
    ASS_SUB         reduce using rule 131 (ComplexPrimaryNoParenthesis -> STRING .)


state 152

    (123) PrimaryExpression -> NotJustName .
    (139) FieldAccess -> NotJustName . DOT IDENTIFIER

    OP_INC          reduce using rule 123 (PrimaryExpression -> NotJustName .)
    OP_DEC          reduce using rule 123 (PrimaryExpression -> NotJustName .)
    MULT            reduce using rule 123 (PrimaryExpression -> NotJustName .)
    DIV             reduce using rule 123 (PrimaryExpression -> NotJustName .)
    MOD             reduce using rule 123 (PrimaryExpression -> NotJustName .)
    PLUS            reduce using rule 123 (PrimaryExpression -> NotJustName .)
    MINUS           reduce using rule 123 (PrimaryExpression -> NotJustName .)
    OP_SHL          reduce using rule 123 (PrimaryExpression -> NotJustName .)
    OP_SHR          reduce using rule 123 (PrimaryExpression -> NotJustName .)
    OP_SHRR         reduce using rule 123 (PrimaryExpression -> NotJustName .)
    LESS            reduce using rule 123 (PrimaryExpression -> NotJustName .)
    MORE            reduce using rule 123 (PrimaryExpression -> NotJustName .)
    OP_LE           reduce using rule 123 (PrimaryExpression -> NotJustName .)
    OP_GE           reduce using rule 123 (PrimaryExpression -> NotJustName .)
    OP_EQ           reduce using rule 123 (PrimaryExpression -> NotJustName .)
    OP_NE           reduce using rule 123 (PrimaryExpression -> NotJustName .)
    &               reduce using rule 123 (PrimaryExpression -> NotJustName .)
    ^               reduce using rule 123 (PrimaryExpression -> NotJustName .)
    |               reduce using rule 123 (PrimaryExpression -> NotJustName .)
    OP_LAND         reduce using rule 123 (PrimaryExpression -> NotJustName .)
    ?               reduce using rule 123 (PrimaryExpression -> NotJustName .)
    OP_LOR          reduce using rule 123 (PrimaryExpression -> NotJustName .)
    SEMICOLON       reduce using rule 123 (PrimaryExpression -> NotJustName .)
    RROUNPAREN      reduce using rule 123 (PrimaryExpression -> NotJustName .)
    COLON           reduce using rule 123 (PrimaryExpression -> NotJustName .)
    COMMA           reduce using rule 123 (PrimaryExpression -> NotJustName .)
    RSQPAREN        reduce using rule 123 (PrimaryExpression -> NotJustName .)
    EQUAL           reduce using rule 123 (PrimaryExpression -> NotJustName .)
    ASS_MUL         reduce using rule 123 (PrimaryExpression -> NotJustName .)
    ASS_ADD         reduce using rule 123 (PrimaryExpression -> NotJustName .)
    ASS_SUB         reduce using rule 123 (PrimaryExpression -> NotJustName .)
    DOT             shift and go to state 245


state 153

    (178) LogicalUnaryExpression -> LogicalUnaryOperator . UnaryExpression
    (173) UnaryExpression -> . OP_INC UnaryExpression
    (174) UnaryExpression -> . OP_DEC UnaryExpression
    (175) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (176) UnaryExpression -> . LogicalUnaryExpression
    (181) ArithmeticUnaryOperator -> . PLUS
    (182) ArithmeticUnaryOperator -> . MINUS
    (177) LogicalUnaryExpression -> . PostfixExpression
    (178) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (169) PostfixExpression -> . PrimaryExpression
    (170) PostfixExpression -> . RealPostfixExpression
    (179) LogicalUnaryOperator -> . ~
    (180) LogicalUnaryOperator -> . NOT
    (122) PrimaryExpression -> . QualifiedName
    (123) PrimaryExpression -> . NotJustName
    (171) RealPostfixExpression -> . PostfixExpression OP_INC
    (172) RealPostfixExpression -> . PostfixExpression OP_DEC
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (124) NotJustName -> . SpecialName
    (125) NotJustName -> . NewAllocationExpression
    (126) NotJustName -> . ComplexPrimary
    (147) SpecialName -> . THIS
    (148) SpecialName -> . SUPER
    (149) SpecialName -> . NULL
    (152) NewAllocationExpression -> . PlainNewAllocationExpression
    (153) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (127) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (128) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (154) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (155) PlainNewAllocationExpression -> . ClassAllocationExpression
    (156) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (157) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (158) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (129) ComplexPrimaryNoParenthesis -> . INT_CONST
    (130) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (131) ComplexPrimaryNoParenthesis -> . STRING
    (132) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (133) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (134) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (135) ComplexPrimaryNoParenthesis -> . FieldAccess
    (136) ComplexPrimaryNoParenthesis -> . MethodCall
    (161) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (162) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (163) ArrayAllocationExpression -> . NEW TypeName Dims
    (159) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (160) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (137) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (138) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (139) FieldAccess -> . NotJustName DOT IDENTIFIER
    (140) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (141) FieldAccess -> . QualifiedName DOT THIS
    (142) FieldAccess -> . QualifiedName DOT CLASS
    (143) FieldAccess -> . PrimitiveType DOT CLASS
    (144) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (145) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (146) MethodAccess -> . QualifiedName

    OP_INC          shift and go to state 106
    OP_DEC          shift and go to state 126
    PLUS            shift and go to state 90
    MINUS           shift and go to state 89
    ~               shift and go to state 141
    NOT             shift and go to state 119
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 91
    SUPER           shift and go to state 158
    NULL            shift and go to state 145
    LROUNPAREN      shift and go to state 118
    INT_CONST       shift and go to state 131
    FLOAT_CONST     shift and go to state 86
    STRING          shift and go to state 151
    CHAR_CONST      shift and go to state 144
    BOOLEAN_CONST   shift and go to state 157
    NEW             shift and go to state 127
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 121
    PrimitiveType                  shift and go to state 187
    RealPostfixExpression          shift and go to state 96
    ArithmeticUnaryOperator        shift and go to state 97
    MethodCall                     shift and go to state 102
    ClassAllocationExpression      shift and go to state 122
    LogicalUnaryOperator           shift and go to state 153
    ComplexPrimaryNoParenthesis    shift and go to state 100
    ArrayAccess                    shift and go to state 108
    NewAllocationExpression        shift and go to state 135
    NotJustName                    shift and go to state 152
    QualifiedName                  shift and go to state 190
    LogicalUnaryExpression         shift and go to state 154
    ArrayAllocationExpression      shift and go to state 110
    UnaryExpression                shift and go to state 246
    PrimaryExpression              shift and go to state 129
    FieldAccess                    shift and go to state 156
    PlainNewAllocationExpression   shift and go to state 115
    MethodAccess                   shift and go to state 111
    SpecialName                    shift and go to state 120

state 154

    (176) UnaryExpression -> LogicalUnaryExpression .

    EQUAL           reduce using rule 176 (UnaryExpression -> LogicalUnaryExpression .)
    ASS_MUL         reduce using rule 176 (UnaryExpression -> LogicalUnaryExpression .)
    ASS_ADD         reduce using rule 176 (UnaryExpression -> LogicalUnaryExpression .)
    ASS_SUB         reduce using rule 176 (UnaryExpression -> LogicalUnaryExpression .)
    MULT            reduce using rule 176 (UnaryExpression -> LogicalUnaryExpression .)
    DIV             reduce using rule 176 (UnaryExpression -> LogicalUnaryExpression .)
    MOD             reduce using rule 176 (UnaryExpression -> LogicalUnaryExpression .)
    PLUS            reduce using rule 176 (UnaryExpression -> LogicalUnaryExpression .)
    MINUS           reduce using rule 176 (UnaryExpression -> LogicalUnaryExpression .)
    OP_SHL          reduce using rule 176 (UnaryExpression -> LogicalUnaryExpression .)
    OP_SHR          reduce using rule 176 (UnaryExpression -> LogicalUnaryExpression .)
    OP_SHRR         reduce using rule 176 (UnaryExpression -> LogicalUnaryExpression .)
    LESS            reduce using rule 176 (UnaryExpression -> LogicalUnaryExpression .)
    MORE            reduce using rule 176 (UnaryExpression -> LogicalUnaryExpression .)
    OP_LE           reduce using rule 176 (UnaryExpression -> LogicalUnaryExpression .)
    OP_GE           reduce using rule 176 (UnaryExpression -> LogicalUnaryExpression .)
    OP_EQ           reduce using rule 176 (UnaryExpression -> LogicalUnaryExpression .)
    OP_NE           reduce using rule 176 (UnaryExpression -> LogicalUnaryExpression .)
    &               reduce using rule 176 (UnaryExpression -> LogicalUnaryExpression .)
    ^               reduce using rule 176 (UnaryExpression -> LogicalUnaryExpression .)
    |               reduce using rule 176 (UnaryExpression -> LogicalUnaryExpression .)
    OP_LAND         reduce using rule 176 (UnaryExpression -> LogicalUnaryExpression .)
    ?               reduce using rule 176 (UnaryExpression -> LogicalUnaryExpression .)
    OP_LOR          reduce using rule 176 (UnaryExpression -> LogicalUnaryExpression .)
    COMMA           reduce using rule 176 (UnaryExpression -> LogicalUnaryExpression .)
    SEMICOLON       reduce using rule 176 (UnaryExpression -> LogicalUnaryExpression .)
    RROUNPAREN      reduce using rule 176 (UnaryExpression -> LogicalUnaryExpression .)
    COLON           reduce using rule 176 (UnaryExpression -> LogicalUnaryExpression .)
    RSQPAREN        reduce using rule 176 (UnaryExpression -> LogicalUnaryExpression .)


state 155

    (99) SelectionStatement -> IF . LROUNPAREN Expression RROUNPAREN Mark_if Statement
    (100) SelectionStatement -> IF . LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement

    LROUNPAREN      shift and go to state 247


state 156

    (135) ComplexPrimaryNoParenthesis -> FieldAccess .

    LSQPAREN        reduce using rule 135 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    DOT             reduce using rule 135 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_INC          reduce using rule 135 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_DEC          reduce using rule 135 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    MULT            reduce using rule 135 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    DIV             reduce using rule 135 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    MOD             reduce using rule 135 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    PLUS            reduce using rule 135 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    MINUS           reduce using rule 135 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_SHL          reduce using rule 135 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_SHR          reduce using rule 135 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_SHRR         reduce using rule 135 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    LESS            reduce using rule 135 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    MORE            reduce using rule 135 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_LE           reduce using rule 135 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_GE           reduce using rule 135 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_EQ           reduce using rule 135 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_NE           reduce using rule 135 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    &               reduce using rule 135 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    ^               reduce using rule 135 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    |               reduce using rule 135 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_LAND         reduce using rule 135 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    ?               reduce using rule 135 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_LOR          reduce using rule 135 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    SEMICOLON       reduce using rule 135 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    RROUNPAREN      reduce using rule 135 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    COLON           reduce using rule 135 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    COMMA           reduce using rule 135 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    RSQPAREN        reduce using rule 135 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    EQUAL           reduce using rule 135 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    ASS_MUL         reduce using rule 135 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    ASS_ADD         reduce using rule 135 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    ASS_SUB         reduce using rule 135 (ComplexPrimaryNoParenthesis -> FieldAccess .)


state 157

    (133) ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .

    LSQPAREN        reduce using rule 133 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    DOT             reduce using rule 133 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    OP_INC          reduce using rule 133 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    OP_DEC          reduce using rule 133 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    MULT            reduce using rule 133 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    DIV             reduce using rule 133 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    MOD             reduce using rule 133 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    PLUS            reduce using rule 133 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    MINUS           reduce using rule 133 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    OP_SHL          reduce using rule 133 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    OP_SHR          reduce using rule 133 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    OP_SHRR         reduce using rule 133 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    LESS            reduce using rule 133 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    MORE            reduce using rule 133 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    OP_LE           reduce using rule 133 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    OP_GE           reduce using rule 133 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    OP_EQ           reduce using rule 133 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    OP_NE           reduce using rule 133 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    &               reduce using rule 133 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    ^               reduce using rule 133 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    |               reduce using rule 133 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    OP_LAND         reduce using rule 133 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    ?               reduce using rule 133 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    OP_LOR          reduce using rule 133 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    SEMICOLON       reduce using rule 133 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    RROUNPAREN      reduce using rule 133 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    COLON           reduce using rule 133 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    COMMA           reduce using rule 133 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    RSQPAREN        reduce using rule 133 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    EQUAL           reduce using rule 133 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    ASS_MUL         reduce using rule 133 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    ASS_ADD         reduce using rule 133 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    ASS_SUB         reduce using rule 133 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)


state 158

    (148) SpecialName -> SUPER .

    DOT             reduce using rule 148 (SpecialName -> SUPER .)
    OP_INC          reduce using rule 148 (SpecialName -> SUPER .)
    OP_DEC          reduce using rule 148 (SpecialName -> SUPER .)
    MULT            reduce using rule 148 (SpecialName -> SUPER .)
    DIV             reduce using rule 148 (SpecialName -> SUPER .)
    MOD             reduce using rule 148 (SpecialName -> SUPER .)
    PLUS            reduce using rule 148 (SpecialName -> SUPER .)
    MINUS           reduce using rule 148 (SpecialName -> SUPER .)
    OP_SHL          reduce using rule 148 (SpecialName -> SUPER .)
    OP_SHR          reduce using rule 148 (SpecialName -> SUPER .)
    OP_SHRR         reduce using rule 148 (SpecialName -> SUPER .)
    LESS            reduce using rule 148 (SpecialName -> SUPER .)
    MORE            reduce using rule 148 (SpecialName -> SUPER .)
    OP_LE           reduce using rule 148 (SpecialName -> SUPER .)
    OP_GE           reduce using rule 148 (SpecialName -> SUPER .)
    OP_EQ           reduce using rule 148 (SpecialName -> SUPER .)
    OP_NE           reduce using rule 148 (SpecialName -> SUPER .)
    &               reduce using rule 148 (SpecialName -> SUPER .)
    ^               reduce using rule 148 (SpecialName -> SUPER .)
    |               reduce using rule 148 (SpecialName -> SUPER .)
    OP_LAND         reduce using rule 148 (SpecialName -> SUPER .)
    ?               reduce using rule 148 (SpecialName -> SUPER .)
    OP_LOR          reduce using rule 148 (SpecialName -> SUPER .)
    SEMICOLON       reduce using rule 148 (SpecialName -> SUPER .)
    RROUNPAREN      reduce using rule 148 (SpecialName -> SUPER .)
    COLON           reduce using rule 148 (SpecialName -> SUPER .)
    COMMA           reduce using rule 148 (SpecialName -> SUPER .)
    RSQPAREN        reduce using rule 148 (SpecialName -> SUPER .)
    EQUAL           reduce using rule 148 (SpecialName -> SUPER .)
    ASS_MUL         reduce using rule 148 (SpecialName -> SUPER .)
    ASS_ADD         reduce using rule 148 (SpecialName -> SUPER .)
    ASS_SUB         reduce using rule 148 (SpecialName -> SUPER .)


state 159

    (91) Statement -> IterationStatement . Mark_quad
    (93) Mark_quad -> .

    RCURPAREN       reduce using rule 93 (Mark_quad -> .)
    SEMICOLON       reduce using rule 93 (Mark_quad -> .)
    IDENTIFIER      reduce using rule 93 (Mark_quad -> .)
    CASE            reduce using rule 93 (Mark_quad -> .)
    DEFAULT         reduce using rule 93 (Mark_quad -> .)
    BREAK           reduce using rule 93 (Mark_quad -> .)
    CONTINUE        reduce using rule 93 (Mark_quad -> .)
    RETURN          reduce using rule 93 (Mark_quad -> .)
    LCURPAREN       reduce using rule 93 (Mark_quad -> .)
    WHILE           reduce using rule 93 (Mark_quad -> .)
    FOR             reduce using rule 93 (Mark_quad -> .)
    IF              reduce using rule 93 (Mark_quad -> .)
    DO              reduce using rule 93 (Mark_quad -> .)
    BOOLEAN         reduce using rule 93 (Mark_quad -> .)
    CHAR            reduce using rule 93 (Mark_quad -> .)
    BYTE            reduce using rule 93 (Mark_quad -> .)
    SHORT           reduce using rule 93 (Mark_quad -> .)
    INT             reduce using rule 93 (Mark_quad -> .)
    LONG            reduce using rule 93 (Mark_quad -> .)
    FLOAT           reduce using rule 93 (Mark_quad -> .)
    DOUBLE          reduce using rule 93 (Mark_quad -> .)
    VOID            reduce using rule 93 (Mark_quad -> .)
    OP_INC          reduce using rule 93 (Mark_quad -> .)
    OP_DEC          reduce using rule 93 (Mark_quad -> .)
    PLUS            reduce using rule 93 (Mark_quad -> .)
    MINUS           reduce using rule 93 (Mark_quad -> .)
    ~               reduce using rule 93 (Mark_quad -> .)
    NOT             reduce using rule 93 (Mark_quad -> .)
    THIS            reduce using rule 93 (Mark_quad -> .)
    SUPER           reduce using rule 93 (Mark_quad -> .)
    NULL            reduce using rule 93 (Mark_quad -> .)
    LROUNPAREN      reduce using rule 93 (Mark_quad -> .)
    INT_CONST       reduce using rule 93 (Mark_quad -> .)
    FLOAT_CONST     reduce using rule 93 (Mark_quad -> .)
    STRING          reduce using rule 93 (Mark_quad -> .)
    CHAR_CONST      reduce using rule 93 (Mark_quad -> .)
    BOOLEAN_CONST   reduce using rule 93 (Mark_quad -> .)
    NEW             reduce using rule 93 (Mark_quad -> .)
    ELSE            reduce using rule 93 (Mark_quad -> .)

    Mark_quad                      shift and go to state 248

state 160

    (35) TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .

    SEMICOLON       reduce using rule 35 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    CLASS           reduce using rule 35 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    PUBLIC          reduce using rule 35 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    PRIVATE         reduce using rule 35 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    STATIC          reduce using rule 35 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    $end            reduce using rule 35 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    RCURPAREN       reduce using rule 35 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    IDENTIFIER      reduce using rule 35 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    LCURPAREN       reduce using rule 35 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    BOOLEAN         reduce using rule 35 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    CHAR            reduce using rule 35 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    BYTE            reduce using rule 35 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    SHORT           reduce using rule 35 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    INT             reduce using rule 35 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    LONG            reduce using rule 35 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    FLOAT           reduce using rule 35 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    DOUBLE          reduce using rule 35 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    VOID            reduce using rule 35 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)


state 161

    (46) FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .

    RCURPAREN       reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    STATIC          reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    IDENTIFIER      reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    LCURPAREN       reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    PUBLIC          reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    PRIVATE         reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    CLASS           reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    BOOLEAN         reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    CHAR            reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    BYTE            reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    SHORT           reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    INT             reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    LONG            reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    FLOAT           reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    DOUBLE          reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    VOID            reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)


state 162

    (74) ConstructorDeclaration -> ConstructorDeclarator Block .

    SEMICOLON       reduce using rule 74 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    RCURPAREN       reduce using rule 74 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    STATIC          reduce using rule 74 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    IDENTIFIER      reduce using rule 74 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    LCURPAREN       reduce using rule 74 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    PUBLIC          reduce using rule 74 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    PRIVATE         reduce using rule 74 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    CLASS           reduce using rule 74 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    BOOLEAN         reduce using rule 74 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    CHAR            reduce using rule 74 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    BYTE            reduce using rule 74 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    SHORT           reduce using rule 74 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    INT             reduce using rule 74 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    LONG            reduce using rule 74 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    FLOAT           reduce using rule 74 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    DOUBLE          reduce using rule 74 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    VOID            reduce using rule 74 (ConstructorDeclaration -> ConstructorDeclarator Block .)


state 163

    (48) FieldDeclarationOptSemi -> FieldDeclaration SemiColons .
    (19) SemiColons -> SemiColons . SEMICOLON

    RCURPAREN       reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    STATIC          reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    IDENTIFIER      reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    LCURPAREN       reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    PUBLIC          reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    PRIVATE         reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    CLASS           reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    BOOLEAN         reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    CHAR            reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    BYTE            reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    SHORT           reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    INT             reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    LONG            reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    FLOAT           reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    DOUBLE          reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    VOID            reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    SEMICOLON       shift and go to state 36


state 164

    (32) ImportStatement -> IMPORT QualifiedName DOT MULT SemiColons .
    (19) SemiColons -> SemiColons . SEMICOLON

    IMPORT          reduce using rule 32 (ImportStatement -> IMPORT QualifiedName DOT MULT SemiColons .)
    CLASS           reduce using rule 32 (ImportStatement -> IMPORT QualifiedName DOT MULT SemiColons .)
    PUBLIC          reduce using rule 32 (ImportStatement -> IMPORT QualifiedName DOT MULT SemiColons .)
    PRIVATE         reduce using rule 32 (ImportStatement -> IMPORT QualifiedName DOT MULT SemiColons .)
    STATIC          reduce using rule 32 (ImportStatement -> IMPORT QualifiedName DOT MULT SemiColons .)
    SEMICOLON       shift and go to state 36


state 165

    (55) FieldVariableDeclaration -> Modifiers TypeSpecifier VariableDeclarators .
    (58) VariableDeclarators -> VariableDeclarators . COMMA VariableDeclarator

    SEMICOLON       reduce using rule 55 (FieldVariableDeclaration -> Modifiers TypeSpecifier VariableDeclarators .)
    COMMA           shift and go to state 168


state 166

    (62) MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator . MethodBody
    (71) MethodBody -> . Block
    (72) MethodBody -> . SEMICOLON
    (79) Block -> . LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN
    (80) Block -> . LCURPAREN RCURPAREN

    SEMICOLON       shift and go to state 173
    LCURPAREN       shift and go to state 57

    MethodBody                     shift and go to state 249
    Block                          shift and go to state 174

state 167

    (73) ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .

    SEMICOLON       reduce using rule 73 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    RCURPAREN       reduce using rule 73 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    STATIC          reduce using rule 73 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    IDENTIFIER      reduce using rule 73 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    LCURPAREN       reduce using rule 73 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    PUBLIC          reduce using rule 73 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    PRIVATE         reduce using rule 73 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    CLASS           reduce using rule 73 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    BOOLEAN         reduce using rule 73 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    CHAR            reduce using rule 73 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    BYTE            reduce using rule 73 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    SHORT           reduce using rule 73 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    INT             reduce using rule 73 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    LONG            reduce using rule 73 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    FLOAT           reduce using rule 73 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    DOUBLE          reduce using rule 73 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    VOID            reduce using rule 73 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)


state 168

    (58) VariableDeclarators -> VariableDeclarators COMMA . VariableDeclarator
    (59) VariableDeclarator -> . DeclaratorName
    (60) VariableDeclarator -> . DeclaratorName EQUAL VariableInitializer
    (69) DeclaratorName -> . IDENTIFIER
    (70) DeclaratorName -> . DeclaratorName OP_DIM

    IDENTIFIER      shift and go to state 78

    DeclaratorName                 shift and go to state 223
    VariableDeclarator             shift and go to state 250

state 169

    (60) VariableDeclarator -> DeclaratorName EQUAL . VariableInitializer
    (61) VariableInitializer -> . Expression
    (224) Expression -> . AssignmentExpression
    (218) AssignmentExpression -> . ConditionalExpression
    (219) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (216) ConditionalExpression -> . ConditionalOrExpression
    (217) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (173) UnaryExpression -> . OP_INC UnaryExpression
    (174) UnaryExpression -> . OP_DEC UnaryExpression
    (175) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (176) UnaryExpression -> . LogicalUnaryExpression
    (214) ConditionalOrExpression -> . ConditionalAndExpression
    (215) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (181) ArithmeticUnaryOperator -> . PLUS
    (182) ArithmeticUnaryOperator -> . MINUS
    (177) LogicalUnaryExpression -> . PostfixExpression
    (178) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (212) ConditionalAndExpression -> . InclusiveOrExpression
    (213) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (169) PostfixExpression -> . PrimaryExpression
    (170) PostfixExpression -> . RealPostfixExpression
    (179) LogicalUnaryOperator -> . ~
    (180) LogicalUnaryOperator -> . NOT
    (210) InclusiveOrExpression -> . ExclusiveOrExpression
    (211) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (122) PrimaryExpression -> . QualifiedName
    (123) PrimaryExpression -> . NotJustName
    (171) RealPostfixExpression -> . PostfixExpression OP_INC
    (172) RealPostfixExpression -> . PostfixExpression OP_DEC
    (208) ExclusiveOrExpression -> . AndExpression
    (209) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (124) NotJustName -> . SpecialName
    (125) NotJustName -> . NewAllocationExpression
    (126) NotJustName -> . ComplexPrimary
    (206) AndExpression -> . EqualityExpression
    (207) AndExpression -> . AndExpression & EqualityExpression
    (147) SpecialName -> . THIS
    (148) SpecialName -> . SUPER
    (149) SpecialName -> . NULL
    (152) NewAllocationExpression -> . PlainNewAllocationExpression
    (153) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (127) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (128) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (203) EqualityExpression -> . RelationalExpression
    (204) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (205) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (154) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (155) PlainNewAllocationExpression -> . ClassAllocationExpression
    (156) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (157) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (158) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (129) ComplexPrimaryNoParenthesis -> . INT_CONST
    (130) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (131) ComplexPrimaryNoParenthesis -> . STRING
    (132) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (133) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (134) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (135) ComplexPrimaryNoParenthesis -> . FieldAccess
    (136) ComplexPrimaryNoParenthesis -> . MethodCall
    (198) RelationalExpression -> . ShiftExpression
    (199) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (200) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (201) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (202) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (161) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (162) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (163) ArrayAllocationExpression -> . NEW TypeName Dims
    (159) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (160) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (137) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (138) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (139) FieldAccess -> . NotJustName DOT IDENTIFIER
    (140) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (141) FieldAccess -> . QualifiedName DOT THIS
    (142) FieldAccess -> . QualifiedName DOT CLASS
    (143) FieldAccess -> . PrimitiveType DOT CLASS
    (144) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (145) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (194) ShiftExpression -> . AdditiveExpression
    (195) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (196) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (197) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (146) MethodAccess -> . QualifiedName
    (191) AdditiveExpression -> . MultiplicativeExpression
    (192) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (193) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (187) MultiplicativeExpression -> . CastExpression
    (188) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (189) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (190) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (183) CastExpression -> . UnaryExpression

    OP_INC          shift and go to state 106
    OP_DEC          shift and go to state 126
    PLUS            shift and go to state 90
    MINUS           shift and go to state 89
    ~               shift and go to state 141
    NOT             shift and go to state 119
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 91
    SUPER           shift and go to state 158
    NULL            shift and go to state 145
    LROUNPAREN      shift and go to state 118
    INT_CONST       shift and go to state 131
    FLOAT_CONST     shift and go to state 86
    STRING          shift and go to state 151
    CHAR_CONST      shift and go to state 144
    BOOLEAN_CONST   shift and go to state 157
    NEW             shift and go to state 127
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 121
    PrimaryExpression              shift and go to state 129
    VariableInitializer            shift and go to state 251
    PrimitiveType                  shift and go to state 187
    RealPostfixExpression          shift and go to state 96
    ArithmeticUnaryOperator        shift and go to state 97
    AndExpression                  shift and go to state 88
    ArrayAccess                    shift and go to state 108
    CastExpression                 shift and go to state 143
    EqualityExpression             shift and go to state 98
    LogicalUnaryOperator           shift and go to state 153
    ComplexPrimaryNoParenthesis    shift and go to state 100
    MultiplicativeExpression       shift and go to state 101
    ClassAllocationExpression      shift and go to state 122
    MethodCall                     shift and go to state 102
    ConditionalOrExpression        shift and go to state 133
    ShiftExpression                shift and go to state 149
    AssignmentExpression           shift and go to state 104
    NewAllocationExpression        shift and go to state 135
    NotJustName                    shift and go to state 152
    QualifiedName                  shift and go to state 190
    LogicalUnaryExpression         shift and go to state 154
    Expression                     shift and go to state 252
    AdditiveExpression             shift and go to state 137
    ArrayAllocationExpression      shift and go to state 110
    ConditionalExpression          shift and go to state 138
    UnaryExpression                shift and go to state 139
    InclusiveOrExpression          shift and go to state 140
    MethodAccess                   shift and go to state 111
    ExclusiveOrExpression          shift and go to state 113
    ConditionalAndExpression       shift and go to state 92
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    FieldAccess                    shift and go to state 156
    SpecialName                    shift and go to state 120

state 170

    (70) DeclaratorName -> DeclaratorName OP_DIM .

    LROUNPAREN      reduce using rule 70 (DeclaratorName -> DeclaratorName OP_DIM .)
    EQUAL           reduce using rule 70 (DeclaratorName -> DeclaratorName OP_DIM .)
    LSQPAREN        reduce using rule 70 (DeclaratorName -> DeclaratorName OP_DIM .)
    COMMA           reduce using rule 70 (DeclaratorName -> DeclaratorName OP_DIM .)
    SEMICOLON       reduce using rule 70 (DeclaratorName -> DeclaratorName OP_DIM .)
    RROUNPAREN      reduce using rule 70 (DeclaratorName -> DeclaratorName OP_DIM .)


state 171

    (64) MethodDeclarator -> DeclaratorName LROUNPAREN . ParameterList RROUNPAREN
    (65) MethodDeclarator -> DeclaratorName LROUNPAREN . RROUNPAREN
    (66) ParameterList -> . Parameter
    (67) ParameterList -> . ParameterList COMMA Parameter
    (68) Parameter -> . TypeSpecifier DeclaratorName
    (3) TypeSpecifier -> . TypeName
    (4) TypeSpecifier -> . TypeName Dims
    (5) TypeName -> . PrimitiveType
    (6) TypeName -> . QualifiedName
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER

    RROUNPAREN      shift and go to state 253
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43
    IDENTIFIER      shift and go to state 22

    QualifiedName                  shift and go to state 52
    PrimitiveType                  shift and go to state 45
    ParameterList                  shift and go to state 254
    TypeName                       shift and go to state 53
    Parameter                      shift and go to state 178
    TypeSpecifier                  shift and go to state 179

state 172

    (63) MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .

    SEMICOLON       reduce using rule 63 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    RCURPAREN       reduce using rule 63 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    STATIC          reduce using rule 63 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    IDENTIFIER      reduce using rule 63 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    LCURPAREN       reduce using rule 63 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    PUBLIC          reduce using rule 63 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    PRIVATE         reduce using rule 63 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    CLASS           reduce using rule 63 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    BOOLEAN         reduce using rule 63 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    CHAR            reduce using rule 63 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    BYTE            reduce using rule 63 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    SHORT           reduce using rule 63 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    INT             reduce using rule 63 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    LONG            reduce using rule 63 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    FLOAT           reduce using rule 63 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    DOUBLE          reduce using rule 63 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    VOID            reduce using rule 63 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)


state 173

    (72) MethodBody -> SEMICOLON .

    SEMICOLON       reduce using rule 72 (MethodBody -> SEMICOLON .)
    RCURPAREN       reduce using rule 72 (MethodBody -> SEMICOLON .)
    STATIC          reduce using rule 72 (MethodBody -> SEMICOLON .)
    IDENTIFIER      reduce using rule 72 (MethodBody -> SEMICOLON .)
    LCURPAREN       reduce using rule 72 (MethodBody -> SEMICOLON .)
    PUBLIC          reduce using rule 72 (MethodBody -> SEMICOLON .)
    PRIVATE         reduce using rule 72 (MethodBody -> SEMICOLON .)
    CLASS           reduce using rule 72 (MethodBody -> SEMICOLON .)
    BOOLEAN         reduce using rule 72 (MethodBody -> SEMICOLON .)
    CHAR            reduce using rule 72 (MethodBody -> SEMICOLON .)
    BYTE            reduce using rule 72 (MethodBody -> SEMICOLON .)
    SHORT           reduce using rule 72 (MethodBody -> SEMICOLON .)
    INT             reduce using rule 72 (MethodBody -> SEMICOLON .)
    LONG            reduce using rule 72 (MethodBody -> SEMICOLON .)
    FLOAT           reduce using rule 72 (MethodBody -> SEMICOLON .)
    DOUBLE          reduce using rule 72 (MethodBody -> SEMICOLON .)
    VOID            reduce using rule 72 (MethodBody -> SEMICOLON .)


state 174

    (71) MethodBody -> Block .

    SEMICOLON       reduce using rule 71 (MethodBody -> Block .)
    RCURPAREN       reduce using rule 71 (MethodBody -> Block .)
    STATIC          reduce using rule 71 (MethodBody -> Block .)
    IDENTIFIER      reduce using rule 71 (MethodBody -> Block .)
    LCURPAREN       reduce using rule 71 (MethodBody -> Block .)
    PUBLIC          reduce using rule 71 (MethodBody -> Block .)
    PRIVATE         reduce using rule 71 (MethodBody -> Block .)
    CLASS           reduce using rule 71 (MethodBody -> Block .)
    BOOLEAN         reduce using rule 71 (MethodBody -> Block .)
    CHAR            reduce using rule 71 (MethodBody -> Block .)
    BYTE            reduce using rule 71 (MethodBody -> Block .)
    SHORT           reduce using rule 71 (MethodBody -> Block .)
    INT             reduce using rule 71 (MethodBody -> Block .)
    LONG            reduce using rule 71 (MethodBody -> Block .)
    FLOAT           reduce using rule 71 (MethodBody -> Block .)
    DOUBLE          reduce using rule 71 (MethodBody -> Block .)
    VOID            reduce using rule 71 (MethodBody -> Block .)


state 175

    (2) OP_DIM -> LSQPAREN RSQPAREN .

    LSQPAREN        reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    LCURPAREN       reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    DOT             reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    OP_INC          reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    OP_DEC          reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    EQUAL           reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    ASS_MUL         reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    ASS_ADD         reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    ASS_SUB         reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    MULT            reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    DIV             reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    MOD             reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    PLUS            reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    MINUS           reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    OP_SHL          reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    OP_SHR          reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    OP_SHRR         reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    LESS            reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    MORE            reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    OP_LE           reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    OP_GE           reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    OP_EQ           reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    OP_NE           reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    &               reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    ^               reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    |               reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    OP_LAND         reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    ?               reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    OP_LOR          reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    SEMICOLON       reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    RROUNPAREN      reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    COLON           reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    COMMA           reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    RSQPAREN        reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    LROUNPAREN      reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    IDENTIFIER      reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)


state 176

    (168) Dims -> Dims OP_DIM .

    LSQPAREN        reduce using rule 168 (Dims -> Dims OP_DIM .)
    LCURPAREN       reduce using rule 168 (Dims -> Dims OP_DIM .)
    DOT             reduce using rule 168 (Dims -> Dims OP_DIM .)
    OP_INC          reduce using rule 168 (Dims -> Dims OP_DIM .)
    OP_DEC          reduce using rule 168 (Dims -> Dims OP_DIM .)
    EQUAL           reduce using rule 168 (Dims -> Dims OP_DIM .)
    ASS_MUL         reduce using rule 168 (Dims -> Dims OP_DIM .)
    ASS_ADD         reduce using rule 168 (Dims -> Dims OP_DIM .)
    ASS_SUB         reduce using rule 168 (Dims -> Dims OP_DIM .)
    MULT            reduce using rule 168 (Dims -> Dims OP_DIM .)
    DIV             reduce using rule 168 (Dims -> Dims OP_DIM .)
    MOD             reduce using rule 168 (Dims -> Dims OP_DIM .)
    PLUS            reduce using rule 168 (Dims -> Dims OP_DIM .)
    MINUS           reduce using rule 168 (Dims -> Dims OP_DIM .)
    OP_SHL          reduce using rule 168 (Dims -> Dims OP_DIM .)
    OP_SHR          reduce using rule 168 (Dims -> Dims OP_DIM .)
    OP_SHRR         reduce using rule 168 (Dims -> Dims OP_DIM .)
    LESS            reduce using rule 168 (Dims -> Dims OP_DIM .)
    MORE            reduce using rule 168 (Dims -> Dims OP_DIM .)
    OP_LE           reduce using rule 168 (Dims -> Dims OP_DIM .)
    OP_GE           reduce using rule 168 (Dims -> Dims OP_DIM .)
    OP_EQ           reduce using rule 168 (Dims -> Dims OP_DIM .)
    OP_NE           reduce using rule 168 (Dims -> Dims OP_DIM .)
    &               reduce using rule 168 (Dims -> Dims OP_DIM .)
    ^               reduce using rule 168 (Dims -> Dims OP_DIM .)
    |               reduce using rule 168 (Dims -> Dims OP_DIM .)
    OP_LAND         reduce using rule 168 (Dims -> Dims OP_DIM .)
    ?               reduce using rule 168 (Dims -> Dims OP_DIM .)
    OP_LOR          reduce using rule 168 (Dims -> Dims OP_DIM .)
    SEMICOLON       reduce using rule 168 (Dims -> Dims OP_DIM .)
    RROUNPAREN      reduce using rule 168 (Dims -> Dims OP_DIM .)
    COLON           reduce using rule 168 (Dims -> Dims OP_DIM .)
    COMMA           reduce using rule 168 (Dims -> Dims OP_DIM .)
    RSQPAREN        reduce using rule 168 (Dims -> Dims OP_DIM .)
    IDENTIFIER      reduce using rule 168 (Dims -> Dims OP_DIM .)


state 177

    (76) ConstructorDeclarator -> IDENTIFIER LROUNPAREN RROUNPAREN .

    LCURPAREN       reduce using rule 76 (ConstructorDeclarator -> IDENTIFIER LROUNPAREN RROUNPAREN .)


state 178

    (66) ParameterList -> Parameter .

    RROUNPAREN      reduce using rule 66 (ParameterList -> Parameter .)
    COMMA           reduce using rule 66 (ParameterList -> Parameter .)


state 179

    (68) Parameter -> TypeSpecifier . DeclaratorName
    (69) DeclaratorName -> . IDENTIFIER
    (70) DeclaratorName -> . DeclaratorName OP_DIM

    IDENTIFIER      shift and go to state 78

    DeclaratorName                 shift and go to state 255

state 180

    (75) ConstructorDeclarator -> IDENTIFIER LROUNPAREN ParameterList . RROUNPAREN
    (67) ParameterList -> ParameterList . COMMA Parameter

    RROUNPAREN      shift and go to state 256
    COMMA           shift and go to state 257


state 181

    (88) Statement -> ExpressionStatement SEMICOLON . Mark_quad
    (93) Mark_quad -> .

    RCURPAREN       reduce using rule 93 (Mark_quad -> .)
    SEMICOLON       reduce using rule 93 (Mark_quad -> .)
    IDENTIFIER      reduce using rule 93 (Mark_quad -> .)
    CASE            reduce using rule 93 (Mark_quad -> .)
    DEFAULT         reduce using rule 93 (Mark_quad -> .)
    BREAK           reduce using rule 93 (Mark_quad -> .)
    CONTINUE        reduce using rule 93 (Mark_quad -> .)
    RETURN          reduce using rule 93 (Mark_quad -> .)
    LCURPAREN       reduce using rule 93 (Mark_quad -> .)
    WHILE           reduce using rule 93 (Mark_quad -> .)
    FOR             reduce using rule 93 (Mark_quad -> .)
    IF              reduce using rule 93 (Mark_quad -> .)
    DO              reduce using rule 93 (Mark_quad -> .)
    BOOLEAN         reduce using rule 93 (Mark_quad -> .)
    CHAR            reduce using rule 93 (Mark_quad -> .)
    BYTE            reduce using rule 93 (Mark_quad -> .)
    SHORT           reduce using rule 93 (Mark_quad -> .)
    INT             reduce using rule 93 (Mark_quad -> .)
    LONG            reduce using rule 93 (Mark_quad -> .)
    FLOAT           reduce using rule 93 (Mark_quad -> .)
    DOUBLE          reduce using rule 93 (Mark_quad -> .)
    VOID            reduce using rule 93 (Mark_quad -> .)
    OP_INC          reduce using rule 93 (Mark_quad -> .)
    OP_DEC          reduce using rule 93 (Mark_quad -> .)
    PLUS            reduce using rule 93 (Mark_quad -> .)
    MINUS           reduce using rule 93 (Mark_quad -> .)
    ~               reduce using rule 93 (Mark_quad -> .)
    NOT             reduce using rule 93 (Mark_quad -> .)
    THIS            reduce using rule 93 (Mark_quad -> .)
    SUPER           reduce using rule 93 (Mark_quad -> .)
    NULL            reduce using rule 93 (Mark_quad -> .)
    LROUNPAREN      reduce using rule 93 (Mark_quad -> .)
    INT_CONST       reduce using rule 93 (Mark_quad -> .)
    FLOAT_CONST     reduce using rule 93 (Mark_quad -> .)
    STRING          reduce using rule 93 (Mark_quad -> .)
    CHAR_CONST      reduce using rule 93 (Mark_quad -> .)
    BOOLEAN_CONST   reduce using rule 93 (Mark_quad -> .)
    NEW             reduce using rule 93 (Mark_quad -> .)
    ELSE            reduce using rule 93 (Mark_quad -> .)

    Mark_quad                      shift and go to state 258

state 182

    (143) FieldAccess -> PrimitiveType DOT . CLASS

    CLASS           shift and go to state 259


state 183

    (207) AndExpression -> AndExpression & . EqualityExpression
    (203) EqualityExpression -> . RelationalExpression
    (204) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (205) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (198) RelationalExpression -> . ShiftExpression
    (199) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (200) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (201) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (202) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (194) ShiftExpression -> . AdditiveExpression
    (195) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (196) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (197) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (191) AdditiveExpression -> . MultiplicativeExpression
    (192) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (193) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (187) MultiplicativeExpression -> . CastExpression
    (188) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (189) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (190) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (183) CastExpression -> . UnaryExpression
    (173) UnaryExpression -> . OP_INC UnaryExpression
    (174) UnaryExpression -> . OP_DEC UnaryExpression
    (175) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (176) UnaryExpression -> . LogicalUnaryExpression
    (181) ArithmeticUnaryOperator -> . PLUS
    (182) ArithmeticUnaryOperator -> . MINUS
    (177) LogicalUnaryExpression -> . PostfixExpression
    (178) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (169) PostfixExpression -> . PrimaryExpression
    (170) PostfixExpression -> . RealPostfixExpression
    (179) LogicalUnaryOperator -> . ~
    (180) LogicalUnaryOperator -> . NOT
    (122) PrimaryExpression -> . QualifiedName
    (123) PrimaryExpression -> . NotJustName
    (171) RealPostfixExpression -> . PostfixExpression OP_INC
    (172) RealPostfixExpression -> . PostfixExpression OP_DEC
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (124) NotJustName -> . SpecialName
    (125) NotJustName -> . NewAllocationExpression
    (126) NotJustName -> . ComplexPrimary
    (147) SpecialName -> . THIS
    (148) SpecialName -> . SUPER
    (149) SpecialName -> . NULL
    (152) NewAllocationExpression -> . PlainNewAllocationExpression
    (153) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (127) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (128) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (154) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (155) PlainNewAllocationExpression -> . ClassAllocationExpression
    (156) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (157) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (158) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (129) ComplexPrimaryNoParenthesis -> . INT_CONST
    (130) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (131) ComplexPrimaryNoParenthesis -> . STRING
    (132) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (133) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (134) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (135) ComplexPrimaryNoParenthesis -> . FieldAccess
    (136) ComplexPrimaryNoParenthesis -> . MethodCall
    (161) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (162) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (163) ArrayAllocationExpression -> . NEW TypeName Dims
    (159) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (160) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (137) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (138) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (139) FieldAccess -> . NotJustName DOT IDENTIFIER
    (140) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (141) FieldAccess -> . QualifiedName DOT THIS
    (142) FieldAccess -> . QualifiedName DOT CLASS
    (143) FieldAccess -> . PrimitiveType DOT CLASS
    (144) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (145) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (146) MethodAccess -> . QualifiedName

    OP_INC          shift and go to state 106
    OP_DEC          shift and go to state 126
    PLUS            shift and go to state 90
    MINUS           shift and go to state 89
    ~               shift and go to state 141
    NOT             shift and go to state 119
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 91
    SUPER           shift and go to state 158
    NULL            shift and go to state 145
    LROUNPAREN      shift and go to state 118
    INT_CONST       shift and go to state 131
    FLOAT_CONST     shift and go to state 86
    STRING          shift and go to state 151
    CHAR_CONST      shift and go to state 144
    BOOLEAN_CONST   shift and go to state 157
    NEW             shift and go to state 127
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43

    ComplexPrimary                 shift and go to state 121
    PostfixExpression              shift and go to state 112
    CastExpression                 shift and go to state 143
    PrimitiveType                  shift and go to state 187
    RealPostfixExpression          shift and go to state 96
    ArithmeticUnaryOperator        shift and go to state 97
    ArrayAccess                    shift and go to state 108
    PrimaryExpression              shift and go to state 129
    EqualityExpression             shift and go to state 260
    LogicalUnaryOperator           shift and go to state 153
    ComplexPrimaryNoParenthesis    shift and go to state 100
    MultiplicativeExpression       shift and go to state 101
    ClassAllocationExpression      shift and go to state 122
    MethodCall                     shift and go to state 102
    ShiftExpression                shift and go to state 149
    NewAllocationExpression        shift and go to state 135
    NotJustName                    shift and go to state 152
    QualifiedName                  shift and go to state 190
    LogicalUnaryExpression         shift and go to state 154
    AdditiveExpression             shift and go to state 137
    ArrayAllocationExpression      shift and go to state 110
    UnaryExpression                shift and go to state 193
    FieldAccess                    shift and go to state 156
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    MethodAccess                   shift and go to state 111
    SpecialName                    shift and go to state 120

state 184

    (213) ConditionalAndExpression -> ConditionalAndExpression OP_LAND . InclusiveOrExpression
    (210) InclusiveOrExpression -> . ExclusiveOrExpression
    (211) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (208) ExclusiveOrExpression -> . AndExpression
    (209) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (206) AndExpression -> . EqualityExpression
    (207) AndExpression -> . AndExpression & EqualityExpression
    (203) EqualityExpression -> . RelationalExpression
    (204) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (205) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (198) RelationalExpression -> . ShiftExpression
    (199) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (200) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (201) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (202) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (194) ShiftExpression -> . AdditiveExpression
    (195) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (196) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (197) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (191) AdditiveExpression -> . MultiplicativeExpression
    (192) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (193) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (187) MultiplicativeExpression -> . CastExpression
    (188) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (189) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (190) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (183) CastExpression -> . UnaryExpression
    (173) UnaryExpression -> . OP_INC UnaryExpression
    (174) UnaryExpression -> . OP_DEC UnaryExpression
    (175) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (176) UnaryExpression -> . LogicalUnaryExpression
    (181) ArithmeticUnaryOperator -> . PLUS
    (182) ArithmeticUnaryOperator -> . MINUS
    (177) LogicalUnaryExpression -> . PostfixExpression
    (178) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (169) PostfixExpression -> . PrimaryExpression
    (170) PostfixExpression -> . RealPostfixExpression
    (179) LogicalUnaryOperator -> . ~
    (180) LogicalUnaryOperator -> . NOT
    (122) PrimaryExpression -> . QualifiedName
    (123) PrimaryExpression -> . NotJustName
    (171) RealPostfixExpression -> . PostfixExpression OP_INC
    (172) RealPostfixExpression -> . PostfixExpression OP_DEC
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (124) NotJustName -> . SpecialName
    (125) NotJustName -> . NewAllocationExpression
    (126) NotJustName -> . ComplexPrimary
    (147) SpecialName -> . THIS
    (148) SpecialName -> . SUPER
    (149) SpecialName -> . NULL
    (152) NewAllocationExpression -> . PlainNewAllocationExpression
    (153) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (127) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (128) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (154) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (155) PlainNewAllocationExpression -> . ClassAllocationExpression
    (156) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (157) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (158) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (129) ComplexPrimaryNoParenthesis -> . INT_CONST
    (130) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (131) ComplexPrimaryNoParenthesis -> . STRING
    (132) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (133) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (134) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (135) ComplexPrimaryNoParenthesis -> . FieldAccess
    (136) ComplexPrimaryNoParenthesis -> . MethodCall
    (161) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (162) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (163) ArrayAllocationExpression -> . NEW TypeName Dims
    (159) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (160) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (137) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (138) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (139) FieldAccess -> . NotJustName DOT IDENTIFIER
    (140) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (141) FieldAccess -> . QualifiedName DOT THIS
    (142) FieldAccess -> . QualifiedName DOT CLASS
    (143) FieldAccess -> . PrimitiveType DOT CLASS
    (144) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (145) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (146) MethodAccess -> . QualifiedName

    OP_INC          shift and go to state 106
    OP_DEC          shift and go to state 126
    PLUS            shift and go to state 90
    MINUS           shift and go to state 89
    ~               shift and go to state 141
    NOT             shift and go to state 119
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 91
    SUPER           shift and go to state 158
    NULL            shift and go to state 145
    LROUNPAREN      shift and go to state 118
    INT_CONST       shift and go to state 131
    FLOAT_CONST     shift and go to state 86
    STRING          shift and go to state 151
    CHAR_CONST      shift and go to state 144
    BOOLEAN_CONST   shift and go to state 157
    NEW             shift and go to state 127
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43

    ComplexPrimary                 shift and go to state 121
    PostfixExpression              shift and go to state 112
    CastExpression                 shift and go to state 143
    PrimitiveType                  shift and go to state 187
    RealPostfixExpression          shift and go to state 96
    ArithmeticUnaryOperator        shift and go to state 97
    AndExpression                  shift and go to state 88
    ArrayAccess                    shift and go to state 108
    PrimaryExpression              shift and go to state 129
    EqualityExpression             shift and go to state 98
    LogicalUnaryOperator           shift and go to state 153
    ComplexPrimaryNoParenthesis    shift and go to state 100
    MultiplicativeExpression       shift and go to state 101
    ClassAllocationExpression      shift and go to state 122
    MethodCall                     shift and go to state 102
    ShiftExpression                shift and go to state 149
    NewAllocationExpression        shift and go to state 135
    NotJustName                    shift and go to state 152
    QualifiedName                  shift and go to state 190
    LogicalUnaryExpression         shift and go to state 154
    AdditiveExpression             shift and go to state 137
    ArrayAllocationExpression      shift and go to state 110
    UnaryExpression                shift and go to state 193
    InclusiveOrExpression          shift and go to state 261
    FieldAccess                    shift and go to state 156
    ExclusiveOrExpression          shift and go to state 113
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    MethodAccess                   shift and go to state 111
    SpecialName                    shift and go to state 120

state 185

    (86) Statement -> EmptyStatement Mark_quad .

    RCURPAREN       reduce using rule 86 (Statement -> EmptyStatement Mark_quad .)
    SEMICOLON       reduce using rule 86 (Statement -> EmptyStatement Mark_quad .)
    IDENTIFIER      reduce using rule 86 (Statement -> EmptyStatement Mark_quad .)
    CASE            reduce using rule 86 (Statement -> EmptyStatement Mark_quad .)
    DEFAULT         reduce using rule 86 (Statement -> EmptyStatement Mark_quad .)
    BREAK           reduce using rule 86 (Statement -> EmptyStatement Mark_quad .)
    CONTINUE        reduce using rule 86 (Statement -> EmptyStatement Mark_quad .)
    RETURN          reduce using rule 86 (Statement -> EmptyStatement Mark_quad .)
    LCURPAREN       reduce using rule 86 (Statement -> EmptyStatement Mark_quad .)
    WHILE           reduce using rule 86 (Statement -> EmptyStatement Mark_quad .)
    FOR             reduce using rule 86 (Statement -> EmptyStatement Mark_quad .)
    IF              reduce using rule 86 (Statement -> EmptyStatement Mark_quad .)
    DO              reduce using rule 86 (Statement -> EmptyStatement Mark_quad .)
    BOOLEAN         reduce using rule 86 (Statement -> EmptyStatement Mark_quad .)
    CHAR            reduce using rule 86 (Statement -> EmptyStatement Mark_quad .)
    BYTE            reduce using rule 86 (Statement -> EmptyStatement Mark_quad .)
    SHORT           reduce using rule 86 (Statement -> EmptyStatement Mark_quad .)
    INT             reduce using rule 86 (Statement -> EmptyStatement Mark_quad .)
    LONG            reduce using rule 86 (Statement -> EmptyStatement Mark_quad .)
    FLOAT           reduce using rule 86 (Statement -> EmptyStatement Mark_quad .)
    DOUBLE          reduce using rule 86 (Statement -> EmptyStatement Mark_quad .)
    VOID            reduce using rule 86 (Statement -> EmptyStatement Mark_quad .)
    OP_INC          reduce using rule 86 (Statement -> EmptyStatement Mark_quad .)
    OP_DEC          reduce using rule 86 (Statement -> EmptyStatement Mark_quad .)
    PLUS            reduce using rule 86 (Statement -> EmptyStatement Mark_quad .)
    MINUS           reduce using rule 86 (Statement -> EmptyStatement Mark_quad .)
    ~               reduce using rule 86 (Statement -> EmptyStatement Mark_quad .)
    NOT             reduce using rule 86 (Statement -> EmptyStatement Mark_quad .)
    THIS            reduce using rule 86 (Statement -> EmptyStatement Mark_quad .)
    SUPER           reduce using rule 86 (Statement -> EmptyStatement Mark_quad .)
    NULL            reduce using rule 86 (Statement -> EmptyStatement Mark_quad .)
    LROUNPAREN      reduce using rule 86 (Statement -> EmptyStatement Mark_quad .)
    INT_CONST       reduce using rule 86 (Statement -> EmptyStatement Mark_quad .)
    FLOAT_CONST     reduce using rule 86 (Statement -> EmptyStatement Mark_quad .)
    STRING          reduce using rule 86 (Statement -> EmptyStatement Mark_quad .)
    CHAR_CONST      reduce using rule 86 (Statement -> EmptyStatement Mark_quad .)
    BOOLEAN_CONST   reduce using rule 86 (Statement -> EmptyStatement Mark_quad .)
    NEW             reduce using rule 86 (Statement -> EmptyStatement Mark_quad .)
    ELSE            reduce using rule 86 (Statement -> EmptyStatement Mark_quad .)


state 186

    (87) Statement -> LabelStatement Mark_quad .

    RCURPAREN       reduce using rule 87 (Statement -> LabelStatement Mark_quad .)
    SEMICOLON       reduce using rule 87 (Statement -> LabelStatement Mark_quad .)
    IDENTIFIER      reduce using rule 87 (Statement -> LabelStatement Mark_quad .)
    CASE            reduce using rule 87 (Statement -> LabelStatement Mark_quad .)
    DEFAULT         reduce using rule 87 (Statement -> LabelStatement Mark_quad .)
    BREAK           reduce using rule 87 (Statement -> LabelStatement Mark_quad .)
    CONTINUE        reduce using rule 87 (Statement -> LabelStatement Mark_quad .)
    RETURN          reduce using rule 87 (Statement -> LabelStatement Mark_quad .)
    LCURPAREN       reduce using rule 87 (Statement -> LabelStatement Mark_quad .)
    WHILE           reduce using rule 87 (Statement -> LabelStatement Mark_quad .)
    FOR             reduce using rule 87 (Statement -> LabelStatement Mark_quad .)
    IF              reduce using rule 87 (Statement -> LabelStatement Mark_quad .)
    DO              reduce using rule 87 (Statement -> LabelStatement Mark_quad .)
    BOOLEAN         reduce using rule 87 (Statement -> LabelStatement Mark_quad .)
    CHAR            reduce using rule 87 (Statement -> LabelStatement Mark_quad .)
    BYTE            reduce using rule 87 (Statement -> LabelStatement Mark_quad .)
    SHORT           reduce using rule 87 (Statement -> LabelStatement Mark_quad .)
    INT             reduce using rule 87 (Statement -> LabelStatement Mark_quad .)
    LONG            reduce using rule 87 (Statement -> LabelStatement Mark_quad .)
    FLOAT           reduce using rule 87 (Statement -> LabelStatement Mark_quad .)
    DOUBLE          reduce using rule 87 (Statement -> LabelStatement Mark_quad .)
    VOID            reduce using rule 87 (Statement -> LabelStatement Mark_quad .)
    OP_INC          reduce using rule 87 (Statement -> LabelStatement Mark_quad .)
    OP_DEC          reduce using rule 87 (Statement -> LabelStatement Mark_quad .)
    PLUS            reduce using rule 87 (Statement -> LabelStatement Mark_quad .)
    MINUS           reduce using rule 87 (Statement -> LabelStatement Mark_quad .)
    ~               reduce using rule 87 (Statement -> LabelStatement Mark_quad .)
    NOT             reduce using rule 87 (Statement -> LabelStatement Mark_quad .)
    THIS            reduce using rule 87 (Statement -> LabelStatement Mark_quad .)
    SUPER           reduce using rule 87 (Statement -> LabelStatement Mark_quad .)
    NULL            reduce using rule 87 (Statement -> LabelStatement Mark_quad .)
    LROUNPAREN      reduce using rule 87 (Statement -> LabelStatement Mark_quad .)
    INT_CONST       reduce using rule 87 (Statement -> LabelStatement Mark_quad .)
    FLOAT_CONST     reduce using rule 87 (Statement -> LabelStatement Mark_quad .)
    STRING          reduce using rule 87 (Statement -> LabelStatement Mark_quad .)
    CHAR_CONST      reduce using rule 87 (Statement -> LabelStatement Mark_quad .)
    BOOLEAN_CONST   reduce using rule 87 (Statement -> LabelStatement Mark_quad .)
    NEW             reduce using rule 87 (Statement -> LabelStatement Mark_quad .)
    ELSE            reduce using rule 87 (Statement -> LabelStatement Mark_quad .)


state 187

    (143) FieldAccess -> PrimitiveType . DOT CLASS

    DOT             shift and go to state 182


state 188

    (121) JumpStatement -> RETURN SEMICOLON .

    RCURPAREN       reduce using rule 121 (JumpStatement -> RETURN SEMICOLON .)
    SEMICOLON       reduce using rule 121 (JumpStatement -> RETURN SEMICOLON .)
    IDENTIFIER      reduce using rule 121 (JumpStatement -> RETURN SEMICOLON .)
    CASE            reduce using rule 121 (JumpStatement -> RETURN SEMICOLON .)
    DEFAULT         reduce using rule 121 (JumpStatement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 121 (JumpStatement -> RETURN SEMICOLON .)
    CONTINUE        reduce using rule 121 (JumpStatement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 121 (JumpStatement -> RETURN SEMICOLON .)
    LCURPAREN       reduce using rule 121 (JumpStatement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 121 (JumpStatement -> RETURN SEMICOLON .)
    FOR             reduce using rule 121 (JumpStatement -> RETURN SEMICOLON .)
    IF              reduce using rule 121 (JumpStatement -> RETURN SEMICOLON .)
    DO              reduce using rule 121 (JumpStatement -> RETURN SEMICOLON .)
    BOOLEAN         reduce using rule 121 (JumpStatement -> RETURN SEMICOLON .)
    CHAR            reduce using rule 121 (JumpStatement -> RETURN SEMICOLON .)
    BYTE            reduce using rule 121 (JumpStatement -> RETURN SEMICOLON .)
    SHORT           reduce using rule 121 (JumpStatement -> RETURN SEMICOLON .)
    INT             reduce using rule 121 (JumpStatement -> RETURN SEMICOLON .)
    LONG            reduce using rule 121 (JumpStatement -> RETURN SEMICOLON .)
    FLOAT           reduce using rule 121 (JumpStatement -> RETURN SEMICOLON .)
    DOUBLE          reduce using rule 121 (JumpStatement -> RETURN SEMICOLON .)
    VOID            reduce using rule 121 (JumpStatement -> RETURN SEMICOLON .)
    OP_INC          reduce using rule 121 (JumpStatement -> RETURN SEMICOLON .)
    OP_DEC          reduce using rule 121 (JumpStatement -> RETURN SEMICOLON .)
    PLUS            reduce using rule 121 (JumpStatement -> RETURN SEMICOLON .)
    MINUS           reduce using rule 121 (JumpStatement -> RETURN SEMICOLON .)
    ~               reduce using rule 121 (JumpStatement -> RETURN SEMICOLON .)
    NOT             reduce using rule 121 (JumpStatement -> RETURN SEMICOLON .)
    THIS            reduce using rule 121 (JumpStatement -> RETURN SEMICOLON .)
    SUPER           reduce using rule 121 (JumpStatement -> RETURN SEMICOLON .)
    NULL            reduce using rule 121 (JumpStatement -> RETURN SEMICOLON .)
    LROUNPAREN      reduce using rule 121 (JumpStatement -> RETURN SEMICOLON .)
    INT_CONST       reduce using rule 121 (JumpStatement -> RETURN SEMICOLON .)
    FLOAT_CONST     reduce using rule 121 (JumpStatement -> RETURN SEMICOLON .)
    STRING          reduce using rule 121 (JumpStatement -> RETURN SEMICOLON .)
    CHAR_CONST      reduce using rule 121 (JumpStatement -> RETURN SEMICOLON .)
    BOOLEAN_CONST   reduce using rule 121 (JumpStatement -> RETURN SEMICOLON .)
    NEW             reduce using rule 121 (JumpStatement -> RETURN SEMICOLON .)
    ELSE            reduce using rule 121 (JumpStatement -> RETURN SEMICOLON .)


state 189

    (120) JumpStatement -> RETURN Expression . SEMICOLON

    SEMICOLON       shift and go to state 262


state 190

    (122) PrimaryExpression -> QualifiedName .
    (34) QualifiedName -> QualifiedName . DOT IDENTIFIER
    (153) NewAllocationExpression -> QualifiedName . DOT PlainNewAllocationExpression
    (137) ArrayAccess -> QualifiedName . LSQPAREN Expression RSQPAREN
    (141) FieldAccess -> QualifiedName . DOT THIS
    (142) FieldAccess -> QualifiedName . DOT CLASS
    (146) MethodAccess -> QualifiedName .

    OP_INC          reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    OP_DEC          reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    MULT            reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    DIV             reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    MOD             reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    PLUS            reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    MINUS           reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    OP_SHL          reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    OP_SHR          reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    OP_SHRR         reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    LESS            reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    MORE            reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    OP_LE           reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    OP_GE           reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    OP_EQ           reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    OP_NE           reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    &               reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    ^               reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    |               reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    OP_LAND         reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    ?               reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    OP_LOR          reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    SEMICOLON       reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    RROUNPAREN      reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    COLON           reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    COMMA           reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    RSQPAREN        reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    EQUAL           reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    ASS_MUL         reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    ASS_ADD         reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    ASS_SUB         reduce using rule 122 (PrimaryExpression -> QualifiedName .)
    DOT             shift and go to state 239
    LSQPAREN        shift and go to state 238
    LROUNPAREN      reduce using rule 146 (MethodAccess -> QualifiedName .)


state 191

    (140) FieldAccess -> RealPostfixExpression DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 263


state 192

    (175) UnaryExpression -> ArithmeticUnaryOperator CastExpression .

    EQUAL           reduce using rule 175 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    ASS_MUL         reduce using rule 175 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    ASS_ADD         reduce using rule 175 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    ASS_SUB         reduce using rule 175 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    MULT            reduce using rule 175 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    DIV             reduce using rule 175 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    MOD             reduce using rule 175 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    PLUS            reduce using rule 175 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    MINUS           reduce using rule 175 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OP_SHL          reduce using rule 175 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OP_SHR          reduce using rule 175 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OP_SHRR         reduce using rule 175 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    LESS            reduce using rule 175 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    MORE            reduce using rule 175 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OP_LE           reduce using rule 175 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OP_GE           reduce using rule 175 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OP_EQ           reduce using rule 175 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OP_NE           reduce using rule 175 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    &               reduce using rule 175 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    ^               reduce using rule 175 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    |               reduce using rule 175 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OP_LAND         reduce using rule 175 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    ?               reduce using rule 175 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OP_LOR          reduce using rule 175 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    COMMA           reduce using rule 175 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    SEMICOLON       reduce using rule 175 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    RROUNPAREN      reduce using rule 175 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    COLON           reduce using rule 175 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    RSQPAREN        reduce using rule 175 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)


state 193

    (183) CastExpression -> UnaryExpression .

    MULT            reduce using rule 183 (CastExpression -> UnaryExpression .)
    DIV             reduce using rule 183 (CastExpression -> UnaryExpression .)
    MOD             reduce using rule 183 (CastExpression -> UnaryExpression .)
    PLUS            reduce using rule 183 (CastExpression -> UnaryExpression .)
    MINUS           reduce using rule 183 (CastExpression -> UnaryExpression .)
    OP_SHL          reduce using rule 183 (CastExpression -> UnaryExpression .)
    OP_SHR          reduce using rule 183 (CastExpression -> UnaryExpression .)
    OP_SHRR         reduce using rule 183 (CastExpression -> UnaryExpression .)
    LESS            reduce using rule 183 (CastExpression -> UnaryExpression .)
    MORE            reduce using rule 183 (CastExpression -> UnaryExpression .)
    OP_LE           reduce using rule 183 (CastExpression -> UnaryExpression .)
    OP_GE           reduce using rule 183 (CastExpression -> UnaryExpression .)
    OP_EQ           reduce using rule 183 (CastExpression -> UnaryExpression .)
    OP_NE           reduce using rule 183 (CastExpression -> UnaryExpression .)
    &               reduce using rule 183 (CastExpression -> UnaryExpression .)
    ^               reduce using rule 183 (CastExpression -> UnaryExpression .)
    |               reduce using rule 183 (CastExpression -> UnaryExpression .)
    OP_LAND         reduce using rule 183 (CastExpression -> UnaryExpression .)
    ?               reduce using rule 183 (CastExpression -> UnaryExpression .)
    OP_LOR          reduce using rule 183 (CastExpression -> UnaryExpression .)
    SEMICOLON       reduce using rule 183 (CastExpression -> UnaryExpression .)
    RROUNPAREN      reduce using rule 183 (CastExpression -> UnaryExpression .)
    COLON           reduce using rule 183 (CastExpression -> UnaryExpression .)
    COMMA           reduce using rule 183 (CastExpression -> UnaryExpression .)
    RSQPAREN        reduce using rule 183 (CastExpression -> UnaryExpression .)
    EQUAL           reduce using rule 183 (CastExpression -> UnaryExpression .)
    ASS_MUL         reduce using rule 183 (CastExpression -> UnaryExpression .)
    ASS_ADD         reduce using rule 183 (CastExpression -> UnaryExpression .)
    ASS_SUB         reduce using rule 183 (CastExpression -> UnaryExpression .)


state 194

    (205) EqualityExpression -> EqualityExpression OP_NE . RelationalExpression
    (198) RelationalExpression -> . ShiftExpression
    (199) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (200) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (201) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (202) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (194) ShiftExpression -> . AdditiveExpression
    (195) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (196) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (197) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (191) AdditiveExpression -> . MultiplicativeExpression
    (192) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (193) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (187) MultiplicativeExpression -> . CastExpression
    (188) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (189) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (190) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (183) CastExpression -> . UnaryExpression
    (173) UnaryExpression -> . OP_INC UnaryExpression
    (174) UnaryExpression -> . OP_DEC UnaryExpression
    (175) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (176) UnaryExpression -> . LogicalUnaryExpression
    (181) ArithmeticUnaryOperator -> . PLUS
    (182) ArithmeticUnaryOperator -> . MINUS
    (177) LogicalUnaryExpression -> . PostfixExpression
    (178) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (169) PostfixExpression -> . PrimaryExpression
    (170) PostfixExpression -> . RealPostfixExpression
    (179) LogicalUnaryOperator -> . ~
    (180) LogicalUnaryOperator -> . NOT
    (122) PrimaryExpression -> . QualifiedName
    (123) PrimaryExpression -> . NotJustName
    (171) RealPostfixExpression -> . PostfixExpression OP_INC
    (172) RealPostfixExpression -> . PostfixExpression OP_DEC
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (124) NotJustName -> . SpecialName
    (125) NotJustName -> . NewAllocationExpression
    (126) NotJustName -> . ComplexPrimary
    (147) SpecialName -> . THIS
    (148) SpecialName -> . SUPER
    (149) SpecialName -> . NULL
    (152) NewAllocationExpression -> . PlainNewAllocationExpression
    (153) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (127) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (128) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (154) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (155) PlainNewAllocationExpression -> . ClassAllocationExpression
    (156) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (157) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (158) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (129) ComplexPrimaryNoParenthesis -> . INT_CONST
    (130) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (131) ComplexPrimaryNoParenthesis -> . STRING
    (132) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (133) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (134) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (135) ComplexPrimaryNoParenthesis -> . FieldAccess
    (136) ComplexPrimaryNoParenthesis -> . MethodCall
    (161) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (162) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (163) ArrayAllocationExpression -> . NEW TypeName Dims
    (159) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (160) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (137) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (138) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (139) FieldAccess -> . NotJustName DOT IDENTIFIER
    (140) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (141) FieldAccess -> . QualifiedName DOT THIS
    (142) FieldAccess -> . QualifiedName DOT CLASS
    (143) FieldAccess -> . PrimitiveType DOT CLASS
    (144) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (145) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (146) MethodAccess -> . QualifiedName

    OP_INC          shift and go to state 106
    OP_DEC          shift and go to state 126
    PLUS            shift and go to state 90
    MINUS           shift and go to state 89
    ~               shift and go to state 141
    NOT             shift and go to state 119
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 91
    SUPER           shift and go to state 158
    NULL            shift and go to state 145
    LROUNPAREN      shift and go to state 118
    INT_CONST       shift and go to state 131
    FLOAT_CONST     shift and go to state 86
    STRING          shift and go to state 151
    CHAR_CONST      shift and go to state 144
    BOOLEAN_CONST   shift and go to state 157
    NEW             shift and go to state 127
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 121
    CastExpression                 shift and go to state 143
    PrimitiveType                  shift and go to state 187
    RealPostfixExpression          shift and go to state 96
    ArithmeticUnaryOperator        shift and go to state 97
    ArrayAccess                    shift and go to state 108
    PrimaryExpression              shift and go to state 129
    LogicalUnaryOperator           shift and go to state 153
    ComplexPrimaryNoParenthesis    shift and go to state 100
    MultiplicativeExpression       shift and go to state 101
    ClassAllocationExpression      shift and go to state 122
    MethodCall                     shift and go to state 102
    ShiftExpression                shift and go to state 149
    NewAllocationExpression        shift and go to state 135
    NotJustName                    shift and go to state 152
    QualifiedName                  shift and go to state 190
    LogicalUnaryExpression         shift and go to state 154
    AdditiveExpression             shift and go to state 137
    ArrayAllocationExpression      shift and go to state 110
    UnaryExpression                shift and go to state 193
    FieldAccess                    shift and go to state 156
    RelationalExpression           shift and go to state 264
    PlainNewAllocationExpression   shift and go to state 115
    MethodAccess                   shift and go to state 111
    SpecialName                    shift and go to state 120

state 195

    (204) EqualityExpression -> EqualityExpression OP_EQ . RelationalExpression
    (198) RelationalExpression -> . ShiftExpression
    (199) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (200) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (201) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (202) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (194) ShiftExpression -> . AdditiveExpression
    (195) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (196) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (197) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (191) AdditiveExpression -> . MultiplicativeExpression
    (192) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (193) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (187) MultiplicativeExpression -> . CastExpression
    (188) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (189) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (190) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (183) CastExpression -> . UnaryExpression
    (173) UnaryExpression -> . OP_INC UnaryExpression
    (174) UnaryExpression -> . OP_DEC UnaryExpression
    (175) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (176) UnaryExpression -> . LogicalUnaryExpression
    (181) ArithmeticUnaryOperator -> . PLUS
    (182) ArithmeticUnaryOperator -> . MINUS
    (177) LogicalUnaryExpression -> . PostfixExpression
    (178) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (169) PostfixExpression -> . PrimaryExpression
    (170) PostfixExpression -> . RealPostfixExpression
    (179) LogicalUnaryOperator -> . ~
    (180) LogicalUnaryOperator -> . NOT
    (122) PrimaryExpression -> . QualifiedName
    (123) PrimaryExpression -> . NotJustName
    (171) RealPostfixExpression -> . PostfixExpression OP_INC
    (172) RealPostfixExpression -> . PostfixExpression OP_DEC
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (124) NotJustName -> . SpecialName
    (125) NotJustName -> . NewAllocationExpression
    (126) NotJustName -> . ComplexPrimary
    (147) SpecialName -> . THIS
    (148) SpecialName -> . SUPER
    (149) SpecialName -> . NULL
    (152) NewAllocationExpression -> . PlainNewAllocationExpression
    (153) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (127) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (128) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (154) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (155) PlainNewAllocationExpression -> . ClassAllocationExpression
    (156) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (157) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (158) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (129) ComplexPrimaryNoParenthesis -> . INT_CONST
    (130) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (131) ComplexPrimaryNoParenthesis -> . STRING
    (132) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (133) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (134) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (135) ComplexPrimaryNoParenthesis -> . FieldAccess
    (136) ComplexPrimaryNoParenthesis -> . MethodCall
    (161) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (162) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (163) ArrayAllocationExpression -> . NEW TypeName Dims
    (159) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (160) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (137) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (138) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (139) FieldAccess -> . NotJustName DOT IDENTIFIER
    (140) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (141) FieldAccess -> . QualifiedName DOT THIS
    (142) FieldAccess -> . QualifiedName DOT CLASS
    (143) FieldAccess -> . PrimitiveType DOT CLASS
    (144) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (145) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (146) MethodAccess -> . QualifiedName

    OP_INC          shift and go to state 106
    OP_DEC          shift and go to state 126
    PLUS            shift and go to state 90
    MINUS           shift and go to state 89
    ~               shift and go to state 141
    NOT             shift and go to state 119
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 91
    SUPER           shift and go to state 158
    NULL            shift and go to state 145
    LROUNPAREN      shift and go to state 118
    INT_CONST       shift and go to state 131
    FLOAT_CONST     shift and go to state 86
    STRING          shift and go to state 151
    CHAR_CONST      shift and go to state 144
    BOOLEAN_CONST   shift and go to state 157
    NEW             shift and go to state 127
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 121
    CastExpression                 shift and go to state 143
    PrimitiveType                  shift and go to state 187
    RealPostfixExpression          shift and go to state 96
    ArithmeticUnaryOperator        shift and go to state 97
    ArrayAccess                    shift and go to state 108
    PrimaryExpression              shift and go to state 129
    LogicalUnaryOperator           shift and go to state 153
    ComplexPrimaryNoParenthesis    shift and go to state 100
    MultiplicativeExpression       shift and go to state 101
    ClassAllocationExpression      shift and go to state 122
    MethodCall                     shift and go to state 102
    ShiftExpression                shift and go to state 149
    NewAllocationExpression        shift and go to state 135
    NotJustName                    shift and go to state 152
    QualifiedName                  shift and go to state 190
    LogicalUnaryExpression         shift and go to state 154
    AdditiveExpression             shift and go to state 137
    ArrayAllocationExpression      shift and go to state 110
    UnaryExpression                shift and go to state 193
    FieldAccess                    shift and go to state 156
    RelationalExpression           shift and go to state 265
    PlainNewAllocationExpression   shift and go to state 115
    MethodAccess                   shift and go to state 111
    SpecialName                    shift and go to state 120

state 196

    (118) JumpStatement -> BREAK SEMICOLON .

    RCURPAREN       reduce using rule 118 (JumpStatement -> BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 118 (JumpStatement -> BREAK SEMICOLON .)
    IDENTIFIER      reduce using rule 118 (JumpStatement -> BREAK SEMICOLON .)
    CASE            reduce using rule 118 (JumpStatement -> BREAK SEMICOLON .)
    DEFAULT         reduce using rule 118 (JumpStatement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 118 (JumpStatement -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 118 (JumpStatement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 118 (JumpStatement -> BREAK SEMICOLON .)
    LCURPAREN       reduce using rule 118 (JumpStatement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 118 (JumpStatement -> BREAK SEMICOLON .)
    FOR             reduce using rule 118 (JumpStatement -> BREAK SEMICOLON .)
    IF              reduce using rule 118 (JumpStatement -> BREAK SEMICOLON .)
    DO              reduce using rule 118 (JumpStatement -> BREAK SEMICOLON .)
    BOOLEAN         reduce using rule 118 (JumpStatement -> BREAK SEMICOLON .)
    CHAR            reduce using rule 118 (JumpStatement -> BREAK SEMICOLON .)
    BYTE            reduce using rule 118 (JumpStatement -> BREAK SEMICOLON .)
    SHORT           reduce using rule 118 (JumpStatement -> BREAK SEMICOLON .)
    INT             reduce using rule 118 (JumpStatement -> BREAK SEMICOLON .)
    LONG            reduce using rule 118 (JumpStatement -> BREAK SEMICOLON .)
    FLOAT           reduce using rule 118 (JumpStatement -> BREAK SEMICOLON .)
    DOUBLE          reduce using rule 118 (JumpStatement -> BREAK SEMICOLON .)
    VOID            reduce using rule 118 (JumpStatement -> BREAK SEMICOLON .)
    OP_INC          reduce using rule 118 (JumpStatement -> BREAK SEMICOLON .)
    OP_DEC          reduce using rule 118 (JumpStatement -> BREAK SEMICOLON .)
    PLUS            reduce using rule 118 (JumpStatement -> BREAK SEMICOLON .)
    MINUS           reduce using rule 118 (JumpStatement -> BREAK SEMICOLON .)
    ~               reduce using rule 118 (JumpStatement -> BREAK SEMICOLON .)
    NOT             reduce using rule 118 (JumpStatement -> BREAK SEMICOLON .)
    THIS            reduce using rule 118 (JumpStatement -> BREAK SEMICOLON .)
    SUPER           reduce using rule 118 (JumpStatement -> BREAK SEMICOLON .)
    NULL            reduce using rule 118 (JumpStatement -> BREAK SEMICOLON .)
    LROUNPAREN      reduce using rule 118 (JumpStatement -> BREAK SEMICOLON .)
    INT_CONST       reduce using rule 118 (JumpStatement -> BREAK SEMICOLON .)
    FLOAT_CONST     reduce using rule 118 (JumpStatement -> BREAK SEMICOLON .)
    STRING          reduce using rule 118 (JumpStatement -> BREAK SEMICOLON .)
    CHAR_CONST      reduce using rule 118 (JumpStatement -> BREAK SEMICOLON .)
    BOOLEAN_CONST   reduce using rule 118 (JumpStatement -> BREAK SEMICOLON .)
    NEW             reduce using rule 118 (JumpStatement -> BREAK SEMICOLON .)
    ELSE            reduce using rule 118 (JumpStatement -> BREAK SEMICOLON .)


state 197

    (189) MultiplicativeExpression -> MultiplicativeExpression DIV . CastExpression
    (183) CastExpression -> . UnaryExpression
    (173) UnaryExpression -> . OP_INC UnaryExpression
    (174) UnaryExpression -> . OP_DEC UnaryExpression
    (175) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (176) UnaryExpression -> . LogicalUnaryExpression
    (181) ArithmeticUnaryOperator -> . PLUS
    (182) ArithmeticUnaryOperator -> . MINUS
    (177) LogicalUnaryExpression -> . PostfixExpression
    (178) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (169) PostfixExpression -> . PrimaryExpression
    (170) PostfixExpression -> . RealPostfixExpression
    (179) LogicalUnaryOperator -> . ~
    (180) LogicalUnaryOperator -> . NOT
    (122) PrimaryExpression -> . QualifiedName
    (123) PrimaryExpression -> . NotJustName
    (171) RealPostfixExpression -> . PostfixExpression OP_INC
    (172) RealPostfixExpression -> . PostfixExpression OP_DEC
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (124) NotJustName -> . SpecialName
    (125) NotJustName -> . NewAllocationExpression
    (126) NotJustName -> . ComplexPrimary
    (147) SpecialName -> . THIS
    (148) SpecialName -> . SUPER
    (149) SpecialName -> . NULL
    (152) NewAllocationExpression -> . PlainNewAllocationExpression
    (153) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (127) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (128) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (154) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (155) PlainNewAllocationExpression -> . ClassAllocationExpression
    (156) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (157) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (158) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (129) ComplexPrimaryNoParenthesis -> . INT_CONST
    (130) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (131) ComplexPrimaryNoParenthesis -> . STRING
    (132) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (133) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (134) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (135) ComplexPrimaryNoParenthesis -> . FieldAccess
    (136) ComplexPrimaryNoParenthesis -> . MethodCall
    (161) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (162) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (163) ArrayAllocationExpression -> . NEW TypeName Dims
    (159) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (160) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (137) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (138) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (139) FieldAccess -> . NotJustName DOT IDENTIFIER
    (140) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (141) FieldAccess -> . QualifiedName DOT THIS
    (142) FieldAccess -> . QualifiedName DOT CLASS
    (143) FieldAccess -> . PrimitiveType DOT CLASS
    (144) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (145) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (146) MethodAccess -> . QualifiedName

    OP_INC          shift and go to state 106
    OP_DEC          shift and go to state 126
    PLUS            shift and go to state 90
    MINUS           shift and go to state 89
    ~               shift and go to state 141
    NOT             shift and go to state 119
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 91
    SUPER           shift and go to state 158
    NULL            shift and go to state 145
    LROUNPAREN      shift and go to state 118
    INT_CONST       shift and go to state 131
    FLOAT_CONST     shift and go to state 86
    STRING          shift and go to state 151
    CHAR_CONST      shift and go to state 144
    BOOLEAN_CONST   shift and go to state 157
    NEW             shift and go to state 127
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 121
    CastExpression                 shift and go to state 266
    PrimitiveType                  shift and go to state 187
    RealPostfixExpression          shift and go to state 96
    ArithmeticUnaryOperator        shift and go to state 97
    ArrayAccess                    shift and go to state 108
    ClassAllocationExpression      shift and go to state 122
    LogicalUnaryOperator           shift and go to state 153
    ComplexPrimaryNoParenthesis    shift and go to state 100
    MethodCall                     shift and go to state 102
    NewAllocationExpression        shift and go to state 135
    NotJustName                    shift and go to state 152
    QualifiedName                  shift and go to state 190
    LogicalUnaryExpression         shift and go to state 154
    ArrayAllocationExpression      shift and go to state 110
    UnaryExpression                shift and go to state 193
    PrimaryExpression              shift and go to state 129
    FieldAccess                    shift and go to state 156
    PlainNewAllocationExpression   shift and go to state 115
    MethodAccess                   shift and go to state 111
    SpecialName                    shift and go to state 120

state 198

    (188) MultiplicativeExpression -> MultiplicativeExpression MULT . CastExpression
    (183) CastExpression -> . UnaryExpression
    (173) UnaryExpression -> . OP_INC UnaryExpression
    (174) UnaryExpression -> . OP_DEC UnaryExpression
    (175) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (176) UnaryExpression -> . LogicalUnaryExpression
    (181) ArithmeticUnaryOperator -> . PLUS
    (182) ArithmeticUnaryOperator -> . MINUS
    (177) LogicalUnaryExpression -> . PostfixExpression
    (178) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (169) PostfixExpression -> . PrimaryExpression
    (170) PostfixExpression -> . RealPostfixExpression
    (179) LogicalUnaryOperator -> . ~
    (180) LogicalUnaryOperator -> . NOT
    (122) PrimaryExpression -> . QualifiedName
    (123) PrimaryExpression -> . NotJustName
    (171) RealPostfixExpression -> . PostfixExpression OP_INC
    (172) RealPostfixExpression -> . PostfixExpression OP_DEC
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (124) NotJustName -> . SpecialName
    (125) NotJustName -> . NewAllocationExpression
    (126) NotJustName -> . ComplexPrimary
    (147) SpecialName -> . THIS
    (148) SpecialName -> . SUPER
    (149) SpecialName -> . NULL
    (152) NewAllocationExpression -> . PlainNewAllocationExpression
    (153) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (127) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (128) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (154) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (155) PlainNewAllocationExpression -> . ClassAllocationExpression
    (156) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (157) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (158) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (129) ComplexPrimaryNoParenthesis -> . INT_CONST
    (130) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (131) ComplexPrimaryNoParenthesis -> . STRING
    (132) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (133) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (134) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (135) ComplexPrimaryNoParenthesis -> . FieldAccess
    (136) ComplexPrimaryNoParenthesis -> . MethodCall
    (161) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (162) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (163) ArrayAllocationExpression -> . NEW TypeName Dims
    (159) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (160) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (137) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (138) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (139) FieldAccess -> . NotJustName DOT IDENTIFIER
    (140) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (141) FieldAccess -> . QualifiedName DOT THIS
    (142) FieldAccess -> . QualifiedName DOT CLASS
    (143) FieldAccess -> . PrimitiveType DOT CLASS
    (144) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (145) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (146) MethodAccess -> . QualifiedName

    OP_INC          shift and go to state 106
    OP_DEC          shift and go to state 126
    PLUS            shift and go to state 90
    MINUS           shift and go to state 89
    ~               shift and go to state 141
    NOT             shift and go to state 119
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 91
    SUPER           shift and go to state 158
    NULL            shift and go to state 145
    LROUNPAREN      shift and go to state 118
    INT_CONST       shift and go to state 131
    FLOAT_CONST     shift and go to state 86
    STRING          shift and go to state 151
    CHAR_CONST      shift and go to state 144
    BOOLEAN_CONST   shift and go to state 157
    NEW             shift and go to state 127
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 121
    CastExpression                 shift and go to state 267
    PrimitiveType                  shift and go to state 187
    RealPostfixExpression          shift and go to state 96
    ArithmeticUnaryOperator        shift and go to state 97
    ArrayAccess                    shift and go to state 108
    ClassAllocationExpression      shift and go to state 122
    LogicalUnaryOperator           shift and go to state 153
    ComplexPrimaryNoParenthesis    shift and go to state 100
    MethodCall                     shift and go to state 102
    NewAllocationExpression        shift and go to state 135
    NotJustName                    shift and go to state 152
    QualifiedName                  shift and go to state 190
    LogicalUnaryExpression         shift and go to state 154
    ArrayAllocationExpression      shift and go to state 110
    UnaryExpression                shift and go to state 193
    PrimaryExpression              shift and go to state 129
    FieldAccess                    shift and go to state 156
    PlainNewAllocationExpression   shift and go to state 115
    MethodAccess                   shift and go to state 111
    SpecialName                    shift and go to state 120

state 199

    (190) MultiplicativeExpression -> MultiplicativeExpression MOD . CastExpression
    (183) CastExpression -> . UnaryExpression
    (173) UnaryExpression -> . OP_INC UnaryExpression
    (174) UnaryExpression -> . OP_DEC UnaryExpression
    (175) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (176) UnaryExpression -> . LogicalUnaryExpression
    (181) ArithmeticUnaryOperator -> . PLUS
    (182) ArithmeticUnaryOperator -> . MINUS
    (177) LogicalUnaryExpression -> . PostfixExpression
    (178) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (169) PostfixExpression -> . PrimaryExpression
    (170) PostfixExpression -> . RealPostfixExpression
    (179) LogicalUnaryOperator -> . ~
    (180) LogicalUnaryOperator -> . NOT
    (122) PrimaryExpression -> . QualifiedName
    (123) PrimaryExpression -> . NotJustName
    (171) RealPostfixExpression -> . PostfixExpression OP_INC
    (172) RealPostfixExpression -> . PostfixExpression OP_DEC
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (124) NotJustName -> . SpecialName
    (125) NotJustName -> . NewAllocationExpression
    (126) NotJustName -> . ComplexPrimary
    (147) SpecialName -> . THIS
    (148) SpecialName -> . SUPER
    (149) SpecialName -> . NULL
    (152) NewAllocationExpression -> . PlainNewAllocationExpression
    (153) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (127) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (128) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (154) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (155) PlainNewAllocationExpression -> . ClassAllocationExpression
    (156) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (157) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (158) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (129) ComplexPrimaryNoParenthesis -> . INT_CONST
    (130) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (131) ComplexPrimaryNoParenthesis -> . STRING
    (132) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (133) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (134) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (135) ComplexPrimaryNoParenthesis -> . FieldAccess
    (136) ComplexPrimaryNoParenthesis -> . MethodCall
    (161) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (162) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (163) ArrayAllocationExpression -> . NEW TypeName Dims
    (159) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (160) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (137) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (138) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (139) FieldAccess -> . NotJustName DOT IDENTIFIER
    (140) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (141) FieldAccess -> . QualifiedName DOT THIS
    (142) FieldAccess -> . QualifiedName DOT CLASS
    (143) FieldAccess -> . PrimitiveType DOT CLASS
    (144) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (145) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (146) MethodAccess -> . QualifiedName

    OP_INC          shift and go to state 106
    OP_DEC          shift and go to state 126
    PLUS            shift and go to state 90
    MINUS           shift and go to state 89
    ~               shift and go to state 141
    NOT             shift and go to state 119
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 91
    SUPER           shift and go to state 158
    NULL            shift and go to state 145
    LROUNPAREN      shift and go to state 118
    INT_CONST       shift and go to state 131
    FLOAT_CONST     shift and go to state 86
    STRING          shift and go to state 151
    CHAR_CONST      shift and go to state 144
    BOOLEAN_CONST   shift and go to state 157
    NEW             shift and go to state 127
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 121
    CastExpression                 shift and go to state 268
    PrimitiveType                  shift and go to state 187
    RealPostfixExpression          shift and go to state 96
    ArithmeticUnaryOperator        shift and go to state 97
    ArrayAccess                    shift and go to state 108
    ClassAllocationExpression      shift and go to state 122
    LogicalUnaryOperator           shift and go to state 153
    ComplexPrimaryNoParenthesis    shift and go to state 100
    MethodCall                     shift and go to state 102
    NewAllocationExpression        shift and go to state 135
    NotJustName                    shift and go to state 152
    QualifiedName                  shift and go to state 190
    LogicalUnaryExpression         shift and go to state 154
    ArrayAllocationExpression      shift and go to state 110
    UnaryExpression                shift and go to state 193
    PrimaryExpression              shift and go to state 129
    FieldAccess                    shift and go to state 156
    PlainNewAllocationExpression   shift and go to state 115
    MethodAccess                   shift and go to state 111
    SpecialName                    shift and go to state 120

state 200

    (92) Statement -> SelectionStatement Mark_quad .

    RCURPAREN       reduce using rule 92 (Statement -> SelectionStatement Mark_quad .)
    SEMICOLON       reduce using rule 92 (Statement -> SelectionStatement Mark_quad .)
    IDENTIFIER      reduce using rule 92 (Statement -> SelectionStatement Mark_quad .)
    CASE            reduce using rule 92 (Statement -> SelectionStatement Mark_quad .)
    DEFAULT         reduce using rule 92 (Statement -> SelectionStatement Mark_quad .)
    BREAK           reduce using rule 92 (Statement -> SelectionStatement Mark_quad .)
    CONTINUE        reduce using rule 92 (Statement -> SelectionStatement Mark_quad .)
    RETURN          reduce using rule 92 (Statement -> SelectionStatement Mark_quad .)
    LCURPAREN       reduce using rule 92 (Statement -> SelectionStatement Mark_quad .)
    WHILE           reduce using rule 92 (Statement -> SelectionStatement Mark_quad .)
    FOR             reduce using rule 92 (Statement -> SelectionStatement Mark_quad .)
    IF              reduce using rule 92 (Statement -> SelectionStatement Mark_quad .)
    DO              reduce using rule 92 (Statement -> SelectionStatement Mark_quad .)
    BOOLEAN         reduce using rule 92 (Statement -> SelectionStatement Mark_quad .)
    CHAR            reduce using rule 92 (Statement -> SelectionStatement Mark_quad .)
    BYTE            reduce using rule 92 (Statement -> SelectionStatement Mark_quad .)
    SHORT           reduce using rule 92 (Statement -> SelectionStatement Mark_quad .)
    INT             reduce using rule 92 (Statement -> SelectionStatement Mark_quad .)
    LONG            reduce using rule 92 (Statement -> SelectionStatement Mark_quad .)
    FLOAT           reduce using rule 92 (Statement -> SelectionStatement Mark_quad .)
    DOUBLE          reduce using rule 92 (Statement -> SelectionStatement Mark_quad .)
    VOID            reduce using rule 92 (Statement -> SelectionStatement Mark_quad .)
    OP_INC          reduce using rule 92 (Statement -> SelectionStatement Mark_quad .)
    OP_DEC          reduce using rule 92 (Statement -> SelectionStatement Mark_quad .)
    PLUS            reduce using rule 92 (Statement -> SelectionStatement Mark_quad .)
    MINUS           reduce using rule 92 (Statement -> SelectionStatement Mark_quad .)
    ~               reduce using rule 92 (Statement -> SelectionStatement Mark_quad .)
    NOT             reduce using rule 92 (Statement -> SelectionStatement Mark_quad .)
    THIS            reduce using rule 92 (Statement -> SelectionStatement Mark_quad .)
    SUPER           reduce using rule 92 (Statement -> SelectionStatement Mark_quad .)
    NULL            reduce using rule 92 (Statement -> SelectionStatement Mark_quad .)
    LROUNPAREN      reduce using rule 92 (Statement -> SelectionStatement Mark_quad .)
    INT_CONST       reduce using rule 92 (Statement -> SelectionStatement Mark_quad .)
    FLOAT_CONST     reduce using rule 92 (Statement -> SelectionStatement Mark_quad .)
    STRING          reduce using rule 92 (Statement -> SelectionStatement Mark_quad .)
    CHAR_CONST      reduce using rule 92 (Statement -> SelectionStatement Mark_quad .)
    BOOLEAN_CONST   reduce using rule 92 (Statement -> SelectionStatement Mark_quad .)
    NEW             reduce using rule 92 (Statement -> SelectionStatement Mark_quad .)
    ELSE            reduce using rule 92 (Statement -> SelectionStatement Mark_quad .)


state 201

    (108) IterationStatement -> FOR LROUNPAREN . ForInit ForExpr Mark_quad ForIncr RROUNPAREN Mark_quad Statement
    (109) IterationStatement -> FOR LROUNPAREN . ForInit ForExpr RROUNPAREN Statement
    (110) ForInit -> . ExpressionStatements SEMICOLON
    (111) ForInit -> . LocalVariableDeclarationStatement
    (112) ForInit -> . SEMICOLON
    (116) ExpressionStatements -> . ExpressionStatement
    (117) ExpressionStatements -> . ExpressionStatements COMMA ExpressionStatement
    (85) LocalVariableDeclarationStatement -> . TypeSpecifier VariableDeclarators SEMICOLON
    (98) ExpressionStatement -> . Expression
    (3) TypeSpecifier -> . TypeName
    (4) TypeSpecifier -> . TypeName Dims
    (224) Expression -> . AssignmentExpression
    (5) TypeName -> . PrimitiveType
    (6) TypeName -> . QualifiedName
    (218) AssignmentExpression -> . ConditionalExpression
    (219) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (216) ConditionalExpression -> . ConditionalOrExpression
    (217) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (173) UnaryExpression -> . OP_INC UnaryExpression
    (174) UnaryExpression -> . OP_DEC UnaryExpression
    (175) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (176) UnaryExpression -> . LogicalUnaryExpression
    (214) ConditionalOrExpression -> . ConditionalAndExpression
    (215) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (181) ArithmeticUnaryOperator -> . PLUS
    (182) ArithmeticUnaryOperator -> . MINUS
    (177) LogicalUnaryExpression -> . PostfixExpression
    (178) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (212) ConditionalAndExpression -> . InclusiveOrExpression
    (213) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (169) PostfixExpression -> . PrimaryExpression
    (170) PostfixExpression -> . RealPostfixExpression
    (179) LogicalUnaryOperator -> . ~
    (180) LogicalUnaryOperator -> . NOT
    (210) InclusiveOrExpression -> . ExclusiveOrExpression
    (211) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (122) PrimaryExpression -> . QualifiedName
    (123) PrimaryExpression -> . NotJustName
    (171) RealPostfixExpression -> . PostfixExpression OP_INC
    (172) RealPostfixExpression -> . PostfixExpression OP_DEC
    (208) ExclusiveOrExpression -> . AndExpression
    (209) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (124) NotJustName -> . SpecialName
    (125) NotJustName -> . NewAllocationExpression
    (126) NotJustName -> . ComplexPrimary
    (206) AndExpression -> . EqualityExpression
    (207) AndExpression -> . AndExpression & EqualityExpression
    (147) SpecialName -> . THIS
    (148) SpecialName -> . SUPER
    (149) SpecialName -> . NULL
    (152) NewAllocationExpression -> . PlainNewAllocationExpression
    (153) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (127) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (128) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (203) EqualityExpression -> . RelationalExpression
    (204) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (205) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (154) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (155) PlainNewAllocationExpression -> . ClassAllocationExpression
    (156) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (157) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (158) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (129) ComplexPrimaryNoParenthesis -> . INT_CONST
    (130) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (131) ComplexPrimaryNoParenthesis -> . STRING
    (132) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (133) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (134) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (135) ComplexPrimaryNoParenthesis -> . FieldAccess
    (136) ComplexPrimaryNoParenthesis -> . MethodCall
    (198) RelationalExpression -> . ShiftExpression
    (199) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (200) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (201) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (202) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (161) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (162) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (163) ArrayAllocationExpression -> . NEW TypeName Dims
    (159) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (160) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (137) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (138) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (139) FieldAccess -> . NotJustName DOT IDENTIFIER
    (140) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (141) FieldAccess -> . QualifiedName DOT THIS
    (142) FieldAccess -> . QualifiedName DOT CLASS
    (143) FieldAccess -> . PrimitiveType DOT CLASS
    (144) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (145) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (194) ShiftExpression -> . AdditiveExpression
    (195) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (196) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (197) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (146) MethodAccess -> . QualifiedName
    (191) AdditiveExpression -> . MultiplicativeExpression
    (192) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (193) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (187) MultiplicativeExpression -> . CastExpression
    (188) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (189) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (190) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (183) CastExpression -> . UnaryExpression

    SEMICOLON       shift and go to state 271
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43
    IDENTIFIER      shift and go to state 22
    OP_INC          shift and go to state 106
    OP_DEC          shift and go to state 126
    PLUS            shift and go to state 90
    MINUS           shift and go to state 89
    ~               shift and go to state 141
    NOT             shift and go to state 119
    THIS            shift and go to state 91
    SUPER           shift and go to state 158
    NULL            shift and go to state 145
    LROUNPAREN      shift and go to state 118
    INT_CONST       shift and go to state 131
    FLOAT_CONST     shift and go to state 86
    STRING          shift and go to state 151
    CHAR_CONST      shift and go to state 144
    BOOLEAN_CONST   shift and go to state 157
    NEW             shift and go to state 127

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 121
    ArithmeticUnaryOperator        shift and go to state 97
    MethodAccess                   shift and go to state 111
    ExclusiveOrExpression          shift and go to state 113
    ExpressionStatement            shift and go to state 269
    PrimitiveType                  shift and go to state 85
    RealPostfixExpression          shift and go to state 96
    AndExpression                  shift and go to state 88
    MultiplicativeExpression       shift and go to state 101
    TypeSpecifier                  shift and go to state 128
    CastExpression                 shift and go to state 143
    EqualityExpression             shift and go to state 98
    QualifiedName                  shift and go to state 147
    ComplexPrimaryNoParenthesis    shift and go to state 100
    TypeName                       shift and go to state 53
    ArrayAccess                    shift and go to state 108
    ClassAllocationExpression      shift and go to state 122
    MethodCall                     shift and go to state 102
    ConditionalOrExpression        shift and go to state 133
    LocalVariableDeclarationStatement shift and go to state 273
    ShiftExpression                shift and go to state 149
    AssignmentExpression           shift and go to state 104
    NewAllocationExpression        shift and go to state 135
    NotJustName                    shift and go to state 152
    LogicalUnaryOperator           shift and go to state 153
    LogicalUnaryExpression         shift and go to state 154
    UnaryExpression                shift and go to state 139
    Expression                     shift and go to state 136
    AdditiveExpression             shift and go to state 137
    ArrayAllocationExpression      shift and go to state 110
    ConditionalExpression          shift and go to state 138
    ForInit                        shift and go to state 270
    InclusiveOrExpression          shift and go to state 140
    PrimaryExpression              shift and go to state 129
    ExpressionStatements           shift and go to state 272
    ConditionalAndExpression       shift and go to state 92
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    FieldAccess                    shift and go to state 156
    SpecialName                    shift and go to state 120

state 202

    (173) UnaryExpression -> OP_INC UnaryExpression .

    EQUAL           reduce using rule 173 (UnaryExpression -> OP_INC UnaryExpression .)
    ASS_MUL         reduce using rule 173 (UnaryExpression -> OP_INC UnaryExpression .)
    ASS_ADD         reduce using rule 173 (UnaryExpression -> OP_INC UnaryExpression .)
    ASS_SUB         reduce using rule 173 (UnaryExpression -> OP_INC UnaryExpression .)
    MULT            reduce using rule 173 (UnaryExpression -> OP_INC UnaryExpression .)
    DIV             reduce using rule 173 (UnaryExpression -> OP_INC UnaryExpression .)
    MOD             reduce using rule 173 (UnaryExpression -> OP_INC UnaryExpression .)
    PLUS            reduce using rule 173 (UnaryExpression -> OP_INC UnaryExpression .)
    MINUS           reduce using rule 173 (UnaryExpression -> OP_INC UnaryExpression .)
    OP_SHL          reduce using rule 173 (UnaryExpression -> OP_INC UnaryExpression .)
    OP_SHR          reduce using rule 173 (UnaryExpression -> OP_INC UnaryExpression .)
    OP_SHRR         reduce using rule 173 (UnaryExpression -> OP_INC UnaryExpression .)
    LESS            reduce using rule 173 (UnaryExpression -> OP_INC UnaryExpression .)
    MORE            reduce using rule 173 (UnaryExpression -> OP_INC UnaryExpression .)
    OP_LE           reduce using rule 173 (UnaryExpression -> OP_INC UnaryExpression .)
    OP_GE           reduce using rule 173 (UnaryExpression -> OP_INC UnaryExpression .)
    OP_EQ           reduce using rule 173 (UnaryExpression -> OP_INC UnaryExpression .)
    OP_NE           reduce using rule 173 (UnaryExpression -> OP_INC UnaryExpression .)
    &               reduce using rule 173 (UnaryExpression -> OP_INC UnaryExpression .)
    ^               reduce using rule 173 (UnaryExpression -> OP_INC UnaryExpression .)
    |               reduce using rule 173 (UnaryExpression -> OP_INC UnaryExpression .)
    OP_LAND         reduce using rule 173 (UnaryExpression -> OP_INC UnaryExpression .)
    ?               reduce using rule 173 (UnaryExpression -> OP_INC UnaryExpression .)
    OP_LOR          reduce using rule 173 (UnaryExpression -> OP_INC UnaryExpression .)
    COMMA           reduce using rule 173 (UnaryExpression -> OP_INC UnaryExpression .)
    SEMICOLON       reduce using rule 173 (UnaryExpression -> OP_INC UnaryExpression .)
    RROUNPAREN      reduce using rule 173 (UnaryExpression -> OP_INC UnaryExpression .)
    COLON           reduce using rule 173 (UnaryExpression -> OP_INC UnaryExpression .)
    RSQPAREN        reduce using rule 173 (UnaryExpression -> OP_INC UnaryExpression .)


state 203

    (90) Statement -> Block Mark_quad .

    RCURPAREN       reduce using rule 90 (Statement -> Block Mark_quad .)
    SEMICOLON       reduce using rule 90 (Statement -> Block Mark_quad .)
    IDENTIFIER      reduce using rule 90 (Statement -> Block Mark_quad .)
    CASE            reduce using rule 90 (Statement -> Block Mark_quad .)
    DEFAULT         reduce using rule 90 (Statement -> Block Mark_quad .)
    BREAK           reduce using rule 90 (Statement -> Block Mark_quad .)
    CONTINUE        reduce using rule 90 (Statement -> Block Mark_quad .)
    RETURN          reduce using rule 90 (Statement -> Block Mark_quad .)
    LCURPAREN       reduce using rule 90 (Statement -> Block Mark_quad .)
    WHILE           reduce using rule 90 (Statement -> Block Mark_quad .)
    FOR             reduce using rule 90 (Statement -> Block Mark_quad .)
    IF              reduce using rule 90 (Statement -> Block Mark_quad .)
    DO              reduce using rule 90 (Statement -> Block Mark_quad .)
    BOOLEAN         reduce using rule 90 (Statement -> Block Mark_quad .)
    CHAR            reduce using rule 90 (Statement -> Block Mark_quad .)
    BYTE            reduce using rule 90 (Statement -> Block Mark_quad .)
    SHORT           reduce using rule 90 (Statement -> Block Mark_quad .)
    INT             reduce using rule 90 (Statement -> Block Mark_quad .)
    LONG            reduce using rule 90 (Statement -> Block Mark_quad .)
    FLOAT           reduce using rule 90 (Statement -> Block Mark_quad .)
    DOUBLE          reduce using rule 90 (Statement -> Block Mark_quad .)
    VOID            reduce using rule 90 (Statement -> Block Mark_quad .)
    OP_INC          reduce using rule 90 (Statement -> Block Mark_quad .)
    OP_DEC          reduce using rule 90 (Statement -> Block Mark_quad .)
    PLUS            reduce using rule 90 (Statement -> Block Mark_quad .)
    MINUS           reduce using rule 90 (Statement -> Block Mark_quad .)
    ~               reduce using rule 90 (Statement -> Block Mark_quad .)
    NOT             reduce using rule 90 (Statement -> Block Mark_quad .)
    THIS            reduce using rule 90 (Statement -> Block Mark_quad .)
    SUPER           reduce using rule 90 (Statement -> Block Mark_quad .)
    NULL            reduce using rule 90 (Statement -> Block Mark_quad .)
    LROUNPAREN      reduce using rule 90 (Statement -> Block Mark_quad .)
    INT_CONST       reduce using rule 90 (Statement -> Block Mark_quad .)
    FLOAT_CONST     reduce using rule 90 (Statement -> Block Mark_quad .)
    STRING          reduce using rule 90 (Statement -> Block Mark_quad .)
    CHAR_CONST      reduce using rule 90 (Statement -> Block Mark_quad .)
    BOOLEAN_CONST   reduce using rule 90 (Statement -> Block Mark_quad .)
    NEW             reduce using rule 90 (Statement -> Block Mark_quad .)
    ELSE            reduce using rule 90 (Statement -> Block Mark_quad .)


state 204

    (156) PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN . RCURPAREN

    RCURPAREN       shift and go to state 274


state 205

    (144) MethodCall -> MethodAccess LROUNPAREN . ArgumentList RROUNPAREN
    (145) MethodCall -> MethodAccess LROUNPAREN . RROUNPAREN
    (150) ArgumentList -> . Expression
    (151) ArgumentList -> . ArgumentList COMMA Expression
    (224) Expression -> . AssignmentExpression
    (218) AssignmentExpression -> . ConditionalExpression
    (219) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (216) ConditionalExpression -> . ConditionalOrExpression
    (217) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (173) UnaryExpression -> . OP_INC UnaryExpression
    (174) UnaryExpression -> . OP_DEC UnaryExpression
    (175) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (176) UnaryExpression -> . LogicalUnaryExpression
    (214) ConditionalOrExpression -> . ConditionalAndExpression
    (215) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (181) ArithmeticUnaryOperator -> . PLUS
    (182) ArithmeticUnaryOperator -> . MINUS
    (177) LogicalUnaryExpression -> . PostfixExpression
    (178) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (212) ConditionalAndExpression -> . InclusiveOrExpression
    (213) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (169) PostfixExpression -> . PrimaryExpression
    (170) PostfixExpression -> . RealPostfixExpression
    (179) LogicalUnaryOperator -> . ~
    (180) LogicalUnaryOperator -> . NOT
    (210) InclusiveOrExpression -> . ExclusiveOrExpression
    (211) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (122) PrimaryExpression -> . QualifiedName
    (123) PrimaryExpression -> . NotJustName
    (171) RealPostfixExpression -> . PostfixExpression OP_INC
    (172) RealPostfixExpression -> . PostfixExpression OP_DEC
    (208) ExclusiveOrExpression -> . AndExpression
    (209) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (124) NotJustName -> . SpecialName
    (125) NotJustName -> . NewAllocationExpression
    (126) NotJustName -> . ComplexPrimary
    (206) AndExpression -> . EqualityExpression
    (207) AndExpression -> . AndExpression & EqualityExpression
    (147) SpecialName -> . THIS
    (148) SpecialName -> . SUPER
    (149) SpecialName -> . NULL
    (152) NewAllocationExpression -> . PlainNewAllocationExpression
    (153) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (127) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (128) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (203) EqualityExpression -> . RelationalExpression
    (204) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (205) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (154) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (155) PlainNewAllocationExpression -> . ClassAllocationExpression
    (156) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (157) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (158) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (129) ComplexPrimaryNoParenthesis -> . INT_CONST
    (130) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (131) ComplexPrimaryNoParenthesis -> . STRING
    (132) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (133) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (134) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (135) ComplexPrimaryNoParenthesis -> . FieldAccess
    (136) ComplexPrimaryNoParenthesis -> . MethodCall
    (198) RelationalExpression -> . ShiftExpression
    (199) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (200) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (201) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (202) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (161) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (162) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (163) ArrayAllocationExpression -> . NEW TypeName Dims
    (159) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (160) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (137) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (138) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (139) FieldAccess -> . NotJustName DOT IDENTIFIER
    (140) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (141) FieldAccess -> . QualifiedName DOT THIS
    (142) FieldAccess -> . QualifiedName DOT CLASS
    (143) FieldAccess -> . PrimitiveType DOT CLASS
    (144) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (145) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (194) ShiftExpression -> . AdditiveExpression
    (195) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (196) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (197) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (146) MethodAccess -> . QualifiedName
    (191) AdditiveExpression -> . MultiplicativeExpression
    (192) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (193) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (187) MultiplicativeExpression -> . CastExpression
    (188) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (189) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (190) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (183) CastExpression -> . UnaryExpression

    RROUNPAREN      shift and go to state 276
    OP_INC          shift and go to state 106
    OP_DEC          shift and go to state 126
    PLUS            shift and go to state 90
    MINUS           shift and go to state 89
    ~               shift and go to state 141
    NOT             shift and go to state 119
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 91
    SUPER           shift and go to state 158
    NULL            shift and go to state 145
    LROUNPAREN      shift and go to state 118
    INT_CONST       shift and go to state 131
    FLOAT_CONST     shift and go to state 86
    STRING          shift and go to state 151
    CHAR_CONST      shift and go to state 144
    BOOLEAN_CONST   shift and go to state 157
    NEW             shift and go to state 127
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 121
    FieldAccess                    shift and go to state 156
    PrimaryExpression              shift and go to state 129
    PrimitiveType                  shift and go to state 187
    RealPostfixExpression          shift and go to state 96
    ArithmeticUnaryOperator        shift and go to state 97
    AndExpression                  shift and go to state 88
    ArrayAccess                    shift and go to state 108
    CastExpression                 shift and go to state 143
    EqualityExpression             shift and go to state 98
    ArgumentList                   shift and go to state 275
    LogicalUnaryOperator           shift and go to state 153
    ComplexPrimaryNoParenthesis    shift and go to state 100
    MultiplicativeExpression       shift and go to state 101
    ClassAllocationExpression      shift and go to state 122
    MethodCall                     shift and go to state 102
    ConditionalOrExpression        shift and go to state 133
    ShiftExpression                shift and go to state 149
    AssignmentExpression           shift and go to state 104
    NewAllocationExpression        shift and go to state 135
    NotJustName                    shift and go to state 152
    QualifiedName                  shift and go to state 190
    LogicalUnaryExpression         shift and go to state 154
    Expression                     shift and go to state 277
    AdditiveExpression             shift and go to state 137
    ArrayAllocationExpression      shift and go to state 110
    ConditionalExpression          shift and go to state 138
    UnaryExpression                shift and go to state 139
    InclusiveOrExpression          shift and go to state 140
    MethodAccess                   shift and go to state 111
    ExclusiveOrExpression          shift and go to state 113
    ConditionalAndExpression       shift and go to state 92
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    SpecialName                    shift and go to state 120

state 206

    (171) RealPostfixExpression -> PostfixExpression OP_INC .

    DOT             reduce using rule 171 (RealPostfixExpression -> PostfixExpression OP_INC .)
    OP_INC          reduce using rule 171 (RealPostfixExpression -> PostfixExpression OP_INC .)
    OP_DEC          reduce using rule 171 (RealPostfixExpression -> PostfixExpression OP_INC .)
    MULT            reduce using rule 171 (RealPostfixExpression -> PostfixExpression OP_INC .)
    DIV             reduce using rule 171 (RealPostfixExpression -> PostfixExpression OP_INC .)
    MOD             reduce using rule 171 (RealPostfixExpression -> PostfixExpression OP_INC .)
    PLUS            reduce using rule 171 (RealPostfixExpression -> PostfixExpression OP_INC .)
    MINUS           reduce using rule 171 (RealPostfixExpression -> PostfixExpression OP_INC .)
    OP_SHL          reduce using rule 171 (RealPostfixExpression -> PostfixExpression OP_INC .)
    OP_SHR          reduce using rule 171 (RealPostfixExpression -> PostfixExpression OP_INC .)
    OP_SHRR         reduce using rule 171 (RealPostfixExpression -> PostfixExpression OP_INC .)
    LESS            reduce using rule 171 (RealPostfixExpression -> PostfixExpression OP_INC .)
    MORE            reduce using rule 171 (RealPostfixExpression -> PostfixExpression OP_INC .)
    OP_LE           reduce using rule 171 (RealPostfixExpression -> PostfixExpression OP_INC .)
    OP_GE           reduce using rule 171 (RealPostfixExpression -> PostfixExpression OP_INC .)
    OP_EQ           reduce using rule 171 (RealPostfixExpression -> PostfixExpression OP_INC .)
    OP_NE           reduce using rule 171 (RealPostfixExpression -> PostfixExpression OP_INC .)
    &               reduce using rule 171 (RealPostfixExpression -> PostfixExpression OP_INC .)
    ^               reduce using rule 171 (RealPostfixExpression -> PostfixExpression OP_INC .)
    |               reduce using rule 171 (RealPostfixExpression -> PostfixExpression OP_INC .)
    OP_LAND         reduce using rule 171 (RealPostfixExpression -> PostfixExpression OP_INC .)
    ?               reduce using rule 171 (RealPostfixExpression -> PostfixExpression OP_INC .)
    OP_LOR          reduce using rule 171 (RealPostfixExpression -> PostfixExpression OP_INC .)
    SEMICOLON       reduce using rule 171 (RealPostfixExpression -> PostfixExpression OP_INC .)
    RROUNPAREN      reduce using rule 171 (RealPostfixExpression -> PostfixExpression OP_INC .)
    COLON           reduce using rule 171 (RealPostfixExpression -> PostfixExpression OP_INC .)
    COMMA           reduce using rule 171 (RealPostfixExpression -> PostfixExpression OP_INC .)
    RSQPAREN        reduce using rule 171 (RealPostfixExpression -> PostfixExpression OP_INC .)
    EQUAL           reduce using rule 171 (RealPostfixExpression -> PostfixExpression OP_INC .)
    ASS_MUL         reduce using rule 171 (RealPostfixExpression -> PostfixExpression OP_INC .)
    ASS_ADD         reduce using rule 171 (RealPostfixExpression -> PostfixExpression OP_INC .)
    ASS_SUB         reduce using rule 171 (RealPostfixExpression -> PostfixExpression OP_INC .)


state 207

    (172) RealPostfixExpression -> PostfixExpression OP_DEC .

    DOT             reduce using rule 172 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    OP_INC          reduce using rule 172 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    OP_DEC          reduce using rule 172 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    MULT            reduce using rule 172 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    DIV             reduce using rule 172 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    MOD             reduce using rule 172 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    PLUS            reduce using rule 172 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    MINUS           reduce using rule 172 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    OP_SHL          reduce using rule 172 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    OP_SHR          reduce using rule 172 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    OP_SHRR         reduce using rule 172 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    LESS            reduce using rule 172 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    MORE            reduce using rule 172 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    OP_LE           reduce using rule 172 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    OP_GE           reduce using rule 172 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    OP_EQ           reduce using rule 172 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    OP_NE           reduce using rule 172 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    &               reduce using rule 172 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    ^               reduce using rule 172 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    |               reduce using rule 172 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    OP_LAND         reduce using rule 172 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    ?               reduce using rule 172 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    OP_LOR          reduce using rule 172 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    SEMICOLON       reduce using rule 172 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    RROUNPAREN      reduce using rule 172 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    COLON           reduce using rule 172 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    COMMA           reduce using rule 172 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    RSQPAREN        reduce using rule 172 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    EQUAL           reduce using rule 172 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    ASS_MUL         reduce using rule 172 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    ASS_ADD         reduce using rule 172 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    ASS_SUB         reduce using rule 172 (RealPostfixExpression -> PostfixExpression OP_DEC .)


state 208

    (209) ExclusiveOrExpression -> ExclusiveOrExpression ^ . AndExpression
    (206) AndExpression -> . EqualityExpression
    (207) AndExpression -> . AndExpression & EqualityExpression
    (203) EqualityExpression -> . RelationalExpression
    (204) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (205) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (198) RelationalExpression -> . ShiftExpression
    (199) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (200) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (201) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (202) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (194) ShiftExpression -> . AdditiveExpression
    (195) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (196) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (197) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (191) AdditiveExpression -> . MultiplicativeExpression
    (192) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (193) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (187) MultiplicativeExpression -> . CastExpression
    (188) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (189) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (190) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (183) CastExpression -> . UnaryExpression
    (173) UnaryExpression -> . OP_INC UnaryExpression
    (174) UnaryExpression -> . OP_DEC UnaryExpression
    (175) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (176) UnaryExpression -> . LogicalUnaryExpression
    (181) ArithmeticUnaryOperator -> . PLUS
    (182) ArithmeticUnaryOperator -> . MINUS
    (177) LogicalUnaryExpression -> . PostfixExpression
    (178) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (169) PostfixExpression -> . PrimaryExpression
    (170) PostfixExpression -> . RealPostfixExpression
    (179) LogicalUnaryOperator -> . ~
    (180) LogicalUnaryOperator -> . NOT
    (122) PrimaryExpression -> . QualifiedName
    (123) PrimaryExpression -> . NotJustName
    (171) RealPostfixExpression -> . PostfixExpression OP_INC
    (172) RealPostfixExpression -> . PostfixExpression OP_DEC
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (124) NotJustName -> . SpecialName
    (125) NotJustName -> . NewAllocationExpression
    (126) NotJustName -> . ComplexPrimary
    (147) SpecialName -> . THIS
    (148) SpecialName -> . SUPER
    (149) SpecialName -> . NULL
    (152) NewAllocationExpression -> . PlainNewAllocationExpression
    (153) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (127) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (128) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (154) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (155) PlainNewAllocationExpression -> . ClassAllocationExpression
    (156) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (157) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (158) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (129) ComplexPrimaryNoParenthesis -> . INT_CONST
    (130) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (131) ComplexPrimaryNoParenthesis -> . STRING
    (132) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (133) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (134) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (135) ComplexPrimaryNoParenthesis -> . FieldAccess
    (136) ComplexPrimaryNoParenthesis -> . MethodCall
    (161) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (162) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (163) ArrayAllocationExpression -> . NEW TypeName Dims
    (159) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (160) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (137) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (138) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (139) FieldAccess -> . NotJustName DOT IDENTIFIER
    (140) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (141) FieldAccess -> . QualifiedName DOT THIS
    (142) FieldAccess -> . QualifiedName DOT CLASS
    (143) FieldAccess -> . PrimitiveType DOT CLASS
    (144) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (145) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (146) MethodAccess -> . QualifiedName

    OP_INC          shift and go to state 106
    OP_DEC          shift and go to state 126
    PLUS            shift and go to state 90
    MINUS           shift and go to state 89
    ~               shift and go to state 141
    NOT             shift and go to state 119
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 91
    SUPER           shift and go to state 158
    NULL            shift and go to state 145
    LROUNPAREN      shift and go to state 118
    INT_CONST       shift and go to state 131
    FLOAT_CONST     shift and go to state 86
    STRING          shift and go to state 151
    CHAR_CONST      shift and go to state 144
    BOOLEAN_CONST   shift and go to state 157
    NEW             shift and go to state 127
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43

    ComplexPrimary                 shift and go to state 121
    PostfixExpression              shift and go to state 112
    CastExpression                 shift and go to state 143
    PrimitiveType                  shift and go to state 187
    RealPostfixExpression          shift and go to state 96
    ArithmeticUnaryOperator        shift and go to state 97
    AndExpression                  shift and go to state 278
    ArrayAccess                    shift and go to state 108
    PrimaryExpression              shift and go to state 129
    EqualityExpression             shift and go to state 98
    LogicalUnaryOperator           shift and go to state 153
    ComplexPrimaryNoParenthesis    shift and go to state 100
    MultiplicativeExpression       shift and go to state 101
    ClassAllocationExpression      shift and go to state 122
    MethodCall                     shift and go to state 102
    ShiftExpression                shift and go to state 149
    NewAllocationExpression        shift and go to state 135
    NotJustName                    shift and go to state 152
    QualifiedName                  shift and go to state 190
    LogicalUnaryExpression         shift and go to state 154
    AdditiveExpression             shift and go to state 137
    ArrayAllocationExpression      shift and go to state 110
    UnaryExpression                shift and go to state 193
    FieldAccess                    shift and go to state 156
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    MethodAccess                   shift and go to state 111
    SpecialName                    shift and go to state 120

state 209

    (199) RelationalExpression -> RelationalExpression LESS . ShiftExpression
    (194) ShiftExpression -> . AdditiveExpression
    (195) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (196) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (197) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (191) AdditiveExpression -> . MultiplicativeExpression
    (192) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (193) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (187) MultiplicativeExpression -> . CastExpression
    (188) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (189) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (190) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (183) CastExpression -> . UnaryExpression
    (173) UnaryExpression -> . OP_INC UnaryExpression
    (174) UnaryExpression -> . OP_DEC UnaryExpression
    (175) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (176) UnaryExpression -> . LogicalUnaryExpression
    (181) ArithmeticUnaryOperator -> . PLUS
    (182) ArithmeticUnaryOperator -> . MINUS
    (177) LogicalUnaryExpression -> . PostfixExpression
    (178) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (169) PostfixExpression -> . PrimaryExpression
    (170) PostfixExpression -> . RealPostfixExpression
    (179) LogicalUnaryOperator -> . ~
    (180) LogicalUnaryOperator -> . NOT
    (122) PrimaryExpression -> . QualifiedName
    (123) PrimaryExpression -> . NotJustName
    (171) RealPostfixExpression -> . PostfixExpression OP_INC
    (172) RealPostfixExpression -> . PostfixExpression OP_DEC
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (124) NotJustName -> . SpecialName
    (125) NotJustName -> . NewAllocationExpression
    (126) NotJustName -> . ComplexPrimary
    (147) SpecialName -> . THIS
    (148) SpecialName -> . SUPER
    (149) SpecialName -> . NULL
    (152) NewAllocationExpression -> . PlainNewAllocationExpression
    (153) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (127) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (128) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (154) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (155) PlainNewAllocationExpression -> . ClassAllocationExpression
    (156) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (157) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (158) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (129) ComplexPrimaryNoParenthesis -> . INT_CONST
    (130) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (131) ComplexPrimaryNoParenthesis -> . STRING
    (132) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (133) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (134) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (135) ComplexPrimaryNoParenthesis -> . FieldAccess
    (136) ComplexPrimaryNoParenthesis -> . MethodCall
    (161) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (162) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (163) ArrayAllocationExpression -> . NEW TypeName Dims
    (159) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (160) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (137) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (138) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (139) FieldAccess -> . NotJustName DOT IDENTIFIER
    (140) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (141) FieldAccess -> . QualifiedName DOT THIS
    (142) FieldAccess -> . QualifiedName DOT CLASS
    (143) FieldAccess -> . PrimitiveType DOT CLASS
    (144) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (145) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (146) MethodAccess -> . QualifiedName

    OP_INC          shift and go to state 106
    OP_DEC          shift and go to state 126
    PLUS            shift and go to state 90
    MINUS           shift and go to state 89
    ~               shift and go to state 141
    NOT             shift and go to state 119
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 91
    SUPER           shift and go to state 158
    NULL            shift and go to state 145
    LROUNPAREN      shift and go to state 118
    INT_CONST       shift and go to state 131
    FLOAT_CONST     shift and go to state 86
    STRING          shift and go to state 151
    CHAR_CONST      shift and go to state 144
    BOOLEAN_CONST   shift and go to state 157
    NEW             shift and go to state 127
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 121
    CastExpression                 shift and go to state 143
    PrimitiveType                  shift and go to state 187
    RealPostfixExpression          shift and go to state 96
    ArithmeticUnaryOperator        shift and go to state 97
    ArrayAccess                    shift and go to state 108
    ClassAllocationExpression      shift and go to state 122
    LogicalUnaryOperator           shift and go to state 153
    ComplexPrimaryNoParenthesis    shift and go to state 100
    MultiplicativeExpression       shift and go to state 101
    MethodCall                     shift and go to state 102
    ShiftExpression                shift and go to state 279
    NewAllocationExpression        shift and go to state 135
    NotJustName                    shift and go to state 152
    QualifiedName                  shift and go to state 190
    LogicalUnaryExpression         shift and go to state 154
    AdditiveExpression             shift and go to state 137
    ArrayAllocationExpression      shift and go to state 110
    UnaryExpression                shift and go to state 193
    PrimaryExpression              shift and go to state 129
    FieldAccess                    shift and go to state 156
    PlainNewAllocationExpression   shift and go to state 115
    MethodAccess                   shift and go to state 111
    SpecialName                    shift and go to state 120

state 210

    (201) RelationalExpression -> RelationalExpression OP_LE . ShiftExpression
    (194) ShiftExpression -> . AdditiveExpression
    (195) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (196) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (197) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (191) AdditiveExpression -> . MultiplicativeExpression
    (192) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (193) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (187) MultiplicativeExpression -> . CastExpression
    (188) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (189) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (190) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (183) CastExpression -> . UnaryExpression
    (173) UnaryExpression -> . OP_INC UnaryExpression
    (174) UnaryExpression -> . OP_DEC UnaryExpression
    (175) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (176) UnaryExpression -> . LogicalUnaryExpression
    (181) ArithmeticUnaryOperator -> . PLUS
    (182) ArithmeticUnaryOperator -> . MINUS
    (177) LogicalUnaryExpression -> . PostfixExpression
    (178) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (169) PostfixExpression -> . PrimaryExpression
    (170) PostfixExpression -> . RealPostfixExpression
    (179) LogicalUnaryOperator -> . ~
    (180) LogicalUnaryOperator -> . NOT
    (122) PrimaryExpression -> . QualifiedName
    (123) PrimaryExpression -> . NotJustName
    (171) RealPostfixExpression -> . PostfixExpression OP_INC
    (172) RealPostfixExpression -> . PostfixExpression OP_DEC
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (124) NotJustName -> . SpecialName
    (125) NotJustName -> . NewAllocationExpression
    (126) NotJustName -> . ComplexPrimary
    (147) SpecialName -> . THIS
    (148) SpecialName -> . SUPER
    (149) SpecialName -> . NULL
    (152) NewAllocationExpression -> . PlainNewAllocationExpression
    (153) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (127) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (128) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (154) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (155) PlainNewAllocationExpression -> . ClassAllocationExpression
    (156) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (157) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (158) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (129) ComplexPrimaryNoParenthesis -> . INT_CONST
    (130) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (131) ComplexPrimaryNoParenthesis -> . STRING
    (132) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (133) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (134) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (135) ComplexPrimaryNoParenthesis -> . FieldAccess
    (136) ComplexPrimaryNoParenthesis -> . MethodCall
    (161) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (162) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (163) ArrayAllocationExpression -> . NEW TypeName Dims
    (159) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (160) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (137) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (138) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (139) FieldAccess -> . NotJustName DOT IDENTIFIER
    (140) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (141) FieldAccess -> . QualifiedName DOT THIS
    (142) FieldAccess -> . QualifiedName DOT CLASS
    (143) FieldAccess -> . PrimitiveType DOT CLASS
    (144) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (145) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (146) MethodAccess -> . QualifiedName

    OP_INC          shift and go to state 106
    OP_DEC          shift and go to state 126
    PLUS            shift and go to state 90
    MINUS           shift and go to state 89
    ~               shift and go to state 141
    NOT             shift and go to state 119
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 91
    SUPER           shift and go to state 158
    NULL            shift and go to state 145
    LROUNPAREN      shift and go to state 118
    INT_CONST       shift and go to state 131
    FLOAT_CONST     shift and go to state 86
    STRING          shift and go to state 151
    CHAR_CONST      shift and go to state 144
    BOOLEAN_CONST   shift and go to state 157
    NEW             shift and go to state 127
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 121
    CastExpression                 shift and go to state 143
    PrimitiveType                  shift and go to state 187
    RealPostfixExpression          shift and go to state 96
    ArithmeticUnaryOperator        shift and go to state 97
    ArrayAccess                    shift and go to state 108
    ClassAllocationExpression      shift and go to state 122
    LogicalUnaryOperator           shift and go to state 153
    ComplexPrimaryNoParenthesis    shift and go to state 100
    MultiplicativeExpression       shift and go to state 101
    MethodCall                     shift and go to state 102
    ShiftExpression                shift and go to state 280
    NewAllocationExpression        shift and go to state 135
    NotJustName                    shift and go to state 152
    QualifiedName                  shift and go to state 190
    LogicalUnaryExpression         shift and go to state 154
    AdditiveExpression             shift and go to state 137
    ArrayAllocationExpression      shift and go to state 110
    UnaryExpression                shift and go to state 193
    PrimaryExpression              shift and go to state 129
    FieldAccess                    shift and go to state 156
    PlainNewAllocationExpression   shift and go to state 115
    MethodAccess                   shift and go to state 111
    SpecialName                    shift and go to state 120

state 211

    (202) RelationalExpression -> RelationalExpression OP_GE . ShiftExpression
    (194) ShiftExpression -> . AdditiveExpression
    (195) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (196) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (197) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (191) AdditiveExpression -> . MultiplicativeExpression
    (192) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (193) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (187) MultiplicativeExpression -> . CastExpression
    (188) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (189) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (190) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (183) CastExpression -> . UnaryExpression
    (173) UnaryExpression -> . OP_INC UnaryExpression
    (174) UnaryExpression -> . OP_DEC UnaryExpression
    (175) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (176) UnaryExpression -> . LogicalUnaryExpression
    (181) ArithmeticUnaryOperator -> . PLUS
    (182) ArithmeticUnaryOperator -> . MINUS
    (177) LogicalUnaryExpression -> . PostfixExpression
    (178) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (169) PostfixExpression -> . PrimaryExpression
    (170) PostfixExpression -> . RealPostfixExpression
    (179) LogicalUnaryOperator -> . ~
    (180) LogicalUnaryOperator -> . NOT
    (122) PrimaryExpression -> . QualifiedName
    (123) PrimaryExpression -> . NotJustName
    (171) RealPostfixExpression -> . PostfixExpression OP_INC
    (172) RealPostfixExpression -> . PostfixExpression OP_DEC
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (124) NotJustName -> . SpecialName
    (125) NotJustName -> . NewAllocationExpression
    (126) NotJustName -> . ComplexPrimary
    (147) SpecialName -> . THIS
    (148) SpecialName -> . SUPER
    (149) SpecialName -> . NULL
    (152) NewAllocationExpression -> . PlainNewAllocationExpression
    (153) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (127) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (128) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (154) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (155) PlainNewAllocationExpression -> . ClassAllocationExpression
    (156) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (157) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (158) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (129) ComplexPrimaryNoParenthesis -> . INT_CONST
    (130) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (131) ComplexPrimaryNoParenthesis -> . STRING
    (132) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (133) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (134) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (135) ComplexPrimaryNoParenthesis -> . FieldAccess
    (136) ComplexPrimaryNoParenthesis -> . MethodCall
    (161) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (162) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (163) ArrayAllocationExpression -> . NEW TypeName Dims
    (159) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (160) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (137) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (138) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (139) FieldAccess -> . NotJustName DOT IDENTIFIER
    (140) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (141) FieldAccess -> . QualifiedName DOT THIS
    (142) FieldAccess -> . QualifiedName DOT CLASS
    (143) FieldAccess -> . PrimitiveType DOT CLASS
    (144) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (145) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (146) MethodAccess -> . QualifiedName

    OP_INC          shift and go to state 106
    OP_DEC          shift and go to state 126
    PLUS            shift and go to state 90
    MINUS           shift and go to state 89
    ~               shift and go to state 141
    NOT             shift and go to state 119
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 91
    SUPER           shift and go to state 158
    NULL            shift and go to state 145
    LROUNPAREN      shift and go to state 118
    INT_CONST       shift and go to state 131
    FLOAT_CONST     shift and go to state 86
    STRING          shift and go to state 151
    CHAR_CONST      shift and go to state 144
    BOOLEAN_CONST   shift and go to state 157
    NEW             shift and go to state 127
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 121
    CastExpression                 shift and go to state 143
    PrimitiveType                  shift and go to state 187
    RealPostfixExpression          shift and go to state 96
    ArithmeticUnaryOperator        shift and go to state 97
    ArrayAccess                    shift and go to state 108
    ClassAllocationExpression      shift and go to state 122
    LogicalUnaryOperator           shift and go to state 153
    ComplexPrimaryNoParenthesis    shift and go to state 100
    MultiplicativeExpression       shift and go to state 101
    MethodCall                     shift and go to state 102
    ShiftExpression                shift and go to state 281
    NewAllocationExpression        shift and go to state 135
    NotJustName                    shift and go to state 152
    QualifiedName                  shift and go to state 190
    LogicalUnaryExpression         shift and go to state 154
    AdditiveExpression             shift and go to state 137
    ArrayAllocationExpression      shift and go to state 110
    UnaryExpression                shift and go to state 193
    PrimaryExpression              shift and go to state 129
    FieldAccess                    shift and go to state 156
    PlainNewAllocationExpression   shift and go to state 115
    MethodAccess                   shift and go to state 111
    SpecialName                    shift and go to state 120

state 212

    (200) RelationalExpression -> RelationalExpression MORE . ShiftExpression
    (194) ShiftExpression -> . AdditiveExpression
    (195) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (196) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (197) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (191) AdditiveExpression -> . MultiplicativeExpression
    (192) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (193) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (187) MultiplicativeExpression -> . CastExpression
    (188) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (189) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (190) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (183) CastExpression -> . UnaryExpression
    (173) UnaryExpression -> . OP_INC UnaryExpression
    (174) UnaryExpression -> . OP_DEC UnaryExpression
    (175) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (176) UnaryExpression -> . LogicalUnaryExpression
    (181) ArithmeticUnaryOperator -> . PLUS
    (182) ArithmeticUnaryOperator -> . MINUS
    (177) LogicalUnaryExpression -> . PostfixExpression
    (178) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (169) PostfixExpression -> . PrimaryExpression
    (170) PostfixExpression -> . RealPostfixExpression
    (179) LogicalUnaryOperator -> . ~
    (180) LogicalUnaryOperator -> . NOT
    (122) PrimaryExpression -> . QualifiedName
    (123) PrimaryExpression -> . NotJustName
    (171) RealPostfixExpression -> . PostfixExpression OP_INC
    (172) RealPostfixExpression -> . PostfixExpression OP_DEC
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (124) NotJustName -> . SpecialName
    (125) NotJustName -> . NewAllocationExpression
    (126) NotJustName -> . ComplexPrimary
    (147) SpecialName -> . THIS
    (148) SpecialName -> . SUPER
    (149) SpecialName -> . NULL
    (152) NewAllocationExpression -> . PlainNewAllocationExpression
    (153) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (127) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (128) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (154) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (155) PlainNewAllocationExpression -> . ClassAllocationExpression
    (156) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (157) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (158) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (129) ComplexPrimaryNoParenthesis -> . INT_CONST
    (130) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (131) ComplexPrimaryNoParenthesis -> . STRING
    (132) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (133) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (134) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (135) ComplexPrimaryNoParenthesis -> . FieldAccess
    (136) ComplexPrimaryNoParenthesis -> . MethodCall
    (161) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (162) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (163) ArrayAllocationExpression -> . NEW TypeName Dims
    (159) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (160) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (137) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (138) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (139) FieldAccess -> . NotJustName DOT IDENTIFIER
    (140) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (141) FieldAccess -> . QualifiedName DOT THIS
    (142) FieldAccess -> . QualifiedName DOT CLASS
    (143) FieldAccess -> . PrimitiveType DOT CLASS
    (144) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (145) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (146) MethodAccess -> . QualifiedName

    OP_INC          shift and go to state 106
    OP_DEC          shift and go to state 126
    PLUS            shift and go to state 90
    MINUS           shift and go to state 89
    ~               shift and go to state 141
    NOT             shift and go to state 119
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 91
    SUPER           shift and go to state 158
    NULL            shift and go to state 145
    LROUNPAREN      shift and go to state 118
    INT_CONST       shift and go to state 131
    FLOAT_CONST     shift and go to state 86
    STRING          shift and go to state 151
    CHAR_CONST      shift and go to state 144
    BOOLEAN_CONST   shift and go to state 157
    NEW             shift and go to state 127
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 121
    CastExpression                 shift and go to state 143
    PrimitiveType                  shift and go to state 187
    RealPostfixExpression          shift and go to state 96
    ArithmeticUnaryOperator        shift and go to state 97
    ArrayAccess                    shift and go to state 108
    ClassAllocationExpression      shift and go to state 122
    LogicalUnaryOperator           shift and go to state 153
    ComplexPrimaryNoParenthesis    shift and go to state 100
    MultiplicativeExpression       shift and go to state 101
    MethodCall                     shift and go to state 102
    ShiftExpression                shift and go to state 282
    NewAllocationExpression        shift and go to state 135
    NotJustName                    shift and go to state 152
    QualifiedName                  shift and go to state 190
    LogicalUnaryExpression         shift and go to state 154
    AdditiveExpression             shift and go to state 137
    ArrayAllocationExpression      shift and go to state 110
    UnaryExpression                shift and go to state 193
    PrimaryExpression              shift and go to state 129
    FieldAccess                    shift and go to state 156
    PlainNewAllocationExpression   shift and go to state 115
    MethodAccess                   shift and go to state 111
    SpecialName                    shift and go to state 120

state 213

    (119) JumpStatement -> CONTINUE SEMICOLON .

    RCURPAREN       reduce using rule 119 (JumpStatement -> CONTINUE SEMICOLON .)
    SEMICOLON       reduce using rule 119 (JumpStatement -> CONTINUE SEMICOLON .)
    IDENTIFIER      reduce using rule 119 (JumpStatement -> CONTINUE SEMICOLON .)
    CASE            reduce using rule 119 (JumpStatement -> CONTINUE SEMICOLON .)
    DEFAULT         reduce using rule 119 (JumpStatement -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 119 (JumpStatement -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 119 (JumpStatement -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 119 (JumpStatement -> CONTINUE SEMICOLON .)
    LCURPAREN       reduce using rule 119 (JumpStatement -> CONTINUE SEMICOLON .)
    WHILE           reduce using rule 119 (JumpStatement -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 119 (JumpStatement -> CONTINUE SEMICOLON .)
    IF              reduce using rule 119 (JumpStatement -> CONTINUE SEMICOLON .)
    DO              reduce using rule 119 (JumpStatement -> CONTINUE SEMICOLON .)
    BOOLEAN         reduce using rule 119 (JumpStatement -> CONTINUE SEMICOLON .)
    CHAR            reduce using rule 119 (JumpStatement -> CONTINUE SEMICOLON .)
    BYTE            reduce using rule 119 (JumpStatement -> CONTINUE SEMICOLON .)
    SHORT           reduce using rule 119 (JumpStatement -> CONTINUE SEMICOLON .)
    INT             reduce using rule 119 (JumpStatement -> CONTINUE SEMICOLON .)
    LONG            reduce using rule 119 (JumpStatement -> CONTINUE SEMICOLON .)
    FLOAT           reduce using rule 119 (JumpStatement -> CONTINUE SEMICOLON .)
    DOUBLE          reduce using rule 119 (JumpStatement -> CONTINUE SEMICOLON .)
    VOID            reduce using rule 119 (JumpStatement -> CONTINUE SEMICOLON .)
    OP_INC          reduce using rule 119 (JumpStatement -> CONTINUE SEMICOLON .)
    OP_DEC          reduce using rule 119 (JumpStatement -> CONTINUE SEMICOLON .)
    PLUS            reduce using rule 119 (JumpStatement -> CONTINUE SEMICOLON .)
    MINUS           reduce using rule 119 (JumpStatement -> CONTINUE SEMICOLON .)
    ~               reduce using rule 119 (JumpStatement -> CONTINUE SEMICOLON .)
    NOT             reduce using rule 119 (JumpStatement -> CONTINUE SEMICOLON .)
    THIS            reduce using rule 119 (JumpStatement -> CONTINUE SEMICOLON .)
    SUPER           reduce using rule 119 (JumpStatement -> CONTINUE SEMICOLON .)
    NULL            reduce using rule 119 (JumpStatement -> CONTINUE SEMICOLON .)
    LROUNPAREN      reduce using rule 119 (JumpStatement -> CONTINUE SEMICOLON .)
    INT_CONST       reduce using rule 119 (JumpStatement -> CONTINUE SEMICOLON .)
    FLOAT_CONST     reduce using rule 119 (JumpStatement -> CONTINUE SEMICOLON .)
    STRING          reduce using rule 119 (JumpStatement -> CONTINUE SEMICOLON .)
    CHAR_CONST      reduce using rule 119 (JumpStatement -> CONTINUE SEMICOLON .)
    BOOLEAN_CONST   reduce using rule 119 (JumpStatement -> CONTINUE SEMICOLON .)
    NEW             reduce using rule 119 (JumpStatement -> CONTINUE SEMICOLON .)
    ELSE            reduce using rule 119 (JumpStatement -> CONTINUE SEMICOLON .)


state 214

    (127) ComplexPrimary -> LROUNPAREN Expression . RROUNPAREN

    RROUNPAREN      shift and go to state 283


state 215

    (138) ArrayAccess -> ComplexPrimary LSQPAREN . Expression RSQPAREN
    (224) Expression -> . AssignmentExpression
    (218) AssignmentExpression -> . ConditionalExpression
    (219) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (216) ConditionalExpression -> . ConditionalOrExpression
    (217) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (173) UnaryExpression -> . OP_INC UnaryExpression
    (174) UnaryExpression -> . OP_DEC UnaryExpression
    (175) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (176) UnaryExpression -> . LogicalUnaryExpression
    (214) ConditionalOrExpression -> . ConditionalAndExpression
    (215) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (181) ArithmeticUnaryOperator -> . PLUS
    (182) ArithmeticUnaryOperator -> . MINUS
    (177) LogicalUnaryExpression -> . PostfixExpression
    (178) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (212) ConditionalAndExpression -> . InclusiveOrExpression
    (213) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (169) PostfixExpression -> . PrimaryExpression
    (170) PostfixExpression -> . RealPostfixExpression
    (179) LogicalUnaryOperator -> . ~
    (180) LogicalUnaryOperator -> . NOT
    (210) InclusiveOrExpression -> . ExclusiveOrExpression
    (211) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (122) PrimaryExpression -> . QualifiedName
    (123) PrimaryExpression -> . NotJustName
    (171) RealPostfixExpression -> . PostfixExpression OP_INC
    (172) RealPostfixExpression -> . PostfixExpression OP_DEC
    (208) ExclusiveOrExpression -> . AndExpression
    (209) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (124) NotJustName -> . SpecialName
    (125) NotJustName -> . NewAllocationExpression
    (126) NotJustName -> . ComplexPrimary
    (206) AndExpression -> . EqualityExpression
    (207) AndExpression -> . AndExpression & EqualityExpression
    (147) SpecialName -> . THIS
    (148) SpecialName -> . SUPER
    (149) SpecialName -> . NULL
    (152) NewAllocationExpression -> . PlainNewAllocationExpression
    (153) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (127) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (128) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (203) EqualityExpression -> . RelationalExpression
    (204) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (205) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (154) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (155) PlainNewAllocationExpression -> . ClassAllocationExpression
    (156) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (157) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (158) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (129) ComplexPrimaryNoParenthesis -> . INT_CONST
    (130) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (131) ComplexPrimaryNoParenthesis -> . STRING
    (132) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (133) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (134) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (135) ComplexPrimaryNoParenthesis -> . FieldAccess
    (136) ComplexPrimaryNoParenthesis -> . MethodCall
    (198) RelationalExpression -> . ShiftExpression
    (199) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (200) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (201) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (202) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (161) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (162) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (163) ArrayAllocationExpression -> . NEW TypeName Dims
    (159) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (160) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (137) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (138) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (139) FieldAccess -> . NotJustName DOT IDENTIFIER
    (140) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (141) FieldAccess -> . QualifiedName DOT THIS
    (142) FieldAccess -> . QualifiedName DOT CLASS
    (143) FieldAccess -> . PrimitiveType DOT CLASS
    (144) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (145) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (194) ShiftExpression -> . AdditiveExpression
    (195) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (196) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (197) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (146) MethodAccess -> . QualifiedName
    (191) AdditiveExpression -> . MultiplicativeExpression
    (192) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (193) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (187) MultiplicativeExpression -> . CastExpression
    (188) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (189) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (190) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (183) CastExpression -> . UnaryExpression

    OP_INC          shift and go to state 106
    OP_DEC          shift and go to state 126
    PLUS            shift and go to state 90
    MINUS           shift and go to state 89
    ~               shift and go to state 141
    NOT             shift and go to state 119
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 91
    SUPER           shift and go to state 158
    NULL            shift and go to state 145
    LROUNPAREN      shift and go to state 118
    INT_CONST       shift and go to state 131
    FLOAT_CONST     shift and go to state 86
    STRING          shift and go to state 151
    CHAR_CONST      shift and go to state 144
    BOOLEAN_CONST   shift and go to state 157
    NEW             shift and go to state 127
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43

    ComplexPrimary                 shift and go to state 121
    PostfixExpression              shift and go to state 112
    PrimaryExpression              shift and go to state 129
    PrimitiveType                  shift and go to state 187
    RealPostfixExpression          shift and go to state 96
    ArithmeticUnaryOperator        shift and go to state 97
    AndExpression                  shift and go to state 88
    ArrayAccess                    shift and go to state 108
    CastExpression                 shift and go to state 143
    EqualityExpression             shift and go to state 98
    LogicalUnaryOperator           shift and go to state 153
    ComplexPrimaryNoParenthesis    shift and go to state 100
    MultiplicativeExpression       shift and go to state 101
    ClassAllocationExpression      shift and go to state 122
    MethodCall                     shift and go to state 102
    ConditionalOrExpression        shift and go to state 133
    ShiftExpression                shift and go to state 149
    AssignmentExpression           shift and go to state 104
    NewAllocationExpression        shift and go to state 135
    NotJustName                    shift and go to state 152
    QualifiedName                  shift and go to state 190
    LogicalUnaryExpression         shift and go to state 154
    Expression                     shift and go to state 284
    AdditiveExpression             shift and go to state 137
    ArrayAllocationExpression      shift and go to state 110
    ConditionalExpression          shift and go to state 138
    UnaryExpression                shift and go to state 139
    InclusiveOrExpression          shift and go to state 140
    MethodAccess                   shift and go to state 111
    ExclusiveOrExpression          shift and go to state 113
    ConditionalAndExpression       shift and go to state 92
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    FieldAccess                    shift and go to state 156
    SpecialName                    shift and go to state 120

state 216

    (157) PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN . RCURPAREN
    (158) PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN . FieldDeclarations RCURPAREN
    (45) FieldDeclarations -> . FieldDeclarationOptSemi
    (46) FieldDeclarations -> . FieldDeclarations FieldDeclarationOptSemi
    (47) FieldDeclarationOptSemi -> . FieldDeclaration
    (48) FieldDeclarationOptSemi -> . FieldDeclaration SemiColons
    (49) FieldDeclaration -> . FieldVariableDeclaration SEMICOLON
    (50) FieldDeclaration -> . MethodDeclaration
    (51) FieldDeclaration -> . ConstructorDeclaration
    (52) FieldDeclaration -> . StaticInitializer
    (53) FieldDeclaration -> . NonStaticInitializer
    (54) FieldDeclaration -> . TypeDeclaration
    (55) FieldVariableDeclaration -> . Modifiers TypeSpecifier VariableDeclarators
    (56) FieldVariableDeclaration -> . TypeSpecifier VariableDeclarators
    (62) MethodDeclaration -> . Modifiers TypeSpecifier MethodDeclarator MethodBody
    (63) MethodDeclaration -> . TypeSpecifier MethodDeclarator MethodBody
    (73) ConstructorDeclaration -> . Modifiers ConstructorDeclarator Block
    (74) ConstructorDeclaration -> . ConstructorDeclarator Block
    (77) StaticInitializer -> . STATIC Block
    (78) NonStaticInitializer -> . Block
    (35) TypeDeclaration -> . ClassHeader LCURPAREN FieldDeclarations RCURPAREN
    (36) TypeDeclaration -> . ClassHeader LCURPAREN RCURPAREN
    (39) Modifiers -> . Modifier
    (40) Modifiers -> . Modifiers Modifier
    (3) TypeSpecifier -> . TypeName
    (4) TypeSpecifier -> . TypeName Dims
    (75) ConstructorDeclarator -> . IDENTIFIER LROUNPAREN ParameterList RROUNPAREN
    (76) ConstructorDeclarator -> . IDENTIFIER LROUNPAREN RROUNPAREN
    (79) Block -> . LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN
    (80) Block -> . LCURPAREN RCURPAREN
    (37) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (38) ClassHeader -> . ClassWord IDENTIFIER
    (41) Modifier -> . PUBLIC
    (42) Modifier -> . PRIVATE
    (43) Modifier -> . STATIC
    (5) TypeName -> . PrimitiveType
    (6) TypeName -> . QualifiedName
    (44) ClassWord -> . CLASS
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER

    RCURPAREN       shift and go to state 285
    STATIC          shift and go to state 48
    IDENTIFIER      shift and go to state 54
    LCURPAREN       shift and go to state 57
    PUBLIC          shift and go to state 18
    PRIVATE         shift and go to state 4
    CLASS           shift and go to state 6
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43

    FieldVariableDeclaration       shift and go to state 42
    TypeDeclaration                shift and go to state 44
    PrimitiveType                  shift and go to state 45
    StaticInitializer              shift and go to state 46
    NonStaticInitializer           shift and go to state 50
    TypeSpecifier                  shift and go to state 51
    QualifiedName                  shift and go to state 52
    TypeName                       shift and go to state 53
    MethodDeclaration              shift and go to state 55
    Modifiers                      shift and go to state 47
    ConstructorDeclaration         shift and go to state 41
    FieldDeclarations              shift and go to state 286
    Modifier                       shift and go to state 12
    Block                          shift and go to state 60
    ClassWord                      shift and go to state 14
    FieldDeclarationOptSemi        shift and go to state 61
    ConstructorDeclarator          shift and go to state 62
    ClassHeader                    shift and go to state 17
    FieldDeclaration               shift and go to state 68

state 217

    (97) LabelStatement -> DEFAULT COLON .

    RCURPAREN       reduce using rule 97 (LabelStatement -> DEFAULT COLON .)
    SEMICOLON       reduce using rule 97 (LabelStatement -> DEFAULT COLON .)
    IDENTIFIER      reduce using rule 97 (LabelStatement -> DEFAULT COLON .)
    CASE            reduce using rule 97 (LabelStatement -> DEFAULT COLON .)
    DEFAULT         reduce using rule 97 (LabelStatement -> DEFAULT COLON .)
    BREAK           reduce using rule 97 (LabelStatement -> DEFAULT COLON .)
    CONTINUE        reduce using rule 97 (LabelStatement -> DEFAULT COLON .)
    RETURN          reduce using rule 97 (LabelStatement -> DEFAULT COLON .)
    LCURPAREN       reduce using rule 97 (LabelStatement -> DEFAULT COLON .)
    WHILE           reduce using rule 97 (LabelStatement -> DEFAULT COLON .)
    FOR             reduce using rule 97 (LabelStatement -> DEFAULT COLON .)
    IF              reduce using rule 97 (LabelStatement -> DEFAULT COLON .)
    DO              reduce using rule 97 (LabelStatement -> DEFAULT COLON .)
    BOOLEAN         reduce using rule 97 (LabelStatement -> DEFAULT COLON .)
    CHAR            reduce using rule 97 (LabelStatement -> DEFAULT COLON .)
    BYTE            reduce using rule 97 (LabelStatement -> DEFAULT COLON .)
    SHORT           reduce using rule 97 (LabelStatement -> DEFAULT COLON .)
    INT             reduce using rule 97 (LabelStatement -> DEFAULT COLON .)
    LONG            reduce using rule 97 (LabelStatement -> DEFAULT COLON .)
    FLOAT           reduce using rule 97 (LabelStatement -> DEFAULT COLON .)
    DOUBLE          reduce using rule 97 (LabelStatement -> DEFAULT COLON .)
    VOID            reduce using rule 97 (LabelStatement -> DEFAULT COLON .)
    OP_INC          reduce using rule 97 (LabelStatement -> DEFAULT COLON .)
    OP_DEC          reduce using rule 97 (LabelStatement -> DEFAULT COLON .)
    PLUS            reduce using rule 97 (LabelStatement -> DEFAULT COLON .)
    MINUS           reduce using rule 97 (LabelStatement -> DEFAULT COLON .)
    ~               reduce using rule 97 (LabelStatement -> DEFAULT COLON .)
    NOT             reduce using rule 97 (LabelStatement -> DEFAULT COLON .)
    THIS            reduce using rule 97 (LabelStatement -> DEFAULT COLON .)
    SUPER           reduce using rule 97 (LabelStatement -> DEFAULT COLON .)
    NULL            reduce using rule 97 (LabelStatement -> DEFAULT COLON .)
    LROUNPAREN      reduce using rule 97 (LabelStatement -> DEFAULT COLON .)
    INT_CONST       reduce using rule 97 (LabelStatement -> DEFAULT COLON .)
    FLOAT_CONST     reduce using rule 97 (LabelStatement -> DEFAULT COLON .)
    STRING          reduce using rule 97 (LabelStatement -> DEFAULT COLON .)
    CHAR_CONST      reduce using rule 97 (LabelStatement -> DEFAULT COLON .)
    BOOLEAN_CONST   reduce using rule 97 (LabelStatement -> DEFAULT COLON .)
    NEW             reduce using rule 97 (LabelStatement -> DEFAULT COLON .)
    ELSE            reduce using rule 97 (LabelStatement -> DEFAULT COLON .)


state 218

    (89) Statement -> JumpStatement Mark_quad .

    RCURPAREN       reduce using rule 89 (Statement -> JumpStatement Mark_quad .)
    SEMICOLON       reduce using rule 89 (Statement -> JumpStatement Mark_quad .)
    IDENTIFIER      reduce using rule 89 (Statement -> JumpStatement Mark_quad .)
    CASE            reduce using rule 89 (Statement -> JumpStatement Mark_quad .)
    DEFAULT         reduce using rule 89 (Statement -> JumpStatement Mark_quad .)
    BREAK           reduce using rule 89 (Statement -> JumpStatement Mark_quad .)
    CONTINUE        reduce using rule 89 (Statement -> JumpStatement Mark_quad .)
    RETURN          reduce using rule 89 (Statement -> JumpStatement Mark_quad .)
    LCURPAREN       reduce using rule 89 (Statement -> JumpStatement Mark_quad .)
    WHILE           reduce using rule 89 (Statement -> JumpStatement Mark_quad .)
    FOR             reduce using rule 89 (Statement -> JumpStatement Mark_quad .)
    IF              reduce using rule 89 (Statement -> JumpStatement Mark_quad .)
    DO              reduce using rule 89 (Statement -> JumpStatement Mark_quad .)
    BOOLEAN         reduce using rule 89 (Statement -> JumpStatement Mark_quad .)
    CHAR            reduce using rule 89 (Statement -> JumpStatement Mark_quad .)
    BYTE            reduce using rule 89 (Statement -> JumpStatement Mark_quad .)
    SHORT           reduce using rule 89 (Statement -> JumpStatement Mark_quad .)
    INT             reduce using rule 89 (Statement -> JumpStatement Mark_quad .)
    LONG            reduce using rule 89 (Statement -> JumpStatement Mark_quad .)
    FLOAT           reduce using rule 89 (Statement -> JumpStatement Mark_quad .)
    DOUBLE          reduce using rule 89 (Statement -> JumpStatement Mark_quad .)
    VOID            reduce using rule 89 (Statement -> JumpStatement Mark_quad .)
    OP_INC          reduce using rule 89 (Statement -> JumpStatement Mark_quad .)
    OP_DEC          reduce using rule 89 (Statement -> JumpStatement Mark_quad .)
    PLUS            reduce using rule 89 (Statement -> JumpStatement Mark_quad .)
    MINUS           reduce using rule 89 (Statement -> JumpStatement Mark_quad .)
    ~               reduce using rule 89 (Statement -> JumpStatement Mark_quad .)
    NOT             reduce using rule 89 (Statement -> JumpStatement Mark_quad .)
    THIS            reduce using rule 89 (Statement -> JumpStatement Mark_quad .)
    SUPER           reduce using rule 89 (Statement -> JumpStatement Mark_quad .)
    NULL            reduce using rule 89 (Statement -> JumpStatement Mark_quad .)
    LROUNPAREN      reduce using rule 89 (Statement -> JumpStatement Mark_quad .)
    INT_CONST       reduce using rule 89 (Statement -> JumpStatement Mark_quad .)
    FLOAT_CONST     reduce using rule 89 (Statement -> JumpStatement Mark_quad .)
    STRING          reduce using rule 89 (Statement -> JumpStatement Mark_quad .)
    CHAR_CONST      reduce using rule 89 (Statement -> JumpStatement Mark_quad .)
    BOOLEAN_CONST   reduce using rule 89 (Statement -> JumpStatement Mark_quad .)
    NEW             reduce using rule 89 (Statement -> JumpStatement Mark_quad .)
    ELSE            reduce using rule 89 (Statement -> JumpStatement Mark_quad .)


state 219

    (103) IterationStatement -> WHILE Mark_quad . LROUNPAREN Expression RROUNPAREN Mark_while Statement

    LROUNPAREN      shift and go to state 287


state 220

    (174) UnaryExpression -> OP_DEC UnaryExpression .

    EQUAL           reduce using rule 174 (UnaryExpression -> OP_DEC UnaryExpression .)
    ASS_MUL         reduce using rule 174 (UnaryExpression -> OP_DEC UnaryExpression .)
    ASS_ADD         reduce using rule 174 (UnaryExpression -> OP_DEC UnaryExpression .)
    ASS_SUB         reduce using rule 174 (UnaryExpression -> OP_DEC UnaryExpression .)
    MULT            reduce using rule 174 (UnaryExpression -> OP_DEC UnaryExpression .)
    DIV             reduce using rule 174 (UnaryExpression -> OP_DEC UnaryExpression .)
    MOD             reduce using rule 174 (UnaryExpression -> OP_DEC UnaryExpression .)
    PLUS            reduce using rule 174 (UnaryExpression -> OP_DEC UnaryExpression .)
    MINUS           reduce using rule 174 (UnaryExpression -> OP_DEC UnaryExpression .)
    OP_SHL          reduce using rule 174 (UnaryExpression -> OP_DEC UnaryExpression .)
    OP_SHR          reduce using rule 174 (UnaryExpression -> OP_DEC UnaryExpression .)
    OP_SHRR         reduce using rule 174 (UnaryExpression -> OP_DEC UnaryExpression .)
    LESS            reduce using rule 174 (UnaryExpression -> OP_DEC UnaryExpression .)
    MORE            reduce using rule 174 (UnaryExpression -> OP_DEC UnaryExpression .)
    OP_LE           reduce using rule 174 (UnaryExpression -> OP_DEC UnaryExpression .)
    OP_GE           reduce using rule 174 (UnaryExpression -> OP_DEC UnaryExpression .)
    OP_EQ           reduce using rule 174 (UnaryExpression -> OP_DEC UnaryExpression .)
    OP_NE           reduce using rule 174 (UnaryExpression -> OP_DEC UnaryExpression .)
    &               reduce using rule 174 (UnaryExpression -> OP_DEC UnaryExpression .)
    ^               reduce using rule 174 (UnaryExpression -> OP_DEC UnaryExpression .)
    |               reduce using rule 174 (UnaryExpression -> OP_DEC UnaryExpression .)
    OP_LAND         reduce using rule 174 (UnaryExpression -> OP_DEC UnaryExpression .)
    ?               reduce using rule 174 (UnaryExpression -> OP_DEC UnaryExpression .)
    OP_LOR          reduce using rule 174 (UnaryExpression -> OP_DEC UnaryExpression .)
    COMMA           reduce using rule 174 (UnaryExpression -> OP_DEC UnaryExpression .)
    SEMICOLON       reduce using rule 174 (UnaryExpression -> OP_DEC UnaryExpression .)
    RROUNPAREN      reduce using rule 174 (UnaryExpression -> OP_DEC UnaryExpression .)
    COLON           reduce using rule 174 (UnaryExpression -> OP_DEC UnaryExpression .)
    RSQPAREN        reduce using rule 174 (UnaryExpression -> OP_DEC UnaryExpression .)


state 221

    (161) ArrayAllocationExpression -> NEW TypeName . DimExprs Dims
    (162) ArrayAllocationExpression -> NEW TypeName . DimExprs
    (163) ArrayAllocationExpression -> NEW TypeName . Dims
    (159) ClassAllocationExpression -> NEW TypeName . LROUNPAREN ArgumentList RROUNPAREN
    (160) ClassAllocationExpression -> NEW TypeName . LROUNPAREN RROUNPAREN
    (164) DimExprs -> . DimExpr
    (165) DimExprs -> . DimExprs DimExpr
    (167) Dims -> . OP_DIM
    (168) Dims -> . Dims OP_DIM
    (166) DimExpr -> . LSQPAREN Expression RSQPAREN
    (2) OP_DIM -> . LSQPAREN RSQPAREN

    LROUNPAREN      shift and go to state 292
    LSQPAREN        shift and go to state 289

    Dims                           shift and go to state 290
    DimExpr                        shift and go to state 291
    DimExprs                       shift and go to state 288
    OP_DIM                         shift and go to state 81

state 222

    (85) LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators . SEMICOLON
    (58) VariableDeclarators -> VariableDeclarators . COMMA VariableDeclarator

    SEMICOLON       shift and go to state 293
    COMMA           shift and go to state 168


state 223

    (59) VariableDeclarator -> DeclaratorName .
    (60) VariableDeclarator -> DeclaratorName . EQUAL VariableInitializer
    (70) DeclaratorName -> DeclaratorName . OP_DIM
    (2) OP_DIM -> . LSQPAREN RSQPAREN

    COMMA           reduce using rule 59 (VariableDeclarator -> DeclaratorName .)
    SEMICOLON       reduce using rule 59 (VariableDeclarator -> DeclaratorName .)
    EQUAL           shift and go to state 169
    LSQPAREN        shift and go to state 80

    OP_DIM                         shift and go to state 170

state 224

    (96) LabelStatement -> CASE ConstantExpression . COLON

    COLON           shift and go to state 294


state 225

    (225) ConstantExpression -> ConditionalExpression .

    COLON           reduce using rule 225 (ConstantExpression -> ConditionalExpression .)


state 226

    (215) ConditionalOrExpression -> ConditionalOrExpression OP_LOR . ConditionalAndExpression
    (212) ConditionalAndExpression -> . InclusiveOrExpression
    (213) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (210) InclusiveOrExpression -> . ExclusiveOrExpression
    (211) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (208) ExclusiveOrExpression -> . AndExpression
    (209) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (206) AndExpression -> . EqualityExpression
    (207) AndExpression -> . AndExpression & EqualityExpression
    (203) EqualityExpression -> . RelationalExpression
    (204) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (205) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (198) RelationalExpression -> . ShiftExpression
    (199) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (200) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (201) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (202) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (194) ShiftExpression -> . AdditiveExpression
    (195) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (196) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (197) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (191) AdditiveExpression -> . MultiplicativeExpression
    (192) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (193) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (187) MultiplicativeExpression -> . CastExpression
    (188) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (189) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (190) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (183) CastExpression -> . UnaryExpression
    (173) UnaryExpression -> . OP_INC UnaryExpression
    (174) UnaryExpression -> . OP_DEC UnaryExpression
    (175) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (176) UnaryExpression -> . LogicalUnaryExpression
    (181) ArithmeticUnaryOperator -> . PLUS
    (182) ArithmeticUnaryOperator -> . MINUS
    (177) LogicalUnaryExpression -> . PostfixExpression
    (178) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (169) PostfixExpression -> . PrimaryExpression
    (170) PostfixExpression -> . RealPostfixExpression
    (179) LogicalUnaryOperator -> . ~
    (180) LogicalUnaryOperator -> . NOT
    (122) PrimaryExpression -> . QualifiedName
    (123) PrimaryExpression -> . NotJustName
    (171) RealPostfixExpression -> . PostfixExpression OP_INC
    (172) RealPostfixExpression -> . PostfixExpression OP_DEC
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (124) NotJustName -> . SpecialName
    (125) NotJustName -> . NewAllocationExpression
    (126) NotJustName -> . ComplexPrimary
    (147) SpecialName -> . THIS
    (148) SpecialName -> . SUPER
    (149) SpecialName -> . NULL
    (152) NewAllocationExpression -> . PlainNewAllocationExpression
    (153) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (127) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (128) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (154) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (155) PlainNewAllocationExpression -> . ClassAllocationExpression
    (156) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (157) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (158) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (129) ComplexPrimaryNoParenthesis -> . INT_CONST
    (130) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (131) ComplexPrimaryNoParenthesis -> . STRING
    (132) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (133) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (134) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (135) ComplexPrimaryNoParenthesis -> . FieldAccess
    (136) ComplexPrimaryNoParenthesis -> . MethodCall
    (161) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (162) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (163) ArrayAllocationExpression -> . NEW TypeName Dims
    (159) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (160) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (137) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (138) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (139) FieldAccess -> . NotJustName DOT IDENTIFIER
    (140) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (141) FieldAccess -> . QualifiedName DOT THIS
    (142) FieldAccess -> . QualifiedName DOT CLASS
    (143) FieldAccess -> . PrimitiveType DOT CLASS
    (144) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (145) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (146) MethodAccess -> . QualifiedName

    OP_INC          shift and go to state 106
    OP_DEC          shift and go to state 126
    PLUS            shift and go to state 90
    MINUS           shift and go to state 89
    ~               shift and go to state 141
    NOT             shift and go to state 119
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 91
    SUPER           shift and go to state 158
    NULL            shift and go to state 145
    LROUNPAREN      shift and go to state 118
    INT_CONST       shift and go to state 131
    FLOAT_CONST     shift and go to state 86
    STRING          shift and go to state 151
    CHAR_CONST      shift and go to state 144
    BOOLEAN_CONST   shift and go to state 157
    NEW             shift and go to state 127
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 121
    CastExpression                 shift and go to state 143
    PrimitiveType                  shift and go to state 187
    RealPostfixExpression          shift and go to state 96
    ArithmeticUnaryOperator        shift and go to state 97
    AndExpression                  shift and go to state 88
    ArrayAccess                    shift and go to state 108
    PrimaryExpression              shift and go to state 129
    EqualityExpression             shift and go to state 98
    LogicalUnaryOperator           shift and go to state 153
    ComplexPrimaryNoParenthesis    shift and go to state 100
    MultiplicativeExpression       shift and go to state 101
    ClassAllocationExpression      shift and go to state 122
    MethodCall                     shift and go to state 102
    ShiftExpression                shift and go to state 149
    NewAllocationExpression        shift and go to state 135
    NotJustName                    shift and go to state 152
    QualifiedName                  shift and go to state 190
    LogicalUnaryExpression         shift and go to state 154
    AdditiveExpression             shift and go to state 137
    ArrayAllocationExpression      shift and go to state 110
    UnaryExpression                shift and go to state 193
    InclusiveOrExpression          shift and go to state 140
    FieldAccess                    shift and go to state 156
    ExclusiveOrExpression          shift and go to state 113
    ConditionalAndExpression       shift and go to state 295
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    MethodAccess                   shift and go to state 111
    SpecialName                    shift and go to state 120

state 227

    (217) ConditionalExpression -> ConditionalOrExpression ? . Expression COLON ConditionalExpression
    (224) Expression -> . AssignmentExpression
    (218) AssignmentExpression -> . ConditionalExpression
    (219) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (216) ConditionalExpression -> . ConditionalOrExpression
    (217) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (173) UnaryExpression -> . OP_INC UnaryExpression
    (174) UnaryExpression -> . OP_DEC UnaryExpression
    (175) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (176) UnaryExpression -> . LogicalUnaryExpression
    (214) ConditionalOrExpression -> . ConditionalAndExpression
    (215) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (181) ArithmeticUnaryOperator -> . PLUS
    (182) ArithmeticUnaryOperator -> . MINUS
    (177) LogicalUnaryExpression -> . PostfixExpression
    (178) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (212) ConditionalAndExpression -> . InclusiveOrExpression
    (213) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (169) PostfixExpression -> . PrimaryExpression
    (170) PostfixExpression -> . RealPostfixExpression
    (179) LogicalUnaryOperator -> . ~
    (180) LogicalUnaryOperator -> . NOT
    (210) InclusiveOrExpression -> . ExclusiveOrExpression
    (211) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (122) PrimaryExpression -> . QualifiedName
    (123) PrimaryExpression -> . NotJustName
    (171) RealPostfixExpression -> . PostfixExpression OP_INC
    (172) RealPostfixExpression -> . PostfixExpression OP_DEC
    (208) ExclusiveOrExpression -> . AndExpression
    (209) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (124) NotJustName -> . SpecialName
    (125) NotJustName -> . NewAllocationExpression
    (126) NotJustName -> . ComplexPrimary
    (206) AndExpression -> . EqualityExpression
    (207) AndExpression -> . AndExpression & EqualityExpression
    (147) SpecialName -> . THIS
    (148) SpecialName -> . SUPER
    (149) SpecialName -> . NULL
    (152) NewAllocationExpression -> . PlainNewAllocationExpression
    (153) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (127) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (128) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (203) EqualityExpression -> . RelationalExpression
    (204) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (205) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (154) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (155) PlainNewAllocationExpression -> . ClassAllocationExpression
    (156) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (157) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (158) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (129) ComplexPrimaryNoParenthesis -> . INT_CONST
    (130) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (131) ComplexPrimaryNoParenthesis -> . STRING
    (132) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (133) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (134) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (135) ComplexPrimaryNoParenthesis -> . FieldAccess
    (136) ComplexPrimaryNoParenthesis -> . MethodCall
    (198) RelationalExpression -> . ShiftExpression
    (199) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (200) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (201) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (202) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (161) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (162) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (163) ArrayAllocationExpression -> . NEW TypeName Dims
    (159) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (160) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (137) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (138) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (139) FieldAccess -> . NotJustName DOT IDENTIFIER
    (140) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (141) FieldAccess -> . QualifiedName DOT THIS
    (142) FieldAccess -> . QualifiedName DOT CLASS
    (143) FieldAccess -> . PrimitiveType DOT CLASS
    (144) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (145) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (194) ShiftExpression -> . AdditiveExpression
    (195) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (196) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (197) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (146) MethodAccess -> . QualifiedName
    (191) AdditiveExpression -> . MultiplicativeExpression
    (192) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (193) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (187) MultiplicativeExpression -> . CastExpression
    (188) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (189) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (190) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (183) CastExpression -> . UnaryExpression

    OP_INC          shift and go to state 106
    OP_DEC          shift and go to state 126
    PLUS            shift and go to state 90
    MINUS           shift and go to state 89
    ~               shift and go to state 141
    NOT             shift and go to state 119
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 91
    SUPER           shift and go to state 158
    NULL            shift and go to state 145
    LROUNPAREN      shift and go to state 118
    INT_CONST       shift and go to state 131
    FLOAT_CONST     shift and go to state 86
    STRING          shift and go to state 151
    CHAR_CONST      shift and go to state 144
    BOOLEAN_CONST   shift and go to state 157
    NEW             shift and go to state 127
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 121
    PrimaryExpression              shift and go to state 129
    PrimitiveType                  shift and go to state 187
    RealPostfixExpression          shift and go to state 96
    ArithmeticUnaryOperator        shift and go to state 97
    AndExpression                  shift and go to state 88
    ArrayAccess                    shift and go to state 108
    CastExpression                 shift and go to state 143
    EqualityExpression             shift and go to state 98
    LogicalUnaryOperator           shift and go to state 153
    ComplexPrimaryNoParenthesis    shift and go to state 100
    MultiplicativeExpression       shift and go to state 101
    ClassAllocationExpression      shift and go to state 122
    MethodCall                     shift and go to state 102
    ConditionalOrExpression        shift and go to state 133
    ShiftExpression                shift and go to state 149
    AssignmentExpression           shift and go to state 104
    NewAllocationExpression        shift and go to state 135
    NotJustName                    shift and go to state 152
    QualifiedName                  shift and go to state 190
    LogicalUnaryExpression         shift and go to state 154
    Expression                     shift and go to state 296
    AdditiveExpression             shift and go to state 137
    ArrayAllocationExpression      shift and go to state 110
    ConditionalExpression          shift and go to state 138
    UnaryExpression                shift and go to state 139
    InclusiveOrExpression          shift and go to state 140
    MethodAccess                   shift and go to state 111
    ExclusiveOrExpression          shift and go to state 113
    ConditionalAndExpression       shift and go to state 92
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    FieldAccess                    shift and go to state 156
    SpecialName                    shift and go to state 120

state 228

    (95) LabelStatement -> IDENTIFIER COLON .

    RCURPAREN       reduce using rule 95 (LabelStatement -> IDENTIFIER COLON .)
    SEMICOLON       reduce using rule 95 (LabelStatement -> IDENTIFIER COLON .)
    IDENTIFIER      reduce using rule 95 (LabelStatement -> IDENTIFIER COLON .)
    CASE            reduce using rule 95 (LabelStatement -> IDENTIFIER COLON .)
    DEFAULT         reduce using rule 95 (LabelStatement -> IDENTIFIER COLON .)
    BREAK           reduce using rule 95 (LabelStatement -> IDENTIFIER COLON .)
    CONTINUE        reduce using rule 95 (LabelStatement -> IDENTIFIER COLON .)
    RETURN          reduce using rule 95 (LabelStatement -> IDENTIFIER COLON .)
    LCURPAREN       reduce using rule 95 (LabelStatement -> IDENTIFIER COLON .)
    WHILE           reduce using rule 95 (LabelStatement -> IDENTIFIER COLON .)
    FOR             reduce using rule 95 (LabelStatement -> IDENTIFIER COLON .)
    IF              reduce using rule 95 (LabelStatement -> IDENTIFIER COLON .)
    DO              reduce using rule 95 (LabelStatement -> IDENTIFIER COLON .)
    BOOLEAN         reduce using rule 95 (LabelStatement -> IDENTIFIER COLON .)
    CHAR            reduce using rule 95 (LabelStatement -> IDENTIFIER COLON .)
    BYTE            reduce using rule 95 (LabelStatement -> IDENTIFIER COLON .)
    SHORT           reduce using rule 95 (LabelStatement -> IDENTIFIER COLON .)
    INT             reduce using rule 95 (LabelStatement -> IDENTIFIER COLON .)
    LONG            reduce using rule 95 (LabelStatement -> IDENTIFIER COLON .)
    FLOAT           reduce using rule 95 (LabelStatement -> IDENTIFIER COLON .)
    DOUBLE          reduce using rule 95 (LabelStatement -> IDENTIFIER COLON .)
    VOID            reduce using rule 95 (LabelStatement -> IDENTIFIER COLON .)
    OP_INC          reduce using rule 95 (LabelStatement -> IDENTIFIER COLON .)
    OP_DEC          reduce using rule 95 (LabelStatement -> IDENTIFIER COLON .)
    PLUS            reduce using rule 95 (LabelStatement -> IDENTIFIER COLON .)
    MINUS           reduce using rule 95 (LabelStatement -> IDENTIFIER COLON .)
    ~               reduce using rule 95 (LabelStatement -> IDENTIFIER COLON .)
    NOT             reduce using rule 95 (LabelStatement -> IDENTIFIER COLON .)
    THIS            reduce using rule 95 (LabelStatement -> IDENTIFIER COLON .)
    SUPER           reduce using rule 95 (LabelStatement -> IDENTIFIER COLON .)
    NULL            reduce using rule 95 (LabelStatement -> IDENTIFIER COLON .)
    LROUNPAREN      reduce using rule 95 (LabelStatement -> IDENTIFIER COLON .)
    INT_CONST       reduce using rule 95 (LabelStatement -> IDENTIFIER COLON .)
    FLOAT_CONST     reduce using rule 95 (LabelStatement -> IDENTIFIER COLON .)
    STRING          reduce using rule 95 (LabelStatement -> IDENTIFIER COLON .)
    CHAR_CONST      reduce using rule 95 (LabelStatement -> IDENTIFIER COLON .)
    BOOLEAN_CONST   reduce using rule 95 (LabelStatement -> IDENTIFIER COLON .)
    NEW             reduce using rule 95 (LabelStatement -> IDENTIFIER COLON .)
    ELSE            reduce using rule 95 (LabelStatement -> IDENTIFIER COLON .)


state 229

    (192) AdditiveExpression -> AdditiveExpression PLUS . MultiplicativeExpression
    (187) MultiplicativeExpression -> . CastExpression
    (188) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (189) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (190) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (183) CastExpression -> . UnaryExpression
    (173) UnaryExpression -> . OP_INC UnaryExpression
    (174) UnaryExpression -> . OP_DEC UnaryExpression
    (175) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (176) UnaryExpression -> . LogicalUnaryExpression
    (181) ArithmeticUnaryOperator -> . PLUS
    (182) ArithmeticUnaryOperator -> . MINUS
    (177) LogicalUnaryExpression -> . PostfixExpression
    (178) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (169) PostfixExpression -> . PrimaryExpression
    (170) PostfixExpression -> . RealPostfixExpression
    (179) LogicalUnaryOperator -> . ~
    (180) LogicalUnaryOperator -> . NOT
    (122) PrimaryExpression -> . QualifiedName
    (123) PrimaryExpression -> . NotJustName
    (171) RealPostfixExpression -> . PostfixExpression OP_INC
    (172) RealPostfixExpression -> . PostfixExpression OP_DEC
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (124) NotJustName -> . SpecialName
    (125) NotJustName -> . NewAllocationExpression
    (126) NotJustName -> . ComplexPrimary
    (147) SpecialName -> . THIS
    (148) SpecialName -> . SUPER
    (149) SpecialName -> . NULL
    (152) NewAllocationExpression -> . PlainNewAllocationExpression
    (153) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (127) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (128) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (154) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (155) PlainNewAllocationExpression -> . ClassAllocationExpression
    (156) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (157) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (158) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (129) ComplexPrimaryNoParenthesis -> . INT_CONST
    (130) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (131) ComplexPrimaryNoParenthesis -> . STRING
    (132) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (133) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (134) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (135) ComplexPrimaryNoParenthesis -> . FieldAccess
    (136) ComplexPrimaryNoParenthesis -> . MethodCall
    (161) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (162) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (163) ArrayAllocationExpression -> . NEW TypeName Dims
    (159) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (160) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (137) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (138) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (139) FieldAccess -> . NotJustName DOT IDENTIFIER
    (140) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (141) FieldAccess -> . QualifiedName DOT THIS
    (142) FieldAccess -> . QualifiedName DOT CLASS
    (143) FieldAccess -> . PrimitiveType DOT CLASS
    (144) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (145) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (146) MethodAccess -> . QualifiedName

    OP_INC          shift and go to state 106
    OP_DEC          shift and go to state 126
    PLUS            shift and go to state 90
    MINUS           shift and go to state 89
    ~               shift and go to state 141
    NOT             shift and go to state 119
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 91
    SUPER           shift and go to state 158
    NULL            shift and go to state 145
    LROUNPAREN      shift and go to state 118
    INT_CONST       shift and go to state 131
    FLOAT_CONST     shift and go to state 86
    STRING          shift and go to state 151
    CHAR_CONST      shift and go to state 144
    BOOLEAN_CONST   shift and go to state 157
    NEW             shift and go to state 127
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 121
    CastExpression                 shift and go to state 143
    PrimitiveType                  shift and go to state 187
    RealPostfixExpression          shift and go to state 96
    ArithmeticUnaryOperator        shift and go to state 97
    ArrayAccess                    shift and go to state 108
    ClassAllocationExpression      shift and go to state 122
    LogicalUnaryOperator           shift and go to state 153
    ComplexPrimaryNoParenthesis    shift and go to state 100
    MultiplicativeExpression       shift and go to state 297
    MethodCall                     shift and go to state 102
    NewAllocationExpression        shift and go to state 135
    NotJustName                    shift and go to state 152
    QualifiedName                  shift and go to state 190
    LogicalUnaryExpression         shift and go to state 154
    ArrayAllocationExpression      shift and go to state 110
    UnaryExpression                shift and go to state 193
    PrimaryExpression              shift and go to state 129
    FieldAccess                    shift and go to state 156
    PlainNewAllocationExpression   shift and go to state 115
    MethodAccess                   shift and go to state 111
    SpecialName                    shift and go to state 120

state 230

    (193) AdditiveExpression -> AdditiveExpression MINUS . MultiplicativeExpression
    (187) MultiplicativeExpression -> . CastExpression
    (188) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (189) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (190) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (183) CastExpression -> . UnaryExpression
    (173) UnaryExpression -> . OP_INC UnaryExpression
    (174) UnaryExpression -> . OP_DEC UnaryExpression
    (175) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (176) UnaryExpression -> . LogicalUnaryExpression
    (181) ArithmeticUnaryOperator -> . PLUS
    (182) ArithmeticUnaryOperator -> . MINUS
    (177) LogicalUnaryExpression -> . PostfixExpression
    (178) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (169) PostfixExpression -> . PrimaryExpression
    (170) PostfixExpression -> . RealPostfixExpression
    (179) LogicalUnaryOperator -> . ~
    (180) LogicalUnaryOperator -> . NOT
    (122) PrimaryExpression -> . QualifiedName
    (123) PrimaryExpression -> . NotJustName
    (171) RealPostfixExpression -> . PostfixExpression OP_INC
    (172) RealPostfixExpression -> . PostfixExpression OP_DEC
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (124) NotJustName -> . SpecialName
    (125) NotJustName -> . NewAllocationExpression
    (126) NotJustName -> . ComplexPrimary
    (147) SpecialName -> . THIS
    (148) SpecialName -> . SUPER
    (149) SpecialName -> . NULL
    (152) NewAllocationExpression -> . PlainNewAllocationExpression
    (153) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (127) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (128) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (154) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (155) PlainNewAllocationExpression -> . ClassAllocationExpression
    (156) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (157) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (158) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (129) ComplexPrimaryNoParenthesis -> . INT_CONST
    (130) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (131) ComplexPrimaryNoParenthesis -> . STRING
    (132) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (133) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (134) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (135) ComplexPrimaryNoParenthesis -> . FieldAccess
    (136) ComplexPrimaryNoParenthesis -> . MethodCall
    (161) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (162) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (163) ArrayAllocationExpression -> . NEW TypeName Dims
    (159) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (160) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (137) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (138) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (139) FieldAccess -> . NotJustName DOT IDENTIFIER
    (140) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (141) FieldAccess -> . QualifiedName DOT THIS
    (142) FieldAccess -> . QualifiedName DOT CLASS
    (143) FieldAccess -> . PrimitiveType DOT CLASS
    (144) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (145) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (146) MethodAccess -> . QualifiedName

    OP_INC          shift and go to state 106
    OP_DEC          shift and go to state 126
    PLUS            shift and go to state 90
    MINUS           shift and go to state 89
    ~               shift and go to state 141
    NOT             shift and go to state 119
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 91
    SUPER           shift and go to state 158
    NULL            shift and go to state 145
    LROUNPAREN      shift and go to state 118
    INT_CONST       shift and go to state 131
    FLOAT_CONST     shift and go to state 86
    STRING          shift and go to state 151
    CHAR_CONST      shift and go to state 144
    BOOLEAN_CONST   shift and go to state 157
    NEW             shift and go to state 127
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 121
    CastExpression                 shift and go to state 143
    PrimitiveType                  shift and go to state 187
    RealPostfixExpression          shift and go to state 96
    ArithmeticUnaryOperator        shift and go to state 97
    ArrayAccess                    shift and go to state 108
    ClassAllocationExpression      shift and go to state 122
    LogicalUnaryOperator           shift and go to state 153
    ComplexPrimaryNoParenthesis    shift and go to state 100
    MultiplicativeExpression       shift and go to state 298
    MethodCall                     shift and go to state 102
    NewAllocationExpression        shift and go to state 135
    NotJustName                    shift and go to state 152
    QualifiedName                  shift and go to state 190
    LogicalUnaryExpression         shift and go to state 154
    ArrayAllocationExpression      shift and go to state 110
    UnaryExpression                shift and go to state 193
    PrimaryExpression              shift and go to state 129
    FieldAccess                    shift and go to state 156
    PlainNewAllocationExpression   shift and go to state 115
    MethodAccess                   shift and go to state 111
    SpecialName                    shift and go to state 120

state 231

    (221) AssignmentOperator -> ASS_MUL .

    OP_INC          reduce using rule 221 (AssignmentOperator -> ASS_MUL .)
    OP_DEC          reduce using rule 221 (AssignmentOperator -> ASS_MUL .)
    PLUS            reduce using rule 221 (AssignmentOperator -> ASS_MUL .)
    MINUS           reduce using rule 221 (AssignmentOperator -> ASS_MUL .)
    ~               reduce using rule 221 (AssignmentOperator -> ASS_MUL .)
    NOT             reduce using rule 221 (AssignmentOperator -> ASS_MUL .)
    IDENTIFIER      reduce using rule 221 (AssignmentOperator -> ASS_MUL .)
    THIS            reduce using rule 221 (AssignmentOperator -> ASS_MUL .)
    SUPER           reduce using rule 221 (AssignmentOperator -> ASS_MUL .)
    NULL            reduce using rule 221 (AssignmentOperator -> ASS_MUL .)
    LROUNPAREN      reduce using rule 221 (AssignmentOperator -> ASS_MUL .)
    INT_CONST       reduce using rule 221 (AssignmentOperator -> ASS_MUL .)
    FLOAT_CONST     reduce using rule 221 (AssignmentOperator -> ASS_MUL .)
    STRING          reduce using rule 221 (AssignmentOperator -> ASS_MUL .)
    CHAR_CONST      reduce using rule 221 (AssignmentOperator -> ASS_MUL .)
    BOOLEAN_CONST   reduce using rule 221 (AssignmentOperator -> ASS_MUL .)
    NEW             reduce using rule 221 (AssignmentOperator -> ASS_MUL .)
    BOOLEAN         reduce using rule 221 (AssignmentOperator -> ASS_MUL .)
    CHAR            reduce using rule 221 (AssignmentOperator -> ASS_MUL .)
    BYTE            reduce using rule 221 (AssignmentOperator -> ASS_MUL .)
    SHORT           reduce using rule 221 (AssignmentOperator -> ASS_MUL .)
    INT             reduce using rule 221 (AssignmentOperator -> ASS_MUL .)
    LONG            reduce using rule 221 (AssignmentOperator -> ASS_MUL .)
    FLOAT           reduce using rule 221 (AssignmentOperator -> ASS_MUL .)
    DOUBLE          reduce using rule 221 (AssignmentOperator -> ASS_MUL .)
    VOID            reduce using rule 221 (AssignmentOperator -> ASS_MUL .)


state 232

    (222) AssignmentOperator -> ASS_ADD .

    OP_INC          reduce using rule 222 (AssignmentOperator -> ASS_ADD .)
    OP_DEC          reduce using rule 222 (AssignmentOperator -> ASS_ADD .)
    PLUS            reduce using rule 222 (AssignmentOperator -> ASS_ADD .)
    MINUS           reduce using rule 222 (AssignmentOperator -> ASS_ADD .)
    ~               reduce using rule 222 (AssignmentOperator -> ASS_ADD .)
    NOT             reduce using rule 222 (AssignmentOperator -> ASS_ADD .)
    IDENTIFIER      reduce using rule 222 (AssignmentOperator -> ASS_ADD .)
    THIS            reduce using rule 222 (AssignmentOperator -> ASS_ADD .)
    SUPER           reduce using rule 222 (AssignmentOperator -> ASS_ADD .)
    NULL            reduce using rule 222 (AssignmentOperator -> ASS_ADD .)
    LROUNPAREN      reduce using rule 222 (AssignmentOperator -> ASS_ADD .)
    INT_CONST       reduce using rule 222 (AssignmentOperator -> ASS_ADD .)
    FLOAT_CONST     reduce using rule 222 (AssignmentOperator -> ASS_ADD .)
    STRING          reduce using rule 222 (AssignmentOperator -> ASS_ADD .)
    CHAR_CONST      reduce using rule 222 (AssignmentOperator -> ASS_ADD .)
    BOOLEAN_CONST   reduce using rule 222 (AssignmentOperator -> ASS_ADD .)
    NEW             reduce using rule 222 (AssignmentOperator -> ASS_ADD .)
    BOOLEAN         reduce using rule 222 (AssignmentOperator -> ASS_ADD .)
    CHAR            reduce using rule 222 (AssignmentOperator -> ASS_ADD .)
    BYTE            reduce using rule 222 (AssignmentOperator -> ASS_ADD .)
    SHORT           reduce using rule 222 (AssignmentOperator -> ASS_ADD .)
    INT             reduce using rule 222 (AssignmentOperator -> ASS_ADD .)
    LONG            reduce using rule 222 (AssignmentOperator -> ASS_ADD .)
    FLOAT           reduce using rule 222 (AssignmentOperator -> ASS_ADD .)
    DOUBLE          reduce using rule 222 (AssignmentOperator -> ASS_ADD .)
    VOID            reduce using rule 222 (AssignmentOperator -> ASS_ADD .)


state 233

    (219) AssignmentExpression -> UnaryExpression AssignmentOperator . AssignmentExpression
    (218) AssignmentExpression -> . ConditionalExpression
    (219) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (216) ConditionalExpression -> . ConditionalOrExpression
    (217) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (173) UnaryExpression -> . OP_INC UnaryExpression
    (174) UnaryExpression -> . OP_DEC UnaryExpression
    (175) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (176) UnaryExpression -> . LogicalUnaryExpression
    (214) ConditionalOrExpression -> . ConditionalAndExpression
    (215) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (181) ArithmeticUnaryOperator -> . PLUS
    (182) ArithmeticUnaryOperator -> . MINUS
    (177) LogicalUnaryExpression -> . PostfixExpression
    (178) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (212) ConditionalAndExpression -> . InclusiveOrExpression
    (213) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (169) PostfixExpression -> . PrimaryExpression
    (170) PostfixExpression -> . RealPostfixExpression
    (179) LogicalUnaryOperator -> . ~
    (180) LogicalUnaryOperator -> . NOT
    (210) InclusiveOrExpression -> . ExclusiveOrExpression
    (211) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (122) PrimaryExpression -> . QualifiedName
    (123) PrimaryExpression -> . NotJustName
    (171) RealPostfixExpression -> . PostfixExpression OP_INC
    (172) RealPostfixExpression -> . PostfixExpression OP_DEC
    (208) ExclusiveOrExpression -> . AndExpression
    (209) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (124) NotJustName -> . SpecialName
    (125) NotJustName -> . NewAllocationExpression
    (126) NotJustName -> . ComplexPrimary
    (206) AndExpression -> . EqualityExpression
    (207) AndExpression -> . AndExpression & EqualityExpression
    (147) SpecialName -> . THIS
    (148) SpecialName -> . SUPER
    (149) SpecialName -> . NULL
    (152) NewAllocationExpression -> . PlainNewAllocationExpression
    (153) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (127) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (128) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (203) EqualityExpression -> . RelationalExpression
    (204) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (205) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (154) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (155) PlainNewAllocationExpression -> . ClassAllocationExpression
    (156) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (157) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (158) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (129) ComplexPrimaryNoParenthesis -> . INT_CONST
    (130) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (131) ComplexPrimaryNoParenthesis -> . STRING
    (132) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (133) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (134) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (135) ComplexPrimaryNoParenthesis -> . FieldAccess
    (136) ComplexPrimaryNoParenthesis -> . MethodCall
    (198) RelationalExpression -> . ShiftExpression
    (199) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (200) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (201) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (202) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (161) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (162) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (163) ArrayAllocationExpression -> . NEW TypeName Dims
    (159) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (160) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (137) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (138) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (139) FieldAccess -> . NotJustName DOT IDENTIFIER
    (140) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (141) FieldAccess -> . QualifiedName DOT THIS
    (142) FieldAccess -> . QualifiedName DOT CLASS
    (143) FieldAccess -> . PrimitiveType DOT CLASS
    (144) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (145) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (194) ShiftExpression -> . AdditiveExpression
    (195) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (196) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (197) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (146) MethodAccess -> . QualifiedName
    (191) AdditiveExpression -> . MultiplicativeExpression
    (192) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (193) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (187) MultiplicativeExpression -> . CastExpression
    (188) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (189) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (190) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (183) CastExpression -> . UnaryExpression

    OP_INC          shift and go to state 106
    OP_DEC          shift and go to state 126
    PLUS            shift and go to state 90
    MINUS           shift and go to state 89
    ~               shift and go to state 141
    NOT             shift and go to state 119
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 91
    SUPER           shift and go to state 158
    NULL            shift and go to state 145
    LROUNPAREN      shift and go to state 118
    INT_CONST       shift and go to state 131
    FLOAT_CONST     shift and go to state 86
    STRING          shift and go to state 151
    CHAR_CONST      shift and go to state 144
    BOOLEAN_CONST   shift and go to state 157
    NEW             shift and go to state 127
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 121
    PrimaryExpression              shift and go to state 129
    PrimitiveType                  shift and go to state 187
    RealPostfixExpression          shift and go to state 96
    ArithmeticUnaryOperator        shift and go to state 97
    AndExpression                  shift and go to state 88
    ArrayAccess                    shift and go to state 108
    CastExpression                 shift and go to state 143
    EqualityExpression             shift and go to state 98
    LogicalUnaryOperator           shift and go to state 153
    ComplexPrimaryNoParenthesis    shift and go to state 100
    MultiplicativeExpression       shift and go to state 101
    ClassAllocationExpression      shift and go to state 122
    MethodCall                     shift and go to state 102
    ConditionalOrExpression        shift and go to state 133
    ShiftExpression                shift and go to state 149
    AssignmentExpression           shift and go to state 299
    NewAllocationExpression        shift and go to state 135
    NotJustName                    shift and go to state 152
    QualifiedName                  shift and go to state 190
    LogicalUnaryExpression         shift and go to state 154
    AdditiveExpression             shift and go to state 137
    ArrayAllocationExpression      shift and go to state 110
    ConditionalExpression          shift and go to state 138
    UnaryExpression                shift and go to state 139
    InclusiveOrExpression          shift and go to state 140
    MethodAccess                   shift and go to state 111
    ExclusiveOrExpression          shift and go to state 113
    ConditionalAndExpression       shift and go to state 92
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    FieldAccess                    shift and go to state 156
    SpecialName                    shift and go to state 120

state 234

    (220) AssignmentOperator -> EQUAL .

    OP_INC          reduce using rule 220 (AssignmentOperator -> EQUAL .)
    OP_DEC          reduce using rule 220 (AssignmentOperator -> EQUAL .)
    PLUS            reduce using rule 220 (AssignmentOperator -> EQUAL .)
    MINUS           reduce using rule 220 (AssignmentOperator -> EQUAL .)
    ~               reduce using rule 220 (AssignmentOperator -> EQUAL .)
    NOT             reduce using rule 220 (AssignmentOperator -> EQUAL .)
    IDENTIFIER      reduce using rule 220 (AssignmentOperator -> EQUAL .)
    THIS            reduce using rule 220 (AssignmentOperator -> EQUAL .)
    SUPER           reduce using rule 220 (AssignmentOperator -> EQUAL .)
    NULL            reduce using rule 220 (AssignmentOperator -> EQUAL .)
    LROUNPAREN      reduce using rule 220 (AssignmentOperator -> EQUAL .)
    INT_CONST       reduce using rule 220 (AssignmentOperator -> EQUAL .)
    FLOAT_CONST     reduce using rule 220 (AssignmentOperator -> EQUAL .)
    STRING          reduce using rule 220 (AssignmentOperator -> EQUAL .)
    CHAR_CONST      reduce using rule 220 (AssignmentOperator -> EQUAL .)
    BOOLEAN_CONST   reduce using rule 220 (AssignmentOperator -> EQUAL .)
    NEW             reduce using rule 220 (AssignmentOperator -> EQUAL .)
    BOOLEAN         reduce using rule 220 (AssignmentOperator -> EQUAL .)
    CHAR            reduce using rule 220 (AssignmentOperator -> EQUAL .)
    BYTE            reduce using rule 220 (AssignmentOperator -> EQUAL .)
    SHORT           reduce using rule 220 (AssignmentOperator -> EQUAL .)
    INT             reduce using rule 220 (AssignmentOperator -> EQUAL .)
    LONG            reduce using rule 220 (AssignmentOperator -> EQUAL .)
    FLOAT           reduce using rule 220 (AssignmentOperator -> EQUAL .)
    DOUBLE          reduce using rule 220 (AssignmentOperator -> EQUAL .)
    VOID            reduce using rule 220 (AssignmentOperator -> EQUAL .)


state 235

    (223) AssignmentOperator -> ASS_SUB .

    OP_INC          reduce using rule 223 (AssignmentOperator -> ASS_SUB .)
    OP_DEC          reduce using rule 223 (AssignmentOperator -> ASS_SUB .)
    PLUS            reduce using rule 223 (AssignmentOperator -> ASS_SUB .)
    MINUS           reduce using rule 223 (AssignmentOperator -> ASS_SUB .)
    ~               reduce using rule 223 (AssignmentOperator -> ASS_SUB .)
    NOT             reduce using rule 223 (AssignmentOperator -> ASS_SUB .)
    IDENTIFIER      reduce using rule 223 (AssignmentOperator -> ASS_SUB .)
    THIS            reduce using rule 223 (AssignmentOperator -> ASS_SUB .)
    SUPER           reduce using rule 223 (AssignmentOperator -> ASS_SUB .)
    NULL            reduce using rule 223 (AssignmentOperator -> ASS_SUB .)
    LROUNPAREN      reduce using rule 223 (AssignmentOperator -> ASS_SUB .)
    INT_CONST       reduce using rule 223 (AssignmentOperator -> ASS_SUB .)
    FLOAT_CONST     reduce using rule 223 (AssignmentOperator -> ASS_SUB .)
    STRING          reduce using rule 223 (AssignmentOperator -> ASS_SUB .)
    CHAR_CONST      reduce using rule 223 (AssignmentOperator -> ASS_SUB .)
    BOOLEAN_CONST   reduce using rule 223 (AssignmentOperator -> ASS_SUB .)
    NEW             reduce using rule 223 (AssignmentOperator -> ASS_SUB .)
    BOOLEAN         reduce using rule 223 (AssignmentOperator -> ASS_SUB .)
    CHAR            reduce using rule 223 (AssignmentOperator -> ASS_SUB .)
    BYTE            reduce using rule 223 (AssignmentOperator -> ASS_SUB .)
    SHORT           reduce using rule 223 (AssignmentOperator -> ASS_SUB .)
    INT             reduce using rule 223 (AssignmentOperator -> ASS_SUB .)
    LONG            reduce using rule 223 (AssignmentOperator -> ASS_SUB .)
    FLOAT           reduce using rule 223 (AssignmentOperator -> ASS_SUB .)
    DOUBLE          reduce using rule 223 (AssignmentOperator -> ASS_SUB .)
    VOID            reduce using rule 223 (AssignmentOperator -> ASS_SUB .)


state 236

    (211) InclusiveOrExpression -> InclusiveOrExpression | . ExclusiveOrExpression
    (208) ExclusiveOrExpression -> . AndExpression
    (209) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (206) AndExpression -> . EqualityExpression
    (207) AndExpression -> . AndExpression & EqualityExpression
    (203) EqualityExpression -> . RelationalExpression
    (204) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (205) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (198) RelationalExpression -> . ShiftExpression
    (199) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (200) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (201) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (202) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (194) ShiftExpression -> . AdditiveExpression
    (195) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (196) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (197) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (191) AdditiveExpression -> . MultiplicativeExpression
    (192) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (193) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (187) MultiplicativeExpression -> . CastExpression
    (188) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (189) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (190) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (183) CastExpression -> . UnaryExpression
    (173) UnaryExpression -> . OP_INC UnaryExpression
    (174) UnaryExpression -> . OP_DEC UnaryExpression
    (175) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (176) UnaryExpression -> . LogicalUnaryExpression
    (181) ArithmeticUnaryOperator -> . PLUS
    (182) ArithmeticUnaryOperator -> . MINUS
    (177) LogicalUnaryExpression -> . PostfixExpression
    (178) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (169) PostfixExpression -> . PrimaryExpression
    (170) PostfixExpression -> . RealPostfixExpression
    (179) LogicalUnaryOperator -> . ~
    (180) LogicalUnaryOperator -> . NOT
    (122) PrimaryExpression -> . QualifiedName
    (123) PrimaryExpression -> . NotJustName
    (171) RealPostfixExpression -> . PostfixExpression OP_INC
    (172) RealPostfixExpression -> . PostfixExpression OP_DEC
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (124) NotJustName -> . SpecialName
    (125) NotJustName -> . NewAllocationExpression
    (126) NotJustName -> . ComplexPrimary
    (147) SpecialName -> . THIS
    (148) SpecialName -> . SUPER
    (149) SpecialName -> . NULL
    (152) NewAllocationExpression -> . PlainNewAllocationExpression
    (153) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (127) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (128) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (154) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (155) PlainNewAllocationExpression -> . ClassAllocationExpression
    (156) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (157) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (158) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (129) ComplexPrimaryNoParenthesis -> . INT_CONST
    (130) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (131) ComplexPrimaryNoParenthesis -> . STRING
    (132) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (133) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (134) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (135) ComplexPrimaryNoParenthesis -> . FieldAccess
    (136) ComplexPrimaryNoParenthesis -> . MethodCall
    (161) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (162) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (163) ArrayAllocationExpression -> . NEW TypeName Dims
    (159) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (160) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (137) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (138) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (139) FieldAccess -> . NotJustName DOT IDENTIFIER
    (140) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (141) FieldAccess -> . QualifiedName DOT THIS
    (142) FieldAccess -> . QualifiedName DOT CLASS
    (143) FieldAccess -> . PrimitiveType DOT CLASS
    (144) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (145) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (146) MethodAccess -> . QualifiedName

    OP_INC          shift and go to state 106
    OP_DEC          shift and go to state 126
    PLUS            shift and go to state 90
    MINUS           shift and go to state 89
    ~               shift and go to state 141
    NOT             shift and go to state 119
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 91
    SUPER           shift and go to state 158
    NULL            shift and go to state 145
    LROUNPAREN      shift and go to state 118
    INT_CONST       shift and go to state 131
    FLOAT_CONST     shift and go to state 86
    STRING          shift and go to state 151
    CHAR_CONST      shift and go to state 144
    BOOLEAN_CONST   shift and go to state 157
    NEW             shift and go to state 127
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43

    ComplexPrimary                 shift and go to state 121
    PostfixExpression              shift and go to state 112
    CastExpression                 shift and go to state 143
    PrimitiveType                  shift and go to state 187
    RealPostfixExpression          shift and go to state 96
    ArithmeticUnaryOperator        shift and go to state 97
    AndExpression                  shift and go to state 88
    ArrayAccess                    shift and go to state 108
    PrimaryExpression              shift and go to state 129
    EqualityExpression             shift and go to state 98
    LogicalUnaryOperator           shift and go to state 153
    ComplexPrimaryNoParenthesis    shift and go to state 100
    MultiplicativeExpression       shift and go to state 101
    ClassAllocationExpression      shift and go to state 122
    MethodCall                     shift and go to state 102
    ShiftExpression                shift and go to state 149
    NewAllocationExpression        shift and go to state 135
    NotJustName                    shift and go to state 152
    QualifiedName                  shift and go to state 190
    LogicalUnaryExpression         shift and go to state 154
    AdditiveExpression             shift and go to state 137
    ArrayAllocationExpression      shift and go to state 110
    UnaryExpression                shift and go to state 193
    FieldAccess                    shift and go to state 156
    ExclusiveOrExpression          shift and go to state 300
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    MethodAccess                   shift and go to state 111
    SpecialName                    shift and go to state 120

state 237

    (105) IterationStatement -> Do Mark_quad . Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON
    (86) Statement -> . EmptyStatement Mark_quad
    (87) Statement -> . LabelStatement Mark_quad
    (88) Statement -> . ExpressionStatement SEMICOLON Mark_quad
    (89) Statement -> . JumpStatement Mark_quad
    (90) Statement -> . Block Mark_quad
    (91) Statement -> . IterationStatement Mark_quad
    (92) Statement -> . SelectionStatement Mark_quad
    (94) EmptyStatement -> . SEMICOLON
    (95) LabelStatement -> . IDENTIFIER COLON
    (96) LabelStatement -> . CASE ConstantExpression COLON
    (97) LabelStatement -> . DEFAULT COLON
    (98) ExpressionStatement -> . Expression
    (118) JumpStatement -> . BREAK SEMICOLON
    (119) JumpStatement -> . CONTINUE SEMICOLON
    (120) JumpStatement -> . RETURN Expression SEMICOLON
    (121) JumpStatement -> . RETURN SEMICOLON
    (79) Block -> . LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN
    (80) Block -> . LCURPAREN RCURPAREN
    (103) IterationStatement -> . WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement
    (105) IterationStatement -> . Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON
    (108) IterationStatement -> . FOR LROUNPAREN ForInit ForExpr Mark_quad ForIncr RROUNPAREN Mark_quad Statement
    (109) IterationStatement -> . FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement
    (99) SelectionStatement -> . IF LROUNPAREN Expression RROUNPAREN Mark_if Statement
    (100) SelectionStatement -> . IF LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement
    (224) Expression -> . AssignmentExpression
    (106) Do -> . DO
    (218) AssignmentExpression -> . ConditionalExpression
    (219) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (216) ConditionalExpression -> . ConditionalOrExpression
    (217) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (173) UnaryExpression -> . OP_INC UnaryExpression
    (174) UnaryExpression -> . OP_DEC UnaryExpression
    (175) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (176) UnaryExpression -> . LogicalUnaryExpression
    (214) ConditionalOrExpression -> . ConditionalAndExpression
    (215) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (181) ArithmeticUnaryOperator -> . PLUS
    (182) ArithmeticUnaryOperator -> . MINUS
    (177) LogicalUnaryExpression -> . PostfixExpression
    (178) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (212) ConditionalAndExpression -> . InclusiveOrExpression
    (213) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (169) PostfixExpression -> . PrimaryExpression
    (170) PostfixExpression -> . RealPostfixExpression
    (179) LogicalUnaryOperator -> . ~
    (180) LogicalUnaryOperator -> . NOT
    (210) InclusiveOrExpression -> . ExclusiveOrExpression
    (211) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (122) PrimaryExpression -> . QualifiedName
    (123) PrimaryExpression -> . NotJustName
    (171) RealPostfixExpression -> . PostfixExpression OP_INC
    (172) RealPostfixExpression -> . PostfixExpression OP_DEC
    (208) ExclusiveOrExpression -> . AndExpression
    (209) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (124) NotJustName -> . SpecialName
    (125) NotJustName -> . NewAllocationExpression
    (126) NotJustName -> . ComplexPrimary
    (206) AndExpression -> . EqualityExpression
    (207) AndExpression -> . AndExpression & EqualityExpression
    (147) SpecialName -> . THIS
    (148) SpecialName -> . SUPER
    (149) SpecialName -> . NULL
    (152) NewAllocationExpression -> . PlainNewAllocationExpression
    (153) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (127) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (128) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (203) EqualityExpression -> . RelationalExpression
    (204) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (205) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (154) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (155) PlainNewAllocationExpression -> . ClassAllocationExpression
    (156) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (157) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (158) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (129) ComplexPrimaryNoParenthesis -> . INT_CONST
    (130) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (131) ComplexPrimaryNoParenthesis -> . STRING
    (132) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (133) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (134) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (135) ComplexPrimaryNoParenthesis -> . FieldAccess
    (136) ComplexPrimaryNoParenthesis -> . MethodCall
    (198) RelationalExpression -> . ShiftExpression
    (199) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (200) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (201) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (202) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (161) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (162) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (163) ArrayAllocationExpression -> . NEW TypeName Dims
    (159) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (160) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (137) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (138) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (139) FieldAccess -> . NotJustName DOT IDENTIFIER
    (140) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (141) FieldAccess -> . QualifiedName DOT THIS
    (142) FieldAccess -> . QualifiedName DOT CLASS
    (143) FieldAccess -> . PrimitiveType DOT CLASS
    (144) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (145) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (194) ShiftExpression -> . AdditiveExpression
    (195) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (196) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (197) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (146) MethodAccess -> . QualifiedName
    (191) AdditiveExpression -> . MultiplicativeExpression
    (192) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (193) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (187) MultiplicativeExpression -> . CastExpression
    (188) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (189) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (190) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (183) CastExpression -> . UnaryExpression

    SEMICOLON       shift and go to state 132
    IDENTIFIER      shift and go to state 134
    CASE            shift and go to state 130
    DEFAULT         shift and go to state 123
    BREAK           shift and go to state 99
    CONTINUE        shift and go to state 116
    RETURN          shift and go to state 95
    LCURPAREN       shift and go to state 57
    WHILE           shift and go to state 125
    FOR             shift and go to state 105
    IF              shift and go to state 155
    DO              shift and go to state 142
    OP_INC          shift and go to state 106
    OP_DEC          shift and go to state 126
    PLUS            shift and go to state 90
    MINUS           shift and go to state 89
    ~               shift and go to state 141
    NOT             shift and go to state 119
    THIS            shift and go to state 91
    SUPER           shift and go to state 158
    NULL            shift and go to state 145
    LROUNPAREN      shift and go to state 118
    INT_CONST       shift and go to state 131
    FLOAT_CONST     shift and go to state 86
    STRING          shift and go to state 151
    CHAR_CONST      shift and go to state 144
    BOOLEAN_CONST   shift and go to state 157
    NEW             shift and go to state 127
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    LabelStatement                 shift and go to state 94
    ArithmeticUnaryOperator        shift and go to state 97
    AssignmentExpression           shift and go to state 104
    ExpressionStatement            shift and go to state 84
    JumpStatement                  shift and go to state 124
    RealPostfixExpression          shift and go to state 96
    Statement                      shift and go to state 301
    AndExpression                  shift and go to state 88
    ArrayAccess                    shift and go to state 108
    CastExpression                 shift and go to state 143
    EqualityExpression             shift and go to state 98
    Do                             shift and go to state 146
    LogicalUnaryOperator           shift and go to state 153
    ComplexPrimaryNoParenthesis    shift and go to state 100
    MultiplicativeExpression       shift and go to state 101
    ClassAllocationExpression      shift and go to state 122
    MethodCall                     shift and go to state 102
    ConditionalOrExpression        shift and go to state 133
    ShiftExpression                shift and go to state 149
    SelectionStatement             shift and go to state 103
    NewAllocationExpression        shift and go to state 135
    NotJustName                    shift and go to state 152
    QualifiedName                  shift and go to state 190
    ComplexPrimary                 shift and go to state 121
    PrimitiveType                  shift and go to state 187
    LogicalUnaryExpression         shift and go to state 154
    UnaryExpression                shift and go to state 139
    Expression                     shift and go to state 136
    Block                          shift and go to state 109
    AdditiveExpression             shift and go to state 137
    ArrayAllocationExpression      shift and go to state 110
    ConditionalExpression          shift and go to state 138
    InclusiveOrExpression          shift and go to state 140
    MethodAccess                   shift and go to state 111
    PrimaryExpression              shift and go to state 129
    ExclusiveOrExpression          shift and go to state 113
    ConditionalAndExpression       shift and go to state 92
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    FieldAccess                    shift and go to state 156
    EmptyStatement                 shift and go to state 93
    SpecialName                    shift and go to state 120
    IterationStatement             shift and go to state 159

state 238

    (137) ArrayAccess -> QualifiedName LSQPAREN . Expression RSQPAREN
    (224) Expression -> . AssignmentExpression
    (218) AssignmentExpression -> . ConditionalExpression
    (219) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (216) ConditionalExpression -> . ConditionalOrExpression
    (217) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (173) UnaryExpression -> . OP_INC UnaryExpression
    (174) UnaryExpression -> . OP_DEC UnaryExpression
    (175) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (176) UnaryExpression -> . LogicalUnaryExpression
    (214) ConditionalOrExpression -> . ConditionalAndExpression
    (215) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (181) ArithmeticUnaryOperator -> . PLUS
    (182) ArithmeticUnaryOperator -> . MINUS
    (177) LogicalUnaryExpression -> . PostfixExpression
    (178) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (212) ConditionalAndExpression -> . InclusiveOrExpression
    (213) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (169) PostfixExpression -> . PrimaryExpression
    (170) PostfixExpression -> . RealPostfixExpression
    (179) LogicalUnaryOperator -> . ~
    (180) LogicalUnaryOperator -> . NOT
    (210) InclusiveOrExpression -> . ExclusiveOrExpression
    (211) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (122) PrimaryExpression -> . QualifiedName
    (123) PrimaryExpression -> . NotJustName
    (171) RealPostfixExpression -> . PostfixExpression OP_INC
    (172) RealPostfixExpression -> . PostfixExpression OP_DEC
    (208) ExclusiveOrExpression -> . AndExpression
    (209) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (124) NotJustName -> . SpecialName
    (125) NotJustName -> . NewAllocationExpression
    (126) NotJustName -> . ComplexPrimary
    (206) AndExpression -> . EqualityExpression
    (207) AndExpression -> . AndExpression & EqualityExpression
    (147) SpecialName -> . THIS
    (148) SpecialName -> . SUPER
    (149) SpecialName -> . NULL
    (152) NewAllocationExpression -> . PlainNewAllocationExpression
    (153) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (127) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (128) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (203) EqualityExpression -> . RelationalExpression
    (204) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (205) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (154) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (155) PlainNewAllocationExpression -> . ClassAllocationExpression
    (156) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (157) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (158) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (129) ComplexPrimaryNoParenthesis -> . INT_CONST
    (130) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (131) ComplexPrimaryNoParenthesis -> . STRING
    (132) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (133) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (134) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (135) ComplexPrimaryNoParenthesis -> . FieldAccess
    (136) ComplexPrimaryNoParenthesis -> . MethodCall
    (198) RelationalExpression -> . ShiftExpression
    (199) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (200) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (201) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (202) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (161) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (162) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (163) ArrayAllocationExpression -> . NEW TypeName Dims
    (159) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (160) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (137) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (138) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (139) FieldAccess -> . NotJustName DOT IDENTIFIER
    (140) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (141) FieldAccess -> . QualifiedName DOT THIS
    (142) FieldAccess -> . QualifiedName DOT CLASS
    (143) FieldAccess -> . PrimitiveType DOT CLASS
    (144) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (145) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (194) ShiftExpression -> . AdditiveExpression
    (195) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (196) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (197) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (146) MethodAccess -> . QualifiedName
    (191) AdditiveExpression -> . MultiplicativeExpression
    (192) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (193) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (187) MultiplicativeExpression -> . CastExpression
    (188) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (189) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (190) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (183) CastExpression -> . UnaryExpression

    OP_INC          shift and go to state 106
    OP_DEC          shift and go to state 126
    PLUS            shift and go to state 90
    MINUS           shift and go to state 89
    ~               shift and go to state 141
    NOT             shift and go to state 119
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 91
    SUPER           shift and go to state 158
    NULL            shift and go to state 145
    LROUNPAREN      shift and go to state 118
    INT_CONST       shift and go to state 131
    FLOAT_CONST     shift and go to state 86
    STRING          shift and go to state 151
    CHAR_CONST      shift and go to state 144
    BOOLEAN_CONST   shift and go to state 157
    NEW             shift and go to state 127
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 121
    PrimaryExpression              shift and go to state 129
    PrimitiveType                  shift and go to state 187
    RealPostfixExpression          shift and go to state 96
    ArithmeticUnaryOperator        shift and go to state 97
    AndExpression                  shift and go to state 88
    ArrayAccess                    shift and go to state 108
    CastExpression                 shift and go to state 143
    EqualityExpression             shift and go to state 98
    QualifiedName                  shift and go to state 190
    ComplexPrimaryNoParenthesis    shift and go to state 100
    MultiplicativeExpression       shift and go to state 101
    ClassAllocationExpression      shift and go to state 122
    MethodCall                     shift and go to state 102
    ConditionalOrExpression        shift and go to state 133
    ShiftExpression                shift and go to state 149
    AssignmentExpression           shift and go to state 104
    NewAllocationExpression        shift and go to state 135
    NotJustName                    shift and go to state 152
    LogicalUnaryOperator           shift and go to state 153
    LogicalUnaryExpression         shift and go to state 154
    Expression                     shift and go to state 302
    AdditiveExpression             shift and go to state 137
    ArrayAllocationExpression      shift and go to state 110
    ConditionalExpression          shift and go to state 138
    UnaryExpression                shift and go to state 139
    InclusiveOrExpression          shift and go to state 140
    MethodAccess                   shift and go to state 111
    ExclusiveOrExpression          shift and go to state 113
    ConditionalAndExpression       shift and go to state 92
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    FieldAccess                    shift and go to state 156
    SpecialName                    shift and go to state 120

state 239

    (34) QualifiedName -> QualifiedName DOT . IDENTIFIER
    (153) NewAllocationExpression -> QualifiedName DOT . PlainNewAllocationExpression
    (141) FieldAccess -> QualifiedName DOT . THIS
    (142) FieldAccess -> QualifiedName DOT . CLASS
    (154) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (155) PlainNewAllocationExpression -> . ClassAllocationExpression
    (156) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (157) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (158) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (161) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (162) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (163) ArrayAllocationExpression -> . NEW TypeName Dims
    (159) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (160) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN

    IDENTIFIER      shift and go to state 69
    THIS            shift and go to state 303
    CLASS           shift and go to state 305
    NEW             shift and go to state 127

    ArrayAllocationExpression      shift and go to state 110
    ClassAllocationExpression      shift and go to state 122
    PlainNewAllocationExpression   shift and go to state 304

state 240

    (195) ShiftExpression -> ShiftExpression OP_SHL . AdditiveExpression
    (191) AdditiveExpression -> . MultiplicativeExpression
    (192) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (193) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (187) MultiplicativeExpression -> . CastExpression
    (188) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (189) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (190) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (183) CastExpression -> . UnaryExpression
    (173) UnaryExpression -> . OP_INC UnaryExpression
    (174) UnaryExpression -> . OP_DEC UnaryExpression
    (175) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (176) UnaryExpression -> . LogicalUnaryExpression
    (181) ArithmeticUnaryOperator -> . PLUS
    (182) ArithmeticUnaryOperator -> . MINUS
    (177) LogicalUnaryExpression -> . PostfixExpression
    (178) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (169) PostfixExpression -> . PrimaryExpression
    (170) PostfixExpression -> . RealPostfixExpression
    (179) LogicalUnaryOperator -> . ~
    (180) LogicalUnaryOperator -> . NOT
    (122) PrimaryExpression -> . QualifiedName
    (123) PrimaryExpression -> . NotJustName
    (171) RealPostfixExpression -> . PostfixExpression OP_INC
    (172) RealPostfixExpression -> . PostfixExpression OP_DEC
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (124) NotJustName -> . SpecialName
    (125) NotJustName -> . NewAllocationExpression
    (126) NotJustName -> . ComplexPrimary
    (147) SpecialName -> . THIS
    (148) SpecialName -> . SUPER
    (149) SpecialName -> . NULL
    (152) NewAllocationExpression -> . PlainNewAllocationExpression
    (153) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (127) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (128) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (154) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (155) PlainNewAllocationExpression -> . ClassAllocationExpression
    (156) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (157) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (158) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (129) ComplexPrimaryNoParenthesis -> . INT_CONST
    (130) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (131) ComplexPrimaryNoParenthesis -> . STRING
    (132) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (133) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (134) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (135) ComplexPrimaryNoParenthesis -> . FieldAccess
    (136) ComplexPrimaryNoParenthesis -> . MethodCall
    (161) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (162) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (163) ArrayAllocationExpression -> . NEW TypeName Dims
    (159) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (160) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (137) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (138) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (139) FieldAccess -> . NotJustName DOT IDENTIFIER
    (140) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (141) FieldAccess -> . QualifiedName DOT THIS
    (142) FieldAccess -> . QualifiedName DOT CLASS
    (143) FieldAccess -> . PrimitiveType DOT CLASS
    (144) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (145) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (146) MethodAccess -> . QualifiedName

    OP_INC          shift and go to state 106
    OP_DEC          shift and go to state 126
    PLUS            shift and go to state 90
    MINUS           shift and go to state 89
    ~               shift and go to state 141
    NOT             shift and go to state 119
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 91
    SUPER           shift and go to state 158
    NULL            shift and go to state 145
    LROUNPAREN      shift and go to state 118
    INT_CONST       shift and go to state 131
    FLOAT_CONST     shift and go to state 86
    STRING          shift and go to state 151
    CHAR_CONST      shift and go to state 144
    BOOLEAN_CONST   shift and go to state 157
    NEW             shift and go to state 127
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 121
    CastExpression                 shift and go to state 143
    PrimitiveType                  shift and go to state 187
    RealPostfixExpression          shift and go to state 96
    ArithmeticUnaryOperator        shift and go to state 97
    ArrayAccess                    shift and go to state 108
    ClassAllocationExpression      shift and go to state 122
    LogicalUnaryOperator           shift and go to state 153
    ComplexPrimaryNoParenthesis    shift and go to state 100
    MultiplicativeExpression       shift and go to state 101
    MethodCall                     shift and go to state 102
    NewAllocationExpression        shift and go to state 135
    NotJustName                    shift and go to state 152
    QualifiedName                  shift and go to state 190
    LogicalUnaryExpression         shift and go to state 154
    AdditiveExpression             shift and go to state 306
    ArrayAllocationExpression      shift and go to state 110
    UnaryExpression                shift and go to state 193
    PrimaryExpression              shift and go to state 129
    FieldAccess                    shift and go to state 156
    PlainNewAllocationExpression   shift and go to state 115
    MethodAccess                   shift and go to state 111
    SpecialName                    shift and go to state 120

state 241

    (197) ShiftExpression -> ShiftExpression OP_SHRR . AdditiveExpression
    (191) AdditiveExpression -> . MultiplicativeExpression
    (192) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (193) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (187) MultiplicativeExpression -> . CastExpression
    (188) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (189) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (190) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (183) CastExpression -> . UnaryExpression
    (173) UnaryExpression -> . OP_INC UnaryExpression
    (174) UnaryExpression -> . OP_DEC UnaryExpression
    (175) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (176) UnaryExpression -> . LogicalUnaryExpression
    (181) ArithmeticUnaryOperator -> . PLUS
    (182) ArithmeticUnaryOperator -> . MINUS
    (177) LogicalUnaryExpression -> . PostfixExpression
    (178) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (169) PostfixExpression -> . PrimaryExpression
    (170) PostfixExpression -> . RealPostfixExpression
    (179) LogicalUnaryOperator -> . ~
    (180) LogicalUnaryOperator -> . NOT
    (122) PrimaryExpression -> . QualifiedName
    (123) PrimaryExpression -> . NotJustName
    (171) RealPostfixExpression -> . PostfixExpression OP_INC
    (172) RealPostfixExpression -> . PostfixExpression OP_DEC
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (124) NotJustName -> . SpecialName
    (125) NotJustName -> . NewAllocationExpression
    (126) NotJustName -> . ComplexPrimary
    (147) SpecialName -> . THIS
    (148) SpecialName -> . SUPER
    (149) SpecialName -> . NULL
    (152) NewAllocationExpression -> . PlainNewAllocationExpression
    (153) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (127) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (128) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (154) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (155) PlainNewAllocationExpression -> . ClassAllocationExpression
    (156) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (157) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (158) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (129) ComplexPrimaryNoParenthesis -> . INT_CONST
    (130) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (131) ComplexPrimaryNoParenthesis -> . STRING
    (132) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (133) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (134) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (135) ComplexPrimaryNoParenthesis -> . FieldAccess
    (136) ComplexPrimaryNoParenthesis -> . MethodCall
    (161) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (162) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (163) ArrayAllocationExpression -> . NEW TypeName Dims
    (159) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (160) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (137) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (138) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (139) FieldAccess -> . NotJustName DOT IDENTIFIER
    (140) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (141) FieldAccess -> . QualifiedName DOT THIS
    (142) FieldAccess -> . QualifiedName DOT CLASS
    (143) FieldAccess -> . PrimitiveType DOT CLASS
    (144) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (145) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (146) MethodAccess -> . QualifiedName

    OP_INC          shift and go to state 106
    OP_DEC          shift and go to state 126
    PLUS            shift and go to state 90
    MINUS           shift and go to state 89
    ~               shift and go to state 141
    NOT             shift and go to state 119
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 91
    SUPER           shift and go to state 158
    NULL            shift and go to state 145
    LROUNPAREN      shift and go to state 118
    INT_CONST       shift and go to state 131
    FLOAT_CONST     shift and go to state 86
    STRING          shift and go to state 151
    CHAR_CONST      shift and go to state 144
    BOOLEAN_CONST   shift and go to state 157
    NEW             shift and go to state 127
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 121
    CastExpression                 shift and go to state 143
    PrimitiveType                  shift and go to state 187
    RealPostfixExpression          shift and go to state 96
    ArithmeticUnaryOperator        shift and go to state 97
    ArrayAccess                    shift and go to state 108
    ClassAllocationExpression      shift and go to state 122
    LogicalUnaryOperator           shift and go to state 153
    ComplexPrimaryNoParenthesis    shift and go to state 100
    MultiplicativeExpression       shift and go to state 101
    MethodCall                     shift and go to state 102
    NewAllocationExpression        shift and go to state 135
    NotJustName                    shift and go to state 152
    QualifiedName                  shift and go to state 190
    LogicalUnaryExpression         shift and go to state 154
    AdditiveExpression             shift and go to state 307
    ArrayAllocationExpression      shift and go to state 110
    UnaryExpression                shift and go to state 193
    PrimaryExpression              shift and go to state 129
    FieldAccess                    shift and go to state 156
    PlainNewAllocationExpression   shift and go to state 115
    MethodAccess                   shift and go to state 111
    SpecialName                    shift and go to state 120

state 242

    (196) ShiftExpression -> ShiftExpression OP_SHR . AdditiveExpression
    (191) AdditiveExpression -> . MultiplicativeExpression
    (192) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (193) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (187) MultiplicativeExpression -> . CastExpression
    (188) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (189) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (190) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (183) CastExpression -> . UnaryExpression
    (173) UnaryExpression -> . OP_INC UnaryExpression
    (174) UnaryExpression -> . OP_DEC UnaryExpression
    (175) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (176) UnaryExpression -> . LogicalUnaryExpression
    (181) ArithmeticUnaryOperator -> . PLUS
    (182) ArithmeticUnaryOperator -> . MINUS
    (177) LogicalUnaryExpression -> . PostfixExpression
    (178) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (169) PostfixExpression -> . PrimaryExpression
    (170) PostfixExpression -> . RealPostfixExpression
    (179) LogicalUnaryOperator -> . ~
    (180) LogicalUnaryOperator -> . NOT
    (122) PrimaryExpression -> . QualifiedName
    (123) PrimaryExpression -> . NotJustName
    (171) RealPostfixExpression -> . PostfixExpression OP_INC
    (172) RealPostfixExpression -> . PostfixExpression OP_DEC
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (124) NotJustName -> . SpecialName
    (125) NotJustName -> . NewAllocationExpression
    (126) NotJustName -> . ComplexPrimary
    (147) SpecialName -> . THIS
    (148) SpecialName -> . SUPER
    (149) SpecialName -> . NULL
    (152) NewAllocationExpression -> . PlainNewAllocationExpression
    (153) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (127) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (128) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (154) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (155) PlainNewAllocationExpression -> . ClassAllocationExpression
    (156) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (157) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (158) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (129) ComplexPrimaryNoParenthesis -> . INT_CONST
    (130) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (131) ComplexPrimaryNoParenthesis -> . STRING
    (132) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (133) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (134) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (135) ComplexPrimaryNoParenthesis -> . FieldAccess
    (136) ComplexPrimaryNoParenthesis -> . MethodCall
    (161) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (162) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (163) ArrayAllocationExpression -> . NEW TypeName Dims
    (159) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (160) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (137) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (138) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (139) FieldAccess -> . NotJustName DOT IDENTIFIER
    (140) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (141) FieldAccess -> . QualifiedName DOT THIS
    (142) FieldAccess -> . QualifiedName DOT CLASS
    (143) FieldAccess -> . PrimitiveType DOT CLASS
    (144) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (145) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (146) MethodAccess -> . QualifiedName

    OP_INC          shift and go to state 106
    OP_DEC          shift and go to state 126
    PLUS            shift and go to state 90
    MINUS           shift and go to state 89
    ~               shift and go to state 141
    NOT             shift and go to state 119
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 91
    SUPER           shift and go to state 158
    NULL            shift and go to state 145
    LROUNPAREN      shift and go to state 118
    INT_CONST       shift and go to state 131
    FLOAT_CONST     shift and go to state 86
    STRING          shift and go to state 151
    CHAR_CONST      shift and go to state 144
    BOOLEAN_CONST   shift and go to state 157
    NEW             shift and go to state 127
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 121
    CastExpression                 shift and go to state 143
    PrimitiveType                  shift and go to state 187
    RealPostfixExpression          shift and go to state 96
    ArithmeticUnaryOperator        shift and go to state 97
    ArrayAccess                    shift and go to state 108
    ClassAllocationExpression      shift and go to state 122
    LogicalUnaryOperator           shift and go to state 153
    ComplexPrimaryNoParenthesis    shift and go to state 100
    MultiplicativeExpression       shift and go to state 101
    MethodCall                     shift and go to state 102
    NewAllocationExpression        shift and go to state 135
    NotJustName                    shift and go to state 152
    QualifiedName                  shift and go to state 190
    LogicalUnaryExpression         shift and go to state 154
    AdditiveExpression             shift and go to state 308
    ArrayAllocationExpression      shift and go to state 110
    UnaryExpression                shift and go to state 193
    PrimaryExpression              shift and go to state 129
    FieldAccess                    shift and go to state 156
    PlainNewAllocationExpression   shift and go to state 115
    MethodAccess                   shift and go to state 111
    SpecialName                    shift and go to state 120

state 243

    (79) Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .

    SEMICOLON       reduce using rule 79 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    RCURPAREN       reduce using rule 79 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    STATIC          reduce using rule 79 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    IDENTIFIER      reduce using rule 79 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    LCURPAREN       reduce using rule 79 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    PUBLIC          reduce using rule 79 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    PRIVATE         reduce using rule 79 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    CLASS           reduce using rule 79 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    BOOLEAN         reduce using rule 79 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    CHAR            reduce using rule 79 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    BYTE            reduce using rule 79 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    SHORT           reduce using rule 79 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    INT             reduce using rule 79 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    LONG            reduce using rule 79 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    FLOAT           reduce using rule 79 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    DOUBLE          reduce using rule 79 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    VOID            reduce using rule 79 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    CASE            reduce using rule 79 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    DEFAULT         reduce using rule 79 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    BREAK           reduce using rule 79 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    CONTINUE        reduce using rule 79 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    RETURN          reduce using rule 79 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    WHILE           reduce using rule 79 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    FOR             reduce using rule 79 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    IF              reduce using rule 79 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    DO              reduce using rule 79 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    OP_INC          reduce using rule 79 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    OP_DEC          reduce using rule 79 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    PLUS            reduce using rule 79 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    MINUS           reduce using rule 79 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    ~               reduce using rule 79 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    NOT             reduce using rule 79 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    THIS            reduce using rule 79 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    SUPER           reduce using rule 79 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    NULL            reduce using rule 79 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    LROUNPAREN      reduce using rule 79 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    INT_CONST       reduce using rule 79 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    FLOAT_CONST     reduce using rule 79 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    STRING          reduce using rule 79 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    CHAR_CONST      reduce using rule 79 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    BOOLEAN_CONST   reduce using rule 79 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    NEW             reduce using rule 79 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    ELSE            reduce using rule 79 (Block -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)


state 244

    (82) LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .

    RCURPAREN       reduce using rule 82 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    SEMICOLON       reduce using rule 82 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    IDENTIFIER      reduce using rule 82 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    CASE            reduce using rule 82 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    DEFAULT         reduce using rule 82 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    BREAK           reduce using rule 82 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    CONTINUE        reduce using rule 82 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    RETURN          reduce using rule 82 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    LCURPAREN       reduce using rule 82 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    WHILE           reduce using rule 82 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    FOR             reduce using rule 82 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    IF              reduce using rule 82 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    DO              reduce using rule 82 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    BOOLEAN         reduce using rule 82 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    CHAR            reduce using rule 82 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    BYTE            reduce using rule 82 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    SHORT           reduce using rule 82 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    INT             reduce using rule 82 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    LONG            reduce using rule 82 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    FLOAT           reduce using rule 82 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    DOUBLE          reduce using rule 82 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    VOID            reduce using rule 82 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    OP_INC          reduce using rule 82 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    OP_DEC          reduce using rule 82 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    PLUS            reduce using rule 82 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    MINUS           reduce using rule 82 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    ~               reduce using rule 82 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    NOT             reduce using rule 82 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    THIS            reduce using rule 82 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    SUPER           reduce using rule 82 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    NULL            reduce using rule 82 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    LROUNPAREN      reduce using rule 82 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    INT_CONST       reduce using rule 82 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    FLOAT_CONST     reduce using rule 82 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    STRING          reduce using rule 82 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    CHAR_CONST      reduce using rule 82 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    BOOLEAN_CONST   reduce using rule 82 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    NEW             reduce using rule 82 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)


state 245

    (139) FieldAccess -> NotJustName DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 309


state 246

    (178) LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .

    EQUAL           reduce using rule 178 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    ASS_MUL         reduce using rule 178 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    ASS_ADD         reduce using rule 178 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    ASS_SUB         reduce using rule 178 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    MULT            reduce using rule 178 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    DIV             reduce using rule 178 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    MOD             reduce using rule 178 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    PLUS            reduce using rule 178 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    MINUS           reduce using rule 178 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OP_SHL          reduce using rule 178 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OP_SHR          reduce using rule 178 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OP_SHRR         reduce using rule 178 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    LESS            reduce using rule 178 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    MORE            reduce using rule 178 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OP_LE           reduce using rule 178 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OP_GE           reduce using rule 178 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OP_EQ           reduce using rule 178 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OP_NE           reduce using rule 178 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    &               reduce using rule 178 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    ^               reduce using rule 178 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    |               reduce using rule 178 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OP_LAND         reduce using rule 178 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    ?               reduce using rule 178 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OP_LOR          reduce using rule 178 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    RROUNPAREN      reduce using rule 178 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    SEMICOLON       reduce using rule 178 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    COLON           reduce using rule 178 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    COMMA           reduce using rule 178 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    RSQPAREN        reduce using rule 178 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)


state 247

    (99) SelectionStatement -> IF LROUNPAREN . Expression RROUNPAREN Mark_if Statement
    (100) SelectionStatement -> IF LROUNPAREN . Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement
    (224) Expression -> . AssignmentExpression
    (218) AssignmentExpression -> . ConditionalExpression
    (219) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (216) ConditionalExpression -> . ConditionalOrExpression
    (217) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (173) UnaryExpression -> . OP_INC UnaryExpression
    (174) UnaryExpression -> . OP_DEC UnaryExpression
    (175) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (176) UnaryExpression -> . LogicalUnaryExpression
    (214) ConditionalOrExpression -> . ConditionalAndExpression
    (215) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (181) ArithmeticUnaryOperator -> . PLUS
    (182) ArithmeticUnaryOperator -> . MINUS
    (177) LogicalUnaryExpression -> . PostfixExpression
    (178) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (212) ConditionalAndExpression -> . InclusiveOrExpression
    (213) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (169) PostfixExpression -> . PrimaryExpression
    (170) PostfixExpression -> . RealPostfixExpression
    (179) LogicalUnaryOperator -> . ~
    (180) LogicalUnaryOperator -> . NOT
    (210) InclusiveOrExpression -> . ExclusiveOrExpression
    (211) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (122) PrimaryExpression -> . QualifiedName
    (123) PrimaryExpression -> . NotJustName
    (171) RealPostfixExpression -> . PostfixExpression OP_INC
    (172) RealPostfixExpression -> . PostfixExpression OP_DEC
    (208) ExclusiveOrExpression -> . AndExpression
    (209) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (124) NotJustName -> . SpecialName
    (125) NotJustName -> . NewAllocationExpression
    (126) NotJustName -> . ComplexPrimary
    (206) AndExpression -> . EqualityExpression
    (207) AndExpression -> . AndExpression & EqualityExpression
    (147) SpecialName -> . THIS
    (148) SpecialName -> . SUPER
    (149) SpecialName -> . NULL
    (152) NewAllocationExpression -> . PlainNewAllocationExpression
    (153) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (127) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (128) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (203) EqualityExpression -> . RelationalExpression
    (204) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (205) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (154) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (155) PlainNewAllocationExpression -> . ClassAllocationExpression
    (156) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (157) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (158) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (129) ComplexPrimaryNoParenthesis -> . INT_CONST
    (130) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (131) ComplexPrimaryNoParenthesis -> . STRING
    (132) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (133) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (134) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (135) ComplexPrimaryNoParenthesis -> . FieldAccess
    (136) ComplexPrimaryNoParenthesis -> . MethodCall
    (198) RelationalExpression -> . ShiftExpression
    (199) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (200) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (201) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (202) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (161) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (162) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (163) ArrayAllocationExpression -> . NEW TypeName Dims
    (159) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (160) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (137) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (138) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (139) FieldAccess -> . NotJustName DOT IDENTIFIER
    (140) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (141) FieldAccess -> . QualifiedName DOT THIS
    (142) FieldAccess -> . QualifiedName DOT CLASS
    (143) FieldAccess -> . PrimitiveType DOT CLASS
    (144) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (145) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (194) ShiftExpression -> . AdditiveExpression
    (195) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (196) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (197) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (146) MethodAccess -> . QualifiedName
    (191) AdditiveExpression -> . MultiplicativeExpression
    (192) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (193) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (187) MultiplicativeExpression -> . CastExpression
    (188) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (189) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (190) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (183) CastExpression -> . UnaryExpression

    OP_INC          shift and go to state 106
    OP_DEC          shift and go to state 126
    PLUS            shift and go to state 90
    MINUS           shift and go to state 89
    ~               shift and go to state 141
    NOT             shift and go to state 119
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 91
    SUPER           shift and go to state 158
    NULL            shift and go to state 145
    LROUNPAREN      shift and go to state 118
    INT_CONST       shift and go to state 131
    FLOAT_CONST     shift and go to state 86
    STRING          shift and go to state 151
    CHAR_CONST      shift and go to state 144
    BOOLEAN_CONST   shift and go to state 157
    NEW             shift and go to state 127
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 121
    PrimaryExpression              shift and go to state 129
    PrimitiveType                  shift and go to state 187
    RealPostfixExpression          shift and go to state 96
    AndExpression                  shift and go to state 88
    ArrayAccess                    shift and go to state 108
    CastExpression                 shift and go to state 143
    EqualityExpression             shift and go to state 98
    LogicalUnaryOperator           shift and go to state 153
    ComplexPrimaryNoParenthesis    shift and go to state 100
    MultiplicativeExpression       shift and go to state 101
    ClassAllocationExpression      shift and go to state 122
    MethodCall                     shift and go to state 102
    ConditionalOrExpression        shift and go to state 133
    ShiftExpression                shift and go to state 149
    ArithmeticUnaryOperator        shift and go to state 97
    AssignmentExpression           shift and go to state 104
    NewAllocationExpression        shift and go to state 135
    NotJustName                    shift and go to state 152
    QualifiedName                  shift and go to state 190
    LogicalUnaryExpression         shift and go to state 154
    Expression                     shift and go to state 310
    AdditiveExpression             shift and go to state 137
    ArrayAllocationExpression      shift and go to state 110
    ConditionalExpression          shift and go to state 138
    UnaryExpression                shift and go to state 139
    InclusiveOrExpression          shift and go to state 140
    MethodAccess                   shift and go to state 111
    ExclusiveOrExpression          shift and go to state 113
    ConditionalAndExpression       shift and go to state 92
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    FieldAccess                    shift and go to state 156
    SpecialName                    shift and go to state 120

state 248

    (91) Statement -> IterationStatement Mark_quad .

    RCURPAREN       reduce using rule 91 (Statement -> IterationStatement Mark_quad .)
    SEMICOLON       reduce using rule 91 (Statement -> IterationStatement Mark_quad .)
    IDENTIFIER      reduce using rule 91 (Statement -> IterationStatement Mark_quad .)
    CASE            reduce using rule 91 (Statement -> IterationStatement Mark_quad .)
    DEFAULT         reduce using rule 91 (Statement -> IterationStatement Mark_quad .)
    BREAK           reduce using rule 91 (Statement -> IterationStatement Mark_quad .)
    CONTINUE        reduce using rule 91 (Statement -> IterationStatement Mark_quad .)
    RETURN          reduce using rule 91 (Statement -> IterationStatement Mark_quad .)
    LCURPAREN       reduce using rule 91 (Statement -> IterationStatement Mark_quad .)
    WHILE           reduce using rule 91 (Statement -> IterationStatement Mark_quad .)
    FOR             reduce using rule 91 (Statement -> IterationStatement Mark_quad .)
    IF              reduce using rule 91 (Statement -> IterationStatement Mark_quad .)
    DO              reduce using rule 91 (Statement -> IterationStatement Mark_quad .)
    BOOLEAN         reduce using rule 91 (Statement -> IterationStatement Mark_quad .)
    CHAR            reduce using rule 91 (Statement -> IterationStatement Mark_quad .)
    BYTE            reduce using rule 91 (Statement -> IterationStatement Mark_quad .)
    SHORT           reduce using rule 91 (Statement -> IterationStatement Mark_quad .)
    INT             reduce using rule 91 (Statement -> IterationStatement Mark_quad .)
    LONG            reduce using rule 91 (Statement -> IterationStatement Mark_quad .)
    FLOAT           reduce using rule 91 (Statement -> IterationStatement Mark_quad .)
    DOUBLE          reduce using rule 91 (Statement -> IterationStatement Mark_quad .)
    VOID            reduce using rule 91 (Statement -> IterationStatement Mark_quad .)
    OP_INC          reduce using rule 91 (Statement -> IterationStatement Mark_quad .)
    OP_DEC          reduce using rule 91 (Statement -> IterationStatement Mark_quad .)
    PLUS            reduce using rule 91 (Statement -> IterationStatement Mark_quad .)
    MINUS           reduce using rule 91 (Statement -> IterationStatement Mark_quad .)
    ~               reduce using rule 91 (Statement -> IterationStatement Mark_quad .)
    NOT             reduce using rule 91 (Statement -> IterationStatement Mark_quad .)
    THIS            reduce using rule 91 (Statement -> IterationStatement Mark_quad .)
    SUPER           reduce using rule 91 (Statement -> IterationStatement Mark_quad .)
    NULL            reduce using rule 91 (Statement -> IterationStatement Mark_quad .)
    LROUNPAREN      reduce using rule 91 (Statement -> IterationStatement Mark_quad .)
    INT_CONST       reduce using rule 91 (Statement -> IterationStatement Mark_quad .)
    FLOAT_CONST     reduce using rule 91 (Statement -> IterationStatement Mark_quad .)
    STRING          reduce using rule 91 (Statement -> IterationStatement Mark_quad .)
    CHAR_CONST      reduce using rule 91 (Statement -> IterationStatement Mark_quad .)
    BOOLEAN_CONST   reduce using rule 91 (Statement -> IterationStatement Mark_quad .)
    NEW             reduce using rule 91 (Statement -> IterationStatement Mark_quad .)
    ELSE            reduce using rule 91 (Statement -> IterationStatement Mark_quad .)


state 249

    (62) MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .

    SEMICOLON       reduce using rule 62 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    RCURPAREN       reduce using rule 62 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    STATIC          reduce using rule 62 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    IDENTIFIER      reduce using rule 62 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    LCURPAREN       reduce using rule 62 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    PUBLIC          reduce using rule 62 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    PRIVATE         reduce using rule 62 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    CLASS           reduce using rule 62 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    BOOLEAN         reduce using rule 62 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    CHAR            reduce using rule 62 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    BYTE            reduce using rule 62 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    SHORT           reduce using rule 62 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    INT             reduce using rule 62 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    LONG            reduce using rule 62 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    FLOAT           reduce using rule 62 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    DOUBLE          reduce using rule 62 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    VOID            reduce using rule 62 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)


state 250

    (58) VariableDeclarators -> VariableDeclarators COMMA VariableDeclarator .

    SEMICOLON       reduce using rule 58 (VariableDeclarators -> VariableDeclarators COMMA VariableDeclarator .)
    COMMA           reduce using rule 58 (VariableDeclarators -> VariableDeclarators COMMA VariableDeclarator .)


state 251

    (60) VariableDeclarator -> DeclaratorName EQUAL VariableInitializer .

    COMMA           reduce using rule 60 (VariableDeclarator -> DeclaratorName EQUAL VariableInitializer .)
    SEMICOLON       reduce using rule 60 (VariableDeclarator -> DeclaratorName EQUAL VariableInitializer .)


state 252

    (61) VariableInitializer -> Expression .

    COMMA           reduce using rule 61 (VariableInitializer -> Expression .)
    SEMICOLON       reduce using rule 61 (VariableInitializer -> Expression .)


state 253

    (65) MethodDeclarator -> DeclaratorName LROUNPAREN RROUNPAREN .

    SEMICOLON       reduce using rule 65 (MethodDeclarator -> DeclaratorName LROUNPAREN RROUNPAREN .)
    LCURPAREN       reduce using rule 65 (MethodDeclarator -> DeclaratorName LROUNPAREN RROUNPAREN .)


state 254

    (64) MethodDeclarator -> DeclaratorName LROUNPAREN ParameterList . RROUNPAREN
    (67) ParameterList -> ParameterList . COMMA Parameter

    RROUNPAREN      shift and go to state 311
    COMMA           shift and go to state 257


state 255

    (68) Parameter -> TypeSpecifier DeclaratorName .
    (70) DeclaratorName -> DeclaratorName . OP_DIM
    (2) OP_DIM -> . LSQPAREN RSQPAREN

    RROUNPAREN      reduce using rule 68 (Parameter -> TypeSpecifier DeclaratorName .)
    COMMA           reduce using rule 68 (Parameter -> TypeSpecifier DeclaratorName .)
    LSQPAREN        shift and go to state 80

    OP_DIM                         shift and go to state 170

state 256

    (75) ConstructorDeclarator -> IDENTIFIER LROUNPAREN ParameterList RROUNPAREN .

    LCURPAREN       reduce using rule 75 (ConstructorDeclarator -> IDENTIFIER LROUNPAREN ParameterList RROUNPAREN .)


state 257

    (67) ParameterList -> ParameterList COMMA . Parameter
    (68) Parameter -> . TypeSpecifier DeclaratorName
    (3) TypeSpecifier -> . TypeName
    (4) TypeSpecifier -> . TypeName Dims
    (5) TypeName -> . PrimitiveType
    (6) TypeName -> . QualifiedName
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER

    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43
    IDENTIFIER      shift and go to state 22

    QualifiedName                  shift and go to state 52
    PrimitiveType                  shift and go to state 45
    TypeName                       shift and go to state 53
    Parameter                      shift and go to state 312
    TypeSpecifier                  shift and go to state 179

state 258

    (88) Statement -> ExpressionStatement SEMICOLON Mark_quad .

    RCURPAREN       reduce using rule 88 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    SEMICOLON       reduce using rule 88 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    IDENTIFIER      reduce using rule 88 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    CASE            reduce using rule 88 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    DEFAULT         reduce using rule 88 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    BREAK           reduce using rule 88 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    CONTINUE        reduce using rule 88 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    RETURN          reduce using rule 88 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    LCURPAREN       reduce using rule 88 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    WHILE           reduce using rule 88 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    FOR             reduce using rule 88 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    IF              reduce using rule 88 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    DO              reduce using rule 88 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    BOOLEAN         reduce using rule 88 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    CHAR            reduce using rule 88 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    BYTE            reduce using rule 88 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    SHORT           reduce using rule 88 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    INT             reduce using rule 88 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    LONG            reduce using rule 88 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    FLOAT           reduce using rule 88 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    DOUBLE          reduce using rule 88 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    VOID            reduce using rule 88 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    OP_INC          reduce using rule 88 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    OP_DEC          reduce using rule 88 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    PLUS            reduce using rule 88 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    MINUS           reduce using rule 88 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    ~               reduce using rule 88 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    NOT             reduce using rule 88 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    THIS            reduce using rule 88 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    SUPER           reduce using rule 88 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    NULL            reduce using rule 88 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    LROUNPAREN      reduce using rule 88 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    INT_CONST       reduce using rule 88 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    FLOAT_CONST     reduce using rule 88 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    STRING          reduce using rule 88 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    CHAR_CONST      reduce using rule 88 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    BOOLEAN_CONST   reduce using rule 88 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    NEW             reduce using rule 88 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    ELSE            reduce using rule 88 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)


state 259

    (143) FieldAccess -> PrimitiveType DOT CLASS .

    LSQPAREN        reduce using rule 143 (FieldAccess -> PrimitiveType DOT CLASS .)
    DOT             reduce using rule 143 (FieldAccess -> PrimitiveType DOT CLASS .)
    OP_INC          reduce using rule 143 (FieldAccess -> PrimitiveType DOT CLASS .)
    OP_DEC          reduce using rule 143 (FieldAccess -> PrimitiveType DOT CLASS .)
    MULT            reduce using rule 143 (FieldAccess -> PrimitiveType DOT CLASS .)
    DIV             reduce using rule 143 (FieldAccess -> PrimitiveType DOT CLASS .)
    MOD             reduce using rule 143 (FieldAccess -> PrimitiveType DOT CLASS .)
    PLUS            reduce using rule 143 (FieldAccess -> PrimitiveType DOT CLASS .)
    MINUS           reduce using rule 143 (FieldAccess -> PrimitiveType DOT CLASS .)
    OP_SHL          reduce using rule 143 (FieldAccess -> PrimitiveType DOT CLASS .)
    OP_SHR          reduce using rule 143 (FieldAccess -> PrimitiveType DOT CLASS .)
    OP_SHRR         reduce using rule 143 (FieldAccess -> PrimitiveType DOT CLASS .)
    LESS            reduce using rule 143 (FieldAccess -> PrimitiveType DOT CLASS .)
    MORE            reduce using rule 143 (FieldAccess -> PrimitiveType DOT CLASS .)
    OP_LE           reduce using rule 143 (FieldAccess -> PrimitiveType DOT CLASS .)
    OP_GE           reduce using rule 143 (FieldAccess -> PrimitiveType DOT CLASS .)
    OP_EQ           reduce using rule 143 (FieldAccess -> PrimitiveType DOT CLASS .)
    OP_NE           reduce using rule 143 (FieldAccess -> PrimitiveType DOT CLASS .)
    &               reduce using rule 143 (FieldAccess -> PrimitiveType DOT CLASS .)
    ^               reduce using rule 143 (FieldAccess -> PrimitiveType DOT CLASS .)
    |               reduce using rule 143 (FieldAccess -> PrimitiveType DOT CLASS .)
    OP_LAND         reduce using rule 143 (FieldAccess -> PrimitiveType DOT CLASS .)
    ?               reduce using rule 143 (FieldAccess -> PrimitiveType DOT CLASS .)
    OP_LOR          reduce using rule 143 (FieldAccess -> PrimitiveType DOT CLASS .)
    SEMICOLON       reduce using rule 143 (FieldAccess -> PrimitiveType DOT CLASS .)
    RROUNPAREN      reduce using rule 143 (FieldAccess -> PrimitiveType DOT CLASS .)
    COLON           reduce using rule 143 (FieldAccess -> PrimitiveType DOT CLASS .)
    COMMA           reduce using rule 143 (FieldAccess -> PrimitiveType DOT CLASS .)
    RSQPAREN        reduce using rule 143 (FieldAccess -> PrimitiveType DOT CLASS .)
    EQUAL           reduce using rule 143 (FieldAccess -> PrimitiveType DOT CLASS .)
    ASS_MUL         reduce using rule 143 (FieldAccess -> PrimitiveType DOT CLASS .)
    ASS_ADD         reduce using rule 143 (FieldAccess -> PrimitiveType DOT CLASS .)
    ASS_SUB         reduce using rule 143 (FieldAccess -> PrimitiveType DOT CLASS .)


state 260

    (207) AndExpression -> AndExpression & EqualityExpression .
    (204) EqualityExpression -> EqualityExpression . OP_EQ RelationalExpression
    (205) EqualityExpression -> EqualityExpression . OP_NE RelationalExpression

    &               reduce using rule 207 (AndExpression -> AndExpression & EqualityExpression .)
    ^               reduce using rule 207 (AndExpression -> AndExpression & EqualityExpression .)
    |               reduce using rule 207 (AndExpression -> AndExpression & EqualityExpression .)
    OP_LAND         reduce using rule 207 (AndExpression -> AndExpression & EqualityExpression .)
    ?               reduce using rule 207 (AndExpression -> AndExpression & EqualityExpression .)
    OP_LOR          reduce using rule 207 (AndExpression -> AndExpression & EqualityExpression .)
    RROUNPAREN      reduce using rule 207 (AndExpression -> AndExpression & EqualityExpression .)
    COMMA           reduce using rule 207 (AndExpression -> AndExpression & EqualityExpression .)
    SEMICOLON       reduce using rule 207 (AndExpression -> AndExpression & EqualityExpression .)
    RSQPAREN        reduce using rule 207 (AndExpression -> AndExpression & EqualityExpression .)
    COLON           reduce using rule 207 (AndExpression -> AndExpression & EqualityExpression .)
    OP_EQ           shift and go to state 195
    OP_NE           shift and go to state 194


state 261

    (213) ConditionalAndExpression -> ConditionalAndExpression OP_LAND InclusiveOrExpression .
    (211) InclusiveOrExpression -> InclusiveOrExpression . | ExclusiveOrExpression

    OP_LAND         reduce using rule 213 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND InclusiveOrExpression .)
    ?               reduce using rule 213 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND InclusiveOrExpression .)
    OP_LOR          reduce using rule 213 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND InclusiveOrExpression .)
    RSQPAREN        reduce using rule 213 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND InclusiveOrExpression .)
    SEMICOLON       reduce using rule 213 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND InclusiveOrExpression .)
    RROUNPAREN      reduce using rule 213 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND InclusiveOrExpression .)
    COLON           reduce using rule 213 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND InclusiveOrExpression .)
    COMMA           reduce using rule 213 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND InclusiveOrExpression .)
    |               shift and go to state 236


state 262

    (120) JumpStatement -> RETURN Expression SEMICOLON .

    RCURPAREN       reduce using rule 120 (JumpStatement -> RETURN Expression SEMICOLON .)
    SEMICOLON       reduce using rule 120 (JumpStatement -> RETURN Expression SEMICOLON .)
    IDENTIFIER      reduce using rule 120 (JumpStatement -> RETURN Expression SEMICOLON .)
    CASE            reduce using rule 120 (JumpStatement -> RETURN Expression SEMICOLON .)
    DEFAULT         reduce using rule 120 (JumpStatement -> RETURN Expression SEMICOLON .)
    BREAK           reduce using rule 120 (JumpStatement -> RETURN Expression SEMICOLON .)
    CONTINUE        reduce using rule 120 (JumpStatement -> RETURN Expression SEMICOLON .)
    RETURN          reduce using rule 120 (JumpStatement -> RETURN Expression SEMICOLON .)
    LCURPAREN       reduce using rule 120 (JumpStatement -> RETURN Expression SEMICOLON .)
    WHILE           reduce using rule 120 (JumpStatement -> RETURN Expression SEMICOLON .)
    FOR             reduce using rule 120 (JumpStatement -> RETURN Expression SEMICOLON .)
    IF              reduce using rule 120 (JumpStatement -> RETURN Expression SEMICOLON .)
    DO              reduce using rule 120 (JumpStatement -> RETURN Expression SEMICOLON .)
    BOOLEAN         reduce using rule 120 (JumpStatement -> RETURN Expression SEMICOLON .)
    CHAR            reduce using rule 120 (JumpStatement -> RETURN Expression SEMICOLON .)
    BYTE            reduce using rule 120 (JumpStatement -> RETURN Expression SEMICOLON .)
    SHORT           reduce using rule 120 (JumpStatement -> RETURN Expression SEMICOLON .)
    INT             reduce using rule 120 (JumpStatement -> RETURN Expression SEMICOLON .)
    LONG            reduce using rule 120 (JumpStatement -> RETURN Expression SEMICOLON .)
    FLOAT           reduce using rule 120 (JumpStatement -> RETURN Expression SEMICOLON .)
    DOUBLE          reduce using rule 120 (JumpStatement -> RETURN Expression SEMICOLON .)
    VOID            reduce using rule 120 (JumpStatement -> RETURN Expression SEMICOLON .)
    OP_INC          reduce using rule 120 (JumpStatement -> RETURN Expression SEMICOLON .)
    OP_DEC          reduce using rule 120 (JumpStatement -> RETURN Expression SEMICOLON .)
    PLUS            reduce using rule 120 (JumpStatement -> RETURN Expression SEMICOLON .)
    MINUS           reduce using rule 120 (JumpStatement -> RETURN Expression SEMICOLON .)
    ~               reduce using rule 120 (JumpStatement -> RETURN Expression SEMICOLON .)
    NOT             reduce using rule 120 (JumpStatement -> RETURN Expression SEMICOLON .)
    THIS            reduce using rule 120 (JumpStatement -> RETURN Expression SEMICOLON .)
    SUPER           reduce using rule 120 (JumpStatement -> RETURN Expression SEMICOLON .)
    NULL            reduce using rule 120 (JumpStatement -> RETURN Expression SEMICOLON .)
    LROUNPAREN      reduce using rule 120 (JumpStatement -> RETURN Expression SEMICOLON .)
    INT_CONST       reduce using rule 120 (JumpStatement -> RETURN Expression SEMICOLON .)
    FLOAT_CONST     reduce using rule 120 (JumpStatement -> RETURN Expression SEMICOLON .)
    STRING          reduce using rule 120 (JumpStatement -> RETURN Expression SEMICOLON .)
    CHAR_CONST      reduce using rule 120 (JumpStatement -> RETURN Expression SEMICOLON .)
    BOOLEAN_CONST   reduce using rule 120 (JumpStatement -> RETURN Expression SEMICOLON .)
    NEW             reduce using rule 120 (JumpStatement -> RETURN Expression SEMICOLON .)
    ELSE            reduce using rule 120 (JumpStatement -> RETURN Expression SEMICOLON .)


state 263

    (140) FieldAccess -> RealPostfixExpression DOT IDENTIFIER .

    LSQPAREN        reduce using rule 140 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    DOT             reduce using rule 140 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    OP_INC          reduce using rule 140 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    OP_DEC          reduce using rule 140 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    MULT            reduce using rule 140 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    DIV             reduce using rule 140 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    MOD             reduce using rule 140 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    PLUS            reduce using rule 140 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    MINUS           reduce using rule 140 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    OP_SHL          reduce using rule 140 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    OP_SHR          reduce using rule 140 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    OP_SHRR         reduce using rule 140 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    LESS            reduce using rule 140 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    MORE            reduce using rule 140 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    OP_LE           reduce using rule 140 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    OP_GE           reduce using rule 140 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    OP_EQ           reduce using rule 140 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    OP_NE           reduce using rule 140 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    &               reduce using rule 140 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    ^               reduce using rule 140 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    |               reduce using rule 140 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    OP_LAND         reduce using rule 140 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    ?               reduce using rule 140 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    OP_LOR          reduce using rule 140 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    SEMICOLON       reduce using rule 140 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    RROUNPAREN      reduce using rule 140 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    COLON           reduce using rule 140 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    COMMA           reduce using rule 140 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    RSQPAREN        reduce using rule 140 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    EQUAL           reduce using rule 140 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    ASS_MUL         reduce using rule 140 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    ASS_ADD         reduce using rule 140 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    ASS_SUB         reduce using rule 140 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)


state 264

    (205) EqualityExpression -> EqualityExpression OP_NE RelationalExpression .
    (199) RelationalExpression -> RelationalExpression . LESS ShiftExpression
    (200) RelationalExpression -> RelationalExpression . MORE ShiftExpression
    (201) RelationalExpression -> RelationalExpression . OP_LE ShiftExpression
    (202) RelationalExpression -> RelationalExpression . OP_GE ShiftExpression

    OP_EQ           reduce using rule 205 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    OP_NE           reduce using rule 205 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    &               reduce using rule 205 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    ^               reduce using rule 205 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    |               reduce using rule 205 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    OP_LAND         reduce using rule 205 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    ?               reduce using rule 205 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    OP_LOR          reduce using rule 205 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    SEMICOLON       reduce using rule 205 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    RROUNPAREN      reduce using rule 205 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    COLON           reduce using rule 205 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    COMMA           reduce using rule 205 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    RSQPAREN        reduce using rule 205 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    LESS            shift and go to state 209
    MORE            shift and go to state 212
    OP_LE           shift and go to state 210
    OP_GE           shift and go to state 211


state 265

    (204) EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .
    (199) RelationalExpression -> RelationalExpression . LESS ShiftExpression
    (200) RelationalExpression -> RelationalExpression . MORE ShiftExpression
    (201) RelationalExpression -> RelationalExpression . OP_LE ShiftExpression
    (202) RelationalExpression -> RelationalExpression . OP_GE ShiftExpression

    OP_EQ           reduce using rule 204 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    OP_NE           reduce using rule 204 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    &               reduce using rule 204 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    ^               reduce using rule 204 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    |               reduce using rule 204 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    OP_LAND         reduce using rule 204 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    ?               reduce using rule 204 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    OP_LOR          reduce using rule 204 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    SEMICOLON       reduce using rule 204 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    RROUNPAREN      reduce using rule 204 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    COLON           reduce using rule 204 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    COMMA           reduce using rule 204 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    RSQPAREN        reduce using rule 204 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    LESS            shift and go to state 209
    MORE            shift and go to state 212
    OP_LE           shift and go to state 210
    OP_GE           shift and go to state 211


state 266

    (189) MultiplicativeExpression -> MultiplicativeExpression DIV CastExpression .

    MULT            reduce using rule 189 (MultiplicativeExpression -> MultiplicativeExpression DIV CastExpression .)
    DIV             reduce using rule 189 (MultiplicativeExpression -> MultiplicativeExpression DIV CastExpression .)
    MOD             reduce using rule 189 (MultiplicativeExpression -> MultiplicativeExpression DIV CastExpression .)
    PLUS            reduce using rule 189 (MultiplicativeExpression -> MultiplicativeExpression DIV CastExpression .)
    MINUS           reduce using rule 189 (MultiplicativeExpression -> MultiplicativeExpression DIV CastExpression .)
    OP_SHL          reduce using rule 189 (MultiplicativeExpression -> MultiplicativeExpression DIV CastExpression .)
    OP_SHR          reduce using rule 189 (MultiplicativeExpression -> MultiplicativeExpression DIV CastExpression .)
    OP_SHRR         reduce using rule 189 (MultiplicativeExpression -> MultiplicativeExpression DIV CastExpression .)
    LESS            reduce using rule 189 (MultiplicativeExpression -> MultiplicativeExpression DIV CastExpression .)
    MORE            reduce using rule 189 (MultiplicativeExpression -> MultiplicativeExpression DIV CastExpression .)
    OP_LE           reduce using rule 189 (MultiplicativeExpression -> MultiplicativeExpression DIV CastExpression .)
    OP_GE           reduce using rule 189 (MultiplicativeExpression -> MultiplicativeExpression DIV CastExpression .)
    OP_EQ           reduce using rule 189 (MultiplicativeExpression -> MultiplicativeExpression DIV CastExpression .)
    OP_NE           reduce using rule 189 (MultiplicativeExpression -> MultiplicativeExpression DIV CastExpression .)
    &               reduce using rule 189 (MultiplicativeExpression -> MultiplicativeExpression DIV CastExpression .)
    ^               reduce using rule 189 (MultiplicativeExpression -> MultiplicativeExpression DIV CastExpression .)
    |               reduce using rule 189 (MultiplicativeExpression -> MultiplicativeExpression DIV CastExpression .)
    OP_LAND         reduce using rule 189 (MultiplicativeExpression -> MultiplicativeExpression DIV CastExpression .)
    ?               reduce using rule 189 (MultiplicativeExpression -> MultiplicativeExpression DIV CastExpression .)
    OP_LOR          reduce using rule 189 (MultiplicativeExpression -> MultiplicativeExpression DIV CastExpression .)
    SEMICOLON       reduce using rule 189 (MultiplicativeExpression -> MultiplicativeExpression DIV CastExpression .)
    RROUNPAREN      reduce using rule 189 (MultiplicativeExpression -> MultiplicativeExpression DIV CastExpression .)
    COLON           reduce using rule 189 (MultiplicativeExpression -> MultiplicativeExpression DIV CastExpression .)
    COMMA           reduce using rule 189 (MultiplicativeExpression -> MultiplicativeExpression DIV CastExpression .)
    RSQPAREN        reduce using rule 189 (MultiplicativeExpression -> MultiplicativeExpression DIV CastExpression .)


state 267

    (188) MultiplicativeExpression -> MultiplicativeExpression MULT CastExpression .

    MULT            reduce using rule 188 (MultiplicativeExpression -> MultiplicativeExpression MULT CastExpression .)
    DIV             reduce using rule 188 (MultiplicativeExpression -> MultiplicativeExpression MULT CastExpression .)
    MOD             reduce using rule 188 (MultiplicativeExpression -> MultiplicativeExpression MULT CastExpression .)
    PLUS            reduce using rule 188 (MultiplicativeExpression -> MultiplicativeExpression MULT CastExpression .)
    MINUS           reduce using rule 188 (MultiplicativeExpression -> MultiplicativeExpression MULT CastExpression .)
    OP_SHL          reduce using rule 188 (MultiplicativeExpression -> MultiplicativeExpression MULT CastExpression .)
    OP_SHR          reduce using rule 188 (MultiplicativeExpression -> MultiplicativeExpression MULT CastExpression .)
    OP_SHRR         reduce using rule 188 (MultiplicativeExpression -> MultiplicativeExpression MULT CastExpression .)
    LESS            reduce using rule 188 (MultiplicativeExpression -> MultiplicativeExpression MULT CastExpression .)
    MORE            reduce using rule 188 (MultiplicativeExpression -> MultiplicativeExpression MULT CastExpression .)
    OP_LE           reduce using rule 188 (MultiplicativeExpression -> MultiplicativeExpression MULT CastExpression .)
    OP_GE           reduce using rule 188 (MultiplicativeExpression -> MultiplicativeExpression MULT CastExpression .)
    OP_EQ           reduce using rule 188 (MultiplicativeExpression -> MultiplicativeExpression MULT CastExpression .)
    OP_NE           reduce using rule 188 (MultiplicativeExpression -> MultiplicativeExpression MULT CastExpression .)
    &               reduce using rule 188 (MultiplicativeExpression -> MultiplicativeExpression MULT CastExpression .)
    ^               reduce using rule 188 (MultiplicativeExpression -> MultiplicativeExpression MULT CastExpression .)
    |               reduce using rule 188 (MultiplicativeExpression -> MultiplicativeExpression MULT CastExpression .)
    OP_LAND         reduce using rule 188 (MultiplicativeExpression -> MultiplicativeExpression MULT CastExpression .)
    ?               reduce using rule 188 (MultiplicativeExpression -> MultiplicativeExpression MULT CastExpression .)
    OP_LOR          reduce using rule 188 (MultiplicativeExpression -> MultiplicativeExpression MULT CastExpression .)
    SEMICOLON       reduce using rule 188 (MultiplicativeExpression -> MultiplicativeExpression MULT CastExpression .)
    RROUNPAREN      reduce using rule 188 (MultiplicativeExpression -> MultiplicativeExpression MULT CastExpression .)
    COLON           reduce using rule 188 (MultiplicativeExpression -> MultiplicativeExpression MULT CastExpression .)
    COMMA           reduce using rule 188 (MultiplicativeExpression -> MultiplicativeExpression MULT CastExpression .)
    RSQPAREN        reduce using rule 188 (MultiplicativeExpression -> MultiplicativeExpression MULT CastExpression .)


state 268

    (190) MultiplicativeExpression -> MultiplicativeExpression MOD CastExpression .

    MULT            reduce using rule 190 (MultiplicativeExpression -> MultiplicativeExpression MOD CastExpression .)
    DIV             reduce using rule 190 (MultiplicativeExpression -> MultiplicativeExpression MOD CastExpression .)
    MOD             reduce using rule 190 (MultiplicativeExpression -> MultiplicativeExpression MOD CastExpression .)
    PLUS            reduce using rule 190 (MultiplicativeExpression -> MultiplicativeExpression MOD CastExpression .)
    MINUS           reduce using rule 190 (MultiplicativeExpression -> MultiplicativeExpression MOD CastExpression .)
    OP_SHL          reduce using rule 190 (MultiplicativeExpression -> MultiplicativeExpression MOD CastExpression .)
    OP_SHR          reduce using rule 190 (MultiplicativeExpression -> MultiplicativeExpression MOD CastExpression .)
    OP_SHRR         reduce using rule 190 (MultiplicativeExpression -> MultiplicativeExpression MOD CastExpression .)
    LESS            reduce using rule 190 (MultiplicativeExpression -> MultiplicativeExpression MOD CastExpression .)
    MORE            reduce using rule 190 (MultiplicativeExpression -> MultiplicativeExpression MOD CastExpression .)
    OP_LE           reduce using rule 190 (MultiplicativeExpression -> MultiplicativeExpression MOD CastExpression .)
    OP_GE           reduce using rule 190 (MultiplicativeExpression -> MultiplicativeExpression MOD CastExpression .)
    OP_EQ           reduce using rule 190 (MultiplicativeExpression -> MultiplicativeExpression MOD CastExpression .)
    OP_NE           reduce using rule 190 (MultiplicativeExpression -> MultiplicativeExpression MOD CastExpression .)
    &               reduce using rule 190 (MultiplicativeExpression -> MultiplicativeExpression MOD CastExpression .)
    ^               reduce using rule 190 (MultiplicativeExpression -> MultiplicativeExpression MOD CastExpression .)
    |               reduce using rule 190 (MultiplicativeExpression -> MultiplicativeExpression MOD CastExpression .)
    OP_LAND         reduce using rule 190 (MultiplicativeExpression -> MultiplicativeExpression MOD CastExpression .)
    ?               reduce using rule 190 (MultiplicativeExpression -> MultiplicativeExpression MOD CastExpression .)
    OP_LOR          reduce using rule 190 (MultiplicativeExpression -> MultiplicativeExpression MOD CastExpression .)
    SEMICOLON       reduce using rule 190 (MultiplicativeExpression -> MultiplicativeExpression MOD CastExpression .)
    RROUNPAREN      reduce using rule 190 (MultiplicativeExpression -> MultiplicativeExpression MOD CastExpression .)
    COLON           reduce using rule 190 (MultiplicativeExpression -> MultiplicativeExpression MOD CastExpression .)
    COMMA           reduce using rule 190 (MultiplicativeExpression -> MultiplicativeExpression MOD CastExpression .)
    RSQPAREN        reduce using rule 190 (MultiplicativeExpression -> MultiplicativeExpression MOD CastExpression .)


state 269

    (116) ExpressionStatements -> ExpressionStatement .

    SEMICOLON       reduce using rule 116 (ExpressionStatements -> ExpressionStatement .)
    COMMA           reduce using rule 116 (ExpressionStatements -> ExpressionStatement .)
    RROUNPAREN      reduce using rule 116 (ExpressionStatements -> ExpressionStatement .)


state 270

    (108) IterationStatement -> FOR LROUNPAREN ForInit . ForExpr Mark_quad ForIncr RROUNPAREN Mark_quad Statement
    (109) IterationStatement -> FOR LROUNPAREN ForInit . ForExpr RROUNPAREN Statement
    (113) ForExpr -> . Mark_quad Expression SEMICOLON
    (114) ForExpr -> . Mark_quad SEMICOLON
    (93) Mark_quad -> .

    SEMICOLON       reduce using rule 93 (Mark_quad -> .)
    OP_INC          reduce using rule 93 (Mark_quad -> .)
    OP_DEC          reduce using rule 93 (Mark_quad -> .)
    PLUS            reduce using rule 93 (Mark_quad -> .)
    MINUS           reduce using rule 93 (Mark_quad -> .)
    ~               reduce using rule 93 (Mark_quad -> .)
    NOT             reduce using rule 93 (Mark_quad -> .)
    IDENTIFIER      reduce using rule 93 (Mark_quad -> .)
    THIS            reduce using rule 93 (Mark_quad -> .)
    SUPER           reduce using rule 93 (Mark_quad -> .)
    NULL            reduce using rule 93 (Mark_quad -> .)
    LROUNPAREN      reduce using rule 93 (Mark_quad -> .)
    INT_CONST       reduce using rule 93 (Mark_quad -> .)
    FLOAT_CONST     reduce using rule 93 (Mark_quad -> .)
    STRING          reduce using rule 93 (Mark_quad -> .)
    CHAR_CONST      reduce using rule 93 (Mark_quad -> .)
    BOOLEAN_CONST   reduce using rule 93 (Mark_quad -> .)
    NEW             reduce using rule 93 (Mark_quad -> .)
    BOOLEAN         reduce using rule 93 (Mark_quad -> .)
    CHAR            reduce using rule 93 (Mark_quad -> .)
    BYTE            reduce using rule 93 (Mark_quad -> .)
    SHORT           reduce using rule 93 (Mark_quad -> .)
    INT             reduce using rule 93 (Mark_quad -> .)
    LONG            reduce using rule 93 (Mark_quad -> .)
    FLOAT           reduce using rule 93 (Mark_quad -> .)
    DOUBLE          reduce using rule 93 (Mark_quad -> .)
    VOID            reduce using rule 93 (Mark_quad -> .)

    ForExpr                        shift and go to state 313
    Mark_quad                      shift and go to state 314

state 271

    (112) ForInit -> SEMICOLON .

    SEMICOLON       reduce using rule 112 (ForInit -> SEMICOLON .)
    OP_INC          reduce using rule 112 (ForInit -> SEMICOLON .)
    OP_DEC          reduce using rule 112 (ForInit -> SEMICOLON .)
    PLUS            reduce using rule 112 (ForInit -> SEMICOLON .)
    MINUS           reduce using rule 112 (ForInit -> SEMICOLON .)
    ~               reduce using rule 112 (ForInit -> SEMICOLON .)
    NOT             reduce using rule 112 (ForInit -> SEMICOLON .)
    IDENTIFIER      reduce using rule 112 (ForInit -> SEMICOLON .)
    THIS            reduce using rule 112 (ForInit -> SEMICOLON .)
    SUPER           reduce using rule 112 (ForInit -> SEMICOLON .)
    NULL            reduce using rule 112 (ForInit -> SEMICOLON .)
    LROUNPAREN      reduce using rule 112 (ForInit -> SEMICOLON .)
    INT_CONST       reduce using rule 112 (ForInit -> SEMICOLON .)
    FLOAT_CONST     reduce using rule 112 (ForInit -> SEMICOLON .)
    STRING          reduce using rule 112 (ForInit -> SEMICOLON .)
    CHAR_CONST      reduce using rule 112 (ForInit -> SEMICOLON .)
    BOOLEAN_CONST   reduce using rule 112 (ForInit -> SEMICOLON .)
    NEW             reduce using rule 112 (ForInit -> SEMICOLON .)
    BOOLEAN         reduce using rule 112 (ForInit -> SEMICOLON .)
    CHAR            reduce using rule 112 (ForInit -> SEMICOLON .)
    BYTE            reduce using rule 112 (ForInit -> SEMICOLON .)
    SHORT           reduce using rule 112 (ForInit -> SEMICOLON .)
    INT             reduce using rule 112 (ForInit -> SEMICOLON .)
    LONG            reduce using rule 112 (ForInit -> SEMICOLON .)
    FLOAT           reduce using rule 112 (ForInit -> SEMICOLON .)
    DOUBLE          reduce using rule 112 (ForInit -> SEMICOLON .)
    VOID            reduce using rule 112 (ForInit -> SEMICOLON .)


state 272

    (110) ForInit -> ExpressionStatements . SEMICOLON
    (117) ExpressionStatements -> ExpressionStatements . COMMA ExpressionStatement

    SEMICOLON       shift and go to state 316
    COMMA           shift and go to state 315


state 273

    (111) ForInit -> LocalVariableDeclarationStatement .

    SEMICOLON       reduce using rule 111 (ForInit -> LocalVariableDeclarationStatement .)
    OP_INC          reduce using rule 111 (ForInit -> LocalVariableDeclarationStatement .)
    OP_DEC          reduce using rule 111 (ForInit -> LocalVariableDeclarationStatement .)
    PLUS            reduce using rule 111 (ForInit -> LocalVariableDeclarationStatement .)
    MINUS           reduce using rule 111 (ForInit -> LocalVariableDeclarationStatement .)
    ~               reduce using rule 111 (ForInit -> LocalVariableDeclarationStatement .)
    NOT             reduce using rule 111 (ForInit -> LocalVariableDeclarationStatement .)
    IDENTIFIER      reduce using rule 111 (ForInit -> LocalVariableDeclarationStatement .)
    THIS            reduce using rule 111 (ForInit -> LocalVariableDeclarationStatement .)
    SUPER           reduce using rule 111 (ForInit -> LocalVariableDeclarationStatement .)
    NULL            reduce using rule 111 (ForInit -> LocalVariableDeclarationStatement .)
    LROUNPAREN      reduce using rule 111 (ForInit -> LocalVariableDeclarationStatement .)
    INT_CONST       reduce using rule 111 (ForInit -> LocalVariableDeclarationStatement .)
    FLOAT_CONST     reduce using rule 111 (ForInit -> LocalVariableDeclarationStatement .)
    STRING          reduce using rule 111 (ForInit -> LocalVariableDeclarationStatement .)
    CHAR_CONST      reduce using rule 111 (ForInit -> LocalVariableDeclarationStatement .)
    BOOLEAN_CONST   reduce using rule 111 (ForInit -> LocalVariableDeclarationStatement .)
    NEW             reduce using rule 111 (ForInit -> LocalVariableDeclarationStatement .)
    BOOLEAN         reduce using rule 111 (ForInit -> LocalVariableDeclarationStatement .)
    CHAR            reduce using rule 111 (ForInit -> LocalVariableDeclarationStatement .)
    BYTE            reduce using rule 111 (ForInit -> LocalVariableDeclarationStatement .)
    SHORT           reduce using rule 111 (ForInit -> LocalVariableDeclarationStatement .)
    INT             reduce using rule 111 (ForInit -> LocalVariableDeclarationStatement .)
    LONG            reduce using rule 111 (ForInit -> LocalVariableDeclarationStatement .)
    FLOAT           reduce using rule 111 (ForInit -> LocalVariableDeclarationStatement .)
    DOUBLE          reduce using rule 111 (ForInit -> LocalVariableDeclarationStatement .)
    VOID            reduce using rule 111 (ForInit -> LocalVariableDeclarationStatement .)


state 274

    (156) PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .

    DOT             reduce using rule 156 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    OP_INC          reduce using rule 156 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    OP_DEC          reduce using rule 156 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    MULT            reduce using rule 156 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    DIV             reduce using rule 156 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    MOD             reduce using rule 156 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    PLUS            reduce using rule 156 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    MINUS           reduce using rule 156 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    OP_SHL          reduce using rule 156 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    OP_SHR          reduce using rule 156 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    OP_SHRR         reduce using rule 156 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    LESS            reduce using rule 156 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    MORE            reduce using rule 156 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    OP_LE           reduce using rule 156 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    OP_GE           reduce using rule 156 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    OP_EQ           reduce using rule 156 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    OP_NE           reduce using rule 156 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    &               reduce using rule 156 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    ^               reduce using rule 156 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    |               reduce using rule 156 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    OP_LAND         reduce using rule 156 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    ?               reduce using rule 156 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    OP_LOR          reduce using rule 156 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    SEMICOLON       reduce using rule 156 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    RROUNPAREN      reduce using rule 156 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    COLON           reduce using rule 156 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    COMMA           reduce using rule 156 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    RSQPAREN        reduce using rule 156 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    EQUAL           reduce using rule 156 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    ASS_MUL         reduce using rule 156 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    ASS_ADD         reduce using rule 156 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    ASS_SUB         reduce using rule 156 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)


state 275

    (144) MethodCall -> MethodAccess LROUNPAREN ArgumentList . RROUNPAREN
    (151) ArgumentList -> ArgumentList . COMMA Expression

    RROUNPAREN      shift and go to state 317
    COMMA           shift and go to state 318


state 276

    (145) MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .

    LSQPAREN        reduce using rule 145 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    DOT             reduce using rule 145 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    OP_INC          reduce using rule 145 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    OP_DEC          reduce using rule 145 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    EQUAL           reduce using rule 145 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    ASS_MUL         reduce using rule 145 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    ASS_ADD         reduce using rule 145 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    ASS_SUB         reduce using rule 145 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    MULT            reduce using rule 145 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    DIV             reduce using rule 145 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    MOD             reduce using rule 145 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    PLUS            reduce using rule 145 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    MINUS           reduce using rule 145 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    OP_SHL          reduce using rule 145 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    OP_SHR          reduce using rule 145 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    OP_SHRR         reduce using rule 145 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    LESS            reduce using rule 145 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    MORE            reduce using rule 145 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    OP_LE           reduce using rule 145 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    OP_GE           reduce using rule 145 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    OP_EQ           reduce using rule 145 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    OP_NE           reduce using rule 145 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    &               reduce using rule 145 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    ^               reduce using rule 145 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    |               reduce using rule 145 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    OP_LAND         reduce using rule 145 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    ?               reduce using rule 145 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    OP_LOR          reduce using rule 145 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    SEMICOLON       reduce using rule 145 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    RROUNPAREN      reduce using rule 145 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    COLON           reduce using rule 145 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    COMMA           reduce using rule 145 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    RSQPAREN        reduce using rule 145 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)


state 277

    (150) ArgumentList -> Expression .

    RROUNPAREN      reduce using rule 150 (ArgumentList -> Expression .)
    COMMA           reduce using rule 150 (ArgumentList -> Expression .)


state 278

    (209) ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .
    (207) AndExpression -> AndExpression . & EqualityExpression

    ^               reduce using rule 209 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    |               reduce using rule 209 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    OP_LAND         reduce using rule 209 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    ?               reduce using rule 209 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    OP_LOR          reduce using rule 209 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    RSQPAREN        reduce using rule 209 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    SEMICOLON       reduce using rule 209 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    RROUNPAREN      reduce using rule 209 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    COLON           reduce using rule 209 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    COMMA           reduce using rule 209 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    &               shift and go to state 183


state 279

    (199) RelationalExpression -> RelationalExpression LESS ShiftExpression .
    (195) ShiftExpression -> ShiftExpression . OP_SHL AdditiveExpression
    (196) ShiftExpression -> ShiftExpression . OP_SHR AdditiveExpression
    (197) ShiftExpression -> ShiftExpression . OP_SHRR AdditiveExpression

    LESS            reduce using rule 199 (RelationalExpression -> RelationalExpression LESS ShiftExpression .)
    MORE            reduce using rule 199 (RelationalExpression -> RelationalExpression LESS ShiftExpression .)
    OP_LE           reduce using rule 199 (RelationalExpression -> RelationalExpression LESS ShiftExpression .)
    OP_GE           reduce using rule 199 (RelationalExpression -> RelationalExpression LESS ShiftExpression .)
    OP_EQ           reduce using rule 199 (RelationalExpression -> RelationalExpression LESS ShiftExpression .)
    OP_NE           reduce using rule 199 (RelationalExpression -> RelationalExpression LESS ShiftExpression .)
    &               reduce using rule 199 (RelationalExpression -> RelationalExpression LESS ShiftExpression .)
    ^               reduce using rule 199 (RelationalExpression -> RelationalExpression LESS ShiftExpression .)
    |               reduce using rule 199 (RelationalExpression -> RelationalExpression LESS ShiftExpression .)
    OP_LAND         reduce using rule 199 (RelationalExpression -> RelationalExpression LESS ShiftExpression .)
    ?               reduce using rule 199 (RelationalExpression -> RelationalExpression LESS ShiftExpression .)
    OP_LOR          reduce using rule 199 (RelationalExpression -> RelationalExpression LESS ShiftExpression .)
    RROUNPAREN      reduce using rule 199 (RelationalExpression -> RelationalExpression LESS ShiftExpression .)
    SEMICOLON       reduce using rule 199 (RelationalExpression -> RelationalExpression LESS ShiftExpression .)
    COLON           reduce using rule 199 (RelationalExpression -> RelationalExpression LESS ShiftExpression .)
    COMMA           reduce using rule 199 (RelationalExpression -> RelationalExpression LESS ShiftExpression .)
    RSQPAREN        reduce using rule 199 (RelationalExpression -> RelationalExpression LESS ShiftExpression .)
    OP_SHL          shift and go to state 240
    OP_SHR          shift and go to state 242
    OP_SHRR         shift and go to state 241


state 280

    (201) RelationalExpression -> RelationalExpression OP_LE ShiftExpression .
    (195) ShiftExpression -> ShiftExpression . OP_SHL AdditiveExpression
    (196) ShiftExpression -> ShiftExpression . OP_SHR AdditiveExpression
    (197) ShiftExpression -> ShiftExpression . OP_SHRR AdditiveExpression

    LESS            reduce using rule 201 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    MORE            reduce using rule 201 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    OP_LE           reduce using rule 201 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    OP_GE           reduce using rule 201 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    OP_EQ           reduce using rule 201 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    OP_NE           reduce using rule 201 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    &               reduce using rule 201 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    ^               reduce using rule 201 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    |               reduce using rule 201 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    OP_LAND         reduce using rule 201 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    ?               reduce using rule 201 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    OP_LOR          reduce using rule 201 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    RROUNPAREN      reduce using rule 201 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    SEMICOLON       reduce using rule 201 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    COLON           reduce using rule 201 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    COMMA           reduce using rule 201 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    RSQPAREN        reduce using rule 201 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    OP_SHL          shift and go to state 240
    OP_SHR          shift and go to state 242
    OP_SHRR         shift and go to state 241


state 281

    (202) RelationalExpression -> RelationalExpression OP_GE ShiftExpression .
    (195) ShiftExpression -> ShiftExpression . OP_SHL AdditiveExpression
    (196) ShiftExpression -> ShiftExpression . OP_SHR AdditiveExpression
    (197) ShiftExpression -> ShiftExpression . OP_SHRR AdditiveExpression

    LESS            reduce using rule 202 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    MORE            reduce using rule 202 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    OP_LE           reduce using rule 202 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    OP_GE           reduce using rule 202 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    OP_EQ           reduce using rule 202 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    OP_NE           reduce using rule 202 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    &               reduce using rule 202 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    ^               reduce using rule 202 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    |               reduce using rule 202 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    OP_LAND         reduce using rule 202 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    ?               reduce using rule 202 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    OP_LOR          reduce using rule 202 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    RROUNPAREN      reduce using rule 202 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    SEMICOLON       reduce using rule 202 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    COLON           reduce using rule 202 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    COMMA           reduce using rule 202 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    RSQPAREN        reduce using rule 202 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    OP_SHL          shift and go to state 240
    OP_SHR          shift and go to state 242
    OP_SHRR         shift and go to state 241


state 282

    (200) RelationalExpression -> RelationalExpression MORE ShiftExpression .
    (195) ShiftExpression -> ShiftExpression . OP_SHL AdditiveExpression
    (196) ShiftExpression -> ShiftExpression . OP_SHR AdditiveExpression
    (197) ShiftExpression -> ShiftExpression . OP_SHRR AdditiveExpression

    LESS            reduce using rule 200 (RelationalExpression -> RelationalExpression MORE ShiftExpression .)
    MORE            reduce using rule 200 (RelationalExpression -> RelationalExpression MORE ShiftExpression .)
    OP_LE           reduce using rule 200 (RelationalExpression -> RelationalExpression MORE ShiftExpression .)
    OP_GE           reduce using rule 200 (RelationalExpression -> RelationalExpression MORE ShiftExpression .)
    OP_EQ           reduce using rule 200 (RelationalExpression -> RelationalExpression MORE ShiftExpression .)
    OP_NE           reduce using rule 200 (RelationalExpression -> RelationalExpression MORE ShiftExpression .)
    &               reduce using rule 200 (RelationalExpression -> RelationalExpression MORE ShiftExpression .)
    ^               reduce using rule 200 (RelationalExpression -> RelationalExpression MORE ShiftExpression .)
    |               reduce using rule 200 (RelationalExpression -> RelationalExpression MORE ShiftExpression .)
    OP_LAND         reduce using rule 200 (RelationalExpression -> RelationalExpression MORE ShiftExpression .)
    ?               reduce using rule 200 (RelationalExpression -> RelationalExpression MORE ShiftExpression .)
    OP_LOR          reduce using rule 200 (RelationalExpression -> RelationalExpression MORE ShiftExpression .)
    RROUNPAREN      reduce using rule 200 (RelationalExpression -> RelationalExpression MORE ShiftExpression .)
    SEMICOLON       reduce using rule 200 (RelationalExpression -> RelationalExpression MORE ShiftExpression .)
    COLON           reduce using rule 200 (RelationalExpression -> RelationalExpression MORE ShiftExpression .)
    COMMA           reduce using rule 200 (RelationalExpression -> RelationalExpression MORE ShiftExpression .)
    RSQPAREN        reduce using rule 200 (RelationalExpression -> RelationalExpression MORE ShiftExpression .)
    OP_SHL          shift and go to state 240
    OP_SHR          shift and go to state 242
    OP_SHRR         shift and go to state 241


state 283

    (127) ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .

    LSQPAREN        reduce using rule 127 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    DOT             reduce using rule 127 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    OP_INC          reduce using rule 127 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    OP_DEC          reduce using rule 127 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    MULT            reduce using rule 127 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    DIV             reduce using rule 127 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    MOD             reduce using rule 127 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    PLUS            reduce using rule 127 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    MINUS           reduce using rule 127 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    OP_SHL          reduce using rule 127 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    OP_SHR          reduce using rule 127 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    OP_SHRR         reduce using rule 127 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    LESS            reduce using rule 127 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    MORE            reduce using rule 127 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    OP_LE           reduce using rule 127 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    OP_GE           reduce using rule 127 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    OP_EQ           reduce using rule 127 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    OP_NE           reduce using rule 127 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    &               reduce using rule 127 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    ^               reduce using rule 127 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    |               reduce using rule 127 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    OP_LAND         reduce using rule 127 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    ?               reduce using rule 127 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    OP_LOR          reduce using rule 127 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    SEMICOLON       reduce using rule 127 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    RROUNPAREN      reduce using rule 127 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    COLON           reduce using rule 127 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    COMMA           reduce using rule 127 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    RSQPAREN        reduce using rule 127 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    EQUAL           reduce using rule 127 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    ASS_MUL         reduce using rule 127 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    ASS_ADD         reduce using rule 127 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    ASS_SUB         reduce using rule 127 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)


state 284

    (138) ArrayAccess -> ComplexPrimary LSQPAREN Expression . RSQPAREN

    RSQPAREN        shift and go to state 319


state 285

    (157) PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .

    DOT             reduce using rule 157 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    OP_INC          reduce using rule 157 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    OP_DEC          reduce using rule 157 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    MULT            reduce using rule 157 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    DIV             reduce using rule 157 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    MOD             reduce using rule 157 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    PLUS            reduce using rule 157 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    MINUS           reduce using rule 157 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    OP_SHL          reduce using rule 157 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    OP_SHR          reduce using rule 157 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    OP_SHRR         reduce using rule 157 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    LESS            reduce using rule 157 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    MORE            reduce using rule 157 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    OP_LE           reduce using rule 157 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    OP_GE           reduce using rule 157 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    OP_EQ           reduce using rule 157 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    OP_NE           reduce using rule 157 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    &               reduce using rule 157 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    ^               reduce using rule 157 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    |               reduce using rule 157 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    OP_LAND         reduce using rule 157 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    ?               reduce using rule 157 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    OP_LOR          reduce using rule 157 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    SEMICOLON       reduce using rule 157 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    RROUNPAREN      reduce using rule 157 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    COLON           reduce using rule 157 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    COMMA           reduce using rule 157 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    RSQPAREN        reduce using rule 157 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    EQUAL           reduce using rule 157 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    ASS_MUL         reduce using rule 157 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    ASS_ADD         reduce using rule 157 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    ASS_SUB         reduce using rule 157 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)


state 286

    (158) PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations . RCURPAREN
    (46) FieldDeclarations -> FieldDeclarations . FieldDeclarationOptSemi
    (47) FieldDeclarationOptSemi -> . FieldDeclaration
    (48) FieldDeclarationOptSemi -> . FieldDeclaration SemiColons
    (49) FieldDeclaration -> . FieldVariableDeclaration SEMICOLON
    (50) FieldDeclaration -> . MethodDeclaration
    (51) FieldDeclaration -> . ConstructorDeclaration
    (52) FieldDeclaration -> . StaticInitializer
    (53) FieldDeclaration -> . NonStaticInitializer
    (54) FieldDeclaration -> . TypeDeclaration
    (55) FieldVariableDeclaration -> . Modifiers TypeSpecifier VariableDeclarators
    (56) FieldVariableDeclaration -> . TypeSpecifier VariableDeclarators
    (62) MethodDeclaration -> . Modifiers TypeSpecifier MethodDeclarator MethodBody
    (63) MethodDeclaration -> . TypeSpecifier MethodDeclarator MethodBody
    (73) ConstructorDeclaration -> . Modifiers ConstructorDeclarator Block
    (74) ConstructorDeclaration -> . ConstructorDeclarator Block
    (77) StaticInitializer -> . STATIC Block
    (78) NonStaticInitializer -> . Block
    (35) TypeDeclaration -> . ClassHeader LCURPAREN FieldDeclarations RCURPAREN
    (36) TypeDeclaration -> . ClassHeader LCURPAREN RCURPAREN
    (39) Modifiers -> . Modifier
    (40) Modifiers -> . Modifiers Modifier
    (3) TypeSpecifier -> . TypeName
    (4) TypeSpecifier -> . TypeName Dims
    (75) ConstructorDeclarator -> . IDENTIFIER LROUNPAREN ParameterList RROUNPAREN
    (76) ConstructorDeclarator -> . IDENTIFIER LROUNPAREN RROUNPAREN
    (79) Block -> . LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN
    (80) Block -> . LCURPAREN RCURPAREN
    (37) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (38) ClassHeader -> . ClassWord IDENTIFIER
    (41) Modifier -> . PUBLIC
    (42) Modifier -> . PRIVATE
    (43) Modifier -> . STATIC
    (5) TypeName -> . PrimitiveType
    (6) TypeName -> . QualifiedName
    (44) ClassWord -> . CLASS
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER

    RCURPAREN       shift and go to state 320
    STATIC          shift and go to state 48
    IDENTIFIER      shift and go to state 54
    LCURPAREN       shift and go to state 57
    PUBLIC          shift and go to state 18
    PRIVATE         shift and go to state 4
    CLASS           shift and go to state 6
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43

    FieldVariableDeclaration       shift and go to state 42
    TypeDeclaration                shift and go to state 44
    PrimitiveType                  shift and go to state 45
    StaticInitializer              shift and go to state 46
    NonStaticInitializer           shift and go to state 50
    TypeSpecifier                  shift and go to state 51
    QualifiedName                  shift and go to state 52
    TypeName                       shift and go to state 53
    MethodDeclaration              shift and go to state 55
    Modifiers                      shift and go to state 47
    ConstructorDeclaration         shift and go to state 41
    Modifier                       shift and go to state 12
    Block                          shift and go to state 60
    ClassWord                      shift and go to state 14
    FieldDeclarationOptSemi        shift and go to state 161
    ConstructorDeclarator          shift and go to state 62
    ClassHeader                    shift and go to state 17
    FieldDeclaration               shift and go to state 68

state 287

    (103) IterationStatement -> WHILE Mark_quad LROUNPAREN . Expression RROUNPAREN Mark_while Statement
    (224) Expression -> . AssignmentExpression
    (218) AssignmentExpression -> . ConditionalExpression
    (219) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (216) ConditionalExpression -> . ConditionalOrExpression
    (217) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (173) UnaryExpression -> . OP_INC UnaryExpression
    (174) UnaryExpression -> . OP_DEC UnaryExpression
    (175) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (176) UnaryExpression -> . LogicalUnaryExpression
    (214) ConditionalOrExpression -> . ConditionalAndExpression
    (215) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (181) ArithmeticUnaryOperator -> . PLUS
    (182) ArithmeticUnaryOperator -> . MINUS
    (177) LogicalUnaryExpression -> . PostfixExpression
    (178) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (212) ConditionalAndExpression -> . InclusiveOrExpression
    (213) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (169) PostfixExpression -> . PrimaryExpression
    (170) PostfixExpression -> . RealPostfixExpression
    (179) LogicalUnaryOperator -> . ~
    (180) LogicalUnaryOperator -> . NOT
    (210) InclusiveOrExpression -> . ExclusiveOrExpression
    (211) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (122) PrimaryExpression -> . QualifiedName
    (123) PrimaryExpression -> . NotJustName
    (171) RealPostfixExpression -> . PostfixExpression OP_INC
    (172) RealPostfixExpression -> . PostfixExpression OP_DEC
    (208) ExclusiveOrExpression -> . AndExpression
    (209) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (124) NotJustName -> . SpecialName
    (125) NotJustName -> . NewAllocationExpression
    (126) NotJustName -> . ComplexPrimary
    (206) AndExpression -> . EqualityExpression
    (207) AndExpression -> . AndExpression & EqualityExpression
    (147) SpecialName -> . THIS
    (148) SpecialName -> . SUPER
    (149) SpecialName -> . NULL
    (152) NewAllocationExpression -> . PlainNewAllocationExpression
    (153) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (127) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (128) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (203) EqualityExpression -> . RelationalExpression
    (204) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (205) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (154) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (155) PlainNewAllocationExpression -> . ClassAllocationExpression
    (156) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (157) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (158) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (129) ComplexPrimaryNoParenthesis -> . INT_CONST
    (130) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (131) ComplexPrimaryNoParenthesis -> . STRING
    (132) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (133) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (134) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (135) ComplexPrimaryNoParenthesis -> . FieldAccess
    (136) ComplexPrimaryNoParenthesis -> . MethodCall
    (198) RelationalExpression -> . ShiftExpression
    (199) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (200) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (201) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (202) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (161) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (162) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (163) ArrayAllocationExpression -> . NEW TypeName Dims
    (159) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (160) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (137) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (138) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (139) FieldAccess -> . NotJustName DOT IDENTIFIER
    (140) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (141) FieldAccess -> . QualifiedName DOT THIS
    (142) FieldAccess -> . QualifiedName DOT CLASS
    (143) FieldAccess -> . PrimitiveType DOT CLASS
    (144) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (145) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (194) ShiftExpression -> . AdditiveExpression
    (195) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (196) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (197) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (146) MethodAccess -> . QualifiedName
    (191) AdditiveExpression -> . MultiplicativeExpression
    (192) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (193) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (187) MultiplicativeExpression -> . CastExpression
    (188) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (189) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (190) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (183) CastExpression -> . UnaryExpression

    OP_INC          shift and go to state 106
    OP_DEC          shift and go to state 126
    PLUS            shift and go to state 90
    MINUS           shift and go to state 89
    ~               shift and go to state 141
    NOT             shift and go to state 119
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 91
    SUPER           shift and go to state 158
    NULL            shift and go to state 145
    LROUNPAREN      shift and go to state 118
    INT_CONST       shift and go to state 131
    FLOAT_CONST     shift and go to state 86
    STRING          shift and go to state 151
    CHAR_CONST      shift and go to state 144
    BOOLEAN_CONST   shift and go to state 157
    NEW             shift and go to state 127
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 121
    PrimaryExpression              shift and go to state 129
    PrimitiveType                  shift and go to state 187
    RealPostfixExpression          shift and go to state 96
    AndExpression                  shift and go to state 88
    ArrayAccess                    shift and go to state 108
    CastExpression                 shift and go to state 143
    EqualityExpression             shift and go to state 98
    LogicalUnaryOperator           shift and go to state 153
    ComplexPrimaryNoParenthesis    shift and go to state 100
    MultiplicativeExpression       shift and go to state 101
    ClassAllocationExpression      shift and go to state 122
    MethodCall                     shift and go to state 102
    ConditionalOrExpression        shift and go to state 133
    ShiftExpression                shift and go to state 149
    ArithmeticUnaryOperator        shift and go to state 97
    AssignmentExpression           shift and go to state 104
    NewAllocationExpression        shift and go to state 135
    NotJustName                    shift and go to state 152
    QualifiedName                  shift and go to state 190
    LogicalUnaryExpression         shift and go to state 154
    Expression                     shift and go to state 321
    AdditiveExpression             shift and go to state 137
    ArrayAllocationExpression      shift and go to state 110
    ConditionalExpression          shift and go to state 138
    UnaryExpression                shift and go to state 139
    InclusiveOrExpression          shift and go to state 140
    MethodAccess                   shift and go to state 111
    ExclusiveOrExpression          shift and go to state 113
    ConditionalAndExpression       shift and go to state 92
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    FieldAccess                    shift and go to state 156
    SpecialName                    shift and go to state 120

state 288

    (161) ArrayAllocationExpression -> NEW TypeName DimExprs . Dims
    (162) ArrayAllocationExpression -> NEW TypeName DimExprs .
    (165) DimExprs -> DimExprs . DimExpr
    (167) Dims -> . OP_DIM
    (168) Dims -> . Dims OP_DIM
    (166) DimExpr -> . LSQPAREN Expression RSQPAREN
    (2) OP_DIM -> . LSQPAREN RSQPAREN

    LCURPAREN       reduce using rule 162 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    DOT             reduce using rule 162 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_INC          reduce using rule 162 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_DEC          reduce using rule 162 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    EQUAL           reduce using rule 162 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    ASS_MUL         reduce using rule 162 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    ASS_ADD         reduce using rule 162 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    ASS_SUB         reduce using rule 162 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    MULT            reduce using rule 162 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    DIV             reduce using rule 162 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    MOD             reduce using rule 162 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    PLUS            reduce using rule 162 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    MINUS           reduce using rule 162 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_SHL          reduce using rule 162 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_SHR          reduce using rule 162 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_SHRR         reduce using rule 162 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    LESS            reduce using rule 162 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    MORE            reduce using rule 162 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_LE           reduce using rule 162 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_GE           reduce using rule 162 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_EQ           reduce using rule 162 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_NE           reduce using rule 162 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    &               reduce using rule 162 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    ^               reduce using rule 162 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    |               reduce using rule 162 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_LAND         reduce using rule 162 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    ?               reduce using rule 162 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_LOR          reduce using rule 162 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    SEMICOLON       reduce using rule 162 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    RROUNPAREN      reduce using rule 162 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    COLON           reduce using rule 162 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    COMMA           reduce using rule 162 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    RSQPAREN        reduce using rule 162 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    LSQPAREN        shift and go to state 289

    DimExpr                        shift and go to state 322
    Dims                           shift and go to state 323
    OP_DIM                         shift and go to state 81

state 289

    (166) DimExpr -> LSQPAREN . Expression RSQPAREN
    (2) OP_DIM -> LSQPAREN . RSQPAREN
    (224) Expression -> . AssignmentExpression
    (218) AssignmentExpression -> . ConditionalExpression
    (219) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (216) ConditionalExpression -> . ConditionalOrExpression
    (217) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (173) UnaryExpression -> . OP_INC UnaryExpression
    (174) UnaryExpression -> . OP_DEC UnaryExpression
    (175) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (176) UnaryExpression -> . LogicalUnaryExpression
    (214) ConditionalOrExpression -> . ConditionalAndExpression
    (215) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (181) ArithmeticUnaryOperator -> . PLUS
    (182) ArithmeticUnaryOperator -> . MINUS
    (177) LogicalUnaryExpression -> . PostfixExpression
    (178) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (212) ConditionalAndExpression -> . InclusiveOrExpression
    (213) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (169) PostfixExpression -> . PrimaryExpression
    (170) PostfixExpression -> . RealPostfixExpression
    (179) LogicalUnaryOperator -> . ~
    (180) LogicalUnaryOperator -> . NOT
    (210) InclusiveOrExpression -> . ExclusiveOrExpression
    (211) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (122) PrimaryExpression -> . QualifiedName
    (123) PrimaryExpression -> . NotJustName
    (171) RealPostfixExpression -> . PostfixExpression OP_INC
    (172) RealPostfixExpression -> . PostfixExpression OP_DEC
    (208) ExclusiveOrExpression -> . AndExpression
    (209) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (124) NotJustName -> . SpecialName
    (125) NotJustName -> . NewAllocationExpression
    (126) NotJustName -> . ComplexPrimary
    (206) AndExpression -> . EqualityExpression
    (207) AndExpression -> . AndExpression & EqualityExpression
    (147) SpecialName -> . THIS
    (148) SpecialName -> . SUPER
    (149) SpecialName -> . NULL
    (152) NewAllocationExpression -> . PlainNewAllocationExpression
    (153) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (127) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (128) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (203) EqualityExpression -> . RelationalExpression
    (204) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (205) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (154) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (155) PlainNewAllocationExpression -> . ClassAllocationExpression
    (156) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (157) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (158) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (129) ComplexPrimaryNoParenthesis -> . INT_CONST
    (130) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (131) ComplexPrimaryNoParenthesis -> . STRING
    (132) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (133) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (134) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (135) ComplexPrimaryNoParenthesis -> . FieldAccess
    (136) ComplexPrimaryNoParenthesis -> . MethodCall
    (198) RelationalExpression -> . ShiftExpression
    (199) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (200) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (201) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (202) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (161) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (162) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (163) ArrayAllocationExpression -> . NEW TypeName Dims
    (159) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (160) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (137) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (138) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (139) FieldAccess -> . NotJustName DOT IDENTIFIER
    (140) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (141) FieldAccess -> . QualifiedName DOT THIS
    (142) FieldAccess -> . QualifiedName DOT CLASS
    (143) FieldAccess -> . PrimitiveType DOT CLASS
    (144) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (145) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (194) ShiftExpression -> . AdditiveExpression
    (195) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (196) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (197) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (146) MethodAccess -> . QualifiedName
    (191) AdditiveExpression -> . MultiplicativeExpression
    (192) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (193) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (187) MultiplicativeExpression -> . CastExpression
    (188) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (189) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (190) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (183) CastExpression -> . UnaryExpression

    RSQPAREN        shift and go to state 175
    OP_INC          shift and go to state 106
    OP_DEC          shift and go to state 126
    PLUS            shift and go to state 90
    MINUS           shift and go to state 89
    ~               shift and go to state 141
    NOT             shift and go to state 119
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 91
    SUPER           shift and go to state 158
    NULL            shift and go to state 145
    LROUNPAREN      shift and go to state 118
    INT_CONST       shift and go to state 131
    FLOAT_CONST     shift and go to state 86
    STRING          shift and go to state 151
    CHAR_CONST      shift and go to state 144
    BOOLEAN_CONST   shift and go to state 157
    NEW             shift and go to state 127
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 121
    PrimaryExpression              shift and go to state 129
    PrimitiveType                  shift and go to state 187
    RealPostfixExpression          shift and go to state 96
    ArithmeticUnaryOperator        shift and go to state 97
    AndExpression                  shift and go to state 88
    ArrayAccess                    shift and go to state 108
    CastExpression                 shift and go to state 143
    EqualityExpression             shift and go to state 98
    LogicalUnaryOperator           shift and go to state 153
    ComplexPrimaryNoParenthesis    shift and go to state 100
    MultiplicativeExpression       shift and go to state 101
    ClassAllocationExpression      shift and go to state 122
    MethodCall                     shift and go to state 102
    ConditionalOrExpression        shift and go to state 133
    ShiftExpression                shift and go to state 149
    AssignmentExpression           shift and go to state 104
    NewAllocationExpression        shift and go to state 135
    NotJustName                    shift and go to state 152
    QualifiedName                  shift and go to state 190
    LogicalUnaryExpression         shift and go to state 154
    Expression                     shift and go to state 324
    AdditiveExpression             shift and go to state 137
    ArrayAllocationExpression      shift and go to state 110
    ConditionalExpression          shift and go to state 138
    UnaryExpression                shift and go to state 139
    InclusiveOrExpression          shift and go to state 140
    MethodAccess                   shift and go to state 111
    ExclusiveOrExpression          shift and go to state 113
    ConditionalAndExpression       shift and go to state 92
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    FieldAccess                    shift and go to state 156
    SpecialName                    shift and go to state 120

state 290

    (163) ArrayAllocationExpression -> NEW TypeName Dims .
    (168) Dims -> Dims . OP_DIM
    (2) OP_DIM -> . LSQPAREN RSQPAREN

    LCURPAREN       reduce using rule 163 (ArrayAllocationExpression -> NEW TypeName Dims .)
    DOT             reduce using rule 163 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_INC          reduce using rule 163 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_DEC          reduce using rule 163 (ArrayAllocationExpression -> NEW TypeName Dims .)
    EQUAL           reduce using rule 163 (ArrayAllocationExpression -> NEW TypeName Dims .)
    ASS_MUL         reduce using rule 163 (ArrayAllocationExpression -> NEW TypeName Dims .)
    ASS_ADD         reduce using rule 163 (ArrayAllocationExpression -> NEW TypeName Dims .)
    ASS_SUB         reduce using rule 163 (ArrayAllocationExpression -> NEW TypeName Dims .)
    MULT            reduce using rule 163 (ArrayAllocationExpression -> NEW TypeName Dims .)
    DIV             reduce using rule 163 (ArrayAllocationExpression -> NEW TypeName Dims .)
    MOD             reduce using rule 163 (ArrayAllocationExpression -> NEW TypeName Dims .)
    PLUS            reduce using rule 163 (ArrayAllocationExpression -> NEW TypeName Dims .)
    MINUS           reduce using rule 163 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_SHL          reduce using rule 163 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_SHR          reduce using rule 163 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_SHRR         reduce using rule 163 (ArrayAllocationExpression -> NEW TypeName Dims .)
    LESS            reduce using rule 163 (ArrayAllocationExpression -> NEW TypeName Dims .)
    MORE            reduce using rule 163 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_LE           reduce using rule 163 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_GE           reduce using rule 163 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_EQ           reduce using rule 163 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_NE           reduce using rule 163 (ArrayAllocationExpression -> NEW TypeName Dims .)
    &               reduce using rule 163 (ArrayAllocationExpression -> NEW TypeName Dims .)
    ^               reduce using rule 163 (ArrayAllocationExpression -> NEW TypeName Dims .)
    |               reduce using rule 163 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_LAND         reduce using rule 163 (ArrayAllocationExpression -> NEW TypeName Dims .)
    ?               reduce using rule 163 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_LOR          reduce using rule 163 (ArrayAllocationExpression -> NEW TypeName Dims .)
    SEMICOLON       reduce using rule 163 (ArrayAllocationExpression -> NEW TypeName Dims .)
    RROUNPAREN      reduce using rule 163 (ArrayAllocationExpression -> NEW TypeName Dims .)
    COLON           reduce using rule 163 (ArrayAllocationExpression -> NEW TypeName Dims .)
    COMMA           reduce using rule 163 (ArrayAllocationExpression -> NEW TypeName Dims .)
    RSQPAREN        reduce using rule 163 (ArrayAllocationExpression -> NEW TypeName Dims .)
    LSQPAREN        shift and go to state 80

    OP_DIM                         shift and go to state 176

state 291

    (164) DimExprs -> DimExpr .

    LSQPAREN        reduce using rule 164 (DimExprs -> DimExpr .)
    LCURPAREN       reduce using rule 164 (DimExprs -> DimExpr .)
    DOT             reduce using rule 164 (DimExprs -> DimExpr .)
    OP_INC          reduce using rule 164 (DimExprs -> DimExpr .)
    OP_DEC          reduce using rule 164 (DimExprs -> DimExpr .)
    EQUAL           reduce using rule 164 (DimExprs -> DimExpr .)
    ASS_MUL         reduce using rule 164 (DimExprs -> DimExpr .)
    ASS_ADD         reduce using rule 164 (DimExprs -> DimExpr .)
    ASS_SUB         reduce using rule 164 (DimExprs -> DimExpr .)
    MULT            reduce using rule 164 (DimExprs -> DimExpr .)
    DIV             reduce using rule 164 (DimExprs -> DimExpr .)
    MOD             reduce using rule 164 (DimExprs -> DimExpr .)
    PLUS            reduce using rule 164 (DimExprs -> DimExpr .)
    MINUS           reduce using rule 164 (DimExprs -> DimExpr .)
    OP_SHL          reduce using rule 164 (DimExprs -> DimExpr .)
    OP_SHR          reduce using rule 164 (DimExprs -> DimExpr .)
    OP_SHRR         reduce using rule 164 (DimExprs -> DimExpr .)
    LESS            reduce using rule 164 (DimExprs -> DimExpr .)
    MORE            reduce using rule 164 (DimExprs -> DimExpr .)
    OP_LE           reduce using rule 164 (DimExprs -> DimExpr .)
    OP_GE           reduce using rule 164 (DimExprs -> DimExpr .)
    OP_EQ           reduce using rule 164 (DimExprs -> DimExpr .)
    OP_NE           reduce using rule 164 (DimExprs -> DimExpr .)
    &               reduce using rule 164 (DimExprs -> DimExpr .)
    ^               reduce using rule 164 (DimExprs -> DimExpr .)
    |               reduce using rule 164 (DimExprs -> DimExpr .)
    OP_LAND         reduce using rule 164 (DimExprs -> DimExpr .)
    ?               reduce using rule 164 (DimExprs -> DimExpr .)
    OP_LOR          reduce using rule 164 (DimExprs -> DimExpr .)
    SEMICOLON       reduce using rule 164 (DimExprs -> DimExpr .)
    RROUNPAREN      reduce using rule 164 (DimExprs -> DimExpr .)
    COLON           reduce using rule 164 (DimExprs -> DimExpr .)
    COMMA           reduce using rule 164 (DimExprs -> DimExpr .)
    RSQPAREN        reduce using rule 164 (DimExprs -> DimExpr .)


state 292

    (159) ClassAllocationExpression -> NEW TypeName LROUNPAREN . ArgumentList RROUNPAREN
    (160) ClassAllocationExpression -> NEW TypeName LROUNPAREN . RROUNPAREN
    (150) ArgumentList -> . Expression
    (151) ArgumentList -> . ArgumentList COMMA Expression
    (224) Expression -> . AssignmentExpression
    (218) AssignmentExpression -> . ConditionalExpression
    (219) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (216) ConditionalExpression -> . ConditionalOrExpression
    (217) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (173) UnaryExpression -> . OP_INC UnaryExpression
    (174) UnaryExpression -> . OP_DEC UnaryExpression
    (175) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (176) UnaryExpression -> . LogicalUnaryExpression
    (214) ConditionalOrExpression -> . ConditionalAndExpression
    (215) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (181) ArithmeticUnaryOperator -> . PLUS
    (182) ArithmeticUnaryOperator -> . MINUS
    (177) LogicalUnaryExpression -> . PostfixExpression
    (178) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (212) ConditionalAndExpression -> . InclusiveOrExpression
    (213) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (169) PostfixExpression -> . PrimaryExpression
    (170) PostfixExpression -> . RealPostfixExpression
    (179) LogicalUnaryOperator -> . ~
    (180) LogicalUnaryOperator -> . NOT
    (210) InclusiveOrExpression -> . ExclusiveOrExpression
    (211) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (122) PrimaryExpression -> . QualifiedName
    (123) PrimaryExpression -> . NotJustName
    (171) RealPostfixExpression -> . PostfixExpression OP_INC
    (172) RealPostfixExpression -> . PostfixExpression OP_DEC
    (208) ExclusiveOrExpression -> . AndExpression
    (209) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (124) NotJustName -> . SpecialName
    (125) NotJustName -> . NewAllocationExpression
    (126) NotJustName -> . ComplexPrimary
    (206) AndExpression -> . EqualityExpression
    (207) AndExpression -> . AndExpression & EqualityExpression
    (147) SpecialName -> . THIS
    (148) SpecialName -> . SUPER
    (149) SpecialName -> . NULL
    (152) NewAllocationExpression -> . PlainNewAllocationExpression
    (153) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (127) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (128) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (203) EqualityExpression -> . RelationalExpression
    (204) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (205) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (154) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (155) PlainNewAllocationExpression -> . ClassAllocationExpression
    (156) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (157) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (158) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (129) ComplexPrimaryNoParenthesis -> . INT_CONST
    (130) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (131) ComplexPrimaryNoParenthesis -> . STRING
    (132) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (133) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (134) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (135) ComplexPrimaryNoParenthesis -> . FieldAccess
    (136) ComplexPrimaryNoParenthesis -> . MethodCall
    (198) RelationalExpression -> . ShiftExpression
    (199) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (200) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (201) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (202) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (161) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (162) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (163) ArrayAllocationExpression -> . NEW TypeName Dims
    (159) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (160) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (137) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (138) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (139) FieldAccess -> . NotJustName DOT IDENTIFIER
    (140) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (141) FieldAccess -> . QualifiedName DOT THIS
    (142) FieldAccess -> . QualifiedName DOT CLASS
    (143) FieldAccess -> . PrimitiveType DOT CLASS
    (144) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (145) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (194) ShiftExpression -> . AdditiveExpression
    (195) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (196) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (197) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (146) MethodAccess -> . QualifiedName
    (191) AdditiveExpression -> . MultiplicativeExpression
    (192) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (193) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (187) MultiplicativeExpression -> . CastExpression
    (188) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (189) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (190) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (183) CastExpression -> . UnaryExpression

    RROUNPAREN      shift and go to state 326
    OP_INC          shift and go to state 106
    OP_DEC          shift and go to state 126
    PLUS            shift and go to state 90
    MINUS           shift and go to state 89
    ~               shift and go to state 141
    NOT             shift and go to state 119
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 91
    SUPER           shift and go to state 158
    NULL            shift and go to state 145
    LROUNPAREN      shift and go to state 118
    INT_CONST       shift and go to state 131
    FLOAT_CONST     shift and go to state 86
    STRING          shift and go to state 151
    CHAR_CONST      shift and go to state 144
    BOOLEAN_CONST   shift and go to state 157
    NEW             shift and go to state 127
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 121
    PrimaryExpression              shift and go to state 129
    PrimitiveType                  shift and go to state 187
    RealPostfixExpression          shift and go to state 96
    ArithmeticUnaryOperator        shift and go to state 97
    AndExpression                  shift and go to state 88
    ArrayAccess                    shift and go to state 108
    CastExpression                 shift and go to state 143
    EqualityExpression             shift and go to state 98
    ArgumentList                   shift and go to state 325
    LogicalUnaryOperator           shift and go to state 153
    ComplexPrimaryNoParenthesis    shift and go to state 100
    MultiplicativeExpression       shift and go to state 101
    ClassAllocationExpression      shift and go to state 122
    MethodCall                     shift and go to state 102
    ConditionalOrExpression        shift and go to state 133
    ShiftExpression                shift and go to state 149
    AssignmentExpression           shift and go to state 104
    NewAllocationExpression        shift and go to state 135
    NotJustName                    shift and go to state 152
    QualifiedName                  shift and go to state 190
    LogicalUnaryExpression         shift and go to state 154
    Expression                     shift and go to state 277
    AdditiveExpression             shift and go to state 137
    ArrayAllocationExpression      shift and go to state 110
    ConditionalExpression          shift and go to state 138
    UnaryExpression                shift and go to state 139
    InclusiveOrExpression          shift and go to state 140
    MethodAccess                   shift and go to state 111
    ExclusiveOrExpression          shift and go to state 113
    ConditionalAndExpression       shift and go to state 92
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    FieldAccess                    shift and go to state 156
    SpecialName                    shift and go to state 120

state 293

    (85) LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .

    SEMICOLON       reduce using rule 85 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    OP_INC          reduce using rule 85 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    OP_DEC          reduce using rule 85 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    PLUS            reduce using rule 85 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    MINUS           reduce using rule 85 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    ~               reduce using rule 85 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    NOT             reduce using rule 85 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    IDENTIFIER      reduce using rule 85 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    THIS            reduce using rule 85 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    SUPER           reduce using rule 85 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    NULL            reduce using rule 85 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    LROUNPAREN      reduce using rule 85 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    INT_CONST       reduce using rule 85 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    FLOAT_CONST     reduce using rule 85 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    STRING          reduce using rule 85 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    CHAR_CONST      reduce using rule 85 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    BOOLEAN_CONST   reduce using rule 85 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    NEW             reduce using rule 85 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    BOOLEAN         reduce using rule 85 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    CHAR            reduce using rule 85 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    BYTE            reduce using rule 85 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    SHORT           reduce using rule 85 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    INT             reduce using rule 85 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    LONG            reduce using rule 85 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    FLOAT           reduce using rule 85 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    DOUBLE          reduce using rule 85 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    VOID            reduce using rule 85 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    RCURPAREN       reduce using rule 85 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    CASE            reduce using rule 85 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    DEFAULT         reduce using rule 85 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    BREAK           reduce using rule 85 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    CONTINUE        reduce using rule 85 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    RETURN          reduce using rule 85 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    LCURPAREN       reduce using rule 85 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    WHILE           reduce using rule 85 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    FOR             reduce using rule 85 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    IF              reduce using rule 85 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    DO              reduce using rule 85 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)


state 294

    (96) LabelStatement -> CASE ConstantExpression COLON .

    RCURPAREN       reduce using rule 96 (LabelStatement -> CASE ConstantExpression COLON .)
    SEMICOLON       reduce using rule 96 (LabelStatement -> CASE ConstantExpression COLON .)
    IDENTIFIER      reduce using rule 96 (LabelStatement -> CASE ConstantExpression COLON .)
    CASE            reduce using rule 96 (LabelStatement -> CASE ConstantExpression COLON .)
    DEFAULT         reduce using rule 96 (LabelStatement -> CASE ConstantExpression COLON .)
    BREAK           reduce using rule 96 (LabelStatement -> CASE ConstantExpression COLON .)
    CONTINUE        reduce using rule 96 (LabelStatement -> CASE ConstantExpression COLON .)
    RETURN          reduce using rule 96 (LabelStatement -> CASE ConstantExpression COLON .)
    LCURPAREN       reduce using rule 96 (LabelStatement -> CASE ConstantExpression COLON .)
    WHILE           reduce using rule 96 (LabelStatement -> CASE ConstantExpression COLON .)
    FOR             reduce using rule 96 (LabelStatement -> CASE ConstantExpression COLON .)
    IF              reduce using rule 96 (LabelStatement -> CASE ConstantExpression COLON .)
    DO              reduce using rule 96 (LabelStatement -> CASE ConstantExpression COLON .)
    BOOLEAN         reduce using rule 96 (LabelStatement -> CASE ConstantExpression COLON .)
    CHAR            reduce using rule 96 (LabelStatement -> CASE ConstantExpression COLON .)
    BYTE            reduce using rule 96 (LabelStatement -> CASE ConstantExpression COLON .)
    SHORT           reduce using rule 96 (LabelStatement -> CASE ConstantExpression COLON .)
    INT             reduce using rule 96 (LabelStatement -> CASE ConstantExpression COLON .)
    LONG            reduce using rule 96 (LabelStatement -> CASE ConstantExpression COLON .)
    FLOAT           reduce using rule 96 (LabelStatement -> CASE ConstantExpression COLON .)
    DOUBLE          reduce using rule 96 (LabelStatement -> CASE ConstantExpression COLON .)
    VOID            reduce using rule 96 (LabelStatement -> CASE ConstantExpression COLON .)
    OP_INC          reduce using rule 96 (LabelStatement -> CASE ConstantExpression COLON .)
    OP_DEC          reduce using rule 96 (LabelStatement -> CASE ConstantExpression COLON .)
    PLUS            reduce using rule 96 (LabelStatement -> CASE ConstantExpression COLON .)
    MINUS           reduce using rule 96 (LabelStatement -> CASE ConstantExpression COLON .)
    ~               reduce using rule 96 (LabelStatement -> CASE ConstantExpression COLON .)
    NOT             reduce using rule 96 (LabelStatement -> CASE ConstantExpression COLON .)
    THIS            reduce using rule 96 (LabelStatement -> CASE ConstantExpression COLON .)
    SUPER           reduce using rule 96 (LabelStatement -> CASE ConstantExpression COLON .)
    NULL            reduce using rule 96 (LabelStatement -> CASE ConstantExpression COLON .)
    LROUNPAREN      reduce using rule 96 (LabelStatement -> CASE ConstantExpression COLON .)
    INT_CONST       reduce using rule 96 (LabelStatement -> CASE ConstantExpression COLON .)
    FLOAT_CONST     reduce using rule 96 (LabelStatement -> CASE ConstantExpression COLON .)
    STRING          reduce using rule 96 (LabelStatement -> CASE ConstantExpression COLON .)
    CHAR_CONST      reduce using rule 96 (LabelStatement -> CASE ConstantExpression COLON .)
    BOOLEAN_CONST   reduce using rule 96 (LabelStatement -> CASE ConstantExpression COLON .)
    NEW             reduce using rule 96 (LabelStatement -> CASE ConstantExpression COLON .)
    ELSE            reduce using rule 96 (LabelStatement -> CASE ConstantExpression COLON .)


state 295

    (215) ConditionalOrExpression -> ConditionalOrExpression OP_LOR ConditionalAndExpression .
    (213) ConditionalAndExpression -> ConditionalAndExpression . OP_LAND InclusiveOrExpression

    ?               reduce using rule 215 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR ConditionalAndExpression .)
    OP_LOR          reduce using rule 215 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR ConditionalAndExpression .)
    SEMICOLON       reduce using rule 215 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR ConditionalAndExpression .)
    RROUNPAREN      reduce using rule 215 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR ConditionalAndExpression .)
    COLON           reduce using rule 215 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR ConditionalAndExpression .)
    COMMA           reduce using rule 215 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR ConditionalAndExpression .)
    RSQPAREN        reduce using rule 215 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR ConditionalAndExpression .)
    OP_LAND         shift and go to state 184


state 296

    (217) ConditionalExpression -> ConditionalOrExpression ? Expression . COLON ConditionalExpression

    COLON           shift and go to state 327


state 297

    (192) AdditiveExpression -> AdditiveExpression PLUS MultiplicativeExpression .
    (188) MultiplicativeExpression -> MultiplicativeExpression . MULT CastExpression
    (189) MultiplicativeExpression -> MultiplicativeExpression . DIV CastExpression
    (190) MultiplicativeExpression -> MultiplicativeExpression . MOD CastExpression

    PLUS            reduce using rule 192 (AdditiveExpression -> AdditiveExpression PLUS MultiplicativeExpression .)
    MINUS           reduce using rule 192 (AdditiveExpression -> AdditiveExpression PLUS MultiplicativeExpression .)
    OP_SHL          reduce using rule 192 (AdditiveExpression -> AdditiveExpression PLUS MultiplicativeExpression .)
    OP_SHR          reduce using rule 192 (AdditiveExpression -> AdditiveExpression PLUS MultiplicativeExpression .)
    OP_SHRR         reduce using rule 192 (AdditiveExpression -> AdditiveExpression PLUS MultiplicativeExpression .)
    LESS            reduce using rule 192 (AdditiveExpression -> AdditiveExpression PLUS MultiplicativeExpression .)
    MORE            reduce using rule 192 (AdditiveExpression -> AdditiveExpression PLUS MultiplicativeExpression .)
    OP_LE           reduce using rule 192 (AdditiveExpression -> AdditiveExpression PLUS MultiplicativeExpression .)
    OP_GE           reduce using rule 192 (AdditiveExpression -> AdditiveExpression PLUS MultiplicativeExpression .)
    OP_EQ           reduce using rule 192 (AdditiveExpression -> AdditiveExpression PLUS MultiplicativeExpression .)
    OP_NE           reduce using rule 192 (AdditiveExpression -> AdditiveExpression PLUS MultiplicativeExpression .)
    &               reduce using rule 192 (AdditiveExpression -> AdditiveExpression PLUS MultiplicativeExpression .)
    ^               reduce using rule 192 (AdditiveExpression -> AdditiveExpression PLUS MultiplicativeExpression .)
    |               reduce using rule 192 (AdditiveExpression -> AdditiveExpression PLUS MultiplicativeExpression .)
    OP_LAND         reduce using rule 192 (AdditiveExpression -> AdditiveExpression PLUS MultiplicativeExpression .)
    ?               reduce using rule 192 (AdditiveExpression -> AdditiveExpression PLUS MultiplicativeExpression .)
    OP_LOR          reduce using rule 192 (AdditiveExpression -> AdditiveExpression PLUS MultiplicativeExpression .)
    SEMICOLON       reduce using rule 192 (AdditiveExpression -> AdditiveExpression PLUS MultiplicativeExpression .)
    COMMA           reduce using rule 192 (AdditiveExpression -> AdditiveExpression PLUS MultiplicativeExpression .)
    RROUNPAREN      reduce using rule 192 (AdditiveExpression -> AdditiveExpression PLUS MultiplicativeExpression .)
    COLON           reduce using rule 192 (AdditiveExpression -> AdditiveExpression PLUS MultiplicativeExpression .)
    RSQPAREN        reduce using rule 192 (AdditiveExpression -> AdditiveExpression PLUS MultiplicativeExpression .)
    MULT            shift and go to state 198
    DIV             shift and go to state 197
    MOD             shift and go to state 199


state 298

    (193) AdditiveExpression -> AdditiveExpression MINUS MultiplicativeExpression .
    (188) MultiplicativeExpression -> MultiplicativeExpression . MULT CastExpression
    (189) MultiplicativeExpression -> MultiplicativeExpression . DIV CastExpression
    (190) MultiplicativeExpression -> MultiplicativeExpression . MOD CastExpression

    PLUS            reduce using rule 193 (AdditiveExpression -> AdditiveExpression MINUS MultiplicativeExpression .)
    MINUS           reduce using rule 193 (AdditiveExpression -> AdditiveExpression MINUS MultiplicativeExpression .)
    OP_SHL          reduce using rule 193 (AdditiveExpression -> AdditiveExpression MINUS MultiplicativeExpression .)
    OP_SHR          reduce using rule 193 (AdditiveExpression -> AdditiveExpression MINUS MultiplicativeExpression .)
    OP_SHRR         reduce using rule 193 (AdditiveExpression -> AdditiveExpression MINUS MultiplicativeExpression .)
    LESS            reduce using rule 193 (AdditiveExpression -> AdditiveExpression MINUS MultiplicativeExpression .)
    MORE            reduce using rule 193 (AdditiveExpression -> AdditiveExpression MINUS MultiplicativeExpression .)
    OP_LE           reduce using rule 193 (AdditiveExpression -> AdditiveExpression MINUS MultiplicativeExpression .)
    OP_GE           reduce using rule 193 (AdditiveExpression -> AdditiveExpression MINUS MultiplicativeExpression .)
    OP_EQ           reduce using rule 193 (AdditiveExpression -> AdditiveExpression MINUS MultiplicativeExpression .)
    OP_NE           reduce using rule 193 (AdditiveExpression -> AdditiveExpression MINUS MultiplicativeExpression .)
    &               reduce using rule 193 (AdditiveExpression -> AdditiveExpression MINUS MultiplicativeExpression .)
    ^               reduce using rule 193 (AdditiveExpression -> AdditiveExpression MINUS MultiplicativeExpression .)
    |               reduce using rule 193 (AdditiveExpression -> AdditiveExpression MINUS MultiplicativeExpression .)
    OP_LAND         reduce using rule 193 (AdditiveExpression -> AdditiveExpression MINUS MultiplicativeExpression .)
    ?               reduce using rule 193 (AdditiveExpression -> AdditiveExpression MINUS MultiplicativeExpression .)
    OP_LOR          reduce using rule 193 (AdditiveExpression -> AdditiveExpression MINUS MultiplicativeExpression .)
    SEMICOLON       reduce using rule 193 (AdditiveExpression -> AdditiveExpression MINUS MultiplicativeExpression .)
    COMMA           reduce using rule 193 (AdditiveExpression -> AdditiveExpression MINUS MultiplicativeExpression .)
    RROUNPAREN      reduce using rule 193 (AdditiveExpression -> AdditiveExpression MINUS MultiplicativeExpression .)
    COLON           reduce using rule 193 (AdditiveExpression -> AdditiveExpression MINUS MultiplicativeExpression .)
    RSQPAREN        reduce using rule 193 (AdditiveExpression -> AdditiveExpression MINUS MultiplicativeExpression .)
    MULT            shift and go to state 198
    DIV             shift and go to state 197
    MOD             shift and go to state 199


state 299

    (219) AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression .

    COLON           reduce using rule 219 (AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression .)
    SEMICOLON       reduce using rule 219 (AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression .)
    COMMA           reduce using rule 219 (AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression .)
    RROUNPAREN      reduce using rule 219 (AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression .)
    RSQPAREN        reduce using rule 219 (AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression .)


state 300

    (211) InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .
    (209) ExclusiveOrExpression -> ExclusiveOrExpression . ^ AndExpression

    |               reduce using rule 211 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    OP_LAND         reduce using rule 211 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    ?               reduce using rule 211 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    OP_LOR          reduce using rule 211 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    SEMICOLON       reduce using rule 211 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    RROUNPAREN      reduce using rule 211 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    COMMA           reduce using rule 211 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    RSQPAREN        reduce using rule 211 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    COLON           reduce using rule 211 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    ^               shift and go to state 208


state 301

    (105) IterationStatement -> Do Mark_quad Statement . WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON

    WHILE           shift and go to state 328


state 302

    (137) ArrayAccess -> QualifiedName LSQPAREN Expression . RSQPAREN

    RSQPAREN        shift and go to state 329


state 303

    (141) FieldAccess -> QualifiedName DOT THIS .

    LSQPAREN        reduce using rule 141 (FieldAccess -> QualifiedName DOT THIS .)
    DOT             reduce using rule 141 (FieldAccess -> QualifiedName DOT THIS .)
    OP_INC          reduce using rule 141 (FieldAccess -> QualifiedName DOT THIS .)
    OP_DEC          reduce using rule 141 (FieldAccess -> QualifiedName DOT THIS .)
    MULT            reduce using rule 141 (FieldAccess -> QualifiedName DOT THIS .)
    DIV             reduce using rule 141 (FieldAccess -> QualifiedName DOT THIS .)
    MOD             reduce using rule 141 (FieldAccess -> QualifiedName DOT THIS .)
    PLUS            reduce using rule 141 (FieldAccess -> QualifiedName DOT THIS .)
    MINUS           reduce using rule 141 (FieldAccess -> QualifiedName DOT THIS .)
    OP_SHL          reduce using rule 141 (FieldAccess -> QualifiedName DOT THIS .)
    OP_SHR          reduce using rule 141 (FieldAccess -> QualifiedName DOT THIS .)
    OP_SHRR         reduce using rule 141 (FieldAccess -> QualifiedName DOT THIS .)
    LESS            reduce using rule 141 (FieldAccess -> QualifiedName DOT THIS .)
    MORE            reduce using rule 141 (FieldAccess -> QualifiedName DOT THIS .)
    OP_LE           reduce using rule 141 (FieldAccess -> QualifiedName DOT THIS .)
    OP_GE           reduce using rule 141 (FieldAccess -> QualifiedName DOT THIS .)
    OP_EQ           reduce using rule 141 (FieldAccess -> QualifiedName DOT THIS .)
    OP_NE           reduce using rule 141 (FieldAccess -> QualifiedName DOT THIS .)
    &               reduce using rule 141 (FieldAccess -> QualifiedName DOT THIS .)
    ^               reduce using rule 141 (FieldAccess -> QualifiedName DOT THIS .)
    |               reduce using rule 141 (FieldAccess -> QualifiedName DOT THIS .)
    OP_LAND         reduce using rule 141 (FieldAccess -> QualifiedName DOT THIS .)
    ?               reduce using rule 141 (FieldAccess -> QualifiedName DOT THIS .)
    OP_LOR          reduce using rule 141 (FieldAccess -> QualifiedName DOT THIS .)
    SEMICOLON       reduce using rule 141 (FieldAccess -> QualifiedName DOT THIS .)
    RROUNPAREN      reduce using rule 141 (FieldAccess -> QualifiedName DOT THIS .)
    COLON           reduce using rule 141 (FieldAccess -> QualifiedName DOT THIS .)
    COMMA           reduce using rule 141 (FieldAccess -> QualifiedName DOT THIS .)
    RSQPAREN        reduce using rule 141 (FieldAccess -> QualifiedName DOT THIS .)
    EQUAL           reduce using rule 141 (FieldAccess -> QualifiedName DOT THIS .)
    ASS_MUL         reduce using rule 141 (FieldAccess -> QualifiedName DOT THIS .)
    ASS_ADD         reduce using rule 141 (FieldAccess -> QualifiedName DOT THIS .)
    ASS_SUB         reduce using rule 141 (FieldAccess -> QualifiedName DOT THIS .)


state 304

    (153) NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .

    DOT             reduce using rule 153 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    OP_INC          reduce using rule 153 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    OP_DEC          reduce using rule 153 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    MULT            reduce using rule 153 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    DIV             reduce using rule 153 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    MOD             reduce using rule 153 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    PLUS            reduce using rule 153 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    MINUS           reduce using rule 153 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    OP_SHL          reduce using rule 153 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    OP_SHR          reduce using rule 153 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    OP_SHRR         reduce using rule 153 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    LESS            reduce using rule 153 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    MORE            reduce using rule 153 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    OP_LE           reduce using rule 153 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    OP_GE           reduce using rule 153 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    OP_EQ           reduce using rule 153 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    OP_NE           reduce using rule 153 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    &               reduce using rule 153 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    ^               reduce using rule 153 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    |               reduce using rule 153 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    OP_LAND         reduce using rule 153 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    ?               reduce using rule 153 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    OP_LOR          reduce using rule 153 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    SEMICOLON       reduce using rule 153 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    RROUNPAREN      reduce using rule 153 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    COLON           reduce using rule 153 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    COMMA           reduce using rule 153 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    RSQPAREN        reduce using rule 153 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    EQUAL           reduce using rule 153 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    ASS_MUL         reduce using rule 153 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    ASS_ADD         reduce using rule 153 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    ASS_SUB         reduce using rule 153 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)


state 305

    (142) FieldAccess -> QualifiedName DOT CLASS .

    LSQPAREN        reduce using rule 142 (FieldAccess -> QualifiedName DOT CLASS .)
    DOT             reduce using rule 142 (FieldAccess -> QualifiedName DOT CLASS .)
    OP_INC          reduce using rule 142 (FieldAccess -> QualifiedName DOT CLASS .)
    OP_DEC          reduce using rule 142 (FieldAccess -> QualifiedName DOT CLASS .)
    MULT            reduce using rule 142 (FieldAccess -> QualifiedName DOT CLASS .)
    DIV             reduce using rule 142 (FieldAccess -> QualifiedName DOT CLASS .)
    MOD             reduce using rule 142 (FieldAccess -> QualifiedName DOT CLASS .)
    PLUS            reduce using rule 142 (FieldAccess -> QualifiedName DOT CLASS .)
    MINUS           reduce using rule 142 (FieldAccess -> QualifiedName DOT CLASS .)
    OP_SHL          reduce using rule 142 (FieldAccess -> QualifiedName DOT CLASS .)
    OP_SHR          reduce using rule 142 (FieldAccess -> QualifiedName DOT CLASS .)
    OP_SHRR         reduce using rule 142 (FieldAccess -> QualifiedName DOT CLASS .)
    LESS            reduce using rule 142 (FieldAccess -> QualifiedName DOT CLASS .)
    MORE            reduce using rule 142 (FieldAccess -> QualifiedName DOT CLASS .)
    OP_LE           reduce using rule 142 (FieldAccess -> QualifiedName DOT CLASS .)
    OP_GE           reduce using rule 142 (FieldAccess -> QualifiedName DOT CLASS .)
    OP_EQ           reduce using rule 142 (FieldAccess -> QualifiedName DOT CLASS .)
    OP_NE           reduce using rule 142 (FieldAccess -> QualifiedName DOT CLASS .)
    &               reduce using rule 142 (FieldAccess -> QualifiedName DOT CLASS .)
    ^               reduce using rule 142 (FieldAccess -> QualifiedName DOT CLASS .)
    |               reduce using rule 142 (FieldAccess -> QualifiedName DOT CLASS .)
    OP_LAND         reduce using rule 142 (FieldAccess -> QualifiedName DOT CLASS .)
    ?               reduce using rule 142 (FieldAccess -> QualifiedName DOT CLASS .)
    OP_LOR          reduce using rule 142 (FieldAccess -> QualifiedName DOT CLASS .)
    SEMICOLON       reduce using rule 142 (FieldAccess -> QualifiedName DOT CLASS .)
    RROUNPAREN      reduce using rule 142 (FieldAccess -> QualifiedName DOT CLASS .)
    COLON           reduce using rule 142 (FieldAccess -> QualifiedName DOT CLASS .)
    COMMA           reduce using rule 142 (FieldAccess -> QualifiedName DOT CLASS .)
    RSQPAREN        reduce using rule 142 (FieldAccess -> QualifiedName DOT CLASS .)
    EQUAL           reduce using rule 142 (FieldAccess -> QualifiedName DOT CLASS .)
    ASS_MUL         reduce using rule 142 (FieldAccess -> QualifiedName DOT CLASS .)
    ASS_ADD         reduce using rule 142 (FieldAccess -> QualifiedName DOT CLASS .)
    ASS_SUB         reduce using rule 142 (FieldAccess -> QualifiedName DOT CLASS .)


state 306

    (195) ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .
    (192) AdditiveExpression -> AdditiveExpression . PLUS MultiplicativeExpression
    (193) AdditiveExpression -> AdditiveExpression . MINUS MultiplicativeExpression

    OP_SHL          reduce using rule 195 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    OP_SHR          reduce using rule 195 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    OP_SHRR         reduce using rule 195 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    LESS            reduce using rule 195 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    MORE            reduce using rule 195 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    OP_LE           reduce using rule 195 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    OP_GE           reduce using rule 195 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    OP_EQ           reduce using rule 195 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    OP_NE           reduce using rule 195 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    &               reduce using rule 195 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    ^               reduce using rule 195 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    |               reduce using rule 195 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    OP_LAND         reduce using rule 195 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    ?               reduce using rule 195 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    OP_LOR          reduce using rule 195 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    RROUNPAREN      reduce using rule 195 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    SEMICOLON       reduce using rule 195 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    COLON           reduce using rule 195 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    COMMA           reduce using rule 195 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    RSQPAREN        reduce using rule 195 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    PLUS            shift and go to state 229
    MINUS           shift and go to state 230


state 307

    (197) ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .
    (192) AdditiveExpression -> AdditiveExpression . PLUS MultiplicativeExpression
    (193) AdditiveExpression -> AdditiveExpression . MINUS MultiplicativeExpression

    OP_SHL          reduce using rule 197 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    OP_SHR          reduce using rule 197 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    OP_SHRR         reduce using rule 197 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    LESS            reduce using rule 197 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    MORE            reduce using rule 197 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    OP_LE           reduce using rule 197 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    OP_GE           reduce using rule 197 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    OP_EQ           reduce using rule 197 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    OP_NE           reduce using rule 197 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    &               reduce using rule 197 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    ^               reduce using rule 197 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    |               reduce using rule 197 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    OP_LAND         reduce using rule 197 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    ?               reduce using rule 197 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    OP_LOR          reduce using rule 197 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    RROUNPAREN      reduce using rule 197 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    SEMICOLON       reduce using rule 197 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    COLON           reduce using rule 197 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    COMMA           reduce using rule 197 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    RSQPAREN        reduce using rule 197 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    PLUS            shift and go to state 229
    MINUS           shift and go to state 230


state 308

    (196) ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .
    (192) AdditiveExpression -> AdditiveExpression . PLUS MultiplicativeExpression
    (193) AdditiveExpression -> AdditiveExpression . MINUS MultiplicativeExpression

    OP_SHL          reduce using rule 196 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    OP_SHR          reduce using rule 196 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    OP_SHRR         reduce using rule 196 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    LESS            reduce using rule 196 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    MORE            reduce using rule 196 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    OP_LE           reduce using rule 196 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    OP_GE           reduce using rule 196 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    OP_EQ           reduce using rule 196 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    OP_NE           reduce using rule 196 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    &               reduce using rule 196 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    ^               reduce using rule 196 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    |               reduce using rule 196 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    OP_LAND         reduce using rule 196 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    ?               reduce using rule 196 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    OP_LOR          reduce using rule 196 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    RROUNPAREN      reduce using rule 196 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    SEMICOLON       reduce using rule 196 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    COLON           reduce using rule 196 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    COMMA           reduce using rule 196 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    RSQPAREN        reduce using rule 196 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    PLUS            shift and go to state 229
    MINUS           shift and go to state 230


state 309

    (139) FieldAccess -> NotJustName DOT IDENTIFIER .

    LSQPAREN        reduce using rule 139 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    DOT             reduce using rule 139 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    OP_INC          reduce using rule 139 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    OP_DEC          reduce using rule 139 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    MULT            reduce using rule 139 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    DIV             reduce using rule 139 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    MOD             reduce using rule 139 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    PLUS            reduce using rule 139 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    MINUS           reduce using rule 139 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    OP_SHL          reduce using rule 139 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    OP_SHR          reduce using rule 139 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    OP_SHRR         reduce using rule 139 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    LESS            reduce using rule 139 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    MORE            reduce using rule 139 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    OP_LE           reduce using rule 139 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    OP_GE           reduce using rule 139 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    OP_EQ           reduce using rule 139 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    OP_NE           reduce using rule 139 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    &               reduce using rule 139 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    ^               reduce using rule 139 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    |               reduce using rule 139 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    OP_LAND         reduce using rule 139 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    ?               reduce using rule 139 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    OP_LOR          reduce using rule 139 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    SEMICOLON       reduce using rule 139 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    RROUNPAREN      reduce using rule 139 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    COLON           reduce using rule 139 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    COMMA           reduce using rule 139 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    RSQPAREN        reduce using rule 139 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    EQUAL           reduce using rule 139 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    ASS_MUL         reduce using rule 139 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    ASS_ADD         reduce using rule 139 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    ASS_SUB         reduce using rule 139 (FieldAccess -> NotJustName DOT IDENTIFIER .)


state 310

    (99) SelectionStatement -> IF LROUNPAREN Expression . RROUNPAREN Mark_if Statement
    (100) SelectionStatement -> IF LROUNPAREN Expression . RROUNPAREN Mark_if Statement ELSE Mark_else Statement

    RROUNPAREN      shift and go to state 330


state 311

    (64) MethodDeclarator -> DeclaratorName LROUNPAREN ParameterList RROUNPAREN .

    SEMICOLON       reduce using rule 64 (MethodDeclarator -> DeclaratorName LROUNPAREN ParameterList RROUNPAREN .)
    LCURPAREN       reduce using rule 64 (MethodDeclarator -> DeclaratorName LROUNPAREN ParameterList RROUNPAREN .)


state 312

    (67) ParameterList -> ParameterList COMMA Parameter .

    RROUNPAREN      reduce using rule 67 (ParameterList -> ParameterList COMMA Parameter .)
    COMMA           reduce using rule 67 (ParameterList -> ParameterList COMMA Parameter .)


state 313

    (108) IterationStatement -> FOR LROUNPAREN ForInit ForExpr . Mark_quad ForIncr RROUNPAREN Mark_quad Statement
    (109) IterationStatement -> FOR LROUNPAREN ForInit ForExpr . RROUNPAREN Statement
    (93) Mark_quad -> .

    RROUNPAREN      shift and go to state 331
    OP_INC          reduce using rule 93 (Mark_quad -> .)
    OP_DEC          reduce using rule 93 (Mark_quad -> .)
    PLUS            reduce using rule 93 (Mark_quad -> .)
    MINUS           reduce using rule 93 (Mark_quad -> .)
    ~               reduce using rule 93 (Mark_quad -> .)
    NOT             reduce using rule 93 (Mark_quad -> .)
    IDENTIFIER      reduce using rule 93 (Mark_quad -> .)
    THIS            reduce using rule 93 (Mark_quad -> .)
    SUPER           reduce using rule 93 (Mark_quad -> .)
    NULL            reduce using rule 93 (Mark_quad -> .)
    LROUNPAREN      reduce using rule 93 (Mark_quad -> .)
    INT_CONST       reduce using rule 93 (Mark_quad -> .)
    FLOAT_CONST     reduce using rule 93 (Mark_quad -> .)
    STRING          reduce using rule 93 (Mark_quad -> .)
    CHAR_CONST      reduce using rule 93 (Mark_quad -> .)
    BOOLEAN_CONST   reduce using rule 93 (Mark_quad -> .)
    NEW             reduce using rule 93 (Mark_quad -> .)
    BOOLEAN         reduce using rule 93 (Mark_quad -> .)
    CHAR            reduce using rule 93 (Mark_quad -> .)
    BYTE            reduce using rule 93 (Mark_quad -> .)
    SHORT           reduce using rule 93 (Mark_quad -> .)
    INT             reduce using rule 93 (Mark_quad -> .)
    LONG            reduce using rule 93 (Mark_quad -> .)
    FLOAT           reduce using rule 93 (Mark_quad -> .)
    DOUBLE          reduce using rule 93 (Mark_quad -> .)
    VOID            reduce using rule 93 (Mark_quad -> .)

    Mark_quad                      shift and go to state 332

state 314

    (113) ForExpr -> Mark_quad . Expression SEMICOLON
    (114) ForExpr -> Mark_quad . SEMICOLON
    (224) Expression -> . AssignmentExpression
    (218) AssignmentExpression -> . ConditionalExpression
    (219) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (216) ConditionalExpression -> . ConditionalOrExpression
    (217) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (173) UnaryExpression -> . OP_INC UnaryExpression
    (174) UnaryExpression -> . OP_DEC UnaryExpression
    (175) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (176) UnaryExpression -> . LogicalUnaryExpression
    (214) ConditionalOrExpression -> . ConditionalAndExpression
    (215) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (181) ArithmeticUnaryOperator -> . PLUS
    (182) ArithmeticUnaryOperator -> . MINUS
    (177) LogicalUnaryExpression -> . PostfixExpression
    (178) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (212) ConditionalAndExpression -> . InclusiveOrExpression
    (213) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (169) PostfixExpression -> . PrimaryExpression
    (170) PostfixExpression -> . RealPostfixExpression
    (179) LogicalUnaryOperator -> . ~
    (180) LogicalUnaryOperator -> . NOT
    (210) InclusiveOrExpression -> . ExclusiveOrExpression
    (211) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (122) PrimaryExpression -> . QualifiedName
    (123) PrimaryExpression -> . NotJustName
    (171) RealPostfixExpression -> . PostfixExpression OP_INC
    (172) RealPostfixExpression -> . PostfixExpression OP_DEC
    (208) ExclusiveOrExpression -> . AndExpression
    (209) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (124) NotJustName -> . SpecialName
    (125) NotJustName -> . NewAllocationExpression
    (126) NotJustName -> . ComplexPrimary
    (206) AndExpression -> . EqualityExpression
    (207) AndExpression -> . AndExpression & EqualityExpression
    (147) SpecialName -> . THIS
    (148) SpecialName -> . SUPER
    (149) SpecialName -> . NULL
    (152) NewAllocationExpression -> . PlainNewAllocationExpression
    (153) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (127) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (128) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (203) EqualityExpression -> . RelationalExpression
    (204) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (205) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (154) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (155) PlainNewAllocationExpression -> . ClassAllocationExpression
    (156) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (157) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (158) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (129) ComplexPrimaryNoParenthesis -> . INT_CONST
    (130) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (131) ComplexPrimaryNoParenthesis -> . STRING
    (132) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (133) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (134) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (135) ComplexPrimaryNoParenthesis -> . FieldAccess
    (136) ComplexPrimaryNoParenthesis -> . MethodCall
    (198) RelationalExpression -> . ShiftExpression
    (199) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (200) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (201) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (202) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (161) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (162) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (163) ArrayAllocationExpression -> . NEW TypeName Dims
    (159) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (160) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (137) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (138) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (139) FieldAccess -> . NotJustName DOT IDENTIFIER
    (140) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (141) FieldAccess -> . QualifiedName DOT THIS
    (142) FieldAccess -> . QualifiedName DOT CLASS
    (143) FieldAccess -> . PrimitiveType DOT CLASS
    (144) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (145) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (194) ShiftExpression -> . AdditiveExpression
    (195) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (196) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (197) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (146) MethodAccess -> . QualifiedName
    (191) AdditiveExpression -> . MultiplicativeExpression
    (192) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (193) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (187) MultiplicativeExpression -> . CastExpression
    (188) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (189) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (190) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (183) CastExpression -> . UnaryExpression

    SEMICOLON       shift and go to state 333
    OP_INC          shift and go to state 106
    OP_DEC          shift and go to state 126
    PLUS            shift and go to state 90
    MINUS           shift and go to state 89
    ~               shift and go to state 141
    NOT             shift and go to state 119
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 91
    SUPER           shift and go to state 158
    NULL            shift and go to state 145
    LROUNPAREN      shift and go to state 118
    INT_CONST       shift and go to state 131
    FLOAT_CONST     shift and go to state 86
    STRING          shift and go to state 151
    CHAR_CONST      shift and go to state 144
    BOOLEAN_CONST   shift and go to state 157
    NEW             shift and go to state 127
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 121
    PrimaryExpression              shift and go to state 129
    PrimitiveType                  shift and go to state 187
    RealPostfixExpression          shift and go to state 96
    ArithmeticUnaryOperator        shift and go to state 97
    AndExpression                  shift and go to state 88
    ArrayAccess                    shift and go to state 108
    CastExpression                 shift and go to state 143
    EqualityExpression             shift and go to state 98
    LogicalUnaryOperator           shift and go to state 153
    ComplexPrimaryNoParenthesis    shift and go to state 100
    MultiplicativeExpression       shift and go to state 101
    ClassAllocationExpression      shift and go to state 122
    MethodCall                     shift and go to state 102
    ConditionalOrExpression        shift and go to state 133
    ShiftExpression                shift and go to state 149
    AssignmentExpression           shift and go to state 104
    NewAllocationExpression        shift and go to state 135
    NotJustName                    shift and go to state 152
    QualifiedName                  shift and go to state 190
    LogicalUnaryExpression         shift and go to state 154
    Expression                     shift and go to state 334
    AdditiveExpression             shift and go to state 137
    ArrayAllocationExpression      shift and go to state 110
    ConditionalExpression          shift and go to state 138
    UnaryExpression                shift and go to state 139
    InclusiveOrExpression          shift and go to state 140
    MethodAccess                   shift and go to state 111
    ExclusiveOrExpression          shift and go to state 113
    ConditionalAndExpression       shift and go to state 92
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    FieldAccess                    shift and go to state 156
    SpecialName                    shift and go to state 120

state 315

    (117) ExpressionStatements -> ExpressionStatements COMMA . ExpressionStatement
    (98) ExpressionStatement -> . Expression
    (224) Expression -> . AssignmentExpression
    (218) AssignmentExpression -> . ConditionalExpression
    (219) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (216) ConditionalExpression -> . ConditionalOrExpression
    (217) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (173) UnaryExpression -> . OP_INC UnaryExpression
    (174) UnaryExpression -> . OP_DEC UnaryExpression
    (175) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (176) UnaryExpression -> . LogicalUnaryExpression
    (214) ConditionalOrExpression -> . ConditionalAndExpression
    (215) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (181) ArithmeticUnaryOperator -> . PLUS
    (182) ArithmeticUnaryOperator -> . MINUS
    (177) LogicalUnaryExpression -> . PostfixExpression
    (178) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (212) ConditionalAndExpression -> . InclusiveOrExpression
    (213) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (169) PostfixExpression -> . PrimaryExpression
    (170) PostfixExpression -> . RealPostfixExpression
    (179) LogicalUnaryOperator -> . ~
    (180) LogicalUnaryOperator -> . NOT
    (210) InclusiveOrExpression -> . ExclusiveOrExpression
    (211) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (122) PrimaryExpression -> . QualifiedName
    (123) PrimaryExpression -> . NotJustName
    (171) RealPostfixExpression -> . PostfixExpression OP_INC
    (172) RealPostfixExpression -> . PostfixExpression OP_DEC
    (208) ExclusiveOrExpression -> . AndExpression
    (209) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (124) NotJustName -> . SpecialName
    (125) NotJustName -> . NewAllocationExpression
    (126) NotJustName -> . ComplexPrimary
    (206) AndExpression -> . EqualityExpression
    (207) AndExpression -> . AndExpression & EqualityExpression
    (147) SpecialName -> . THIS
    (148) SpecialName -> . SUPER
    (149) SpecialName -> . NULL
    (152) NewAllocationExpression -> . PlainNewAllocationExpression
    (153) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (127) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (128) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (203) EqualityExpression -> . RelationalExpression
    (204) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (205) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (154) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (155) PlainNewAllocationExpression -> . ClassAllocationExpression
    (156) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (157) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (158) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (129) ComplexPrimaryNoParenthesis -> . INT_CONST
    (130) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (131) ComplexPrimaryNoParenthesis -> . STRING
    (132) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (133) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (134) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (135) ComplexPrimaryNoParenthesis -> . FieldAccess
    (136) ComplexPrimaryNoParenthesis -> . MethodCall
    (198) RelationalExpression -> . ShiftExpression
    (199) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (200) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (201) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (202) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (161) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (162) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (163) ArrayAllocationExpression -> . NEW TypeName Dims
    (159) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (160) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (137) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (138) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (139) FieldAccess -> . NotJustName DOT IDENTIFIER
    (140) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (141) FieldAccess -> . QualifiedName DOT THIS
    (142) FieldAccess -> . QualifiedName DOT CLASS
    (143) FieldAccess -> . PrimitiveType DOT CLASS
    (144) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (145) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (194) ShiftExpression -> . AdditiveExpression
    (195) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (196) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (197) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (146) MethodAccess -> . QualifiedName
    (191) AdditiveExpression -> . MultiplicativeExpression
    (192) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (193) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (187) MultiplicativeExpression -> . CastExpression
    (188) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (189) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (190) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (183) CastExpression -> . UnaryExpression

    OP_INC          shift and go to state 106
    OP_DEC          shift and go to state 126
    PLUS            shift and go to state 90
    MINUS           shift and go to state 89
    ~               shift and go to state 141
    NOT             shift and go to state 119
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 91
    SUPER           shift and go to state 158
    NULL            shift and go to state 145
    LROUNPAREN      shift and go to state 118
    INT_CONST       shift and go to state 131
    FLOAT_CONST     shift and go to state 86
    STRING          shift and go to state 151
    CHAR_CONST      shift and go to state 144
    BOOLEAN_CONST   shift and go to state 157
    NEW             shift and go to state 127
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 121
    PrimaryExpression              shift and go to state 129
    ExclusiveOrExpression          shift and go to state 113
    ExpressionStatement            shift and go to state 335
    PrimitiveType                  shift and go to state 187
    RealPostfixExpression          shift and go to state 96
    ArithmeticUnaryOperator        shift and go to state 97
    AndExpression                  shift and go to state 88
    ArrayAccess                    shift and go to state 108
    CastExpression                 shift and go to state 143
    EqualityExpression             shift and go to state 98
    LogicalUnaryOperator           shift and go to state 153
    ComplexPrimaryNoParenthesis    shift and go to state 100
    MultiplicativeExpression       shift and go to state 101
    ClassAllocationExpression      shift and go to state 122
    MethodCall                     shift and go to state 102
    ConditionalOrExpression        shift and go to state 133
    ShiftExpression                shift and go to state 149
    AssignmentExpression           shift and go to state 104
    NewAllocationExpression        shift and go to state 135
    NotJustName                    shift and go to state 152
    QualifiedName                  shift and go to state 190
    LogicalUnaryExpression         shift and go to state 154
    Expression                     shift and go to state 136
    AdditiveExpression             shift and go to state 137
    ArrayAllocationExpression      shift and go to state 110
    ConditionalExpression          shift and go to state 138
    UnaryExpression                shift and go to state 139
    InclusiveOrExpression          shift and go to state 140
    MethodAccess                   shift and go to state 111
    ConditionalAndExpression       shift and go to state 92
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    FieldAccess                    shift and go to state 156
    SpecialName                    shift and go to state 120

state 316

    (110) ForInit -> ExpressionStatements SEMICOLON .

    SEMICOLON       reduce using rule 110 (ForInit -> ExpressionStatements SEMICOLON .)
    OP_INC          reduce using rule 110 (ForInit -> ExpressionStatements SEMICOLON .)
    OP_DEC          reduce using rule 110 (ForInit -> ExpressionStatements SEMICOLON .)
    PLUS            reduce using rule 110 (ForInit -> ExpressionStatements SEMICOLON .)
    MINUS           reduce using rule 110 (ForInit -> ExpressionStatements SEMICOLON .)
    ~               reduce using rule 110 (ForInit -> ExpressionStatements SEMICOLON .)
    NOT             reduce using rule 110 (ForInit -> ExpressionStatements SEMICOLON .)
    IDENTIFIER      reduce using rule 110 (ForInit -> ExpressionStatements SEMICOLON .)
    THIS            reduce using rule 110 (ForInit -> ExpressionStatements SEMICOLON .)
    SUPER           reduce using rule 110 (ForInit -> ExpressionStatements SEMICOLON .)
    NULL            reduce using rule 110 (ForInit -> ExpressionStatements SEMICOLON .)
    LROUNPAREN      reduce using rule 110 (ForInit -> ExpressionStatements SEMICOLON .)
    INT_CONST       reduce using rule 110 (ForInit -> ExpressionStatements SEMICOLON .)
    FLOAT_CONST     reduce using rule 110 (ForInit -> ExpressionStatements SEMICOLON .)
    STRING          reduce using rule 110 (ForInit -> ExpressionStatements SEMICOLON .)
    CHAR_CONST      reduce using rule 110 (ForInit -> ExpressionStatements SEMICOLON .)
    BOOLEAN_CONST   reduce using rule 110 (ForInit -> ExpressionStatements SEMICOLON .)
    NEW             reduce using rule 110 (ForInit -> ExpressionStatements SEMICOLON .)
    BOOLEAN         reduce using rule 110 (ForInit -> ExpressionStatements SEMICOLON .)
    CHAR            reduce using rule 110 (ForInit -> ExpressionStatements SEMICOLON .)
    BYTE            reduce using rule 110 (ForInit -> ExpressionStatements SEMICOLON .)
    SHORT           reduce using rule 110 (ForInit -> ExpressionStatements SEMICOLON .)
    INT             reduce using rule 110 (ForInit -> ExpressionStatements SEMICOLON .)
    LONG            reduce using rule 110 (ForInit -> ExpressionStatements SEMICOLON .)
    FLOAT           reduce using rule 110 (ForInit -> ExpressionStatements SEMICOLON .)
    DOUBLE          reduce using rule 110 (ForInit -> ExpressionStatements SEMICOLON .)
    VOID            reduce using rule 110 (ForInit -> ExpressionStatements SEMICOLON .)


state 317

    (144) MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .

    LSQPAREN        reduce using rule 144 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    DOT             reduce using rule 144 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    OP_INC          reduce using rule 144 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    OP_DEC          reduce using rule 144 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    EQUAL           reduce using rule 144 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    ASS_MUL         reduce using rule 144 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    ASS_ADD         reduce using rule 144 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    ASS_SUB         reduce using rule 144 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    MULT            reduce using rule 144 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    DIV             reduce using rule 144 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    MOD             reduce using rule 144 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    PLUS            reduce using rule 144 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    MINUS           reduce using rule 144 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    OP_SHL          reduce using rule 144 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    OP_SHR          reduce using rule 144 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    OP_SHRR         reduce using rule 144 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    LESS            reduce using rule 144 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    MORE            reduce using rule 144 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    OP_LE           reduce using rule 144 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    OP_GE           reduce using rule 144 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    OP_EQ           reduce using rule 144 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    OP_NE           reduce using rule 144 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    &               reduce using rule 144 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    ^               reduce using rule 144 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    |               reduce using rule 144 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    OP_LAND         reduce using rule 144 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    ?               reduce using rule 144 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    OP_LOR          reduce using rule 144 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    SEMICOLON       reduce using rule 144 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    RROUNPAREN      reduce using rule 144 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    COLON           reduce using rule 144 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    COMMA           reduce using rule 144 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    RSQPAREN        reduce using rule 144 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)


state 318

    (151) ArgumentList -> ArgumentList COMMA . Expression
    (224) Expression -> . AssignmentExpression
    (218) AssignmentExpression -> . ConditionalExpression
    (219) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (216) ConditionalExpression -> . ConditionalOrExpression
    (217) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (173) UnaryExpression -> . OP_INC UnaryExpression
    (174) UnaryExpression -> . OP_DEC UnaryExpression
    (175) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (176) UnaryExpression -> . LogicalUnaryExpression
    (214) ConditionalOrExpression -> . ConditionalAndExpression
    (215) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (181) ArithmeticUnaryOperator -> . PLUS
    (182) ArithmeticUnaryOperator -> . MINUS
    (177) LogicalUnaryExpression -> . PostfixExpression
    (178) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (212) ConditionalAndExpression -> . InclusiveOrExpression
    (213) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (169) PostfixExpression -> . PrimaryExpression
    (170) PostfixExpression -> . RealPostfixExpression
    (179) LogicalUnaryOperator -> . ~
    (180) LogicalUnaryOperator -> . NOT
    (210) InclusiveOrExpression -> . ExclusiveOrExpression
    (211) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (122) PrimaryExpression -> . QualifiedName
    (123) PrimaryExpression -> . NotJustName
    (171) RealPostfixExpression -> . PostfixExpression OP_INC
    (172) RealPostfixExpression -> . PostfixExpression OP_DEC
    (208) ExclusiveOrExpression -> . AndExpression
    (209) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (124) NotJustName -> . SpecialName
    (125) NotJustName -> . NewAllocationExpression
    (126) NotJustName -> . ComplexPrimary
    (206) AndExpression -> . EqualityExpression
    (207) AndExpression -> . AndExpression & EqualityExpression
    (147) SpecialName -> . THIS
    (148) SpecialName -> . SUPER
    (149) SpecialName -> . NULL
    (152) NewAllocationExpression -> . PlainNewAllocationExpression
    (153) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (127) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (128) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (203) EqualityExpression -> . RelationalExpression
    (204) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (205) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (154) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (155) PlainNewAllocationExpression -> . ClassAllocationExpression
    (156) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (157) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (158) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (129) ComplexPrimaryNoParenthesis -> . INT_CONST
    (130) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (131) ComplexPrimaryNoParenthesis -> . STRING
    (132) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (133) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (134) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (135) ComplexPrimaryNoParenthesis -> . FieldAccess
    (136) ComplexPrimaryNoParenthesis -> . MethodCall
    (198) RelationalExpression -> . ShiftExpression
    (199) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (200) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (201) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (202) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (161) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (162) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (163) ArrayAllocationExpression -> . NEW TypeName Dims
    (159) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (160) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (137) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (138) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (139) FieldAccess -> . NotJustName DOT IDENTIFIER
    (140) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (141) FieldAccess -> . QualifiedName DOT THIS
    (142) FieldAccess -> . QualifiedName DOT CLASS
    (143) FieldAccess -> . PrimitiveType DOT CLASS
    (144) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (145) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (194) ShiftExpression -> . AdditiveExpression
    (195) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (196) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (197) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (146) MethodAccess -> . QualifiedName
    (191) AdditiveExpression -> . MultiplicativeExpression
    (192) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (193) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (187) MultiplicativeExpression -> . CastExpression
    (188) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (189) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (190) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (183) CastExpression -> . UnaryExpression

    OP_INC          shift and go to state 106
    OP_DEC          shift and go to state 126
    PLUS            shift and go to state 90
    MINUS           shift and go to state 89
    ~               shift and go to state 141
    NOT             shift and go to state 119
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 91
    SUPER           shift and go to state 158
    NULL            shift and go to state 145
    LROUNPAREN      shift and go to state 118
    INT_CONST       shift and go to state 131
    FLOAT_CONST     shift and go to state 86
    STRING          shift and go to state 151
    CHAR_CONST      shift and go to state 144
    BOOLEAN_CONST   shift and go to state 157
    NEW             shift and go to state 127
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 121
    PrimaryExpression              shift and go to state 129
    PrimitiveType                  shift and go to state 187
    RealPostfixExpression          shift and go to state 96
    ArithmeticUnaryOperator        shift and go to state 97
    AndExpression                  shift and go to state 88
    ArrayAccess                    shift and go to state 108
    CastExpression                 shift and go to state 143
    EqualityExpression             shift and go to state 98
    LogicalUnaryOperator           shift and go to state 153
    ComplexPrimaryNoParenthesis    shift and go to state 100
    MultiplicativeExpression       shift and go to state 101
    ClassAllocationExpression      shift and go to state 122
    MethodCall                     shift and go to state 102
    ConditionalOrExpression        shift and go to state 133
    ShiftExpression                shift and go to state 149
    AssignmentExpression           shift and go to state 104
    NewAllocationExpression        shift and go to state 135
    NotJustName                    shift and go to state 152
    QualifiedName                  shift and go to state 190
    LogicalUnaryExpression         shift and go to state 154
    Expression                     shift and go to state 336
    AdditiveExpression             shift and go to state 137
    ArrayAllocationExpression      shift and go to state 110
    ConditionalExpression          shift and go to state 138
    UnaryExpression                shift and go to state 139
    InclusiveOrExpression          shift and go to state 140
    MethodAccess                   shift and go to state 111
    ExclusiveOrExpression          shift and go to state 113
    ConditionalAndExpression       shift and go to state 92
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    FieldAccess                    shift and go to state 156
    SpecialName                    shift and go to state 120

state 319

    (138) ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .

    LSQPAREN        reduce using rule 138 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    DOT             reduce using rule 138 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    OP_INC          reduce using rule 138 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    OP_DEC          reduce using rule 138 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    EQUAL           reduce using rule 138 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    ASS_MUL         reduce using rule 138 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    ASS_ADD         reduce using rule 138 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    ASS_SUB         reduce using rule 138 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    MULT            reduce using rule 138 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    DIV             reduce using rule 138 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    MOD             reduce using rule 138 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    PLUS            reduce using rule 138 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    MINUS           reduce using rule 138 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    OP_SHL          reduce using rule 138 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    OP_SHR          reduce using rule 138 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    OP_SHRR         reduce using rule 138 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    LESS            reduce using rule 138 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    MORE            reduce using rule 138 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    OP_LE           reduce using rule 138 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    OP_GE           reduce using rule 138 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    OP_EQ           reduce using rule 138 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    OP_NE           reduce using rule 138 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    &               reduce using rule 138 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    ^               reduce using rule 138 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    |               reduce using rule 138 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    OP_LAND         reduce using rule 138 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    ?               reduce using rule 138 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    OP_LOR          reduce using rule 138 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    SEMICOLON       reduce using rule 138 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    RROUNPAREN      reduce using rule 138 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    COLON           reduce using rule 138 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    COMMA           reduce using rule 138 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    RSQPAREN        reduce using rule 138 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)


state 320

    (158) PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .

    DOT             reduce using rule 158 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    OP_INC          reduce using rule 158 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    OP_DEC          reduce using rule 158 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    MULT            reduce using rule 158 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    DIV             reduce using rule 158 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    MOD             reduce using rule 158 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    PLUS            reduce using rule 158 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    MINUS           reduce using rule 158 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    OP_SHL          reduce using rule 158 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    OP_SHR          reduce using rule 158 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    OP_SHRR         reduce using rule 158 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    LESS            reduce using rule 158 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    MORE            reduce using rule 158 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    OP_LE           reduce using rule 158 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    OP_GE           reduce using rule 158 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    OP_EQ           reduce using rule 158 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    OP_NE           reduce using rule 158 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    &               reduce using rule 158 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    ^               reduce using rule 158 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    |               reduce using rule 158 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    OP_LAND         reduce using rule 158 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    ?               reduce using rule 158 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    OP_LOR          reduce using rule 158 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    SEMICOLON       reduce using rule 158 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    RROUNPAREN      reduce using rule 158 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    COLON           reduce using rule 158 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    COMMA           reduce using rule 158 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    RSQPAREN        reduce using rule 158 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    EQUAL           reduce using rule 158 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    ASS_MUL         reduce using rule 158 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    ASS_ADD         reduce using rule 158 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    ASS_SUB         reduce using rule 158 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)


state 321

    (103) IterationStatement -> WHILE Mark_quad LROUNPAREN Expression . RROUNPAREN Mark_while Statement

    RROUNPAREN      shift and go to state 337


state 322

    (165) DimExprs -> DimExprs DimExpr .

    LSQPAREN        reduce using rule 165 (DimExprs -> DimExprs DimExpr .)
    LCURPAREN       reduce using rule 165 (DimExprs -> DimExprs DimExpr .)
    DOT             reduce using rule 165 (DimExprs -> DimExprs DimExpr .)
    OP_INC          reduce using rule 165 (DimExprs -> DimExprs DimExpr .)
    OP_DEC          reduce using rule 165 (DimExprs -> DimExprs DimExpr .)
    EQUAL           reduce using rule 165 (DimExprs -> DimExprs DimExpr .)
    ASS_MUL         reduce using rule 165 (DimExprs -> DimExprs DimExpr .)
    ASS_ADD         reduce using rule 165 (DimExprs -> DimExprs DimExpr .)
    ASS_SUB         reduce using rule 165 (DimExprs -> DimExprs DimExpr .)
    MULT            reduce using rule 165 (DimExprs -> DimExprs DimExpr .)
    DIV             reduce using rule 165 (DimExprs -> DimExprs DimExpr .)
    MOD             reduce using rule 165 (DimExprs -> DimExprs DimExpr .)
    PLUS            reduce using rule 165 (DimExprs -> DimExprs DimExpr .)
    MINUS           reduce using rule 165 (DimExprs -> DimExprs DimExpr .)
    OP_SHL          reduce using rule 165 (DimExprs -> DimExprs DimExpr .)
    OP_SHR          reduce using rule 165 (DimExprs -> DimExprs DimExpr .)
    OP_SHRR         reduce using rule 165 (DimExprs -> DimExprs DimExpr .)
    LESS            reduce using rule 165 (DimExprs -> DimExprs DimExpr .)
    MORE            reduce using rule 165 (DimExprs -> DimExprs DimExpr .)
    OP_LE           reduce using rule 165 (DimExprs -> DimExprs DimExpr .)
    OP_GE           reduce using rule 165 (DimExprs -> DimExprs DimExpr .)
    OP_EQ           reduce using rule 165 (DimExprs -> DimExprs DimExpr .)
    OP_NE           reduce using rule 165 (DimExprs -> DimExprs DimExpr .)
    &               reduce using rule 165 (DimExprs -> DimExprs DimExpr .)
    ^               reduce using rule 165 (DimExprs -> DimExprs DimExpr .)
    |               reduce using rule 165 (DimExprs -> DimExprs DimExpr .)
    OP_LAND         reduce using rule 165 (DimExprs -> DimExprs DimExpr .)
    ?               reduce using rule 165 (DimExprs -> DimExprs DimExpr .)
    OP_LOR          reduce using rule 165 (DimExprs -> DimExprs DimExpr .)
    SEMICOLON       reduce using rule 165 (DimExprs -> DimExprs DimExpr .)
    RROUNPAREN      reduce using rule 165 (DimExprs -> DimExprs DimExpr .)
    COLON           reduce using rule 165 (DimExprs -> DimExprs DimExpr .)
    COMMA           reduce using rule 165 (DimExprs -> DimExprs DimExpr .)
    RSQPAREN        reduce using rule 165 (DimExprs -> DimExprs DimExpr .)


state 323

    (161) ArrayAllocationExpression -> NEW TypeName DimExprs Dims .
    (168) Dims -> Dims . OP_DIM
    (2) OP_DIM -> . LSQPAREN RSQPAREN

    LCURPAREN       reduce using rule 161 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    DOT             reduce using rule 161 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_INC          reduce using rule 161 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_DEC          reduce using rule 161 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    EQUAL           reduce using rule 161 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    ASS_MUL         reduce using rule 161 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    ASS_ADD         reduce using rule 161 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    ASS_SUB         reduce using rule 161 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    MULT            reduce using rule 161 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    DIV             reduce using rule 161 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    MOD             reduce using rule 161 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    PLUS            reduce using rule 161 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    MINUS           reduce using rule 161 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_SHL          reduce using rule 161 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_SHR          reduce using rule 161 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_SHRR         reduce using rule 161 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    LESS            reduce using rule 161 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    MORE            reduce using rule 161 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_LE           reduce using rule 161 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_GE           reduce using rule 161 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_EQ           reduce using rule 161 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_NE           reduce using rule 161 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    &               reduce using rule 161 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    ^               reduce using rule 161 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    |               reduce using rule 161 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_LAND         reduce using rule 161 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    ?               reduce using rule 161 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_LOR          reduce using rule 161 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    SEMICOLON       reduce using rule 161 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    RROUNPAREN      reduce using rule 161 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    COLON           reduce using rule 161 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    COMMA           reduce using rule 161 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    RSQPAREN        reduce using rule 161 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    LSQPAREN        shift and go to state 80

    OP_DIM                         shift and go to state 176

state 324

    (166) DimExpr -> LSQPAREN Expression . RSQPAREN

    RSQPAREN        shift and go to state 338


state 325

    (159) ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList . RROUNPAREN
    (151) ArgumentList -> ArgumentList . COMMA Expression

    RROUNPAREN      shift and go to state 339
    COMMA           shift and go to state 318


state 326

    (160) ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .

    LCURPAREN       reduce using rule 160 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    DOT             reduce using rule 160 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    OP_INC          reduce using rule 160 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    OP_DEC          reduce using rule 160 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    MULT            reduce using rule 160 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    DIV             reduce using rule 160 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    MOD             reduce using rule 160 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    PLUS            reduce using rule 160 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    MINUS           reduce using rule 160 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    OP_SHL          reduce using rule 160 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    OP_SHR          reduce using rule 160 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    OP_SHRR         reduce using rule 160 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    LESS            reduce using rule 160 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    MORE            reduce using rule 160 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    OP_LE           reduce using rule 160 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    OP_GE           reduce using rule 160 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    OP_EQ           reduce using rule 160 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    OP_NE           reduce using rule 160 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    &               reduce using rule 160 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    ^               reduce using rule 160 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    |               reduce using rule 160 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    OP_LAND         reduce using rule 160 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    ?               reduce using rule 160 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    OP_LOR          reduce using rule 160 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    SEMICOLON       reduce using rule 160 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    RROUNPAREN      reduce using rule 160 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    COLON           reduce using rule 160 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    COMMA           reduce using rule 160 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    RSQPAREN        reduce using rule 160 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    EQUAL           reduce using rule 160 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    ASS_MUL         reduce using rule 160 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    ASS_ADD         reduce using rule 160 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    ASS_SUB         reduce using rule 160 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)


state 327

    (217) ConditionalExpression -> ConditionalOrExpression ? Expression COLON . ConditionalExpression
    (216) ConditionalExpression -> . ConditionalOrExpression
    (217) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (214) ConditionalOrExpression -> . ConditionalAndExpression
    (215) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (212) ConditionalAndExpression -> . InclusiveOrExpression
    (213) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (210) InclusiveOrExpression -> . ExclusiveOrExpression
    (211) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (208) ExclusiveOrExpression -> . AndExpression
    (209) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (206) AndExpression -> . EqualityExpression
    (207) AndExpression -> . AndExpression & EqualityExpression
    (203) EqualityExpression -> . RelationalExpression
    (204) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (205) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (198) RelationalExpression -> . ShiftExpression
    (199) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (200) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (201) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (202) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (194) ShiftExpression -> . AdditiveExpression
    (195) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (196) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (197) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (191) AdditiveExpression -> . MultiplicativeExpression
    (192) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (193) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (187) MultiplicativeExpression -> . CastExpression
    (188) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (189) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (190) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (183) CastExpression -> . UnaryExpression
    (173) UnaryExpression -> . OP_INC UnaryExpression
    (174) UnaryExpression -> . OP_DEC UnaryExpression
    (175) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (176) UnaryExpression -> . LogicalUnaryExpression
    (181) ArithmeticUnaryOperator -> . PLUS
    (182) ArithmeticUnaryOperator -> . MINUS
    (177) LogicalUnaryExpression -> . PostfixExpression
    (178) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (169) PostfixExpression -> . PrimaryExpression
    (170) PostfixExpression -> . RealPostfixExpression
    (179) LogicalUnaryOperator -> . ~
    (180) LogicalUnaryOperator -> . NOT
    (122) PrimaryExpression -> . QualifiedName
    (123) PrimaryExpression -> . NotJustName
    (171) RealPostfixExpression -> . PostfixExpression OP_INC
    (172) RealPostfixExpression -> . PostfixExpression OP_DEC
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (124) NotJustName -> . SpecialName
    (125) NotJustName -> . NewAllocationExpression
    (126) NotJustName -> . ComplexPrimary
    (147) SpecialName -> . THIS
    (148) SpecialName -> . SUPER
    (149) SpecialName -> . NULL
    (152) NewAllocationExpression -> . PlainNewAllocationExpression
    (153) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (127) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (128) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (154) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (155) PlainNewAllocationExpression -> . ClassAllocationExpression
    (156) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (157) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (158) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (129) ComplexPrimaryNoParenthesis -> . INT_CONST
    (130) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (131) ComplexPrimaryNoParenthesis -> . STRING
    (132) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (133) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (134) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (135) ComplexPrimaryNoParenthesis -> . FieldAccess
    (136) ComplexPrimaryNoParenthesis -> . MethodCall
    (161) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (162) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (163) ArrayAllocationExpression -> . NEW TypeName Dims
    (159) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (160) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (137) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (138) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (139) FieldAccess -> . NotJustName DOT IDENTIFIER
    (140) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (141) FieldAccess -> . QualifiedName DOT THIS
    (142) FieldAccess -> . QualifiedName DOT CLASS
    (143) FieldAccess -> . PrimitiveType DOT CLASS
    (144) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (145) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (146) MethodAccess -> . QualifiedName

    OP_INC          shift and go to state 106
    OP_DEC          shift and go to state 126
    PLUS            shift and go to state 90
    MINUS           shift and go to state 89
    ~               shift and go to state 141
    NOT             shift and go to state 119
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 91
    SUPER           shift and go to state 158
    NULL            shift and go to state 145
    LROUNPAREN      shift and go to state 118
    INT_CONST       shift and go to state 131
    FLOAT_CONST     shift and go to state 86
    STRING          shift and go to state 151
    CHAR_CONST      shift and go to state 144
    BOOLEAN_CONST   shift and go to state 157
    NEW             shift and go to state 127
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 121
    CastExpression                 shift and go to state 143
    PrimitiveType                  shift and go to state 187
    RealPostfixExpression          shift and go to state 96
    ArithmeticUnaryOperator        shift and go to state 97
    AndExpression                  shift and go to state 88
    ArrayAccess                    shift and go to state 108
    PrimaryExpression              shift and go to state 129
    EqualityExpression             shift and go to state 98
    LogicalUnaryOperator           shift and go to state 153
    ComplexPrimaryNoParenthesis    shift and go to state 100
    MultiplicativeExpression       shift and go to state 101
    ClassAllocationExpression      shift and go to state 122
    MethodCall                     shift and go to state 102
    ConditionalOrExpression        shift and go to state 133
    ShiftExpression                shift and go to state 149
    NewAllocationExpression        shift and go to state 135
    NotJustName                    shift and go to state 152
    QualifiedName                  shift and go to state 190
    LogicalUnaryExpression         shift and go to state 154
    AdditiveExpression             shift and go to state 137
    ArrayAllocationExpression      shift and go to state 110
    ConditionalExpression          shift and go to state 340
    UnaryExpression                shift and go to state 193
    InclusiveOrExpression          shift and go to state 140
    FieldAccess                    shift and go to state 156
    ExclusiveOrExpression          shift and go to state 113
    ConditionalAndExpression       shift and go to state 92
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    MethodAccess                   shift and go to state 111
    SpecialName                    shift and go to state 120

state 328

    (105) IterationStatement -> Do Mark_quad Statement WHILE . LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON

    LROUNPAREN      shift and go to state 341


state 329

    (137) ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .

    LSQPAREN        reduce using rule 137 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    DOT             reduce using rule 137 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    OP_INC          reduce using rule 137 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    OP_DEC          reduce using rule 137 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    EQUAL           reduce using rule 137 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    ASS_MUL         reduce using rule 137 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    ASS_ADD         reduce using rule 137 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    ASS_SUB         reduce using rule 137 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    MULT            reduce using rule 137 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    DIV             reduce using rule 137 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    MOD             reduce using rule 137 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    PLUS            reduce using rule 137 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    MINUS           reduce using rule 137 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    OP_SHL          reduce using rule 137 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    OP_SHR          reduce using rule 137 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    OP_SHRR         reduce using rule 137 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    LESS            reduce using rule 137 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    MORE            reduce using rule 137 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    OP_LE           reduce using rule 137 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    OP_GE           reduce using rule 137 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    OP_EQ           reduce using rule 137 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    OP_NE           reduce using rule 137 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    &               reduce using rule 137 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    ^               reduce using rule 137 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    |               reduce using rule 137 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    OP_LAND         reduce using rule 137 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    ?               reduce using rule 137 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    OP_LOR          reduce using rule 137 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    SEMICOLON       reduce using rule 137 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    RROUNPAREN      reduce using rule 137 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    COLON           reduce using rule 137 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    COMMA           reduce using rule 137 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    RSQPAREN        reduce using rule 137 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)


state 330

    (99) SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN . Mark_if Statement
    (100) SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN . Mark_if Statement ELSE Mark_else Statement
    (101) Mark_if -> .

    SEMICOLON       reduce using rule 101 (Mark_if -> .)
    IDENTIFIER      reduce using rule 101 (Mark_if -> .)
    CASE            reduce using rule 101 (Mark_if -> .)
    DEFAULT         reduce using rule 101 (Mark_if -> .)
    BREAK           reduce using rule 101 (Mark_if -> .)
    CONTINUE        reduce using rule 101 (Mark_if -> .)
    RETURN          reduce using rule 101 (Mark_if -> .)
    LCURPAREN       reduce using rule 101 (Mark_if -> .)
    WHILE           reduce using rule 101 (Mark_if -> .)
    FOR             reduce using rule 101 (Mark_if -> .)
    IF              reduce using rule 101 (Mark_if -> .)
    DO              reduce using rule 101 (Mark_if -> .)
    OP_INC          reduce using rule 101 (Mark_if -> .)
    OP_DEC          reduce using rule 101 (Mark_if -> .)
    PLUS            reduce using rule 101 (Mark_if -> .)
    MINUS           reduce using rule 101 (Mark_if -> .)
    ~               reduce using rule 101 (Mark_if -> .)
    NOT             reduce using rule 101 (Mark_if -> .)
    THIS            reduce using rule 101 (Mark_if -> .)
    SUPER           reduce using rule 101 (Mark_if -> .)
    NULL            reduce using rule 101 (Mark_if -> .)
    LROUNPAREN      reduce using rule 101 (Mark_if -> .)
    INT_CONST       reduce using rule 101 (Mark_if -> .)
    FLOAT_CONST     reduce using rule 101 (Mark_if -> .)
    STRING          reduce using rule 101 (Mark_if -> .)
    CHAR_CONST      reduce using rule 101 (Mark_if -> .)
    BOOLEAN_CONST   reduce using rule 101 (Mark_if -> .)
    NEW             reduce using rule 101 (Mark_if -> .)
    BOOLEAN         reduce using rule 101 (Mark_if -> .)
    CHAR            reduce using rule 101 (Mark_if -> .)
    BYTE            reduce using rule 101 (Mark_if -> .)
    SHORT           reduce using rule 101 (Mark_if -> .)
    INT             reduce using rule 101 (Mark_if -> .)
    LONG            reduce using rule 101 (Mark_if -> .)
    FLOAT           reduce using rule 101 (Mark_if -> .)
    DOUBLE          reduce using rule 101 (Mark_if -> .)
    VOID            reduce using rule 101 (Mark_if -> .)

    Mark_if                        shift and go to state 342

state 331

    (109) IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN . Statement
    (86) Statement -> . EmptyStatement Mark_quad
    (87) Statement -> . LabelStatement Mark_quad
    (88) Statement -> . ExpressionStatement SEMICOLON Mark_quad
    (89) Statement -> . JumpStatement Mark_quad
    (90) Statement -> . Block Mark_quad
    (91) Statement -> . IterationStatement Mark_quad
    (92) Statement -> . SelectionStatement Mark_quad
    (94) EmptyStatement -> . SEMICOLON
    (95) LabelStatement -> . IDENTIFIER COLON
    (96) LabelStatement -> . CASE ConstantExpression COLON
    (97) LabelStatement -> . DEFAULT COLON
    (98) ExpressionStatement -> . Expression
    (118) JumpStatement -> . BREAK SEMICOLON
    (119) JumpStatement -> . CONTINUE SEMICOLON
    (120) JumpStatement -> . RETURN Expression SEMICOLON
    (121) JumpStatement -> . RETURN SEMICOLON
    (79) Block -> . LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN
    (80) Block -> . LCURPAREN RCURPAREN
    (103) IterationStatement -> . WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement
    (105) IterationStatement -> . Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON
    (108) IterationStatement -> . FOR LROUNPAREN ForInit ForExpr Mark_quad ForIncr RROUNPAREN Mark_quad Statement
    (109) IterationStatement -> . FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement
    (99) SelectionStatement -> . IF LROUNPAREN Expression RROUNPAREN Mark_if Statement
    (100) SelectionStatement -> . IF LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement
    (224) Expression -> . AssignmentExpression
    (106) Do -> . DO
    (218) AssignmentExpression -> . ConditionalExpression
    (219) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (216) ConditionalExpression -> . ConditionalOrExpression
    (217) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (173) UnaryExpression -> . OP_INC UnaryExpression
    (174) UnaryExpression -> . OP_DEC UnaryExpression
    (175) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (176) UnaryExpression -> . LogicalUnaryExpression
    (214) ConditionalOrExpression -> . ConditionalAndExpression
    (215) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (181) ArithmeticUnaryOperator -> . PLUS
    (182) ArithmeticUnaryOperator -> . MINUS
    (177) LogicalUnaryExpression -> . PostfixExpression
    (178) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (212) ConditionalAndExpression -> . InclusiveOrExpression
    (213) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (169) PostfixExpression -> . PrimaryExpression
    (170) PostfixExpression -> . RealPostfixExpression
    (179) LogicalUnaryOperator -> . ~
    (180) LogicalUnaryOperator -> . NOT
    (210) InclusiveOrExpression -> . ExclusiveOrExpression
    (211) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (122) PrimaryExpression -> . QualifiedName
    (123) PrimaryExpression -> . NotJustName
    (171) RealPostfixExpression -> . PostfixExpression OP_INC
    (172) RealPostfixExpression -> . PostfixExpression OP_DEC
    (208) ExclusiveOrExpression -> . AndExpression
    (209) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (124) NotJustName -> . SpecialName
    (125) NotJustName -> . NewAllocationExpression
    (126) NotJustName -> . ComplexPrimary
    (206) AndExpression -> . EqualityExpression
    (207) AndExpression -> . AndExpression & EqualityExpression
    (147) SpecialName -> . THIS
    (148) SpecialName -> . SUPER
    (149) SpecialName -> . NULL
    (152) NewAllocationExpression -> . PlainNewAllocationExpression
    (153) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (127) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (128) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (203) EqualityExpression -> . RelationalExpression
    (204) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (205) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (154) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (155) PlainNewAllocationExpression -> . ClassAllocationExpression
    (156) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (157) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (158) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (129) ComplexPrimaryNoParenthesis -> . INT_CONST
    (130) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (131) ComplexPrimaryNoParenthesis -> . STRING
    (132) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (133) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (134) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (135) ComplexPrimaryNoParenthesis -> . FieldAccess
    (136) ComplexPrimaryNoParenthesis -> . MethodCall
    (198) RelationalExpression -> . ShiftExpression
    (199) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (200) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (201) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (202) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (161) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (162) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (163) ArrayAllocationExpression -> . NEW TypeName Dims
    (159) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (160) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (137) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (138) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (139) FieldAccess -> . NotJustName DOT IDENTIFIER
    (140) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (141) FieldAccess -> . QualifiedName DOT THIS
    (142) FieldAccess -> . QualifiedName DOT CLASS
    (143) FieldAccess -> . PrimitiveType DOT CLASS
    (144) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (145) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (194) ShiftExpression -> . AdditiveExpression
    (195) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (196) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (197) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (146) MethodAccess -> . QualifiedName
    (191) AdditiveExpression -> . MultiplicativeExpression
    (192) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (193) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (187) MultiplicativeExpression -> . CastExpression
    (188) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (189) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (190) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (183) CastExpression -> . UnaryExpression

    SEMICOLON       shift and go to state 132
    IDENTIFIER      shift and go to state 134
    CASE            shift and go to state 130
    DEFAULT         shift and go to state 123
    BREAK           shift and go to state 99
    CONTINUE        shift and go to state 116
    RETURN          shift and go to state 95
    LCURPAREN       shift and go to state 57
    WHILE           shift and go to state 125
    FOR             shift and go to state 105
    IF              shift and go to state 155
    DO              shift and go to state 142
    OP_INC          shift and go to state 106
    OP_DEC          shift and go to state 126
    PLUS            shift and go to state 90
    MINUS           shift and go to state 89
    ~               shift and go to state 141
    NOT             shift and go to state 119
    THIS            shift and go to state 91
    SUPER           shift and go to state 158
    NULL            shift and go to state 145
    LROUNPAREN      shift and go to state 118
    INT_CONST       shift and go to state 131
    FLOAT_CONST     shift and go to state 86
    STRING          shift and go to state 151
    CHAR_CONST      shift and go to state 144
    BOOLEAN_CONST   shift and go to state 157
    NEW             shift and go to state 127
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    LabelStatement                 shift and go to state 94
    ArithmeticUnaryOperator        shift and go to state 97
    AssignmentExpression           shift and go to state 104
    ExpressionStatement            shift and go to state 84
    JumpStatement                  shift and go to state 124
    RealPostfixExpression          shift and go to state 96
    Statement                      shift and go to state 343
    AndExpression                  shift and go to state 88
    ArrayAccess                    shift and go to state 108
    CastExpression                 shift and go to state 143
    EqualityExpression             shift and go to state 98
    Do                             shift and go to state 146
    LogicalUnaryOperator           shift and go to state 153
    ComplexPrimaryNoParenthesis    shift and go to state 100
    MultiplicativeExpression       shift and go to state 101
    ClassAllocationExpression      shift and go to state 122
    MethodCall                     shift and go to state 102
    ConditionalOrExpression        shift and go to state 133
    ShiftExpression                shift and go to state 149
    SelectionStatement             shift and go to state 103
    NewAllocationExpression        shift and go to state 135
    NotJustName                    shift and go to state 152
    QualifiedName                  shift and go to state 190
    ComplexPrimary                 shift and go to state 121
    PrimitiveType                  shift and go to state 187
    LogicalUnaryExpression         shift and go to state 154
    UnaryExpression                shift and go to state 139
    Expression                     shift and go to state 136
    Block                          shift and go to state 109
    AdditiveExpression             shift and go to state 137
    ArrayAllocationExpression      shift and go to state 110
    ConditionalExpression          shift and go to state 138
    InclusiveOrExpression          shift and go to state 140
    MethodAccess                   shift and go to state 111
    PrimaryExpression              shift and go to state 129
    ExclusiveOrExpression          shift and go to state 113
    ConditionalAndExpression       shift and go to state 92
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    FieldAccess                    shift and go to state 156
    EmptyStatement                 shift and go to state 93
    SpecialName                    shift and go to state 120
    IterationStatement             shift and go to state 159

state 332

    (108) IterationStatement -> FOR LROUNPAREN ForInit ForExpr Mark_quad . ForIncr RROUNPAREN Mark_quad Statement
    (115) ForIncr -> . ExpressionStatements
    (116) ExpressionStatements -> . ExpressionStatement
    (117) ExpressionStatements -> . ExpressionStatements COMMA ExpressionStatement
    (98) ExpressionStatement -> . Expression
    (224) Expression -> . AssignmentExpression
    (218) AssignmentExpression -> . ConditionalExpression
    (219) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (216) ConditionalExpression -> . ConditionalOrExpression
    (217) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (173) UnaryExpression -> . OP_INC UnaryExpression
    (174) UnaryExpression -> . OP_DEC UnaryExpression
    (175) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (176) UnaryExpression -> . LogicalUnaryExpression
    (214) ConditionalOrExpression -> . ConditionalAndExpression
    (215) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (181) ArithmeticUnaryOperator -> . PLUS
    (182) ArithmeticUnaryOperator -> . MINUS
    (177) LogicalUnaryExpression -> . PostfixExpression
    (178) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (212) ConditionalAndExpression -> . InclusiveOrExpression
    (213) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (169) PostfixExpression -> . PrimaryExpression
    (170) PostfixExpression -> . RealPostfixExpression
    (179) LogicalUnaryOperator -> . ~
    (180) LogicalUnaryOperator -> . NOT
    (210) InclusiveOrExpression -> . ExclusiveOrExpression
    (211) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (122) PrimaryExpression -> . QualifiedName
    (123) PrimaryExpression -> . NotJustName
    (171) RealPostfixExpression -> . PostfixExpression OP_INC
    (172) RealPostfixExpression -> . PostfixExpression OP_DEC
    (208) ExclusiveOrExpression -> . AndExpression
    (209) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (124) NotJustName -> . SpecialName
    (125) NotJustName -> . NewAllocationExpression
    (126) NotJustName -> . ComplexPrimary
    (206) AndExpression -> . EqualityExpression
    (207) AndExpression -> . AndExpression & EqualityExpression
    (147) SpecialName -> . THIS
    (148) SpecialName -> . SUPER
    (149) SpecialName -> . NULL
    (152) NewAllocationExpression -> . PlainNewAllocationExpression
    (153) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (127) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (128) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (203) EqualityExpression -> . RelationalExpression
    (204) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (205) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (154) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (155) PlainNewAllocationExpression -> . ClassAllocationExpression
    (156) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (157) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (158) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (129) ComplexPrimaryNoParenthesis -> . INT_CONST
    (130) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (131) ComplexPrimaryNoParenthesis -> . STRING
    (132) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (133) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (134) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (135) ComplexPrimaryNoParenthesis -> . FieldAccess
    (136) ComplexPrimaryNoParenthesis -> . MethodCall
    (198) RelationalExpression -> . ShiftExpression
    (199) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (200) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (201) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (202) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (161) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (162) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (163) ArrayAllocationExpression -> . NEW TypeName Dims
    (159) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (160) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (137) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (138) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (139) FieldAccess -> . NotJustName DOT IDENTIFIER
    (140) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (141) FieldAccess -> . QualifiedName DOT THIS
    (142) FieldAccess -> . QualifiedName DOT CLASS
    (143) FieldAccess -> . PrimitiveType DOT CLASS
    (144) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (145) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (194) ShiftExpression -> . AdditiveExpression
    (195) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (196) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (197) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (146) MethodAccess -> . QualifiedName
    (191) AdditiveExpression -> . MultiplicativeExpression
    (192) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (193) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (187) MultiplicativeExpression -> . CastExpression
    (188) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (189) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (190) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (183) CastExpression -> . UnaryExpression

    OP_INC          shift and go to state 106
    OP_DEC          shift and go to state 126
    PLUS            shift and go to state 90
    MINUS           shift and go to state 89
    ~               shift and go to state 141
    NOT             shift and go to state 119
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 91
    SUPER           shift and go to state 158
    NULL            shift and go to state 145
    LROUNPAREN      shift and go to state 118
    INT_CONST       shift and go to state 131
    FLOAT_CONST     shift and go to state 86
    STRING          shift and go to state 151
    CHAR_CONST      shift and go to state 144
    BOOLEAN_CONST   shift and go to state 157
    NEW             shift and go to state 127
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 121
    PrimaryExpression              shift and go to state 129
    ExclusiveOrExpression          shift and go to state 113
    ExpressionStatement            shift and go to state 269
    PrimitiveType                  shift and go to state 187
    RealPostfixExpression          shift and go to state 96
    AndExpression                  shift and go to state 88
    ArrayAccess                    shift and go to state 108
    CastExpression                 shift and go to state 143
    EqualityExpression             shift and go to state 98
    LogicalUnaryOperator           shift and go to state 153
    ComplexPrimaryNoParenthesis    shift and go to state 100
    MultiplicativeExpression       shift and go to state 101
    ClassAllocationExpression      shift and go to state 122
    MethodCall                     shift and go to state 102
    ConditionalOrExpression        shift and go to state 133
    ShiftExpression                shift and go to state 149
    ArithmeticUnaryOperator        shift and go to state 97
    AssignmentExpression           shift and go to state 104
    NewAllocationExpression        shift and go to state 135
    NotJustName                    shift and go to state 152
    QualifiedName                  shift and go to state 190
    LogicalUnaryExpression         shift and go to state 154
    UnaryExpression                shift and go to state 139
    Expression                     shift and go to state 136
    AdditiveExpression             shift and go to state 137
    ArrayAllocationExpression      shift and go to state 110
    ConditionalExpression          shift and go to state 138
    InclusiveOrExpression          shift and go to state 140
    MethodAccess                   shift and go to state 111
    ExpressionStatements           shift and go to state 345
    ConditionalAndExpression       shift and go to state 92
    ForIncr                        shift and go to state 344
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    FieldAccess                    shift and go to state 156
    SpecialName                    shift and go to state 120

state 333

    (114) ForExpr -> Mark_quad SEMICOLON .

    RROUNPAREN      reduce using rule 114 (ForExpr -> Mark_quad SEMICOLON .)
    OP_INC          reduce using rule 114 (ForExpr -> Mark_quad SEMICOLON .)
    OP_DEC          reduce using rule 114 (ForExpr -> Mark_quad SEMICOLON .)
    PLUS            reduce using rule 114 (ForExpr -> Mark_quad SEMICOLON .)
    MINUS           reduce using rule 114 (ForExpr -> Mark_quad SEMICOLON .)
    ~               reduce using rule 114 (ForExpr -> Mark_quad SEMICOLON .)
    NOT             reduce using rule 114 (ForExpr -> Mark_quad SEMICOLON .)
    IDENTIFIER      reduce using rule 114 (ForExpr -> Mark_quad SEMICOLON .)
    THIS            reduce using rule 114 (ForExpr -> Mark_quad SEMICOLON .)
    SUPER           reduce using rule 114 (ForExpr -> Mark_quad SEMICOLON .)
    NULL            reduce using rule 114 (ForExpr -> Mark_quad SEMICOLON .)
    LROUNPAREN      reduce using rule 114 (ForExpr -> Mark_quad SEMICOLON .)
    INT_CONST       reduce using rule 114 (ForExpr -> Mark_quad SEMICOLON .)
    FLOAT_CONST     reduce using rule 114 (ForExpr -> Mark_quad SEMICOLON .)
    STRING          reduce using rule 114 (ForExpr -> Mark_quad SEMICOLON .)
    CHAR_CONST      reduce using rule 114 (ForExpr -> Mark_quad SEMICOLON .)
    BOOLEAN_CONST   reduce using rule 114 (ForExpr -> Mark_quad SEMICOLON .)
    NEW             reduce using rule 114 (ForExpr -> Mark_quad SEMICOLON .)
    BOOLEAN         reduce using rule 114 (ForExpr -> Mark_quad SEMICOLON .)
    CHAR            reduce using rule 114 (ForExpr -> Mark_quad SEMICOLON .)
    BYTE            reduce using rule 114 (ForExpr -> Mark_quad SEMICOLON .)
    SHORT           reduce using rule 114 (ForExpr -> Mark_quad SEMICOLON .)
    INT             reduce using rule 114 (ForExpr -> Mark_quad SEMICOLON .)
    LONG            reduce using rule 114 (ForExpr -> Mark_quad SEMICOLON .)
    FLOAT           reduce using rule 114 (ForExpr -> Mark_quad SEMICOLON .)
    DOUBLE          reduce using rule 114 (ForExpr -> Mark_quad SEMICOLON .)
    VOID            reduce using rule 114 (ForExpr -> Mark_quad SEMICOLON .)


state 334

    (113) ForExpr -> Mark_quad Expression . SEMICOLON

    SEMICOLON       shift and go to state 346


state 335

    (117) ExpressionStatements -> ExpressionStatements COMMA ExpressionStatement .

    SEMICOLON       reduce using rule 117 (ExpressionStatements -> ExpressionStatements COMMA ExpressionStatement .)
    COMMA           reduce using rule 117 (ExpressionStatements -> ExpressionStatements COMMA ExpressionStatement .)
    RROUNPAREN      reduce using rule 117 (ExpressionStatements -> ExpressionStatements COMMA ExpressionStatement .)


state 336

    (151) ArgumentList -> ArgumentList COMMA Expression .

    RROUNPAREN      reduce using rule 151 (ArgumentList -> ArgumentList COMMA Expression .)
    COMMA           reduce using rule 151 (ArgumentList -> ArgumentList COMMA Expression .)


state 337

    (103) IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN . Mark_while Statement
    (104) Mark_while -> .

    SEMICOLON       reduce using rule 104 (Mark_while -> .)
    IDENTIFIER      reduce using rule 104 (Mark_while -> .)
    CASE            reduce using rule 104 (Mark_while -> .)
    DEFAULT         reduce using rule 104 (Mark_while -> .)
    BREAK           reduce using rule 104 (Mark_while -> .)
    CONTINUE        reduce using rule 104 (Mark_while -> .)
    RETURN          reduce using rule 104 (Mark_while -> .)
    LCURPAREN       reduce using rule 104 (Mark_while -> .)
    WHILE           reduce using rule 104 (Mark_while -> .)
    FOR             reduce using rule 104 (Mark_while -> .)
    IF              reduce using rule 104 (Mark_while -> .)
    DO              reduce using rule 104 (Mark_while -> .)
    OP_INC          reduce using rule 104 (Mark_while -> .)
    OP_DEC          reduce using rule 104 (Mark_while -> .)
    PLUS            reduce using rule 104 (Mark_while -> .)
    MINUS           reduce using rule 104 (Mark_while -> .)
    ~               reduce using rule 104 (Mark_while -> .)
    NOT             reduce using rule 104 (Mark_while -> .)
    THIS            reduce using rule 104 (Mark_while -> .)
    SUPER           reduce using rule 104 (Mark_while -> .)
    NULL            reduce using rule 104 (Mark_while -> .)
    LROUNPAREN      reduce using rule 104 (Mark_while -> .)
    INT_CONST       reduce using rule 104 (Mark_while -> .)
    FLOAT_CONST     reduce using rule 104 (Mark_while -> .)
    STRING          reduce using rule 104 (Mark_while -> .)
    CHAR_CONST      reduce using rule 104 (Mark_while -> .)
    BOOLEAN_CONST   reduce using rule 104 (Mark_while -> .)
    NEW             reduce using rule 104 (Mark_while -> .)
    BOOLEAN         reduce using rule 104 (Mark_while -> .)
    CHAR            reduce using rule 104 (Mark_while -> .)
    BYTE            reduce using rule 104 (Mark_while -> .)
    SHORT           reduce using rule 104 (Mark_while -> .)
    INT             reduce using rule 104 (Mark_while -> .)
    LONG            reduce using rule 104 (Mark_while -> .)
    FLOAT           reduce using rule 104 (Mark_while -> .)
    DOUBLE          reduce using rule 104 (Mark_while -> .)
    VOID            reduce using rule 104 (Mark_while -> .)

    Mark_while                     shift and go to state 347

state 338

    (166) DimExpr -> LSQPAREN Expression RSQPAREN .

    LSQPAREN        reduce using rule 166 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    LCURPAREN       reduce using rule 166 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    DOT             reduce using rule 166 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    OP_INC          reduce using rule 166 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    OP_DEC          reduce using rule 166 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    EQUAL           reduce using rule 166 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    ASS_MUL         reduce using rule 166 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    ASS_ADD         reduce using rule 166 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    ASS_SUB         reduce using rule 166 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    MULT            reduce using rule 166 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    DIV             reduce using rule 166 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    MOD             reduce using rule 166 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    PLUS            reduce using rule 166 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    MINUS           reduce using rule 166 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    OP_SHL          reduce using rule 166 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    OP_SHR          reduce using rule 166 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    OP_SHRR         reduce using rule 166 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    LESS            reduce using rule 166 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    MORE            reduce using rule 166 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    OP_LE           reduce using rule 166 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    OP_GE           reduce using rule 166 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    OP_EQ           reduce using rule 166 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    OP_NE           reduce using rule 166 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    &               reduce using rule 166 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    ^               reduce using rule 166 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    |               reduce using rule 166 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    OP_LAND         reduce using rule 166 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    ?               reduce using rule 166 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    OP_LOR          reduce using rule 166 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    SEMICOLON       reduce using rule 166 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    RROUNPAREN      reduce using rule 166 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    COLON           reduce using rule 166 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    COMMA           reduce using rule 166 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    RSQPAREN        reduce using rule 166 (DimExpr -> LSQPAREN Expression RSQPAREN .)


state 339

    (159) ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .

    LCURPAREN       reduce using rule 159 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    DOT             reduce using rule 159 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    OP_INC          reduce using rule 159 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    OP_DEC          reduce using rule 159 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    MULT            reduce using rule 159 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    DIV             reduce using rule 159 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    MOD             reduce using rule 159 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    PLUS            reduce using rule 159 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    MINUS           reduce using rule 159 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    OP_SHL          reduce using rule 159 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    OP_SHR          reduce using rule 159 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    OP_SHRR         reduce using rule 159 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    LESS            reduce using rule 159 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    MORE            reduce using rule 159 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    OP_LE           reduce using rule 159 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    OP_GE           reduce using rule 159 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    OP_EQ           reduce using rule 159 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    OP_NE           reduce using rule 159 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    &               reduce using rule 159 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    ^               reduce using rule 159 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    |               reduce using rule 159 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    OP_LAND         reduce using rule 159 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    ?               reduce using rule 159 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    OP_LOR          reduce using rule 159 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    SEMICOLON       reduce using rule 159 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    RROUNPAREN      reduce using rule 159 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    COLON           reduce using rule 159 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    COMMA           reduce using rule 159 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    RSQPAREN        reduce using rule 159 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    EQUAL           reduce using rule 159 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    ASS_MUL         reduce using rule 159 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    ASS_ADD         reduce using rule 159 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    ASS_SUB         reduce using rule 159 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)


state 340

    (217) ConditionalExpression -> ConditionalOrExpression ? Expression COLON ConditionalExpression .

    RROUNPAREN      reduce using rule 217 (ConditionalExpression -> ConditionalOrExpression ? Expression COLON ConditionalExpression .)
    SEMICOLON       reduce using rule 217 (ConditionalExpression -> ConditionalOrExpression ? Expression COLON ConditionalExpression .)
    COMMA           reduce using rule 217 (ConditionalExpression -> ConditionalOrExpression ? Expression COLON ConditionalExpression .)
    RSQPAREN        reduce using rule 217 (ConditionalExpression -> ConditionalOrExpression ? Expression COLON ConditionalExpression .)
    COLON           reduce using rule 217 (ConditionalExpression -> ConditionalOrExpression ? Expression COLON ConditionalExpression .)


state 341

    (105) IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN . Expression Mark_dowhile RROUNPAREN SEMICOLON
    (224) Expression -> . AssignmentExpression
    (218) AssignmentExpression -> . ConditionalExpression
    (219) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (216) ConditionalExpression -> . ConditionalOrExpression
    (217) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (173) UnaryExpression -> . OP_INC UnaryExpression
    (174) UnaryExpression -> . OP_DEC UnaryExpression
    (175) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (176) UnaryExpression -> . LogicalUnaryExpression
    (214) ConditionalOrExpression -> . ConditionalAndExpression
    (215) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (181) ArithmeticUnaryOperator -> . PLUS
    (182) ArithmeticUnaryOperator -> . MINUS
    (177) LogicalUnaryExpression -> . PostfixExpression
    (178) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (212) ConditionalAndExpression -> . InclusiveOrExpression
    (213) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (169) PostfixExpression -> . PrimaryExpression
    (170) PostfixExpression -> . RealPostfixExpression
    (179) LogicalUnaryOperator -> . ~
    (180) LogicalUnaryOperator -> . NOT
    (210) InclusiveOrExpression -> . ExclusiveOrExpression
    (211) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (122) PrimaryExpression -> . QualifiedName
    (123) PrimaryExpression -> . NotJustName
    (171) RealPostfixExpression -> . PostfixExpression OP_INC
    (172) RealPostfixExpression -> . PostfixExpression OP_DEC
    (208) ExclusiveOrExpression -> . AndExpression
    (209) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (124) NotJustName -> . SpecialName
    (125) NotJustName -> . NewAllocationExpression
    (126) NotJustName -> . ComplexPrimary
    (206) AndExpression -> . EqualityExpression
    (207) AndExpression -> . AndExpression & EqualityExpression
    (147) SpecialName -> . THIS
    (148) SpecialName -> . SUPER
    (149) SpecialName -> . NULL
    (152) NewAllocationExpression -> . PlainNewAllocationExpression
    (153) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (127) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (128) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (203) EqualityExpression -> . RelationalExpression
    (204) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (205) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (154) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (155) PlainNewAllocationExpression -> . ClassAllocationExpression
    (156) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (157) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (158) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (129) ComplexPrimaryNoParenthesis -> . INT_CONST
    (130) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (131) ComplexPrimaryNoParenthesis -> . STRING
    (132) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (133) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (134) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (135) ComplexPrimaryNoParenthesis -> . FieldAccess
    (136) ComplexPrimaryNoParenthesis -> . MethodCall
    (198) RelationalExpression -> . ShiftExpression
    (199) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (200) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (201) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (202) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (161) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (162) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (163) ArrayAllocationExpression -> . NEW TypeName Dims
    (159) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (160) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (137) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (138) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (139) FieldAccess -> . NotJustName DOT IDENTIFIER
    (140) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (141) FieldAccess -> . QualifiedName DOT THIS
    (142) FieldAccess -> . QualifiedName DOT CLASS
    (143) FieldAccess -> . PrimitiveType DOT CLASS
    (144) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (145) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (194) ShiftExpression -> . AdditiveExpression
    (195) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (196) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (197) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (146) MethodAccess -> . QualifiedName
    (191) AdditiveExpression -> . MultiplicativeExpression
    (192) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (193) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (187) MultiplicativeExpression -> . CastExpression
    (188) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (189) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (190) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (183) CastExpression -> . UnaryExpression

    OP_INC          shift and go to state 106
    OP_DEC          shift and go to state 126
    PLUS            shift and go to state 90
    MINUS           shift and go to state 89
    ~               shift and go to state 141
    NOT             shift and go to state 119
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 91
    SUPER           shift and go to state 158
    NULL            shift and go to state 145
    LROUNPAREN      shift and go to state 118
    INT_CONST       shift and go to state 131
    FLOAT_CONST     shift and go to state 86
    STRING          shift and go to state 151
    CHAR_CONST      shift and go to state 144
    BOOLEAN_CONST   shift and go to state 157
    NEW             shift and go to state 127
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 121
    PrimaryExpression              shift and go to state 129
    PrimitiveType                  shift and go to state 187
    RealPostfixExpression          shift and go to state 96
    AndExpression                  shift and go to state 88
    ArrayAccess                    shift and go to state 108
    CastExpression                 shift and go to state 143
    EqualityExpression             shift and go to state 98
    LogicalUnaryOperator           shift and go to state 153
    ComplexPrimaryNoParenthesis    shift and go to state 100
    MultiplicativeExpression       shift and go to state 101
    ClassAllocationExpression      shift and go to state 122
    MethodCall                     shift and go to state 102
    ConditionalOrExpression        shift and go to state 133
    ShiftExpression                shift and go to state 149
    ArithmeticUnaryOperator        shift and go to state 97
    AssignmentExpression           shift and go to state 104
    NewAllocationExpression        shift and go to state 135
    NotJustName                    shift and go to state 152
    QualifiedName                  shift and go to state 190
    LogicalUnaryExpression         shift and go to state 154
    Expression                     shift and go to state 348
    AdditiveExpression             shift and go to state 137
    ArrayAllocationExpression      shift and go to state 110
    ConditionalExpression          shift and go to state 138
    UnaryExpression                shift and go to state 139
    InclusiveOrExpression          shift and go to state 140
    MethodAccess                   shift and go to state 111
    ExclusiveOrExpression          shift and go to state 113
    ConditionalAndExpression       shift and go to state 92
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    FieldAccess                    shift and go to state 156
    SpecialName                    shift and go to state 120

state 342

    (99) SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if . Statement
    (100) SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if . Statement ELSE Mark_else Statement
    (86) Statement -> . EmptyStatement Mark_quad
    (87) Statement -> . LabelStatement Mark_quad
    (88) Statement -> . ExpressionStatement SEMICOLON Mark_quad
    (89) Statement -> . JumpStatement Mark_quad
    (90) Statement -> . Block Mark_quad
    (91) Statement -> . IterationStatement Mark_quad
    (92) Statement -> . SelectionStatement Mark_quad
    (94) EmptyStatement -> . SEMICOLON
    (95) LabelStatement -> . IDENTIFIER COLON
    (96) LabelStatement -> . CASE ConstantExpression COLON
    (97) LabelStatement -> . DEFAULT COLON
    (98) ExpressionStatement -> . Expression
    (118) JumpStatement -> . BREAK SEMICOLON
    (119) JumpStatement -> . CONTINUE SEMICOLON
    (120) JumpStatement -> . RETURN Expression SEMICOLON
    (121) JumpStatement -> . RETURN SEMICOLON
    (79) Block -> . LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN
    (80) Block -> . LCURPAREN RCURPAREN
    (103) IterationStatement -> . WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement
    (105) IterationStatement -> . Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON
    (108) IterationStatement -> . FOR LROUNPAREN ForInit ForExpr Mark_quad ForIncr RROUNPAREN Mark_quad Statement
    (109) IterationStatement -> . FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement
    (99) SelectionStatement -> . IF LROUNPAREN Expression RROUNPAREN Mark_if Statement
    (100) SelectionStatement -> . IF LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement
    (224) Expression -> . AssignmentExpression
    (106) Do -> . DO
    (218) AssignmentExpression -> . ConditionalExpression
    (219) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (216) ConditionalExpression -> . ConditionalOrExpression
    (217) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (173) UnaryExpression -> . OP_INC UnaryExpression
    (174) UnaryExpression -> . OP_DEC UnaryExpression
    (175) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (176) UnaryExpression -> . LogicalUnaryExpression
    (214) ConditionalOrExpression -> . ConditionalAndExpression
    (215) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (181) ArithmeticUnaryOperator -> . PLUS
    (182) ArithmeticUnaryOperator -> . MINUS
    (177) LogicalUnaryExpression -> . PostfixExpression
    (178) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (212) ConditionalAndExpression -> . InclusiveOrExpression
    (213) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (169) PostfixExpression -> . PrimaryExpression
    (170) PostfixExpression -> . RealPostfixExpression
    (179) LogicalUnaryOperator -> . ~
    (180) LogicalUnaryOperator -> . NOT
    (210) InclusiveOrExpression -> . ExclusiveOrExpression
    (211) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (122) PrimaryExpression -> . QualifiedName
    (123) PrimaryExpression -> . NotJustName
    (171) RealPostfixExpression -> . PostfixExpression OP_INC
    (172) RealPostfixExpression -> . PostfixExpression OP_DEC
    (208) ExclusiveOrExpression -> . AndExpression
    (209) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (124) NotJustName -> . SpecialName
    (125) NotJustName -> . NewAllocationExpression
    (126) NotJustName -> . ComplexPrimary
    (206) AndExpression -> . EqualityExpression
    (207) AndExpression -> . AndExpression & EqualityExpression
    (147) SpecialName -> . THIS
    (148) SpecialName -> . SUPER
    (149) SpecialName -> . NULL
    (152) NewAllocationExpression -> . PlainNewAllocationExpression
    (153) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (127) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (128) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (203) EqualityExpression -> . RelationalExpression
    (204) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (205) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (154) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (155) PlainNewAllocationExpression -> . ClassAllocationExpression
    (156) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (157) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (158) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (129) ComplexPrimaryNoParenthesis -> . INT_CONST
    (130) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (131) ComplexPrimaryNoParenthesis -> . STRING
    (132) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (133) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (134) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (135) ComplexPrimaryNoParenthesis -> . FieldAccess
    (136) ComplexPrimaryNoParenthesis -> . MethodCall
    (198) RelationalExpression -> . ShiftExpression
    (199) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (200) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (201) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (202) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (161) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (162) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (163) ArrayAllocationExpression -> . NEW TypeName Dims
    (159) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (160) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (137) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (138) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (139) FieldAccess -> . NotJustName DOT IDENTIFIER
    (140) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (141) FieldAccess -> . QualifiedName DOT THIS
    (142) FieldAccess -> . QualifiedName DOT CLASS
    (143) FieldAccess -> . PrimitiveType DOT CLASS
    (144) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (145) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (194) ShiftExpression -> . AdditiveExpression
    (195) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (196) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (197) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (146) MethodAccess -> . QualifiedName
    (191) AdditiveExpression -> . MultiplicativeExpression
    (192) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (193) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (187) MultiplicativeExpression -> . CastExpression
    (188) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (189) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (190) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (183) CastExpression -> . UnaryExpression

    SEMICOLON       shift and go to state 132
    IDENTIFIER      shift and go to state 134
    CASE            shift and go to state 130
    DEFAULT         shift and go to state 123
    BREAK           shift and go to state 99
    CONTINUE        shift and go to state 116
    RETURN          shift and go to state 95
    LCURPAREN       shift and go to state 57
    WHILE           shift and go to state 125
    FOR             shift and go to state 105
    IF              shift and go to state 155
    DO              shift and go to state 142
    OP_INC          shift and go to state 106
    OP_DEC          shift and go to state 126
    PLUS            shift and go to state 90
    MINUS           shift and go to state 89
    ~               shift and go to state 141
    NOT             shift and go to state 119
    THIS            shift and go to state 91
    SUPER           shift and go to state 158
    NULL            shift and go to state 145
    LROUNPAREN      shift and go to state 118
    INT_CONST       shift and go to state 131
    FLOAT_CONST     shift and go to state 86
    STRING          shift and go to state 151
    CHAR_CONST      shift and go to state 144
    BOOLEAN_CONST   shift and go to state 157
    NEW             shift and go to state 127
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    LabelStatement                 shift and go to state 94
    ArithmeticUnaryOperator        shift and go to state 97
    AssignmentExpression           shift and go to state 104
    ExpressionStatement            shift and go to state 84
    JumpStatement                  shift and go to state 124
    RealPostfixExpression          shift and go to state 96
    Statement                      shift and go to state 349
    AndExpression                  shift and go to state 88
    ArrayAccess                    shift and go to state 108
    CastExpression                 shift and go to state 143
    EqualityExpression             shift and go to state 98
    Do                             shift and go to state 146
    LogicalUnaryOperator           shift and go to state 153
    ComplexPrimaryNoParenthesis    shift and go to state 100
    MultiplicativeExpression       shift and go to state 101
    ClassAllocationExpression      shift and go to state 122
    MethodCall                     shift and go to state 102
    ConditionalOrExpression        shift and go to state 133
    ShiftExpression                shift and go to state 149
    SelectionStatement             shift and go to state 103
    NewAllocationExpression        shift and go to state 135
    NotJustName                    shift and go to state 152
    QualifiedName                  shift and go to state 190
    ComplexPrimary                 shift and go to state 121
    PrimitiveType                  shift and go to state 187
    LogicalUnaryExpression         shift and go to state 154
    UnaryExpression                shift and go to state 139
    Expression                     shift and go to state 136
    Block                          shift and go to state 109
    AdditiveExpression             shift and go to state 137
    ArrayAllocationExpression      shift and go to state 110
    ConditionalExpression          shift and go to state 138
    InclusiveOrExpression          shift and go to state 140
    MethodAccess                   shift and go to state 111
    PrimaryExpression              shift and go to state 129
    ExclusiveOrExpression          shift and go to state 113
    ConditionalAndExpression       shift and go to state 92
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    FieldAccess                    shift and go to state 156
    EmptyStatement                 shift and go to state 93
    SpecialName                    shift and go to state 120
    IterationStatement             shift and go to state 159

state 343

    (109) IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .

    RCURPAREN       reduce using rule 109 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    SEMICOLON       reduce using rule 109 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    IDENTIFIER      reduce using rule 109 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    CASE            reduce using rule 109 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    DEFAULT         reduce using rule 109 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    BREAK           reduce using rule 109 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    CONTINUE        reduce using rule 109 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    RETURN          reduce using rule 109 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    LCURPAREN       reduce using rule 109 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    WHILE           reduce using rule 109 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    FOR             reduce using rule 109 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    IF              reduce using rule 109 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    DO              reduce using rule 109 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    BOOLEAN         reduce using rule 109 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    CHAR            reduce using rule 109 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    BYTE            reduce using rule 109 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    SHORT           reduce using rule 109 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    INT             reduce using rule 109 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    LONG            reduce using rule 109 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    FLOAT           reduce using rule 109 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    DOUBLE          reduce using rule 109 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    VOID            reduce using rule 109 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    OP_INC          reduce using rule 109 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    OP_DEC          reduce using rule 109 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    PLUS            reduce using rule 109 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    MINUS           reduce using rule 109 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    ~               reduce using rule 109 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    NOT             reduce using rule 109 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    THIS            reduce using rule 109 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    SUPER           reduce using rule 109 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    NULL            reduce using rule 109 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    LROUNPAREN      reduce using rule 109 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    INT_CONST       reduce using rule 109 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    FLOAT_CONST     reduce using rule 109 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    STRING          reduce using rule 109 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    CHAR_CONST      reduce using rule 109 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    BOOLEAN_CONST   reduce using rule 109 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    NEW             reduce using rule 109 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)
    ELSE            reduce using rule 109 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement .)


state 344

    (108) IterationStatement -> FOR LROUNPAREN ForInit ForExpr Mark_quad ForIncr . RROUNPAREN Mark_quad Statement

    RROUNPAREN      shift and go to state 350


state 345

    (115) ForIncr -> ExpressionStatements .
    (117) ExpressionStatements -> ExpressionStatements . COMMA ExpressionStatement

    RROUNPAREN      reduce using rule 115 (ForIncr -> ExpressionStatements .)
    COMMA           shift and go to state 315


state 346

    (113) ForExpr -> Mark_quad Expression SEMICOLON .

    RROUNPAREN      reduce using rule 113 (ForExpr -> Mark_quad Expression SEMICOLON .)
    OP_INC          reduce using rule 113 (ForExpr -> Mark_quad Expression SEMICOLON .)
    OP_DEC          reduce using rule 113 (ForExpr -> Mark_quad Expression SEMICOLON .)
    PLUS            reduce using rule 113 (ForExpr -> Mark_quad Expression SEMICOLON .)
    MINUS           reduce using rule 113 (ForExpr -> Mark_quad Expression SEMICOLON .)
    ~               reduce using rule 113 (ForExpr -> Mark_quad Expression SEMICOLON .)
    NOT             reduce using rule 113 (ForExpr -> Mark_quad Expression SEMICOLON .)
    IDENTIFIER      reduce using rule 113 (ForExpr -> Mark_quad Expression SEMICOLON .)
    THIS            reduce using rule 113 (ForExpr -> Mark_quad Expression SEMICOLON .)
    SUPER           reduce using rule 113 (ForExpr -> Mark_quad Expression SEMICOLON .)
    NULL            reduce using rule 113 (ForExpr -> Mark_quad Expression SEMICOLON .)
    LROUNPAREN      reduce using rule 113 (ForExpr -> Mark_quad Expression SEMICOLON .)
    INT_CONST       reduce using rule 113 (ForExpr -> Mark_quad Expression SEMICOLON .)
    FLOAT_CONST     reduce using rule 113 (ForExpr -> Mark_quad Expression SEMICOLON .)
    STRING          reduce using rule 113 (ForExpr -> Mark_quad Expression SEMICOLON .)
    CHAR_CONST      reduce using rule 113 (ForExpr -> Mark_quad Expression SEMICOLON .)
    BOOLEAN_CONST   reduce using rule 113 (ForExpr -> Mark_quad Expression SEMICOLON .)
    NEW             reduce using rule 113 (ForExpr -> Mark_quad Expression SEMICOLON .)
    BOOLEAN         reduce using rule 113 (ForExpr -> Mark_quad Expression SEMICOLON .)
    CHAR            reduce using rule 113 (ForExpr -> Mark_quad Expression SEMICOLON .)
    BYTE            reduce using rule 113 (ForExpr -> Mark_quad Expression SEMICOLON .)
    SHORT           reduce using rule 113 (ForExpr -> Mark_quad Expression SEMICOLON .)
    INT             reduce using rule 113 (ForExpr -> Mark_quad Expression SEMICOLON .)
    LONG            reduce using rule 113 (ForExpr -> Mark_quad Expression SEMICOLON .)
    FLOAT           reduce using rule 113 (ForExpr -> Mark_quad Expression SEMICOLON .)
    DOUBLE          reduce using rule 113 (ForExpr -> Mark_quad Expression SEMICOLON .)
    VOID            reduce using rule 113 (ForExpr -> Mark_quad Expression SEMICOLON .)


state 347

    (103) IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while . Statement
    (86) Statement -> . EmptyStatement Mark_quad
    (87) Statement -> . LabelStatement Mark_quad
    (88) Statement -> . ExpressionStatement SEMICOLON Mark_quad
    (89) Statement -> . JumpStatement Mark_quad
    (90) Statement -> . Block Mark_quad
    (91) Statement -> . IterationStatement Mark_quad
    (92) Statement -> . SelectionStatement Mark_quad
    (94) EmptyStatement -> . SEMICOLON
    (95) LabelStatement -> . IDENTIFIER COLON
    (96) LabelStatement -> . CASE ConstantExpression COLON
    (97) LabelStatement -> . DEFAULT COLON
    (98) ExpressionStatement -> . Expression
    (118) JumpStatement -> . BREAK SEMICOLON
    (119) JumpStatement -> . CONTINUE SEMICOLON
    (120) JumpStatement -> . RETURN Expression SEMICOLON
    (121) JumpStatement -> . RETURN SEMICOLON
    (79) Block -> . LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN
    (80) Block -> . LCURPAREN RCURPAREN
    (103) IterationStatement -> . WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement
    (105) IterationStatement -> . Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON
    (108) IterationStatement -> . FOR LROUNPAREN ForInit ForExpr Mark_quad ForIncr RROUNPAREN Mark_quad Statement
    (109) IterationStatement -> . FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement
    (99) SelectionStatement -> . IF LROUNPAREN Expression RROUNPAREN Mark_if Statement
    (100) SelectionStatement -> . IF LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement
    (224) Expression -> . AssignmentExpression
    (106) Do -> . DO
    (218) AssignmentExpression -> . ConditionalExpression
    (219) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (216) ConditionalExpression -> . ConditionalOrExpression
    (217) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (173) UnaryExpression -> . OP_INC UnaryExpression
    (174) UnaryExpression -> . OP_DEC UnaryExpression
    (175) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (176) UnaryExpression -> . LogicalUnaryExpression
    (214) ConditionalOrExpression -> . ConditionalAndExpression
    (215) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (181) ArithmeticUnaryOperator -> . PLUS
    (182) ArithmeticUnaryOperator -> . MINUS
    (177) LogicalUnaryExpression -> . PostfixExpression
    (178) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (212) ConditionalAndExpression -> . InclusiveOrExpression
    (213) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (169) PostfixExpression -> . PrimaryExpression
    (170) PostfixExpression -> . RealPostfixExpression
    (179) LogicalUnaryOperator -> . ~
    (180) LogicalUnaryOperator -> . NOT
    (210) InclusiveOrExpression -> . ExclusiveOrExpression
    (211) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (122) PrimaryExpression -> . QualifiedName
    (123) PrimaryExpression -> . NotJustName
    (171) RealPostfixExpression -> . PostfixExpression OP_INC
    (172) RealPostfixExpression -> . PostfixExpression OP_DEC
    (208) ExclusiveOrExpression -> . AndExpression
    (209) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (124) NotJustName -> . SpecialName
    (125) NotJustName -> . NewAllocationExpression
    (126) NotJustName -> . ComplexPrimary
    (206) AndExpression -> . EqualityExpression
    (207) AndExpression -> . AndExpression & EqualityExpression
    (147) SpecialName -> . THIS
    (148) SpecialName -> . SUPER
    (149) SpecialName -> . NULL
    (152) NewAllocationExpression -> . PlainNewAllocationExpression
    (153) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (127) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (128) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (203) EqualityExpression -> . RelationalExpression
    (204) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (205) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (154) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (155) PlainNewAllocationExpression -> . ClassAllocationExpression
    (156) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (157) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (158) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (129) ComplexPrimaryNoParenthesis -> . INT_CONST
    (130) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (131) ComplexPrimaryNoParenthesis -> . STRING
    (132) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (133) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (134) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (135) ComplexPrimaryNoParenthesis -> . FieldAccess
    (136) ComplexPrimaryNoParenthesis -> . MethodCall
    (198) RelationalExpression -> . ShiftExpression
    (199) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (200) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (201) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (202) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (161) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (162) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (163) ArrayAllocationExpression -> . NEW TypeName Dims
    (159) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (160) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (137) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (138) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (139) FieldAccess -> . NotJustName DOT IDENTIFIER
    (140) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (141) FieldAccess -> . QualifiedName DOT THIS
    (142) FieldAccess -> . QualifiedName DOT CLASS
    (143) FieldAccess -> . PrimitiveType DOT CLASS
    (144) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (145) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (194) ShiftExpression -> . AdditiveExpression
    (195) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (196) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (197) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (146) MethodAccess -> . QualifiedName
    (191) AdditiveExpression -> . MultiplicativeExpression
    (192) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (193) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (187) MultiplicativeExpression -> . CastExpression
    (188) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (189) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (190) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (183) CastExpression -> . UnaryExpression

    SEMICOLON       shift and go to state 132
    IDENTIFIER      shift and go to state 134
    CASE            shift and go to state 130
    DEFAULT         shift and go to state 123
    BREAK           shift and go to state 99
    CONTINUE        shift and go to state 116
    RETURN          shift and go to state 95
    LCURPAREN       shift and go to state 57
    WHILE           shift and go to state 125
    FOR             shift and go to state 105
    IF              shift and go to state 155
    DO              shift and go to state 142
    OP_INC          shift and go to state 106
    OP_DEC          shift and go to state 126
    PLUS            shift and go to state 90
    MINUS           shift and go to state 89
    ~               shift and go to state 141
    NOT             shift and go to state 119
    THIS            shift and go to state 91
    SUPER           shift and go to state 158
    NULL            shift and go to state 145
    LROUNPAREN      shift and go to state 118
    INT_CONST       shift and go to state 131
    FLOAT_CONST     shift and go to state 86
    STRING          shift and go to state 151
    CHAR_CONST      shift and go to state 144
    BOOLEAN_CONST   shift and go to state 157
    NEW             shift and go to state 127
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    LabelStatement                 shift and go to state 94
    ArithmeticUnaryOperator        shift and go to state 97
    AssignmentExpression           shift and go to state 104
    ExpressionStatement            shift and go to state 84
    JumpStatement                  shift and go to state 124
    RealPostfixExpression          shift and go to state 96
    Statement                      shift and go to state 351
    AndExpression                  shift and go to state 88
    ArrayAccess                    shift and go to state 108
    CastExpression                 shift and go to state 143
    EqualityExpression             shift and go to state 98
    Do                             shift and go to state 146
    LogicalUnaryOperator           shift and go to state 153
    ComplexPrimaryNoParenthesis    shift and go to state 100
    MultiplicativeExpression       shift and go to state 101
    ClassAllocationExpression      shift and go to state 122
    MethodCall                     shift and go to state 102
    ConditionalOrExpression        shift and go to state 133
    ShiftExpression                shift and go to state 149
    SelectionStatement             shift and go to state 103
    NewAllocationExpression        shift and go to state 135
    NotJustName                    shift and go to state 152
    QualifiedName                  shift and go to state 190
    ComplexPrimary                 shift and go to state 121
    PrimitiveType                  shift and go to state 187
    LogicalUnaryExpression         shift and go to state 154
    UnaryExpression                shift and go to state 139
    Expression                     shift and go to state 136
    Block                          shift and go to state 109
    AdditiveExpression             shift and go to state 137
    ArrayAllocationExpression      shift and go to state 110
    ConditionalExpression          shift and go to state 138
    InclusiveOrExpression          shift and go to state 140
    MethodAccess                   shift and go to state 111
    PrimaryExpression              shift and go to state 129
    ExclusiveOrExpression          shift and go to state 113
    ConditionalAndExpression       shift and go to state 92
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    FieldAccess                    shift and go to state 156
    EmptyStatement                 shift and go to state 93
    SpecialName                    shift and go to state 120
    IterationStatement             shift and go to state 159

state 348

    (105) IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression . Mark_dowhile RROUNPAREN SEMICOLON
    (107) Mark_dowhile -> .

    RROUNPAREN      reduce using rule 107 (Mark_dowhile -> .)

    Mark_dowhile                   shift and go to state 352

state 349

    (99) SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement .
    (100) SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement . ELSE Mark_else Statement

  ! shift/reduce conflict for ELSE resolved as shift
    RCURPAREN       reduce using rule 99 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    SEMICOLON       reduce using rule 99 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    IDENTIFIER      reduce using rule 99 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    CASE            reduce using rule 99 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    DEFAULT         reduce using rule 99 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    BREAK           reduce using rule 99 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    CONTINUE        reduce using rule 99 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    RETURN          reduce using rule 99 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    LCURPAREN       reduce using rule 99 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    WHILE           reduce using rule 99 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    FOR             reduce using rule 99 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    IF              reduce using rule 99 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    DO              reduce using rule 99 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    BOOLEAN         reduce using rule 99 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    CHAR            reduce using rule 99 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    BYTE            reduce using rule 99 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    SHORT           reduce using rule 99 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    INT             reduce using rule 99 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    LONG            reduce using rule 99 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    FLOAT           reduce using rule 99 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    DOUBLE          reduce using rule 99 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    VOID            reduce using rule 99 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    OP_INC          reduce using rule 99 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    OP_DEC          reduce using rule 99 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    PLUS            reduce using rule 99 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    MINUS           reduce using rule 99 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    ~               reduce using rule 99 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    NOT             reduce using rule 99 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    THIS            reduce using rule 99 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    SUPER           reduce using rule 99 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    NULL            reduce using rule 99 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    LROUNPAREN      reduce using rule 99 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    INT_CONST       reduce using rule 99 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    FLOAT_CONST     reduce using rule 99 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    STRING          reduce using rule 99 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    CHAR_CONST      reduce using rule 99 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    BOOLEAN_CONST   reduce using rule 99 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    NEW             reduce using rule 99 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    ELSE            shift and go to state 353

  ! ELSE            [ reduce using rule 99 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement .) ]


state 350

    (108) IterationStatement -> FOR LROUNPAREN ForInit ForExpr Mark_quad ForIncr RROUNPAREN . Mark_quad Statement
    (93) Mark_quad -> .

    SEMICOLON       reduce using rule 93 (Mark_quad -> .)
    IDENTIFIER      reduce using rule 93 (Mark_quad -> .)
    CASE            reduce using rule 93 (Mark_quad -> .)
    DEFAULT         reduce using rule 93 (Mark_quad -> .)
    BREAK           reduce using rule 93 (Mark_quad -> .)
    CONTINUE        reduce using rule 93 (Mark_quad -> .)
    RETURN          reduce using rule 93 (Mark_quad -> .)
    LCURPAREN       reduce using rule 93 (Mark_quad -> .)
    WHILE           reduce using rule 93 (Mark_quad -> .)
    FOR             reduce using rule 93 (Mark_quad -> .)
    IF              reduce using rule 93 (Mark_quad -> .)
    DO              reduce using rule 93 (Mark_quad -> .)
    OP_INC          reduce using rule 93 (Mark_quad -> .)
    OP_DEC          reduce using rule 93 (Mark_quad -> .)
    PLUS            reduce using rule 93 (Mark_quad -> .)
    MINUS           reduce using rule 93 (Mark_quad -> .)
    ~               reduce using rule 93 (Mark_quad -> .)
    NOT             reduce using rule 93 (Mark_quad -> .)
    THIS            reduce using rule 93 (Mark_quad -> .)
    SUPER           reduce using rule 93 (Mark_quad -> .)
    NULL            reduce using rule 93 (Mark_quad -> .)
    LROUNPAREN      reduce using rule 93 (Mark_quad -> .)
    INT_CONST       reduce using rule 93 (Mark_quad -> .)
    FLOAT_CONST     reduce using rule 93 (Mark_quad -> .)
    STRING          reduce using rule 93 (Mark_quad -> .)
    CHAR_CONST      reduce using rule 93 (Mark_quad -> .)
    BOOLEAN_CONST   reduce using rule 93 (Mark_quad -> .)
    NEW             reduce using rule 93 (Mark_quad -> .)
    BOOLEAN         reduce using rule 93 (Mark_quad -> .)
    CHAR            reduce using rule 93 (Mark_quad -> .)
    BYTE            reduce using rule 93 (Mark_quad -> .)
    SHORT           reduce using rule 93 (Mark_quad -> .)
    INT             reduce using rule 93 (Mark_quad -> .)
    LONG            reduce using rule 93 (Mark_quad -> .)
    FLOAT           reduce using rule 93 (Mark_quad -> .)
    DOUBLE          reduce using rule 93 (Mark_quad -> .)
    VOID            reduce using rule 93 (Mark_quad -> .)

    Mark_quad                      shift and go to state 354

state 351

    (103) IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .

    RCURPAREN       reduce using rule 103 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    SEMICOLON       reduce using rule 103 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    IDENTIFIER      reduce using rule 103 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    CASE            reduce using rule 103 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    DEFAULT         reduce using rule 103 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    BREAK           reduce using rule 103 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    CONTINUE        reduce using rule 103 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    RETURN          reduce using rule 103 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    LCURPAREN       reduce using rule 103 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    WHILE           reduce using rule 103 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    FOR             reduce using rule 103 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    IF              reduce using rule 103 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    DO              reduce using rule 103 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    BOOLEAN         reduce using rule 103 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    CHAR            reduce using rule 103 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    BYTE            reduce using rule 103 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    SHORT           reduce using rule 103 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    INT             reduce using rule 103 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    LONG            reduce using rule 103 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    FLOAT           reduce using rule 103 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    DOUBLE          reduce using rule 103 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    VOID            reduce using rule 103 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    OP_INC          reduce using rule 103 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    OP_DEC          reduce using rule 103 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    PLUS            reduce using rule 103 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    MINUS           reduce using rule 103 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    ~               reduce using rule 103 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    NOT             reduce using rule 103 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    THIS            reduce using rule 103 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    SUPER           reduce using rule 103 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    NULL            reduce using rule 103 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    LROUNPAREN      reduce using rule 103 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    INT_CONST       reduce using rule 103 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    FLOAT_CONST     reduce using rule 103 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    STRING          reduce using rule 103 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    CHAR_CONST      reduce using rule 103 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    BOOLEAN_CONST   reduce using rule 103 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    NEW             reduce using rule 103 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    ELSE            reduce using rule 103 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)


state 352

    (105) IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile . RROUNPAREN SEMICOLON

    RROUNPAREN      shift and go to state 355


state 353

    (100) SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE . Mark_else Statement
    (102) Mark_else -> .

    SEMICOLON       reduce using rule 102 (Mark_else -> .)
    IDENTIFIER      reduce using rule 102 (Mark_else -> .)
    CASE            reduce using rule 102 (Mark_else -> .)
    DEFAULT         reduce using rule 102 (Mark_else -> .)
    BREAK           reduce using rule 102 (Mark_else -> .)
    CONTINUE        reduce using rule 102 (Mark_else -> .)
    RETURN          reduce using rule 102 (Mark_else -> .)
    LCURPAREN       reduce using rule 102 (Mark_else -> .)
    WHILE           reduce using rule 102 (Mark_else -> .)
    FOR             reduce using rule 102 (Mark_else -> .)
    IF              reduce using rule 102 (Mark_else -> .)
    DO              reduce using rule 102 (Mark_else -> .)
    OP_INC          reduce using rule 102 (Mark_else -> .)
    OP_DEC          reduce using rule 102 (Mark_else -> .)
    PLUS            reduce using rule 102 (Mark_else -> .)
    MINUS           reduce using rule 102 (Mark_else -> .)
    ~               reduce using rule 102 (Mark_else -> .)
    NOT             reduce using rule 102 (Mark_else -> .)
    THIS            reduce using rule 102 (Mark_else -> .)
    SUPER           reduce using rule 102 (Mark_else -> .)
    NULL            reduce using rule 102 (Mark_else -> .)
    LROUNPAREN      reduce using rule 102 (Mark_else -> .)
    INT_CONST       reduce using rule 102 (Mark_else -> .)
    FLOAT_CONST     reduce using rule 102 (Mark_else -> .)
    STRING          reduce using rule 102 (Mark_else -> .)
    CHAR_CONST      reduce using rule 102 (Mark_else -> .)
    BOOLEAN_CONST   reduce using rule 102 (Mark_else -> .)
    NEW             reduce using rule 102 (Mark_else -> .)
    BOOLEAN         reduce using rule 102 (Mark_else -> .)
    CHAR            reduce using rule 102 (Mark_else -> .)
    BYTE            reduce using rule 102 (Mark_else -> .)
    SHORT           reduce using rule 102 (Mark_else -> .)
    INT             reduce using rule 102 (Mark_else -> .)
    LONG            reduce using rule 102 (Mark_else -> .)
    FLOAT           reduce using rule 102 (Mark_else -> .)
    DOUBLE          reduce using rule 102 (Mark_else -> .)
    VOID            reduce using rule 102 (Mark_else -> .)

    Mark_else                      shift and go to state 356

state 354

    (108) IterationStatement -> FOR LROUNPAREN ForInit ForExpr Mark_quad ForIncr RROUNPAREN Mark_quad . Statement
    (86) Statement -> . EmptyStatement Mark_quad
    (87) Statement -> . LabelStatement Mark_quad
    (88) Statement -> . ExpressionStatement SEMICOLON Mark_quad
    (89) Statement -> . JumpStatement Mark_quad
    (90) Statement -> . Block Mark_quad
    (91) Statement -> . IterationStatement Mark_quad
    (92) Statement -> . SelectionStatement Mark_quad
    (94) EmptyStatement -> . SEMICOLON
    (95) LabelStatement -> . IDENTIFIER COLON
    (96) LabelStatement -> . CASE ConstantExpression COLON
    (97) LabelStatement -> . DEFAULT COLON
    (98) ExpressionStatement -> . Expression
    (118) JumpStatement -> . BREAK SEMICOLON
    (119) JumpStatement -> . CONTINUE SEMICOLON
    (120) JumpStatement -> . RETURN Expression SEMICOLON
    (121) JumpStatement -> . RETURN SEMICOLON
    (79) Block -> . LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN
    (80) Block -> . LCURPAREN RCURPAREN
    (103) IterationStatement -> . WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement
    (105) IterationStatement -> . Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON
    (108) IterationStatement -> . FOR LROUNPAREN ForInit ForExpr Mark_quad ForIncr RROUNPAREN Mark_quad Statement
    (109) IterationStatement -> . FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement
    (99) SelectionStatement -> . IF LROUNPAREN Expression RROUNPAREN Mark_if Statement
    (100) SelectionStatement -> . IF LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement
    (224) Expression -> . AssignmentExpression
    (106) Do -> . DO
    (218) AssignmentExpression -> . ConditionalExpression
    (219) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (216) ConditionalExpression -> . ConditionalOrExpression
    (217) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (173) UnaryExpression -> . OP_INC UnaryExpression
    (174) UnaryExpression -> . OP_DEC UnaryExpression
    (175) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (176) UnaryExpression -> . LogicalUnaryExpression
    (214) ConditionalOrExpression -> . ConditionalAndExpression
    (215) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (181) ArithmeticUnaryOperator -> . PLUS
    (182) ArithmeticUnaryOperator -> . MINUS
    (177) LogicalUnaryExpression -> . PostfixExpression
    (178) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (212) ConditionalAndExpression -> . InclusiveOrExpression
    (213) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (169) PostfixExpression -> . PrimaryExpression
    (170) PostfixExpression -> . RealPostfixExpression
    (179) LogicalUnaryOperator -> . ~
    (180) LogicalUnaryOperator -> . NOT
    (210) InclusiveOrExpression -> . ExclusiveOrExpression
    (211) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (122) PrimaryExpression -> . QualifiedName
    (123) PrimaryExpression -> . NotJustName
    (171) RealPostfixExpression -> . PostfixExpression OP_INC
    (172) RealPostfixExpression -> . PostfixExpression OP_DEC
    (208) ExclusiveOrExpression -> . AndExpression
    (209) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (124) NotJustName -> . SpecialName
    (125) NotJustName -> . NewAllocationExpression
    (126) NotJustName -> . ComplexPrimary
    (206) AndExpression -> . EqualityExpression
    (207) AndExpression -> . AndExpression & EqualityExpression
    (147) SpecialName -> . THIS
    (148) SpecialName -> . SUPER
    (149) SpecialName -> . NULL
    (152) NewAllocationExpression -> . PlainNewAllocationExpression
    (153) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (127) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (128) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (203) EqualityExpression -> . RelationalExpression
    (204) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (205) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (154) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (155) PlainNewAllocationExpression -> . ClassAllocationExpression
    (156) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (157) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (158) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (129) ComplexPrimaryNoParenthesis -> . INT_CONST
    (130) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (131) ComplexPrimaryNoParenthesis -> . STRING
    (132) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (133) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (134) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (135) ComplexPrimaryNoParenthesis -> . FieldAccess
    (136) ComplexPrimaryNoParenthesis -> . MethodCall
    (198) RelationalExpression -> . ShiftExpression
    (199) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (200) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (201) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (202) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (161) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (162) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (163) ArrayAllocationExpression -> . NEW TypeName Dims
    (159) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (160) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (137) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (138) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (139) FieldAccess -> . NotJustName DOT IDENTIFIER
    (140) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (141) FieldAccess -> . QualifiedName DOT THIS
    (142) FieldAccess -> . QualifiedName DOT CLASS
    (143) FieldAccess -> . PrimitiveType DOT CLASS
    (144) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (145) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (194) ShiftExpression -> . AdditiveExpression
    (195) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (196) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (197) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (146) MethodAccess -> . QualifiedName
    (191) AdditiveExpression -> . MultiplicativeExpression
    (192) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (193) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (187) MultiplicativeExpression -> . CastExpression
    (188) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (189) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (190) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (183) CastExpression -> . UnaryExpression

    SEMICOLON       shift and go to state 132
    IDENTIFIER      shift and go to state 134
    CASE            shift and go to state 130
    DEFAULT         shift and go to state 123
    BREAK           shift and go to state 99
    CONTINUE        shift and go to state 116
    RETURN          shift and go to state 95
    LCURPAREN       shift and go to state 57
    WHILE           shift and go to state 125
    FOR             shift and go to state 105
    IF              shift and go to state 155
    DO              shift and go to state 142
    OP_INC          shift and go to state 106
    OP_DEC          shift and go to state 126
    PLUS            shift and go to state 90
    MINUS           shift and go to state 89
    ~               shift and go to state 141
    NOT             shift and go to state 119
    THIS            shift and go to state 91
    SUPER           shift and go to state 158
    NULL            shift and go to state 145
    LROUNPAREN      shift and go to state 118
    INT_CONST       shift and go to state 131
    FLOAT_CONST     shift and go to state 86
    STRING          shift and go to state 151
    CHAR_CONST      shift and go to state 144
    BOOLEAN_CONST   shift and go to state 157
    NEW             shift and go to state 127
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    LabelStatement                 shift and go to state 94
    ArithmeticUnaryOperator        shift and go to state 97
    AssignmentExpression           shift and go to state 104
    ExpressionStatement            shift and go to state 84
    JumpStatement                  shift and go to state 124
    RealPostfixExpression          shift and go to state 96
    Statement                      shift and go to state 357
    AndExpression                  shift and go to state 88
    ArrayAccess                    shift and go to state 108
    CastExpression                 shift and go to state 143
    EqualityExpression             shift and go to state 98
    Do                             shift and go to state 146
    LogicalUnaryOperator           shift and go to state 153
    ComplexPrimaryNoParenthesis    shift and go to state 100
    MultiplicativeExpression       shift and go to state 101
    ClassAllocationExpression      shift and go to state 122
    MethodCall                     shift and go to state 102
    ConditionalOrExpression        shift and go to state 133
    ShiftExpression                shift and go to state 149
    SelectionStatement             shift and go to state 103
    NewAllocationExpression        shift and go to state 135
    NotJustName                    shift and go to state 152
    QualifiedName                  shift and go to state 190
    ComplexPrimary                 shift and go to state 121
    PrimitiveType                  shift and go to state 187
    LogicalUnaryExpression         shift and go to state 154
    UnaryExpression                shift and go to state 139
    Expression                     shift and go to state 136
    Block                          shift and go to state 109
    AdditiveExpression             shift and go to state 137
    ArrayAllocationExpression      shift and go to state 110
    ConditionalExpression          shift and go to state 138
    InclusiveOrExpression          shift and go to state 140
    MethodAccess                   shift and go to state 111
    PrimaryExpression              shift and go to state 129
    ExclusiveOrExpression          shift and go to state 113
    ConditionalAndExpression       shift and go to state 92
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    FieldAccess                    shift and go to state 156
    EmptyStatement                 shift and go to state 93
    SpecialName                    shift and go to state 120
    IterationStatement             shift and go to state 159

state 355

    (105) IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN . SEMICOLON

    SEMICOLON       shift and go to state 358


state 356

    (100) SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else . Statement
    (86) Statement -> . EmptyStatement Mark_quad
    (87) Statement -> . LabelStatement Mark_quad
    (88) Statement -> . ExpressionStatement SEMICOLON Mark_quad
    (89) Statement -> . JumpStatement Mark_quad
    (90) Statement -> . Block Mark_quad
    (91) Statement -> . IterationStatement Mark_quad
    (92) Statement -> . SelectionStatement Mark_quad
    (94) EmptyStatement -> . SEMICOLON
    (95) LabelStatement -> . IDENTIFIER COLON
    (96) LabelStatement -> . CASE ConstantExpression COLON
    (97) LabelStatement -> . DEFAULT COLON
    (98) ExpressionStatement -> . Expression
    (118) JumpStatement -> . BREAK SEMICOLON
    (119) JumpStatement -> . CONTINUE SEMICOLON
    (120) JumpStatement -> . RETURN Expression SEMICOLON
    (121) JumpStatement -> . RETURN SEMICOLON
    (79) Block -> . LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN
    (80) Block -> . LCURPAREN RCURPAREN
    (103) IterationStatement -> . WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement
    (105) IterationStatement -> . Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON
    (108) IterationStatement -> . FOR LROUNPAREN ForInit ForExpr Mark_quad ForIncr RROUNPAREN Mark_quad Statement
    (109) IterationStatement -> . FOR LROUNPAREN ForInit ForExpr RROUNPAREN Statement
    (99) SelectionStatement -> . IF LROUNPAREN Expression RROUNPAREN Mark_if Statement
    (100) SelectionStatement -> . IF LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement
    (224) Expression -> . AssignmentExpression
    (106) Do -> . DO
    (218) AssignmentExpression -> . ConditionalExpression
    (219) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (216) ConditionalExpression -> . ConditionalOrExpression
    (217) ConditionalExpression -> . ConditionalOrExpression ? Expression COLON ConditionalExpression
    (173) UnaryExpression -> . OP_INC UnaryExpression
    (174) UnaryExpression -> . OP_DEC UnaryExpression
    (175) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (176) UnaryExpression -> . LogicalUnaryExpression
    (214) ConditionalOrExpression -> . ConditionalAndExpression
    (215) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (181) ArithmeticUnaryOperator -> . PLUS
    (182) ArithmeticUnaryOperator -> . MINUS
    (177) LogicalUnaryExpression -> . PostfixExpression
    (178) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (212) ConditionalAndExpression -> . InclusiveOrExpression
    (213) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (169) PostfixExpression -> . PrimaryExpression
    (170) PostfixExpression -> . RealPostfixExpression
    (179) LogicalUnaryOperator -> . ~
    (180) LogicalUnaryOperator -> . NOT
    (210) InclusiveOrExpression -> . ExclusiveOrExpression
    (211) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (122) PrimaryExpression -> . QualifiedName
    (123) PrimaryExpression -> . NotJustName
    (171) RealPostfixExpression -> . PostfixExpression OP_INC
    (172) RealPostfixExpression -> . PostfixExpression OP_DEC
    (208) ExclusiveOrExpression -> . AndExpression
    (209) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (124) NotJustName -> . SpecialName
    (125) NotJustName -> . NewAllocationExpression
    (126) NotJustName -> . ComplexPrimary
    (206) AndExpression -> . EqualityExpression
    (207) AndExpression -> . AndExpression & EqualityExpression
    (147) SpecialName -> . THIS
    (148) SpecialName -> . SUPER
    (149) SpecialName -> . NULL
    (152) NewAllocationExpression -> . PlainNewAllocationExpression
    (153) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (127) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (128) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (203) EqualityExpression -> . RelationalExpression
    (204) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (205) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (154) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (155) PlainNewAllocationExpression -> . ClassAllocationExpression
    (156) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (157) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (158) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (129) ComplexPrimaryNoParenthesis -> . INT_CONST
    (130) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (131) ComplexPrimaryNoParenthesis -> . STRING
    (132) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (133) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (134) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (135) ComplexPrimaryNoParenthesis -> . FieldAccess
    (136) ComplexPrimaryNoParenthesis -> . MethodCall
    (198) RelationalExpression -> . ShiftExpression
    (199) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (200) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (201) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (202) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (161) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (162) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (163) ArrayAllocationExpression -> . NEW TypeName Dims
    (159) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (160) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (137) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (138) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (139) FieldAccess -> . NotJustName DOT IDENTIFIER
    (140) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (141) FieldAccess -> . QualifiedName DOT THIS
    (142) FieldAccess -> . QualifiedName DOT CLASS
    (143) FieldAccess -> . PrimitiveType DOT CLASS
    (144) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (145) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (194) ShiftExpression -> . AdditiveExpression
    (195) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (196) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (197) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (146) MethodAccess -> . QualifiedName
    (191) AdditiveExpression -> . MultiplicativeExpression
    (192) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (193) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (187) MultiplicativeExpression -> . CastExpression
    (188) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (189) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (190) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (183) CastExpression -> . UnaryExpression

    SEMICOLON       shift and go to state 132
    IDENTIFIER      shift and go to state 134
    CASE            shift and go to state 130
    DEFAULT         shift and go to state 123
    BREAK           shift and go to state 99
    CONTINUE        shift and go to state 116
    RETURN          shift and go to state 95
    LCURPAREN       shift and go to state 57
    WHILE           shift and go to state 125
    FOR             shift and go to state 105
    IF              shift and go to state 155
    DO              shift and go to state 142
    OP_INC          shift and go to state 106
    OP_DEC          shift and go to state 126
    PLUS            shift and go to state 90
    MINUS           shift and go to state 89
    ~               shift and go to state 141
    NOT             shift and go to state 119
    THIS            shift and go to state 91
    SUPER           shift and go to state 158
    NULL            shift and go to state 145
    LROUNPAREN      shift and go to state 118
    INT_CONST       shift and go to state 131
    FLOAT_CONST     shift and go to state 86
    STRING          shift and go to state 151
    CHAR_CONST      shift and go to state 144
    BOOLEAN_CONST   shift and go to state 157
    NEW             shift and go to state 127
    BOOLEAN         shift and go to state 66
    CHAR            shift and go to state 56
    BYTE            shift and go to state 67
    SHORT           shift and go to state 40
    INT             shift and go to state 63
    LONG            shift and go to state 49
    FLOAT           shift and go to state 65
    DOUBLE          shift and go to state 64
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    LabelStatement                 shift and go to state 94
    ArithmeticUnaryOperator        shift and go to state 97
    AssignmentExpression           shift and go to state 104
    ExpressionStatement            shift and go to state 84
    JumpStatement                  shift and go to state 124
    RealPostfixExpression          shift and go to state 96
    Statement                      shift and go to state 359
    AndExpression                  shift and go to state 88
    ArrayAccess                    shift and go to state 108
    CastExpression                 shift and go to state 143
    EqualityExpression             shift and go to state 98
    Do                             shift and go to state 146
    LogicalUnaryOperator           shift and go to state 153
    ComplexPrimaryNoParenthesis    shift and go to state 100
    MultiplicativeExpression       shift and go to state 101
    ClassAllocationExpression      shift and go to state 122
    MethodCall                     shift and go to state 102
    ConditionalOrExpression        shift and go to state 133
    ShiftExpression                shift and go to state 149
    SelectionStatement             shift and go to state 103
    NewAllocationExpression        shift and go to state 135
    NotJustName                    shift and go to state 152
    QualifiedName                  shift and go to state 190
    ComplexPrimary                 shift and go to state 121
    PrimitiveType                  shift and go to state 187
    LogicalUnaryExpression         shift and go to state 154
    UnaryExpression                shift and go to state 139
    Expression                     shift and go to state 136
    Block                          shift and go to state 109
    AdditiveExpression             shift and go to state 137
    ArrayAllocationExpression      shift and go to state 110
    ConditionalExpression          shift and go to state 138
    InclusiveOrExpression          shift and go to state 140
    MethodAccess                   shift and go to state 111
    PrimaryExpression              shift and go to state 129
    ExclusiveOrExpression          shift and go to state 113
    ConditionalAndExpression       shift and go to state 92
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    FieldAccess                    shift and go to state 156
    EmptyStatement                 shift and go to state 93
    SpecialName                    shift and go to state 120
    IterationStatement             shift and go to state 159

state 357

    (108) IterationStatement -> FOR LROUNPAREN ForInit ForExpr Mark_quad ForIncr RROUNPAREN Mark_quad Statement .

    RCURPAREN       reduce using rule 108 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr Mark_quad ForIncr RROUNPAREN Mark_quad Statement .)
    SEMICOLON       reduce using rule 108 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr Mark_quad ForIncr RROUNPAREN Mark_quad Statement .)
    IDENTIFIER      reduce using rule 108 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr Mark_quad ForIncr RROUNPAREN Mark_quad Statement .)
    CASE            reduce using rule 108 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr Mark_quad ForIncr RROUNPAREN Mark_quad Statement .)
    DEFAULT         reduce using rule 108 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr Mark_quad ForIncr RROUNPAREN Mark_quad Statement .)
    BREAK           reduce using rule 108 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr Mark_quad ForIncr RROUNPAREN Mark_quad Statement .)
    CONTINUE        reduce using rule 108 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr Mark_quad ForIncr RROUNPAREN Mark_quad Statement .)
    RETURN          reduce using rule 108 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr Mark_quad ForIncr RROUNPAREN Mark_quad Statement .)
    LCURPAREN       reduce using rule 108 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr Mark_quad ForIncr RROUNPAREN Mark_quad Statement .)
    WHILE           reduce using rule 108 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr Mark_quad ForIncr RROUNPAREN Mark_quad Statement .)
    FOR             reduce using rule 108 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr Mark_quad ForIncr RROUNPAREN Mark_quad Statement .)
    IF              reduce using rule 108 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr Mark_quad ForIncr RROUNPAREN Mark_quad Statement .)
    DO              reduce using rule 108 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr Mark_quad ForIncr RROUNPAREN Mark_quad Statement .)
    BOOLEAN         reduce using rule 108 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr Mark_quad ForIncr RROUNPAREN Mark_quad Statement .)
    CHAR            reduce using rule 108 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr Mark_quad ForIncr RROUNPAREN Mark_quad Statement .)
    BYTE            reduce using rule 108 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr Mark_quad ForIncr RROUNPAREN Mark_quad Statement .)
    SHORT           reduce using rule 108 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr Mark_quad ForIncr RROUNPAREN Mark_quad Statement .)
    INT             reduce using rule 108 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr Mark_quad ForIncr RROUNPAREN Mark_quad Statement .)
    LONG            reduce using rule 108 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr Mark_quad ForIncr RROUNPAREN Mark_quad Statement .)
    FLOAT           reduce using rule 108 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr Mark_quad ForIncr RROUNPAREN Mark_quad Statement .)
    DOUBLE          reduce using rule 108 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr Mark_quad ForIncr RROUNPAREN Mark_quad Statement .)
    VOID            reduce using rule 108 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr Mark_quad ForIncr RROUNPAREN Mark_quad Statement .)
    OP_INC          reduce using rule 108 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr Mark_quad ForIncr RROUNPAREN Mark_quad Statement .)
    OP_DEC          reduce using rule 108 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr Mark_quad ForIncr RROUNPAREN Mark_quad Statement .)
    PLUS            reduce using rule 108 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr Mark_quad ForIncr RROUNPAREN Mark_quad Statement .)
    MINUS           reduce using rule 108 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr Mark_quad ForIncr RROUNPAREN Mark_quad Statement .)
    ~               reduce using rule 108 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr Mark_quad ForIncr RROUNPAREN Mark_quad Statement .)
    NOT             reduce using rule 108 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr Mark_quad ForIncr RROUNPAREN Mark_quad Statement .)
    THIS            reduce using rule 108 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr Mark_quad ForIncr RROUNPAREN Mark_quad Statement .)
    SUPER           reduce using rule 108 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr Mark_quad ForIncr RROUNPAREN Mark_quad Statement .)
    NULL            reduce using rule 108 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr Mark_quad ForIncr RROUNPAREN Mark_quad Statement .)
    LROUNPAREN      reduce using rule 108 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr Mark_quad ForIncr RROUNPAREN Mark_quad Statement .)
    INT_CONST       reduce using rule 108 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr Mark_quad ForIncr RROUNPAREN Mark_quad Statement .)
    FLOAT_CONST     reduce using rule 108 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr Mark_quad ForIncr RROUNPAREN Mark_quad Statement .)
    STRING          reduce using rule 108 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr Mark_quad ForIncr RROUNPAREN Mark_quad Statement .)
    CHAR_CONST      reduce using rule 108 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr Mark_quad ForIncr RROUNPAREN Mark_quad Statement .)
    BOOLEAN_CONST   reduce using rule 108 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr Mark_quad ForIncr RROUNPAREN Mark_quad Statement .)
    NEW             reduce using rule 108 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr Mark_quad ForIncr RROUNPAREN Mark_quad Statement .)
    ELSE            reduce using rule 108 (IterationStatement -> FOR LROUNPAREN ForInit ForExpr Mark_quad ForIncr RROUNPAREN Mark_quad Statement .)


state 358

    (105) IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .

    RCURPAREN       reduce using rule 105 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 105 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 105 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    CASE            reduce using rule 105 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    DEFAULT         reduce using rule 105 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    BREAK           reduce using rule 105 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    CONTINUE        reduce using rule 105 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    RETURN          reduce using rule 105 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    LCURPAREN       reduce using rule 105 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    WHILE           reduce using rule 105 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    FOR             reduce using rule 105 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    IF              reduce using rule 105 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    DO              reduce using rule 105 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    BOOLEAN         reduce using rule 105 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    CHAR            reduce using rule 105 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    BYTE            reduce using rule 105 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    SHORT           reduce using rule 105 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    INT             reduce using rule 105 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    LONG            reduce using rule 105 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    FLOAT           reduce using rule 105 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    DOUBLE          reduce using rule 105 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    VOID            reduce using rule 105 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    OP_INC          reduce using rule 105 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    OP_DEC          reduce using rule 105 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    PLUS            reduce using rule 105 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    MINUS           reduce using rule 105 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    ~               reduce using rule 105 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    NOT             reduce using rule 105 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    THIS            reduce using rule 105 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    SUPER           reduce using rule 105 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    NULL            reduce using rule 105 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    LROUNPAREN      reduce using rule 105 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    INT_CONST       reduce using rule 105 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    FLOAT_CONST     reduce using rule 105 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    STRING          reduce using rule 105 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    CHAR_CONST      reduce using rule 105 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    BOOLEAN_CONST   reduce using rule 105 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    NEW             reduce using rule 105 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    ELSE            reduce using rule 105 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)


state 359

    (100) SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .

    RCURPAREN       reduce using rule 100 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    SEMICOLON       reduce using rule 100 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    IDENTIFIER      reduce using rule 100 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    CASE            reduce using rule 100 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    DEFAULT         reduce using rule 100 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    BREAK           reduce using rule 100 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    CONTINUE        reduce using rule 100 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    RETURN          reduce using rule 100 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    LCURPAREN       reduce using rule 100 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    WHILE           reduce using rule 100 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    FOR             reduce using rule 100 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    IF              reduce using rule 100 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    DO              reduce using rule 100 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    BOOLEAN         reduce using rule 100 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    CHAR            reduce using rule 100 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    BYTE            reduce using rule 100 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    SHORT           reduce using rule 100 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    INT             reduce using rule 100 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    LONG            reduce using rule 100 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    FLOAT           reduce using rule 100 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    DOUBLE          reduce using rule 100 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    VOID            reduce using rule 100 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    OP_INC          reduce using rule 100 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    OP_DEC          reduce using rule 100 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    PLUS            reduce using rule 100 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    MINUS           reduce using rule 100 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    ~               reduce using rule 100 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    NOT             reduce using rule 100 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    THIS            reduce using rule 100 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    SUPER           reduce using rule 100 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    NULL            reduce using rule 100 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    LROUNPAREN      reduce using rule 100 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    INT_CONST       reduce using rule 100 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    FLOAT_CONST     reduce using rule 100 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    STRING          reduce using rule 100 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    CHAR_CONST      reduce using rule 100 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    BOOLEAN_CONST   reduce using rule 100 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    NEW             reduce using rule 100 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    ELSE            reduce using rule 100 (SelectionStatement -> IF LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LSQPAREN in state 147 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 349 resolved as shift
