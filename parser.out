Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    PROTECTED
    COMMENT
    ASS_AND
    ELLIPSIS
    GOTO
    ENUM
    EXTENDS
    STRCITFP
    THROWS
    TRANSIENT
    INTERFACE
    SYNCHRONIZED
    FINAL
    ASS_XOR
    ASS_DIV
    TRY
    LITERAL
    ASS_SHRR
    OPERATOR
    AND
    WHITESPACE
    CONTINUE
    ASS_OR
    NATIVE
    SWITCH
    CATCH
    INSTANCEOF
    ASS_SHR
    ASS_MOD
    ASS_SHL
    IMPLEMENTS
    VOLATILE
    CONST
    KEYWORD
    ABSTRACT
    ASSERT
    FINALLY
    SEPERATOR
    THROW

Grammar

Rule 0     S' -> CompilationUnit
Rule 1     CompilationUnit -> ProgramFile
Rule 2     OP_DIM -> LSQPAREN RSQPAREN
Rule 3     TypeSpecifier -> TypeName
Rule 4     TypeSpecifier -> TypeName Dims
Rule 5     TypeName -> PrimitiveType
Rule 6     TypeName -> QualifiedName
Rule 7     ClassNameList -> QualifiedName
Rule 8     ClassNameList -> ClassNameList COMMA QualifiedName
Rule 9     PrimitiveType -> BOOLEAN
Rule 10    PrimitiveType -> CHAR
Rule 11    PrimitiveType -> BYTE
Rule 12    PrimitiveType -> SHORT
Rule 13    PrimitiveType -> INT
Rule 14    PrimitiveType -> LONG
Rule 15    PrimitiveType -> FLOAT
Rule 16    PrimitiveType -> DOUBLE
Rule 17    PrimitiveType -> VOID
Rule 18    SemiColons -> SEMICOLON
Rule 19    SemiColons -> SemiColons SEMICOLON
Rule 20    ProgramFile -> PackageStatement ImportStatements TypeDeclarations
Rule 21    ProgramFile -> PackageStatement TypeDeclarations
Rule 22    ProgramFile -> ImportStatements TypeDeclarations
Rule 23    ProgramFile -> TypeDeclarations
Rule 24    PackageStatement -> PACKAGE QualifiedName SemiColons
Rule 25    TypeDeclarations -> TypeDeclarationOptSemi
Rule 26    TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi
Rule 27    TypeDeclarationOptSemi -> TypeDeclaration
Rule 28    TypeDeclarationOptSemi -> TypeDeclaration SemiColons
Rule 29    ImportStatements -> ImportStatement
Rule 30    ImportStatements -> ImportStatements ImportStatement
Rule 31    ImportStatement -> IMPORT QualifiedName SemiColons
Rule 32    ImportStatement -> IMPORT QualifiedName DOT MULT SemiColons
Rule 33    QualifiedName -> IDENTIFIER
Rule 34    QualifiedName -> QualifiedName DOT IDENTIFIER
Rule 35    TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN
Rule 36    TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN
Rule 37    ClassHeader -> Modifiers ClassWord IDENTIFIER
Rule 38    ClassHeader -> ClassWord IDENTIFIER
Rule 39    Modifiers -> Modifier
Rule 40    Modifiers -> Modifiers Modifier
Rule 41    Modifier -> PUBLIC
Rule 42    Modifier -> PRIVATE
Rule 43    Modifier -> STATIC
Rule 44    ClassWord -> CLASS
Rule 45    FieldDeclarations -> FieldDeclarationOptSemi
Rule 46    FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi
Rule 47    FieldDeclarationOptSemi -> FieldDeclaration
Rule 48    FieldDeclarationOptSemi -> FieldDeclaration SemiColons
Rule 49    FieldDeclaration -> FieldVariableDeclaration SEMICOLON
Rule 50    FieldDeclaration -> MethodDeclaration
Rule 51    FieldDeclaration -> ConstructorDeclaration
Rule 52    FieldDeclaration -> StaticInitializer
Rule 53    FieldDeclaration -> NonStaticInitializer
Rule 54    FieldDeclaration -> TypeDeclaration
Rule 55    FieldVariableDeclaration -> Modifiers TypeSpecifier VariableDeclarators
Rule 56    FieldVariableDeclaration -> TypeSpecifier VariableDeclarators
Rule 57    VariableDeclarators -> VariableDeclarator
Rule 58    VariableDeclarators -> VariableDeclarators COMMA VariableDeclarator
Rule 59    VariableDeclarator -> DeclaratorName
Rule 60    VariableDeclarator -> DeclaratorName EQUAL VariableInitializer
Rule 61    VariableInitializer -> Expression
Rule 62    MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody
Rule 63    MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody
Rule 64    MethodDeclarator -> DeclaratorName LROUNPAREN ParameterList RROUNPAREN
Rule 65    MethodDeclarator -> DeclaratorName LROUNPAREN RROUNPAREN
Rule 66    ParameterList -> Parameter
Rule 67    ParameterList -> ParameterList COMMA Parameter
Rule 68    Parameter -> TypeSpecifier DeclaratorName
Rule 69    DeclaratorName -> IDENTIFIER
Rule 70    DeclaratorName -> DeclaratorName OP_DIM
Rule 71    MethodBody -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN
Rule 72    MethodBody -> LCURPAREN RCURPAREN
Rule 73    MethodBody -> SEMICOLON
Rule 74    ConstructorDeclaration -> Modifiers ConstructorDeclarator Block
Rule 75    ConstructorDeclaration -> ConstructorDeclarator Block
Rule 76    ConstructorDeclarator -> IDENTIFIER LROUNPAREN ParameterList RROUNPAREN
Rule 77    ConstructorDeclarator -> IDENTIFIER LROUNPAREN RROUNPAREN
Rule 78    StaticInitializer -> STATIC Block
Rule 79    NonStaticInitializer -> Block
Rule 80    Block -> Bl LocalVariableDeclarationsAndStatements Br
Rule 81    Block -> Bl Br
Rule 82    Bl -> LCURPAREN
Rule 83    Br -> RCURPAREN
Rule 84    LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement
Rule 85    LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement
Rule 86    LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement
Rule 87    LocalVariableDeclarationOrStatement -> Statement
Rule 88    LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON
Rule 89    Statement -> EmptyStatement Mark_quad
Rule 90    Statement -> LabelStatement Mark_quad
Rule 91    Statement -> ExpressionStatement SEMICOLON Mark_quad
Rule 92    Statement -> JumpStatement Mark_quad
Rule 93    Statement -> Block Mark_quad
Rule 94    Statement -> IterationStatement Mark_quad
Rule 95    Statement -> SelectionStatement Mark_quad
Rule 96    Mark_quad -> <empty>
Rule 97    EmptyStatement -> SEMICOLON
Rule 98    LabelStatement -> IDENTIFIER COLON
Rule 99    LabelStatement -> CASE ConstantExpression COLON
Rule 100   LabelStatement -> DEFAULT COLON
Rule 101   ExpressionStatement -> Expression
Rule 102   SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement
Rule 103   SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement
Rule 104   If -> IF
Rule 105   Mark_if -> <empty>
Rule 106   Mark_else -> <empty>
Rule 107   IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement
Rule 108   Mark_while -> <empty>
Rule 109   IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON
Rule 110   Do -> DO
Rule 111   Mark_dowhile -> <empty>
Rule 112   IterationStatement -> Fr LROUNPAREN ForInit ForExpr Mark_for ForIncr RROUNPAREN Mark_quad Statement
Rule 113   Fr -> FOR
Rule 114   Mark_for -> <empty>
Rule 115   ForInit -> ExpressionStatements SEMICOLON
Rule 116   ForInit -> LocalVariableDeclarationStatement
Rule 117   ForInit -> SEMICOLON
Rule 118   ForExpr -> Mark_quad Expression SEMICOLON
Rule 119   ForExpr -> Mark_quad SEMICOLON
Rule 120   ForIncr -> ExpressionStatements
Rule 121   ExpressionStatements -> ExpressionStatement
Rule 122   ExpressionStatements -> ExpressionStatements COMMA ExpressionStatement
Rule 123   JumpStatement -> BREAK SEMICOLON
Rule 124   JumpStatement -> RETURN Expression SEMICOLON
Rule 125   JumpStatement -> RETURN SEMICOLON
Rule 126   PrimaryExpression -> QualifiedName
Rule 127   PrimaryExpression -> NotJustName
Rule 128   NotJustName -> SpecialName
Rule 129   NotJustName -> NewAllocationExpression
Rule 130   NotJustName -> ComplexPrimary
Rule 131   ComplexPrimary -> LROUNPAREN Expression RROUNPAREN
Rule 132   ComplexPrimary -> ComplexPrimaryNoParenthesis
Rule 133   ComplexPrimaryNoParenthesis -> INT_CONST
Rule 134   ComplexPrimaryNoParenthesis -> FLOAT_CONST
Rule 135   ComplexPrimaryNoParenthesis -> STRING
Rule 136   ComplexPrimaryNoParenthesis -> CHAR_CONST
Rule 137   ComplexPrimaryNoParenthesis -> BOOLEAN_CONST
Rule 138   ComplexPrimaryNoParenthesis -> ArrayAccess
Rule 139   ComplexPrimaryNoParenthesis -> FieldAccess
Rule 140   ComplexPrimaryNoParenthesis -> MethodCall
Rule 141   ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN
Rule 142   ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN
Rule 143   FieldAccess -> NotJustName DOT IDENTIFIER
Rule 144   FieldAccess -> RealPostfixExpression DOT IDENTIFIER
Rule 145   FieldAccess -> QualifiedName DOT THIS
Rule 146   FieldAccess -> QualifiedName DOT CLASS
Rule 147   FieldAccess -> PrimitiveType DOT CLASS
Rule 148   MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN
Rule 149   MethodCall -> MethodAccess LROUNPAREN RROUNPAREN
Rule 150   MethodAccess -> QualifiedName
Rule 151   SpecialName -> THIS
Rule 152   SpecialName -> SUPER
Rule 153   SpecialName -> NULL
Rule 154   ArgumentList -> Expression
Rule 155   ArgumentList -> ArgumentList COMMA Expression
Rule 156   NewAllocationExpression -> PlainNewAllocationExpression
Rule 157   NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression
Rule 158   PlainNewAllocationExpression -> ArrayAllocationExpression
Rule 159   PlainNewAllocationExpression -> ClassAllocationExpression
Rule 160   PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN
Rule 161   PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN
Rule 162   PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
Rule 163   ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
Rule 164   ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN
Rule 165   ArrayAllocationExpression -> NEW TypeName DimExprs Dims
Rule 166   ArrayAllocationExpression -> NEW TypeName DimExprs
Rule 167   ArrayAllocationExpression -> NEW TypeName Dims
Rule 168   DimExprs -> DimExpr
Rule 169   DimExprs -> DimExprs DimExpr
Rule 170   DimExpr -> LSQPAREN Expression RSQPAREN
Rule 171   Dims -> OP_DIM
Rule 172   Dims -> Dims OP_DIM
Rule 173   PostfixExpression -> PrimaryExpression
Rule 174   PostfixExpression -> RealPostfixExpression
Rule 175   RealPostfixExpression -> PostfixExpression OP_INC
Rule 176   RealPostfixExpression -> PostfixExpression OP_DEC
Rule 177   UnaryExpression -> OP_INC UnaryExpression
Rule 178   UnaryExpression -> OP_DEC UnaryExpression
Rule 179   UnaryExpression -> LogicalUnaryExpression
Rule 180   UnaryExpression -> ArithmeticUnaryOperator CastExpression
Rule 181   LogicalUnaryExpression -> PostfixExpression
Rule 182   LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression
Rule 183   LogicalUnaryOperator -> ~
Rule 184   LogicalUnaryOperator -> NOT
Rule 185   ArithmeticUnaryOperator -> PLUS
Rule 186   ArithmeticUnaryOperator -> MINUS
Rule 187   CastExpression -> UnaryExpression
Rule 188   PrimitiveTypeExpression -> PrimitiveType
Rule 189   PrimitiveTypeExpression -> PrimitiveType Dims
Rule 190   ClassTypeExpression -> QualifiedName Dims
Rule 191   MultiplicativeExpression -> CastExpression
Rule 192   MultiplicativeExpression -> MultiplicativeExpression MULT CastExpression
Rule 193   MultiplicativeExpression -> MultiplicativeExpression DIV CastExpression
Rule 194   MultiplicativeExpression -> MultiplicativeExpression MOD CastExpression
Rule 195   AdditiveExpression -> MultiplicativeExpression
Rule 196   AdditiveExpression -> AdditiveExpression PLUS MultiplicativeExpression
Rule 197   AdditiveExpression -> AdditiveExpression MINUS MultiplicativeExpression
Rule 198   ShiftExpression -> AdditiveExpression
Rule 199   ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression
Rule 200   ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression
Rule 201   ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression
Rule 202   RelationalExpression -> ShiftExpression
Rule 203   RelationalExpression -> RelationalExpression LESS ShiftExpression
Rule 204   RelationalExpression -> RelationalExpression MORE ShiftExpression
Rule 205   RelationalExpression -> RelationalExpression OP_LE ShiftExpression
Rule 206   RelationalExpression -> RelationalExpression OP_GE ShiftExpression
Rule 207   EqualityExpression -> RelationalExpression
Rule 208   EqualityExpression -> EqualityExpression OP_EQ RelationalExpression
Rule 209   EqualityExpression -> EqualityExpression OP_NE RelationalExpression
Rule 210   AndExpression -> EqualityExpression
Rule 211   AndExpression -> AndExpression & EqualityExpression
Rule 212   ExclusiveOrExpression -> AndExpression
Rule 213   ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression
Rule 214   InclusiveOrExpression -> ExclusiveOrExpression
Rule 215   InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression
Rule 216   ConditionalAndExpression -> InclusiveOrExpression
Rule 217   ConditionalAndExpression -> ConditionalAndExpression OP_LAND InclusiveOrExpression
Rule 218   ConditionalOrExpression -> ConditionalAndExpression
Rule 219   ConditionalOrExpression -> ConditionalOrExpression OP_LOR ConditionalAndExpression
Rule 220   ConditionalExpression -> ConditionalOrExpression
Rule 221   ConditionalExpression -> ConditionalOrExpression Mark_quad Ques Mark_quad Expression Mark_quad Cln Mark_quad ConditionalExpression Mark_quad
Rule 222   Ques -> QUES
Rule 223   Cln -> COLON
Rule 224   AssignmentExpression -> ConditionalExpression
Rule 225   AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression
Rule 226   AssignmentOperator -> EQUAL
Rule 227   AssignmentOperator -> ASS_MUL
Rule 228   AssignmentOperator -> ASS_ADD
Rule 229   AssignmentOperator -> ASS_SUB
Rule 230   Expression -> AssignmentExpression
Rule 231   ConstantExpression -> ConditionalExpression

Terminals, with rules where they appear

&                    : 211
ABSTRACT             : 
AND                  : 
ASSERT               : 
ASS_ADD              : 228
ASS_AND              : 
ASS_DIV              : 
ASS_MOD              : 
ASS_MUL              : 227
ASS_OR               : 
ASS_SHL              : 
ASS_SHR              : 
ASS_SHRR             : 
ASS_SUB              : 229
ASS_XOR              : 
BOOLEAN              : 9
BOOLEAN_CONST        : 137
BREAK                : 123
BYTE                 : 11
CASE                 : 99
CATCH                : 
CHAR                 : 10
CHAR_CONST           : 136
CLASS                : 44 146 147
COLON                : 98 99 100 223
COMMA                : 8 58 67 122 155
COMMENT              : 
CONST                : 
CONTINUE             : 
DEFAULT              : 100
DIV                  : 193
DO                   : 110
DOT                  : 32 34 143 144 145 146 147 157
DOUBLE               : 16
ELLIPSIS             : 
ELSE                 : 103
ENUM                 : 
EQUAL                : 60 226
EXTENDS              : 
FINAL                : 
FINALLY              : 
FLOAT                : 15
FLOAT_CONST          : 134
FOR                  : 113
GOTO                 : 
IDENTIFIER           : 33 34 37 38 69 76 77 98 143 144
IF                   : 104
IMPLEMENTS           : 
IMPORT               : 31 32
INSTANCEOF           : 
INT                  : 13
INTERFACE            : 
INT_CONST            : 133
KEYWORD              : 
LCURPAREN            : 35 36 71 72 82 160 161 162
LESS                 : 203
LITERAL              : 
LONG                 : 14
LROUNPAREN           : 64 65 76 77 102 103 107 109 112 131 148 149 163 164
LSQPAREN             : 2 141 142 170
MINUS                : 186 197
MOD                  : 194
MORE                 : 204
MULT                 : 32 192
NATIVE               : 
NEW                  : 163 164 165 166 167
NOT                  : 184
NULL                 : 153
OPERATOR             : 
OP_DEC               : 176 178
OP_EQ                : 208
OP_GE                : 206
OP_INC               : 175 177
OP_LAND              : 217
OP_LE                : 205
OP_LOR               : 219
OP_NE                : 209
OP_SHL               : 199
OP_SHR               : 200
OP_SHRR              : 201
PACKAGE              : 24
PLUS                 : 185 196
PRIVATE              : 42
PROTECTED            : 
PUBLIC               : 41
QUES                 : 222
RCURPAREN            : 35 36 71 72 83 160 161 162
RETURN               : 124 125
RROUNPAREN           : 64 65 76 77 102 103 107 109 112 131 148 149 163 164
RSQPAREN             : 2 141 142 170
SEMICOLON            : 18 19 49 73 88 91 97 109 115 117 118 119 123 124 125
SEPERATOR            : 
SHORT                : 12
STATIC               : 43 78
STRCITFP             : 
STRING               : 135
SUPER                : 152
SWITCH               : 
SYNCHRONIZED         : 
THIS                 : 145 151
THROW                : 
THROWS               : 
TRANSIENT            : 
TRY                  : 
VOID                 : 17
VOLATILE             : 
WHILE                : 107 109
WHITESPACE           : 
^                    : 213
error                : 
|                    : 215
~                    : 183

Nonterminals, with rules where they appear

AdditiveExpression   : 196 197 198 199 200 201
AndExpression        : 211 212 213
ArgumentList         : 148 155 163
ArithmeticUnaryOperator : 180
ArrayAccess          : 138
ArrayAllocationExpression : 158 160
AssignmentExpression : 225 230
AssignmentOperator   : 225
Bl                   : 80 81
Block                : 74 75 78 79 93
Br                   : 80 81
CastExpression       : 180 191 192 193 194
ClassAllocationExpression : 159 161 162
ClassHeader          : 35 36
ClassNameList        : 8
ClassTypeExpression  : 
ClassWord            : 37 38
Cln                  : 221
CompilationUnit      : 0
ComplexPrimary       : 130 142
ComplexPrimaryNoParenthesis : 132
ConditionalAndExpression : 217 218 219
ConditionalExpression : 221 224 231
ConditionalOrExpression : 219 220 221
ConstantExpression   : 99
ConstructorDeclaration : 51
ConstructorDeclarator : 74 75
DeclaratorName       : 59 60 64 65 68 70
DimExpr              : 168 169
DimExprs             : 165 166 169
Dims                 : 4 165 167 172 189 190
Do                   : 109
EmptyStatement       : 89
EqualityExpression   : 208 209 210 211
ExclusiveOrExpression : 213 214 215
Expression           : 61 101 102 103 107 109 118 124 131 141 142 154 155 170 221
ExpressionStatement  : 91 121 122
ExpressionStatements : 115 120 122
FieldAccess          : 139
FieldDeclaration     : 47 48
FieldDeclarationOptSemi : 45 46
FieldDeclarations    : 35 46 162
FieldVariableDeclaration : 49
ForExpr              : 112
ForIncr              : 112
ForInit              : 112
Fr                   : 112
If                   : 102 103
ImportStatement      : 29 30
ImportStatements     : 20 22 30
InclusiveOrExpression : 215 216 217
IterationStatement   : 94
JumpStatement        : 92
LabelStatement       : 90
LocalVariableDeclarationOrStatement : 84 85
LocalVariableDeclarationStatement : 86 116
LocalVariableDeclarationsAndStatements : 71 80 85
LogicalUnaryExpression : 179
LogicalUnaryOperator : 182
Mark_dowhile         : 109
Mark_else            : 103
Mark_for             : 112
Mark_if              : 102 103
Mark_quad            : 89 90 91 92 93 94 95 107 109 112 118 119 221 221 221 221 221
Mark_while           : 107
MethodAccess         : 148 149
MethodBody           : 62 63
MethodCall           : 140
MethodDeclaration    : 50
MethodDeclarator     : 62 63
Modifier             : 39 40
Modifiers            : 37 40 55 62 74
MultiplicativeExpression : 192 193 194 195 196 197
NewAllocationExpression : 129
NonStaticInitializer : 53
NotJustName          : 127 143
OP_DIM               : 70 171 172
PackageStatement     : 20 21
Parameter            : 66 67
ParameterList        : 64 67 76
PlainNewAllocationExpression : 156 157
PostfixExpression    : 175 176 181
PrimaryExpression    : 173
PrimitiveType        : 5 147 188 189
PrimitiveTypeExpression : 
ProgramFile          : 1
QualifiedName        : 6 7 8 24 31 32 34 126 141 145 146 150 157 190
Ques                 : 221
RealPostfixExpression : 144 174
RelationalExpression : 203 204 205 206 207 208 209
SelectionStatement   : 95
SemiColons           : 19 24 28 31 32 48
ShiftExpression      : 199 200 201 202 203 204 205 206
SpecialName          : 128
Statement            : 87 102 103 103 107 109 112
StaticInitializer    : 52
TypeDeclaration      : 27 28 54
TypeDeclarationOptSemi : 25 26
TypeDeclarations     : 20 21 22 23 26
TypeName             : 3 4 163 164 165 166 167
TypeSpecifier        : 55 56 62 63 68 88
UnaryExpression      : 177 178 182 187 225
VariableDeclarator   : 57 58
VariableDeclarators  : 55 56 58 88
VariableInitializer  : 60

Parsing method: LALR

state 0

    (0) S' -> . CompilationUnit
    (1) CompilationUnit -> . ProgramFile
    (20) ProgramFile -> . PackageStatement ImportStatements TypeDeclarations
    (21) ProgramFile -> . PackageStatement TypeDeclarations
    (22) ProgramFile -> . ImportStatements TypeDeclarations
    (23) ProgramFile -> . TypeDeclarations
    (24) PackageStatement -> . PACKAGE QualifiedName SemiColons
    (29) ImportStatements -> . ImportStatement
    (30) ImportStatements -> . ImportStatements ImportStatement
    (25) TypeDeclarations -> . TypeDeclarationOptSemi
    (26) TypeDeclarations -> . TypeDeclarations TypeDeclarationOptSemi
    (31) ImportStatement -> . IMPORT QualifiedName SemiColons
    (32) ImportStatement -> . IMPORT QualifiedName DOT MULT SemiColons
    (27) TypeDeclarationOptSemi -> . TypeDeclaration
    (28) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (35) TypeDeclaration -> . ClassHeader LCURPAREN FieldDeclarations RCURPAREN
    (36) TypeDeclaration -> . ClassHeader LCURPAREN RCURPAREN
    (37) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (38) ClassHeader -> . ClassWord IDENTIFIER
    (39) Modifiers -> . Modifier
    (40) Modifiers -> . Modifiers Modifier
    (44) ClassWord -> . CLASS
    (41) Modifier -> . PUBLIC
    (42) Modifier -> . PRIVATE
    (43) Modifier -> . STATIC

    PACKAGE         shift and go to state 9
    IMPORT          shift and go to state 5
    CLASS           shift and go to state 6
    PUBLIC          shift and go to state 18
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3

    ClassWord                      shift and go to state 14
    Modifiers                      shift and go to state 2
    ProgramFile                    shift and go to state 1
    Modifier                       shift and go to state 12
    TypeDeclaration                shift and go to state 8
    ImportStatements               shift and go to state 15
    TypeDeclarations               shift and go to state 16
    ImportStatement                shift and go to state 11
    ClassHeader                    shift and go to state 17
    PackageStatement               shift and go to state 10
    CompilationUnit                shift and go to state 13
    TypeDeclarationOptSemi         shift and go to state 7

state 1

    (1) CompilationUnit -> ProgramFile .

    $end            reduce using rule 1 (CompilationUnit -> ProgramFile .)


state 2

    (37) ClassHeader -> Modifiers . ClassWord IDENTIFIER
    (40) Modifiers -> Modifiers . Modifier
    (44) ClassWord -> . CLASS
    (41) Modifier -> . PUBLIC
    (42) Modifier -> . PRIVATE
    (43) Modifier -> . STATIC

    CLASS           shift and go to state 6
    PUBLIC          shift and go to state 18
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3

    ClassWord                      shift and go to state 19
    Modifier                       shift and go to state 20

state 3

    (43) Modifier -> STATIC .

    CLASS           reduce using rule 43 (Modifier -> STATIC .)
    PUBLIC          reduce using rule 43 (Modifier -> STATIC .)
    PRIVATE         reduce using rule 43 (Modifier -> STATIC .)
    STATIC          reduce using rule 43 (Modifier -> STATIC .)
    IDENTIFIER      reduce using rule 43 (Modifier -> STATIC .)
    BOOLEAN         reduce using rule 43 (Modifier -> STATIC .)
    CHAR            reduce using rule 43 (Modifier -> STATIC .)
    BYTE            reduce using rule 43 (Modifier -> STATIC .)
    SHORT           reduce using rule 43 (Modifier -> STATIC .)
    INT             reduce using rule 43 (Modifier -> STATIC .)
    LONG            reduce using rule 43 (Modifier -> STATIC .)
    FLOAT           reduce using rule 43 (Modifier -> STATIC .)
    DOUBLE          reduce using rule 43 (Modifier -> STATIC .)
    VOID            reduce using rule 43 (Modifier -> STATIC .)


state 4

    (42) Modifier -> PRIVATE .

    CLASS           reduce using rule 42 (Modifier -> PRIVATE .)
    PUBLIC          reduce using rule 42 (Modifier -> PRIVATE .)
    PRIVATE         reduce using rule 42 (Modifier -> PRIVATE .)
    STATIC          reduce using rule 42 (Modifier -> PRIVATE .)
    IDENTIFIER      reduce using rule 42 (Modifier -> PRIVATE .)
    BOOLEAN         reduce using rule 42 (Modifier -> PRIVATE .)
    CHAR            reduce using rule 42 (Modifier -> PRIVATE .)
    BYTE            reduce using rule 42 (Modifier -> PRIVATE .)
    SHORT           reduce using rule 42 (Modifier -> PRIVATE .)
    INT             reduce using rule 42 (Modifier -> PRIVATE .)
    LONG            reduce using rule 42 (Modifier -> PRIVATE .)
    FLOAT           reduce using rule 42 (Modifier -> PRIVATE .)
    DOUBLE          reduce using rule 42 (Modifier -> PRIVATE .)
    VOID            reduce using rule 42 (Modifier -> PRIVATE .)


state 5

    (31) ImportStatement -> IMPORT . QualifiedName SemiColons
    (32) ImportStatement -> IMPORT . QualifiedName DOT MULT SemiColons
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER

    IDENTIFIER      shift and go to state 22

    QualifiedName                  shift and go to state 21

state 6

    (44) ClassWord -> CLASS .

    IDENTIFIER      reduce using rule 44 (ClassWord -> CLASS .)


state 7

    (25) TypeDeclarations -> TypeDeclarationOptSemi .

    CLASS           reduce using rule 25 (TypeDeclarations -> TypeDeclarationOptSemi .)
    PUBLIC          reduce using rule 25 (TypeDeclarations -> TypeDeclarationOptSemi .)
    PRIVATE         reduce using rule 25 (TypeDeclarations -> TypeDeclarationOptSemi .)
    STATIC          reduce using rule 25 (TypeDeclarations -> TypeDeclarationOptSemi .)
    $end            reduce using rule 25 (TypeDeclarations -> TypeDeclarationOptSemi .)


state 8

    (27) TypeDeclarationOptSemi -> TypeDeclaration .
    (28) TypeDeclarationOptSemi -> TypeDeclaration . SemiColons
    (18) SemiColons -> . SEMICOLON
    (19) SemiColons -> . SemiColons SEMICOLON

    CLASS           reduce using rule 27 (TypeDeclarationOptSemi -> TypeDeclaration .)
    PUBLIC          reduce using rule 27 (TypeDeclarationOptSemi -> TypeDeclaration .)
    PRIVATE         reduce using rule 27 (TypeDeclarationOptSemi -> TypeDeclaration .)
    STATIC          reduce using rule 27 (TypeDeclarationOptSemi -> TypeDeclaration .)
    $end            reduce using rule 27 (TypeDeclarationOptSemi -> TypeDeclaration .)
    SEMICOLON       shift and go to state 24

    SemiColons                     shift and go to state 23

state 9

    (24) PackageStatement -> PACKAGE . QualifiedName SemiColons
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER

    IDENTIFIER      shift and go to state 22

    QualifiedName                  shift and go to state 25

state 10

    (20) ProgramFile -> PackageStatement . ImportStatements TypeDeclarations
    (21) ProgramFile -> PackageStatement . TypeDeclarations
    (29) ImportStatements -> . ImportStatement
    (30) ImportStatements -> . ImportStatements ImportStatement
    (25) TypeDeclarations -> . TypeDeclarationOptSemi
    (26) TypeDeclarations -> . TypeDeclarations TypeDeclarationOptSemi
    (31) ImportStatement -> . IMPORT QualifiedName SemiColons
    (32) ImportStatement -> . IMPORT QualifiedName DOT MULT SemiColons
    (27) TypeDeclarationOptSemi -> . TypeDeclaration
    (28) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (35) TypeDeclaration -> . ClassHeader LCURPAREN FieldDeclarations RCURPAREN
    (36) TypeDeclaration -> . ClassHeader LCURPAREN RCURPAREN
    (37) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (38) ClassHeader -> . ClassWord IDENTIFIER
    (39) Modifiers -> . Modifier
    (40) Modifiers -> . Modifiers Modifier
    (44) ClassWord -> . CLASS
    (41) Modifier -> . PUBLIC
    (42) Modifier -> . PRIVATE
    (43) Modifier -> . STATIC

    IMPORT          shift and go to state 5
    CLASS           shift and go to state 6
    PUBLIC          shift and go to state 18
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3

    ClassWord                      shift and go to state 14
    Modifiers                      shift and go to state 2
    Modifier                       shift and go to state 12
    TypeDeclaration                shift and go to state 8
    ImportStatements               shift and go to state 26
    TypeDeclarations               shift and go to state 27
    ImportStatement                shift and go to state 11
    ClassHeader                    shift and go to state 17
    TypeDeclarationOptSemi         shift and go to state 7

state 11

    (29) ImportStatements -> ImportStatement .

    IMPORT          reduce using rule 29 (ImportStatements -> ImportStatement .)
    CLASS           reduce using rule 29 (ImportStatements -> ImportStatement .)
    PUBLIC          reduce using rule 29 (ImportStatements -> ImportStatement .)
    PRIVATE         reduce using rule 29 (ImportStatements -> ImportStatement .)
    STATIC          reduce using rule 29 (ImportStatements -> ImportStatement .)


state 12

    (39) Modifiers -> Modifier .

    CLASS           reduce using rule 39 (Modifiers -> Modifier .)
    PUBLIC          reduce using rule 39 (Modifiers -> Modifier .)
    PRIVATE         reduce using rule 39 (Modifiers -> Modifier .)
    STATIC          reduce using rule 39 (Modifiers -> Modifier .)
    IDENTIFIER      reduce using rule 39 (Modifiers -> Modifier .)
    BOOLEAN         reduce using rule 39 (Modifiers -> Modifier .)
    CHAR            reduce using rule 39 (Modifiers -> Modifier .)
    BYTE            reduce using rule 39 (Modifiers -> Modifier .)
    SHORT           reduce using rule 39 (Modifiers -> Modifier .)
    INT             reduce using rule 39 (Modifiers -> Modifier .)
    LONG            reduce using rule 39 (Modifiers -> Modifier .)
    FLOAT           reduce using rule 39 (Modifiers -> Modifier .)
    DOUBLE          reduce using rule 39 (Modifiers -> Modifier .)
    VOID            reduce using rule 39 (Modifiers -> Modifier .)


state 13

    (0) S' -> CompilationUnit .



state 14

    (38) ClassHeader -> ClassWord . IDENTIFIER

    IDENTIFIER      shift and go to state 28


state 15

    (22) ProgramFile -> ImportStatements . TypeDeclarations
    (30) ImportStatements -> ImportStatements . ImportStatement
    (25) TypeDeclarations -> . TypeDeclarationOptSemi
    (26) TypeDeclarations -> . TypeDeclarations TypeDeclarationOptSemi
    (31) ImportStatement -> . IMPORT QualifiedName SemiColons
    (32) ImportStatement -> . IMPORT QualifiedName DOT MULT SemiColons
    (27) TypeDeclarationOptSemi -> . TypeDeclaration
    (28) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (35) TypeDeclaration -> . ClassHeader LCURPAREN FieldDeclarations RCURPAREN
    (36) TypeDeclaration -> . ClassHeader LCURPAREN RCURPAREN
    (37) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (38) ClassHeader -> . ClassWord IDENTIFIER
    (39) Modifiers -> . Modifier
    (40) Modifiers -> . Modifiers Modifier
    (44) ClassWord -> . CLASS
    (41) Modifier -> . PUBLIC
    (42) Modifier -> . PRIVATE
    (43) Modifier -> . STATIC

    IMPORT          shift and go to state 5
    CLASS           shift and go to state 6
    PUBLIC          shift and go to state 18
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3

    ClassWord                      shift and go to state 14
    Modifiers                      shift and go to state 2
    TypeDeclaration                shift and go to state 8
    TypeDeclarations               shift and go to state 30
    ImportStatement                shift and go to state 29
    ClassHeader                    shift and go to state 17
    Modifier                       shift and go to state 12
    TypeDeclarationOptSemi         shift and go to state 7

state 16

    (23) ProgramFile -> TypeDeclarations .
    (26) TypeDeclarations -> TypeDeclarations . TypeDeclarationOptSemi
    (27) TypeDeclarationOptSemi -> . TypeDeclaration
    (28) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (35) TypeDeclaration -> . ClassHeader LCURPAREN FieldDeclarations RCURPAREN
    (36) TypeDeclaration -> . ClassHeader LCURPAREN RCURPAREN
    (37) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (38) ClassHeader -> . ClassWord IDENTIFIER
    (39) Modifiers -> . Modifier
    (40) Modifiers -> . Modifiers Modifier
    (44) ClassWord -> . CLASS
    (41) Modifier -> . PUBLIC
    (42) Modifier -> . PRIVATE
    (43) Modifier -> . STATIC

    $end            reduce using rule 23 (ProgramFile -> TypeDeclarations .)
    CLASS           shift and go to state 6
    PUBLIC          shift and go to state 18
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3

    ClassWord                      shift and go to state 14
    Modifiers                      shift and go to state 2
    TypeDeclaration                shift and go to state 8
    ClassHeader                    shift and go to state 17
    Modifier                       shift and go to state 12
    TypeDeclarationOptSemi         shift and go to state 31

state 17

    (35) TypeDeclaration -> ClassHeader . LCURPAREN FieldDeclarations RCURPAREN
    (36) TypeDeclaration -> ClassHeader . LCURPAREN RCURPAREN

    LCURPAREN       shift and go to state 32


state 18

    (41) Modifier -> PUBLIC .

    CLASS           reduce using rule 41 (Modifier -> PUBLIC .)
    PUBLIC          reduce using rule 41 (Modifier -> PUBLIC .)
    PRIVATE         reduce using rule 41 (Modifier -> PUBLIC .)
    STATIC          reduce using rule 41 (Modifier -> PUBLIC .)
    IDENTIFIER      reduce using rule 41 (Modifier -> PUBLIC .)
    BOOLEAN         reduce using rule 41 (Modifier -> PUBLIC .)
    CHAR            reduce using rule 41 (Modifier -> PUBLIC .)
    BYTE            reduce using rule 41 (Modifier -> PUBLIC .)
    SHORT           reduce using rule 41 (Modifier -> PUBLIC .)
    INT             reduce using rule 41 (Modifier -> PUBLIC .)
    LONG            reduce using rule 41 (Modifier -> PUBLIC .)
    FLOAT           reduce using rule 41 (Modifier -> PUBLIC .)
    DOUBLE          reduce using rule 41 (Modifier -> PUBLIC .)
    VOID            reduce using rule 41 (Modifier -> PUBLIC .)


state 19

    (37) ClassHeader -> Modifiers ClassWord . IDENTIFIER

    IDENTIFIER      shift and go to state 33


state 20

    (40) Modifiers -> Modifiers Modifier .

    CLASS           reduce using rule 40 (Modifiers -> Modifiers Modifier .)
    PUBLIC          reduce using rule 40 (Modifiers -> Modifiers Modifier .)
    PRIVATE         reduce using rule 40 (Modifiers -> Modifiers Modifier .)
    STATIC          reduce using rule 40 (Modifiers -> Modifiers Modifier .)
    IDENTIFIER      reduce using rule 40 (Modifiers -> Modifiers Modifier .)
    BOOLEAN         reduce using rule 40 (Modifiers -> Modifiers Modifier .)
    CHAR            reduce using rule 40 (Modifiers -> Modifiers Modifier .)
    BYTE            reduce using rule 40 (Modifiers -> Modifiers Modifier .)
    SHORT           reduce using rule 40 (Modifiers -> Modifiers Modifier .)
    INT             reduce using rule 40 (Modifiers -> Modifiers Modifier .)
    LONG            reduce using rule 40 (Modifiers -> Modifiers Modifier .)
    FLOAT           reduce using rule 40 (Modifiers -> Modifiers Modifier .)
    DOUBLE          reduce using rule 40 (Modifiers -> Modifiers Modifier .)
    VOID            reduce using rule 40 (Modifiers -> Modifiers Modifier .)


state 21

    (31) ImportStatement -> IMPORT QualifiedName . SemiColons
    (32) ImportStatement -> IMPORT QualifiedName . DOT MULT SemiColons
    (34) QualifiedName -> QualifiedName . DOT IDENTIFIER
    (18) SemiColons -> . SEMICOLON
    (19) SemiColons -> . SemiColons SEMICOLON

    DOT             shift and go to state 35
    SEMICOLON       shift and go to state 24

    SemiColons                     shift and go to state 34

state 22

    (33) QualifiedName -> IDENTIFIER .

    DOT             reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    LSQPAREN        reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    OP_INC          reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    OP_DEC          reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    EQUAL           reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    ASS_MUL         reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    ASS_ADD         reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    ASS_SUB         reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    MULT            reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    DIV             reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    MOD             reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    PLUS            reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    MINUS           reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    OP_SHL          reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    OP_SHR          reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    OP_SHRR         reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    LESS            reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    MORE            reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    OP_LE           reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    OP_GE           reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    OP_EQ           reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    OP_NE           reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    &               reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    ^               reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    |               reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    OP_LAND         reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    OP_LOR          reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    QUES            reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    RROUNPAREN      reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    COMMA           reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    LROUNPAREN      reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    SEMICOLON       reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    COLON           reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    RSQPAREN        reduce using rule 33 (QualifiedName -> IDENTIFIER .)


state 23

    (28) TypeDeclarationOptSemi -> TypeDeclaration SemiColons .
    (19) SemiColons -> SemiColons . SEMICOLON

    CLASS           reduce using rule 28 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    PUBLIC          reduce using rule 28 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    PRIVATE         reduce using rule 28 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    STATIC          reduce using rule 28 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    $end            reduce using rule 28 (TypeDeclarationOptSemi -> TypeDeclaration SemiColons .)
    SEMICOLON       shift and go to state 36


state 24

    (18) SemiColons -> SEMICOLON .

    SEMICOLON       reduce using rule 18 (SemiColons -> SEMICOLON .)
    RCURPAREN       reduce using rule 18 (SemiColons -> SEMICOLON .)
    STATIC          reduce using rule 18 (SemiColons -> SEMICOLON .)
    IDENTIFIER      reduce using rule 18 (SemiColons -> SEMICOLON .)
    PUBLIC          reduce using rule 18 (SemiColons -> SEMICOLON .)
    PRIVATE         reduce using rule 18 (SemiColons -> SEMICOLON .)
    LCURPAREN       reduce using rule 18 (SemiColons -> SEMICOLON .)
    CLASS           reduce using rule 18 (SemiColons -> SEMICOLON .)
    BOOLEAN         reduce using rule 18 (SemiColons -> SEMICOLON .)
    CHAR            reduce using rule 18 (SemiColons -> SEMICOLON .)
    BYTE            reduce using rule 18 (SemiColons -> SEMICOLON .)
    SHORT           reduce using rule 18 (SemiColons -> SEMICOLON .)
    INT             reduce using rule 18 (SemiColons -> SEMICOLON .)
    LONG            reduce using rule 18 (SemiColons -> SEMICOLON .)
    FLOAT           reduce using rule 18 (SemiColons -> SEMICOLON .)
    DOUBLE          reduce using rule 18 (SemiColons -> SEMICOLON .)
    VOID            reduce using rule 18 (SemiColons -> SEMICOLON .)
    $end            reduce using rule 18 (SemiColons -> SEMICOLON .)
    IMPORT          reduce using rule 18 (SemiColons -> SEMICOLON .)


state 25

    (24) PackageStatement -> PACKAGE QualifiedName . SemiColons
    (34) QualifiedName -> QualifiedName . DOT IDENTIFIER
    (18) SemiColons -> . SEMICOLON
    (19) SemiColons -> . SemiColons SEMICOLON

    DOT             shift and go to state 38
    SEMICOLON       shift and go to state 24

    SemiColons                     shift and go to state 37

state 26

    (20) ProgramFile -> PackageStatement ImportStatements . TypeDeclarations
    (30) ImportStatements -> ImportStatements . ImportStatement
    (25) TypeDeclarations -> . TypeDeclarationOptSemi
    (26) TypeDeclarations -> . TypeDeclarations TypeDeclarationOptSemi
    (31) ImportStatement -> . IMPORT QualifiedName SemiColons
    (32) ImportStatement -> . IMPORT QualifiedName DOT MULT SemiColons
    (27) TypeDeclarationOptSemi -> . TypeDeclaration
    (28) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (35) TypeDeclaration -> . ClassHeader LCURPAREN FieldDeclarations RCURPAREN
    (36) TypeDeclaration -> . ClassHeader LCURPAREN RCURPAREN
    (37) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (38) ClassHeader -> . ClassWord IDENTIFIER
    (39) Modifiers -> . Modifier
    (40) Modifiers -> . Modifiers Modifier
    (44) ClassWord -> . CLASS
    (41) Modifier -> . PUBLIC
    (42) Modifier -> . PRIVATE
    (43) Modifier -> . STATIC

    IMPORT          shift and go to state 5
    CLASS           shift and go to state 6
    PUBLIC          shift and go to state 18
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3

    ClassWord                      shift and go to state 14
    Modifiers                      shift and go to state 2
    Modifier                       shift and go to state 12
    TypeDeclaration                shift and go to state 8
    TypeDeclarations               shift and go to state 39
    ImportStatement                shift and go to state 29
    ClassHeader                    shift and go to state 17
    TypeDeclarationOptSemi         shift and go to state 7

state 27

    (21) ProgramFile -> PackageStatement TypeDeclarations .
    (26) TypeDeclarations -> TypeDeclarations . TypeDeclarationOptSemi
    (27) TypeDeclarationOptSemi -> . TypeDeclaration
    (28) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (35) TypeDeclaration -> . ClassHeader LCURPAREN FieldDeclarations RCURPAREN
    (36) TypeDeclaration -> . ClassHeader LCURPAREN RCURPAREN
    (37) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (38) ClassHeader -> . ClassWord IDENTIFIER
    (39) Modifiers -> . Modifier
    (40) Modifiers -> . Modifiers Modifier
    (44) ClassWord -> . CLASS
    (41) Modifier -> . PUBLIC
    (42) Modifier -> . PRIVATE
    (43) Modifier -> . STATIC

    $end            reduce using rule 21 (ProgramFile -> PackageStatement TypeDeclarations .)
    CLASS           shift and go to state 6
    PUBLIC          shift and go to state 18
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3

    ClassWord                      shift and go to state 14
    Modifiers                      shift and go to state 2
    Modifier                       shift and go to state 12
    TypeDeclaration                shift and go to state 8
    ClassHeader                    shift and go to state 17
    TypeDeclarationOptSemi         shift and go to state 31

state 28

    (38) ClassHeader -> ClassWord IDENTIFIER .

    LCURPAREN       reduce using rule 38 (ClassHeader -> ClassWord IDENTIFIER .)


state 29

    (30) ImportStatements -> ImportStatements ImportStatement .

    IMPORT          reduce using rule 30 (ImportStatements -> ImportStatements ImportStatement .)
    CLASS           reduce using rule 30 (ImportStatements -> ImportStatements ImportStatement .)
    PUBLIC          reduce using rule 30 (ImportStatements -> ImportStatements ImportStatement .)
    PRIVATE         reduce using rule 30 (ImportStatements -> ImportStatements ImportStatement .)
    STATIC          reduce using rule 30 (ImportStatements -> ImportStatements ImportStatement .)


state 30

    (22) ProgramFile -> ImportStatements TypeDeclarations .
    (26) TypeDeclarations -> TypeDeclarations . TypeDeclarationOptSemi
    (27) TypeDeclarationOptSemi -> . TypeDeclaration
    (28) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (35) TypeDeclaration -> . ClassHeader LCURPAREN FieldDeclarations RCURPAREN
    (36) TypeDeclaration -> . ClassHeader LCURPAREN RCURPAREN
    (37) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (38) ClassHeader -> . ClassWord IDENTIFIER
    (39) Modifiers -> . Modifier
    (40) Modifiers -> . Modifiers Modifier
    (44) ClassWord -> . CLASS
    (41) Modifier -> . PUBLIC
    (42) Modifier -> . PRIVATE
    (43) Modifier -> . STATIC

    $end            reduce using rule 22 (ProgramFile -> ImportStatements TypeDeclarations .)
    CLASS           shift and go to state 6
    PUBLIC          shift and go to state 18
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3

    ClassWord                      shift and go to state 14
    Modifiers                      shift and go to state 2
    TypeDeclaration                shift and go to state 8
    ClassHeader                    shift and go to state 17
    Modifier                       shift and go to state 12
    TypeDeclarationOptSemi         shift and go to state 31

state 31

    (26) TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .

    CLASS           reduce using rule 26 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)
    PUBLIC          reduce using rule 26 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)
    PRIVATE         reduce using rule 26 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)
    STATIC          reduce using rule 26 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)
    $end            reduce using rule 26 (TypeDeclarations -> TypeDeclarations TypeDeclarationOptSemi .)


state 32

    (35) TypeDeclaration -> ClassHeader LCURPAREN . FieldDeclarations RCURPAREN
    (36) TypeDeclaration -> ClassHeader LCURPAREN . RCURPAREN
    (45) FieldDeclarations -> . FieldDeclarationOptSemi
    (46) FieldDeclarations -> . FieldDeclarations FieldDeclarationOptSemi
    (47) FieldDeclarationOptSemi -> . FieldDeclaration
    (48) FieldDeclarationOptSemi -> . FieldDeclaration SemiColons
    (49) FieldDeclaration -> . FieldVariableDeclaration SEMICOLON
    (50) FieldDeclaration -> . MethodDeclaration
    (51) FieldDeclaration -> . ConstructorDeclaration
    (52) FieldDeclaration -> . StaticInitializer
    (53) FieldDeclaration -> . NonStaticInitializer
    (54) FieldDeclaration -> . TypeDeclaration
    (55) FieldVariableDeclaration -> . Modifiers TypeSpecifier VariableDeclarators
    (56) FieldVariableDeclaration -> . TypeSpecifier VariableDeclarators
    (62) MethodDeclaration -> . Modifiers TypeSpecifier MethodDeclarator MethodBody
    (63) MethodDeclaration -> . TypeSpecifier MethodDeclarator MethodBody
    (74) ConstructorDeclaration -> . Modifiers ConstructorDeclarator Block
    (75) ConstructorDeclaration -> . ConstructorDeclarator Block
    (78) StaticInitializer -> . STATIC Block
    (79) NonStaticInitializer -> . Block
    (35) TypeDeclaration -> . ClassHeader LCURPAREN FieldDeclarations RCURPAREN
    (36) TypeDeclaration -> . ClassHeader LCURPAREN RCURPAREN
    (39) Modifiers -> . Modifier
    (40) Modifiers -> . Modifiers Modifier
    (3) TypeSpecifier -> . TypeName
    (4) TypeSpecifier -> . TypeName Dims
    (76) ConstructorDeclarator -> . IDENTIFIER LROUNPAREN ParameterList RROUNPAREN
    (77) ConstructorDeclarator -> . IDENTIFIER LROUNPAREN RROUNPAREN
    (80) Block -> . Bl LocalVariableDeclarationsAndStatements Br
    (81) Block -> . Bl Br
    (37) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (38) ClassHeader -> . ClassWord IDENTIFIER
    (41) Modifier -> . PUBLIC
    (42) Modifier -> . PRIVATE
    (43) Modifier -> . STATIC
    (5) TypeName -> . PrimitiveType
    (6) TypeName -> . QualifiedName
    (82) Bl -> . LCURPAREN
    (44) ClassWord -> . CLASS
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER

    RCURPAREN       shift and go to state 59
    STATIC          shift and go to state 48
    IDENTIFIER      shift and go to state 55
    PUBLIC          shift and go to state 18
    PRIVATE         shift and go to state 4
    LCURPAREN       shift and go to state 58
    CLASS           shift and go to state 6
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43

    ConstructorDeclaration         shift and go to state 41
    FieldVariableDeclaration       shift and go to state 42
    TypeDeclaration                shift and go to state 44
    PrimitiveType                  shift and go to state 45
    StaticInitializer              shift and go to state 46
    NonStaticInitializer           shift and go to state 50
    TypeSpecifier                  shift and go to state 51
    QualifiedName                  shift and go to state 52
    Bl                             shift and go to state 53
    TypeName                       shift and go to state 54
    MethodDeclaration              shift and go to state 56
    Modifiers                      shift and go to state 47
    FieldDeclarations              shift and go to state 60
    Modifier                       shift and go to state 12
    Block                          shift and go to state 61
    ClassWord                      shift and go to state 14
    FieldDeclarationOptSemi        shift and go to state 62
    ConstructorDeclarator          shift and go to state 63
    ClassHeader                    shift and go to state 17
    FieldDeclaration               shift and go to state 69

state 33

    (37) ClassHeader -> Modifiers ClassWord IDENTIFIER .

    LCURPAREN       reduce using rule 37 (ClassHeader -> Modifiers ClassWord IDENTIFIER .)


state 34

    (31) ImportStatement -> IMPORT QualifiedName SemiColons .
    (19) SemiColons -> SemiColons . SEMICOLON

    IMPORT          reduce using rule 31 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    CLASS           reduce using rule 31 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    PUBLIC          reduce using rule 31 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    PRIVATE         reduce using rule 31 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    STATIC          reduce using rule 31 (ImportStatement -> IMPORT QualifiedName SemiColons .)
    SEMICOLON       shift and go to state 36


state 35

    (32) ImportStatement -> IMPORT QualifiedName DOT . MULT SemiColons
    (34) QualifiedName -> QualifiedName DOT . IDENTIFIER

    MULT            shift and go to state 71
    IDENTIFIER      shift and go to state 70


state 36

    (19) SemiColons -> SemiColons SEMICOLON .

    SEMICOLON       reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    RCURPAREN       reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    STATIC          reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    IDENTIFIER      reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    PUBLIC          reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    PRIVATE         reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    LCURPAREN       reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    CLASS           reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    BOOLEAN         reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    CHAR            reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    BYTE            reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    SHORT           reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    INT             reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    LONG            reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    FLOAT           reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    DOUBLE          reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    VOID            reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    $end            reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)
    IMPORT          reduce using rule 19 (SemiColons -> SemiColons SEMICOLON .)


state 37

    (24) PackageStatement -> PACKAGE QualifiedName SemiColons .
    (19) SemiColons -> SemiColons . SEMICOLON

    IMPORT          reduce using rule 24 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    CLASS           reduce using rule 24 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    PUBLIC          reduce using rule 24 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    PRIVATE         reduce using rule 24 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    STATIC          reduce using rule 24 (PackageStatement -> PACKAGE QualifiedName SemiColons .)
    SEMICOLON       shift and go to state 36


state 38

    (34) QualifiedName -> QualifiedName DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 70


state 39

    (20) ProgramFile -> PackageStatement ImportStatements TypeDeclarations .
    (26) TypeDeclarations -> TypeDeclarations . TypeDeclarationOptSemi
    (27) TypeDeclarationOptSemi -> . TypeDeclaration
    (28) TypeDeclarationOptSemi -> . TypeDeclaration SemiColons
    (35) TypeDeclaration -> . ClassHeader LCURPAREN FieldDeclarations RCURPAREN
    (36) TypeDeclaration -> . ClassHeader LCURPAREN RCURPAREN
    (37) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (38) ClassHeader -> . ClassWord IDENTIFIER
    (39) Modifiers -> . Modifier
    (40) Modifiers -> . Modifiers Modifier
    (44) ClassWord -> . CLASS
    (41) Modifier -> . PUBLIC
    (42) Modifier -> . PRIVATE
    (43) Modifier -> . STATIC

    $end            reduce using rule 20 (ProgramFile -> PackageStatement ImportStatements TypeDeclarations .)
    CLASS           shift and go to state 6
    PUBLIC          shift and go to state 18
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3

    ClassWord                      shift and go to state 14
    Modifiers                      shift and go to state 2
    Modifier                       shift and go to state 12
    TypeDeclaration                shift and go to state 8
    ClassHeader                    shift and go to state 17
    TypeDeclarationOptSemi         shift and go to state 31

state 40

    (12) PrimitiveType -> SHORT .

    DOT             reduce using rule 12 (PrimitiveType -> SHORT .)
    LSQPAREN        reduce using rule 12 (PrimitiveType -> SHORT .)
    IDENTIFIER      reduce using rule 12 (PrimitiveType -> SHORT .)
    LROUNPAREN      reduce using rule 12 (PrimitiveType -> SHORT .)


state 41

    (51) FieldDeclaration -> ConstructorDeclaration .

    SEMICOLON       reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    RCURPAREN       reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    STATIC          reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    IDENTIFIER      reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    PUBLIC          reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    PRIVATE         reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    LCURPAREN       reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    CLASS           reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    BOOLEAN         reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    CHAR            reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    BYTE            reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    SHORT           reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    INT             reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    LONG            reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    FLOAT           reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    DOUBLE          reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)
    VOID            reduce using rule 51 (FieldDeclaration -> ConstructorDeclaration .)


state 42

    (49) FieldDeclaration -> FieldVariableDeclaration . SEMICOLON

    SEMICOLON       shift and go to state 72


state 43

    (17) PrimitiveType -> VOID .

    DOT             reduce using rule 17 (PrimitiveType -> VOID .)
    LSQPAREN        reduce using rule 17 (PrimitiveType -> VOID .)
    IDENTIFIER      reduce using rule 17 (PrimitiveType -> VOID .)
    LROUNPAREN      reduce using rule 17 (PrimitiveType -> VOID .)


state 44

    (54) FieldDeclaration -> TypeDeclaration .

    SEMICOLON       reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    RCURPAREN       reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    STATIC          reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    IDENTIFIER      reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    PUBLIC          reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    PRIVATE         reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    LCURPAREN       reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    CLASS           reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    BOOLEAN         reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    CHAR            reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    BYTE            reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    SHORT           reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    INT             reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    LONG            reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    FLOAT           reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    DOUBLE          reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)
    VOID            reduce using rule 54 (FieldDeclaration -> TypeDeclaration .)


state 45

    (5) TypeName -> PrimitiveType .

    LSQPAREN        reduce using rule 5 (TypeName -> PrimitiveType .)
    IDENTIFIER      reduce using rule 5 (TypeName -> PrimitiveType .)
    LROUNPAREN      reduce using rule 5 (TypeName -> PrimitiveType .)


state 46

    (52) FieldDeclaration -> StaticInitializer .

    SEMICOLON       reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    RCURPAREN       reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    STATIC          reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    IDENTIFIER      reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    PUBLIC          reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    PRIVATE         reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    LCURPAREN       reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    CLASS           reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    BOOLEAN         reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    CHAR            reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    BYTE            reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    SHORT           reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    INT             reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    LONG            reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    FLOAT           reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    DOUBLE          reduce using rule 52 (FieldDeclaration -> StaticInitializer .)
    VOID            reduce using rule 52 (FieldDeclaration -> StaticInitializer .)


state 47

    (55) FieldVariableDeclaration -> Modifiers . TypeSpecifier VariableDeclarators
    (62) MethodDeclaration -> Modifiers . TypeSpecifier MethodDeclarator MethodBody
    (74) ConstructorDeclaration -> Modifiers . ConstructorDeclarator Block
    (40) Modifiers -> Modifiers . Modifier
    (37) ClassHeader -> Modifiers . ClassWord IDENTIFIER
    (3) TypeSpecifier -> . TypeName
    (4) TypeSpecifier -> . TypeName Dims
    (76) ConstructorDeclarator -> . IDENTIFIER LROUNPAREN ParameterList RROUNPAREN
    (77) ConstructorDeclarator -> . IDENTIFIER LROUNPAREN RROUNPAREN
    (41) Modifier -> . PUBLIC
    (42) Modifier -> . PRIVATE
    (43) Modifier -> . STATIC
    (44) ClassWord -> . CLASS
    (5) TypeName -> . PrimitiveType
    (6) TypeName -> . QualifiedName
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER

    IDENTIFIER      shift and go to state 55
    PUBLIC          shift and go to state 18
    PRIVATE         shift and go to state 4
    STATIC          shift and go to state 3
    CLASS           shift and go to state 6
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43

    QualifiedName                  shift and go to state 52
    ConstructorDeclarator          shift and go to state 74
    PrimitiveType                  shift and go to state 45
    ClassWord                      shift and go to state 19
    TypeName                       shift and go to state 54
    Modifier                       shift and go to state 20
    TypeSpecifier                  shift and go to state 73

state 48

    (78) StaticInitializer -> STATIC . Block
    (43) Modifier -> STATIC .
    (80) Block -> . Bl LocalVariableDeclarationsAndStatements Br
    (81) Block -> . Bl Br
    (82) Bl -> . LCURPAREN

    IDENTIFIER      reduce using rule 43 (Modifier -> STATIC .)
    PUBLIC          reduce using rule 43 (Modifier -> STATIC .)
    PRIVATE         reduce using rule 43 (Modifier -> STATIC .)
    STATIC          reduce using rule 43 (Modifier -> STATIC .)
    CLASS           reduce using rule 43 (Modifier -> STATIC .)
    BOOLEAN         reduce using rule 43 (Modifier -> STATIC .)
    CHAR            reduce using rule 43 (Modifier -> STATIC .)
    BYTE            reduce using rule 43 (Modifier -> STATIC .)
    SHORT           reduce using rule 43 (Modifier -> STATIC .)
    INT             reduce using rule 43 (Modifier -> STATIC .)
    LONG            reduce using rule 43 (Modifier -> STATIC .)
    FLOAT           reduce using rule 43 (Modifier -> STATIC .)
    DOUBLE          reduce using rule 43 (Modifier -> STATIC .)
    VOID            reduce using rule 43 (Modifier -> STATIC .)
    LCURPAREN       shift and go to state 58

    Bl                             shift and go to state 53
    Block                          shift and go to state 75

state 49

    (14) PrimitiveType -> LONG .

    DOT             reduce using rule 14 (PrimitiveType -> LONG .)
    LSQPAREN        reduce using rule 14 (PrimitiveType -> LONG .)
    IDENTIFIER      reduce using rule 14 (PrimitiveType -> LONG .)
    LROUNPAREN      reduce using rule 14 (PrimitiveType -> LONG .)


state 50

    (53) FieldDeclaration -> NonStaticInitializer .

    SEMICOLON       reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    RCURPAREN       reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    STATIC          reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    IDENTIFIER      reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    PUBLIC          reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    PRIVATE         reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    LCURPAREN       reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    CLASS           reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    BOOLEAN         reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    CHAR            reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    BYTE            reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    SHORT           reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    INT             reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    LONG            reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    FLOAT           reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    DOUBLE          reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)
    VOID            reduce using rule 53 (FieldDeclaration -> NonStaticInitializer .)


state 51

    (56) FieldVariableDeclaration -> TypeSpecifier . VariableDeclarators
    (63) MethodDeclaration -> TypeSpecifier . MethodDeclarator MethodBody
    (57) VariableDeclarators -> . VariableDeclarator
    (58) VariableDeclarators -> . VariableDeclarators COMMA VariableDeclarator
    (64) MethodDeclarator -> . DeclaratorName LROUNPAREN ParameterList RROUNPAREN
    (65) MethodDeclarator -> . DeclaratorName LROUNPAREN RROUNPAREN
    (59) VariableDeclarator -> . DeclaratorName
    (60) VariableDeclarator -> . DeclaratorName EQUAL VariableInitializer
    (69) DeclaratorName -> . IDENTIFIER
    (70) DeclaratorName -> . DeclaratorName OP_DIM

    IDENTIFIER      shift and go to state 79

    VariableDeclarators            shift and go to state 76
    DeclaratorName                 shift and go to state 77
    MethodDeclarator               shift and go to state 78
    VariableDeclarator             shift and go to state 80

state 52

    (6) TypeName -> QualifiedName .
    (34) QualifiedName -> QualifiedName . DOT IDENTIFIER

    LSQPAREN        reduce using rule 6 (TypeName -> QualifiedName .)
    IDENTIFIER      reduce using rule 6 (TypeName -> QualifiedName .)
    LROUNPAREN      reduce using rule 6 (TypeName -> QualifiedName .)
    DOT             shift and go to state 38


state 53

    (80) Block -> Bl . LocalVariableDeclarationsAndStatements Br
    (81) Block -> Bl . Br
    (84) LocalVariableDeclarationsAndStatements -> . LocalVariableDeclarationOrStatement
    (85) LocalVariableDeclarationsAndStatements -> . LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement
    (83) Br -> . RCURPAREN
    (86) LocalVariableDeclarationOrStatement -> . LocalVariableDeclarationStatement
    (87) LocalVariableDeclarationOrStatement -> . Statement
    (88) LocalVariableDeclarationStatement -> . TypeSpecifier VariableDeclarators SEMICOLON
    (89) Statement -> . EmptyStatement Mark_quad
    (90) Statement -> . LabelStatement Mark_quad
    (91) Statement -> . ExpressionStatement SEMICOLON Mark_quad
    (92) Statement -> . JumpStatement Mark_quad
    (93) Statement -> . Block Mark_quad
    (94) Statement -> . IterationStatement Mark_quad
    (95) Statement -> . SelectionStatement Mark_quad
    (3) TypeSpecifier -> . TypeName
    (4) TypeSpecifier -> . TypeName Dims
    (97) EmptyStatement -> . SEMICOLON
    (98) LabelStatement -> . IDENTIFIER COLON
    (99) LabelStatement -> . CASE ConstantExpression COLON
    (100) LabelStatement -> . DEFAULT COLON
    (101) ExpressionStatement -> . Expression
    (123) JumpStatement -> . BREAK SEMICOLON
    (124) JumpStatement -> . RETURN Expression SEMICOLON
    (125) JumpStatement -> . RETURN SEMICOLON
    (80) Block -> . Bl LocalVariableDeclarationsAndStatements Br
    (81) Block -> . Bl Br
    (107) IterationStatement -> . WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement
    (109) IterationStatement -> . Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON
    (112) IterationStatement -> . Fr LROUNPAREN ForInit ForExpr Mark_for ForIncr RROUNPAREN Mark_quad Statement
    (102) SelectionStatement -> . If LROUNPAREN Expression RROUNPAREN Mark_if Statement
    (103) SelectionStatement -> . If LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement
    (5) TypeName -> . PrimitiveType
    (6) TypeName -> . QualifiedName
    (230) Expression -> . AssignmentExpression
    (82) Bl -> . LCURPAREN
    (110) Do -> . DO
    (113) Fr -> . FOR
    (104) If -> . IF
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (224) AssignmentExpression -> . ConditionalExpression
    (225) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (220) ConditionalExpression -> . ConditionalOrExpression
    (221) ConditionalExpression -> . ConditionalOrExpression Mark_quad Ques Mark_quad Expression Mark_quad Cln Mark_quad ConditionalExpression Mark_quad
    (177) UnaryExpression -> . OP_INC UnaryExpression
    (178) UnaryExpression -> . OP_DEC UnaryExpression
    (179) UnaryExpression -> . LogicalUnaryExpression
    (180) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) ConditionalOrExpression -> . ConditionalAndExpression
    (219) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (181) LogicalUnaryExpression -> . PostfixExpression
    (182) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (185) ArithmeticUnaryOperator -> . PLUS
    (186) ArithmeticUnaryOperator -> . MINUS
    (216) ConditionalAndExpression -> . InclusiveOrExpression
    (217) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (173) PostfixExpression -> . PrimaryExpression
    (174) PostfixExpression -> . RealPostfixExpression
    (183) LogicalUnaryOperator -> . ~
    (184) LogicalUnaryOperator -> . NOT
    (214) InclusiveOrExpression -> . ExclusiveOrExpression
    (215) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (126) PrimaryExpression -> . QualifiedName
    (127) PrimaryExpression -> . NotJustName
    (175) RealPostfixExpression -> . PostfixExpression OP_INC
    (176) RealPostfixExpression -> . PostfixExpression OP_DEC
    (212) ExclusiveOrExpression -> . AndExpression
    (213) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (128) NotJustName -> . SpecialName
    (129) NotJustName -> . NewAllocationExpression
    (130) NotJustName -> . ComplexPrimary
    (210) AndExpression -> . EqualityExpression
    (211) AndExpression -> . AndExpression & EqualityExpression
    (151) SpecialName -> . THIS
    (152) SpecialName -> . SUPER
    (153) SpecialName -> . NULL
    (156) NewAllocationExpression -> . PlainNewAllocationExpression
    (157) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (131) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (132) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (207) EqualityExpression -> . RelationalExpression
    (208) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (209) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (158) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (159) PlainNewAllocationExpression -> . ClassAllocationExpression
    (160) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (161) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (162) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (133) ComplexPrimaryNoParenthesis -> . INT_CONST
    (134) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (135) ComplexPrimaryNoParenthesis -> . STRING
    (136) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (137) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (138) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (139) ComplexPrimaryNoParenthesis -> . FieldAccess
    (140) ComplexPrimaryNoParenthesis -> . MethodCall
    (202) RelationalExpression -> . ShiftExpression
    (203) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (204) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (205) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (206) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (165) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (166) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (167) ArrayAllocationExpression -> . NEW TypeName Dims
    (163) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (164) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (141) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (142) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (143) FieldAccess -> . NotJustName DOT IDENTIFIER
    (144) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (145) FieldAccess -> . QualifiedName DOT THIS
    (146) FieldAccess -> . QualifiedName DOT CLASS
    (147) FieldAccess -> . PrimitiveType DOT CLASS
    (148) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (149) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (198) ShiftExpression -> . AdditiveExpression
    (199) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (200) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (201) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (150) MethodAccess -> . QualifiedName
    (195) AdditiveExpression -> . MultiplicativeExpression
    (196) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (197) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (191) MultiplicativeExpression -> . CastExpression
    (192) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (193) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (194) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (187) CastExpression -> . UnaryExpression

    RCURPAREN       shift and go to state 107
    SEMICOLON       shift and go to state 130
    IDENTIFIER      shift and go to state 132
    CASE            shift and go to state 128
    DEFAULT         shift and go to state 121
    BREAK           shift and go to state 98
    RETURN          shift and go to state 94
    WHILE           shift and go to state 123
    LCURPAREN       shift and go to state 58
    DO              shift and go to state 141
    FOR             shift and go to state 104
    IF              shift and go to state 153
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 124
    PLUS            shift and go to state 87
    MINUS           shift and go to state 86
    ~               shift and go to state 140
    NOT             shift and go to state 117
    THIS            shift and go to state 89
    SUPER           shift and go to state 156
    NULL            shift and go to state 143
    LROUNPAREN      shift and go to state 92
    INT_CONST       shift and go to state 106
    FLOAT_CONST     shift and go to state 83
    STRING          shift and go to state 149
    CHAR_CONST      shift and go to state 139
    BOOLEAN_CONST   shift and go to state 155
    NEW             shift and go to state 125

    PostfixExpression              shift and go to state 112
    LabelStatement                 shift and go to state 93
    ArithmeticUnaryOperator        shift and go to state 96
    AssignmentExpression           shift and go to state 103
    ExpressionStatement            shift and go to state 81
    JumpStatement                  shift and go to state 122
    RealPostfixExpression          shift and go to state 95
    Statement                      shift and go to state 84
    AndExpression                  shift and go to state 85
    ArrayAccess                    shift and go to state 108
    MultiplicativeExpression       shift and go to state 100
    TypeSpecifier                  shift and go to state 126
    CastExpression                 shift and go to state 142
    EqualityExpression             shift and go to state 97
    Do                             shift and go to state 144
    Fr                             shift and go to state 129
    MethodAccess                   shift and go to state 111
    ComplexPrimaryNoParenthesis    shift and go to state 99
    Bl                             shift and go to state 53
    ClassAllocationExpression      shift and go to state 120
    LogicalUnaryOperator           shift and go to state 145
    TypeName                       shift and go to state 54
    Br                             shift and go to state 88
    LocalVariableDeclarationStatement shift and go to state 146
    ShiftExpression                shift and go to state 147
    SelectionStatement             shift and go to state 102
    LocalVariableDeclarationsAndStatements shift and go to state 148
    NotJustName                    shift and go to state 150
    ConditionalOrExpression        shift and go to state 131
    QualifiedName                  shift and go to state 151
    ComplexPrimary                 shift and go to state 119
    MethodCall                     shift and go to state 101
    PrimitiveType                  shift and go to state 82
    LogicalUnaryExpression         shift and go to state 152
    UnaryExpression                shift and go to state 137
    Expression                     shift and go to state 134
    Block                          shift and go to state 109
    AdditiveExpression             shift and go to state 135
    ArrayAllocationExpression      shift and go to state 110
    ConditionalExpression          shift and go to state 136
    InclusiveOrExpression          shift and go to state 138
    PrimaryExpression              shift and go to state 127
    ExclusiveOrExpression          shift and go to state 113
    ConditionalAndExpression       shift and go to state 90
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    LocalVariableDeclarationOrStatement shift and go to state 116
    NewAllocationExpression        shift and go to state 133
    FieldAccess                    shift and go to state 154
    EmptyStatement                 shift and go to state 91
    SpecialName                    shift and go to state 118
    IterationStatement             shift and go to state 157
    If                             shift and go to state 158

state 54

    (3) TypeSpecifier -> TypeName .
    (4) TypeSpecifier -> TypeName . Dims
    (171) Dims -> . OP_DIM
    (172) Dims -> . Dims OP_DIM
    (2) OP_DIM -> . LSQPAREN RSQPAREN

    IDENTIFIER      reduce using rule 3 (TypeSpecifier -> TypeName .)
    LSQPAREN        shift and go to state 159

    OP_DIM                         shift and go to state 160
    Dims                           shift and go to state 161

state 55

    (76) ConstructorDeclarator -> IDENTIFIER . LROUNPAREN ParameterList RROUNPAREN
    (77) ConstructorDeclarator -> IDENTIFIER . LROUNPAREN RROUNPAREN
    (33) QualifiedName -> IDENTIFIER .

    LROUNPAREN      shift and go to state 162
    DOT             reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    LSQPAREN        reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 33 (QualifiedName -> IDENTIFIER .)


state 56

    (50) FieldDeclaration -> MethodDeclaration .

    SEMICOLON       reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    RCURPAREN       reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    STATIC          reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    IDENTIFIER      reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    PUBLIC          reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    PRIVATE         reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    LCURPAREN       reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    CLASS           reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    BOOLEAN         reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    CHAR            reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    BYTE            reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    SHORT           reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    INT             reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    LONG            reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    FLOAT           reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    DOUBLE          reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)
    VOID            reduce using rule 50 (FieldDeclaration -> MethodDeclaration .)


state 57

    (10) PrimitiveType -> CHAR .

    DOT             reduce using rule 10 (PrimitiveType -> CHAR .)
    LSQPAREN        reduce using rule 10 (PrimitiveType -> CHAR .)
    IDENTIFIER      reduce using rule 10 (PrimitiveType -> CHAR .)
    LROUNPAREN      reduce using rule 10 (PrimitiveType -> CHAR .)


state 58

    (82) Bl -> LCURPAREN .

    RCURPAREN       reduce using rule 82 (Bl -> LCURPAREN .)
    SEMICOLON       reduce using rule 82 (Bl -> LCURPAREN .)
    IDENTIFIER      reduce using rule 82 (Bl -> LCURPAREN .)
    CASE            reduce using rule 82 (Bl -> LCURPAREN .)
    DEFAULT         reduce using rule 82 (Bl -> LCURPAREN .)
    BREAK           reduce using rule 82 (Bl -> LCURPAREN .)
    RETURN          reduce using rule 82 (Bl -> LCURPAREN .)
    WHILE           reduce using rule 82 (Bl -> LCURPAREN .)
    LCURPAREN       reduce using rule 82 (Bl -> LCURPAREN .)
    DO              reduce using rule 82 (Bl -> LCURPAREN .)
    FOR             reduce using rule 82 (Bl -> LCURPAREN .)
    IF              reduce using rule 82 (Bl -> LCURPAREN .)
    BOOLEAN         reduce using rule 82 (Bl -> LCURPAREN .)
    CHAR            reduce using rule 82 (Bl -> LCURPAREN .)
    BYTE            reduce using rule 82 (Bl -> LCURPAREN .)
    SHORT           reduce using rule 82 (Bl -> LCURPAREN .)
    INT             reduce using rule 82 (Bl -> LCURPAREN .)
    LONG            reduce using rule 82 (Bl -> LCURPAREN .)
    FLOAT           reduce using rule 82 (Bl -> LCURPAREN .)
    DOUBLE          reduce using rule 82 (Bl -> LCURPAREN .)
    VOID            reduce using rule 82 (Bl -> LCURPAREN .)
    OP_INC          reduce using rule 82 (Bl -> LCURPAREN .)
    OP_DEC          reduce using rule 82 (Bl -> LCURPAREN .)
    PLUS            reduce using rule 82 (Bl -> LCURPAREN .)
    MINUS           reduce using rule 82 (Bl -> LCURPAREN .)
    ~               reduce using rule 82 (Bl -> LCURPAREN .)
    NOT             reduce using rule 82 (Bl -> LCURPAREN .)
    THIS            reduce using rule 82 (Bl -> LCURPAREN .)
    SUPER           reduce using rule 82 (Bl -> LCURPAREN .)
    NULL            reduce using rule 82 (Bl -> LCURPAREN .)
    LROUNPAREN      reduce using rule 82 (Bl -> LCURPAREN .)
    INT_CONST       reduce using rule 82 (Bl -> LCURPAREN .)
    FLOAT_CONST     reduce using rule 82 (Bl -> LCURPAREN .)
    STRING          reduce using rule 82 (Bl -> LCURPAREN .)
    CHAR_CONST      reduce using rule 82 (Bl -> LCURPAREN .)
    BOOLEAN_CONST   reduce using rule 82 (Bl -> LCURPAREN .)
    NEW             reduce using rule 82 (Bl -> LCURPAREN .)


state 59

    (36) TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .

    SEMICOLON       reduce using rule 36 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    CLASS           reduce using rule 36 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    PUBLIC          reduce using rule 36 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    PRIVATE         reduce using rule 36 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    STATIC          reduce using rule 36 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    $end            reduce using rule 36 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    RCURPAREN       reduce using rule 36 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    IDENTIFIER      reduce using rule 36 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    LCURPAREN       reduce using rule 36 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    BOOLEAN         reduce using rule 36 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    CHAR            reduce using rule 36 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    BYTE            reduce using rule 36 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    SHORT           reduce using rule 36 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    INT             reduce using rule 36 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    LONG            reduce using rule 36 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    FLOAT           reduce using rule 36 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    DOUBLE          reduce using rule 36 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)
    VOID            reduce using rule 36 (TypeDeclaration -> ClassHeader LCURPAREN RCURPAREN .)


state 60

    (35) TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations . RCURPAREN
    (46) FieldDeclarations -> FieldDeclarations . FieldDeclarationOptSemi
    (47) FieldDeclarationOptSemi -> . FieldDeclaration
    (48) FieldDeclarationOptSemi -> . FieldDeclaration SemiColons
    (49) FieldDeclaration -> . FieldVariableDeclaration SEMICOLON
    (50) FieldDeclaration -> . MethodDeclaration
    (51) FieldDeclaration -> . ConstructorDeclaration
    (52) FieldDeclaration -> . StaticInitializer
    (53) FieldDeclaration -> . NonStaticInitializer
    (54) FieldDeclaration -> . TypeDeclaration
    (55) FieldVariableDeclaration -> . Modifiers TypeSpecifier VariableDeclarators
    (56) FieldVariableDeclaration -> . TypeSpecifier VariableDeclarators
    (62) MethodDeclaration -> . Modifiers TypeSpecifier MethodDeclarator MethodBody
    (63) MethodDeclaration -> . TypeSpecifier MethodDeclarator MethodBody
    (74) ConstructorDeclaration -> . Modifiers ConstructorDeclarator Block
    (75) ConstructorDeclaration -> . ConstructorDeclarator Block
    (78) StaticInitializer -> . STATIC Block
    (79) NonStaticInitializer -> . Block
    (35) TypeDeclaration -> . ClassHeader LCURPAREN FieldDeclarations RCURPAREN
    (36) TypeDeclaration -> . ClassHeader LCURPAREN RCURPAREN
    (39) Modifiers -> . Modifier
    (40) Modifiers -> . Modifiers Modifier
    (3) TypeSpecifier -> . TypeName
    (4) TypeSpecifier -> . TypeName Dims
    (76) ConstructorDeclarator -> . IDENTIFIER LROUNPAREN ParameterList RROUNPAREN
    (77) ConstructorDeclarator -> . IDENTIFIER LROUNPAREN RROUNPAREN
    (80) Block -> . Bl LocalVariableDeclarationsAndStatements Br
    (81) Block -> . Bl Br
    (37) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (38) ClassHeader -> . ClassWord IDENTIFIER
    (41) Modifier -> . PUBLIC
    (42) Modifier -> . PRIVATE
    (43) Modifier -> . STATIC
    (5) TypeName -> . PrimitiveType
    (6) TypeName -> . QualifiedName
    (82) Bl -> . LCURPAREN
    (44) ClassWord -> . CLASS
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER

    RCURPAREN       shift and go to state 163
    STATIC          shift and go to state 48
    IDENTIFIER      shift and go to state 55
    PUBLIC          shift and go to state 18
    PRIVATE         shift and go to state 4
    LCURPAREN       shift and go to state 58
    CLASS           shift and go to state 6
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43

    ConstructorDeclaration         shift and go to state 41
    FieldVariableDeclaration       shift and go to state 42
    TypeDeclaration                shift and go to state 44
    PrimitiveType                  shift and go to state 45
    StaticInitializer              shift and go to state 46
    NonStaticInitializer           shift and go to state 50
    TypeSpecifier                  shift and go to state 51
    QualifiedName                  shift and go to state 52
    Bl                             shift and go to state 53
    TypeName                       shift and go to state 54
    MethodDeclaration              shift and go to state 56
    Modifiers                      shift and go to state 47
    Modifier                       shift and go to state 12
    Block                          shift and go to state 61
    ClassWord                      shift and go to state 14
    FieldDeclarationOptSemi        shift and go to state 164
    ConstructorDeclarator          shift and go to state 63
    ClassHeader                    shift and go to state 17
    FieldDeclaration               shift and go to state 69

state 61

    (79) NonStaticInitializer -> Block .

    SEMICOLON       reduce using rule 79 (NonStaticInitializer -> Block .)
    RCURPAREN       reduce using rule 79 (NonStaticInitializer -> Block .)
    STATIC          reduce using rule 79 (NonStaticInitializer -> Block .)
    IDENTIFIER      reduce using rule 79 (NonStaticInitializer -> Block .)
    PUBLIC          reduce using rule 79 (NonStaticInitializer -> Block .)
    PRIVATE         reduce using rule 79 (NonStaticInitializer -> Block .)
    LCURPAREN       reduce using rule 79 (NonStaticInitializer -> Block .)
    CLASS           reduce using rule 79 (NonStaticInitializer -> Block .)
    BOOLEAN         reduce using rule 79 (NonStaticInitializer -> Block .)
    CHAR            reduce using rule 79 (NonStaticInitializer -> Block .)
    BYTE            reduce using rule 79 (NonStaticInitializer -> Block .)
    SHORT           reduce using rule 79 (NonStaticInitializer -> Block .)
    INT             reduce using rule 79 (NonStaticInitializer -> Block .)
    LONG            reduce using rule 79 (NonStaticInitializer -> Block .)
    FLOAT           reduce using rule 79 (NonStaticInitializer -> Block .)
    DOUBLE          reduce using rule 79 (NonStaticInitializer -> Block .)
    VOID            reduce using rule 79 (NonStaticInitializer -> Block .)


state 62

    (45) FieldDeclarations -> FieldDeclarationOptSemi .

    RCURPAREN       reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    STATIC          reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    IDENTIFIER      reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    PUBLIC          reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    PRIVATE         reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    LCURPAREN       reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    CLASS           reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    BOOLEAN         reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    CHAR            reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    BYTE            reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    SHORT           reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    INT             reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    LONG            reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    FLOAT           reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    DOUBLE          reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)
    VOID            reduce using rule 45 (FieldDeclarations -> FieldDeclarationOptSemi .)


state 63

    (75) ConstructorDeclaration -> ConstructorDeclarator . Block
    (80) Block -> . Bl LocalVariableDeclarationsAndStatements Br
    (81) Block -> . Bl Br
    (82) Bl -> . LCURPAREN

    LCURPAREN       shift and go to state 58

    Bl                             shift and go to state 53
    Block                          shift and go to state 165

state 64

    (13) PrimitiveType -> INT .

    DOT             reduce using rule 13 (PrimitiveType -> INT .)
    LSQPAREN        reduce using rule 13 (PrimitiveType -> INT .)
    IDENTIFIER      reduce using rule 13 (PrimitiveType -> INT .)
    LROUNPAREN      reduce using rule 13 (PrimitiveType -> INT .)


state 65

    (16) PrimitiveType -> DOUBLE .

    DOT             reduce using rule 16 (PrimitiveType -> DOUBLE .)
    LSQPAREN        reduce using rule 16 (PrimitiveType -> DOUBLE .)
    IDENTIFIER      reduce using rule 16 (PrimitiveType -> DOUBLE .)
    LROUNPAREN      reduce using rule 16 (PrimitiveType -> DOUBLE .)


state 66

    (15) PrimitiveType -> FLOAT .

    DOT             reduce using rule 15 (PrimitiveType -> FLOAT .)
    LSQPAREN        reduce using rule 15 (PrimitiveType -> FLOAT .)
    IDENTIFIER      reduce using rule 15 (PrimitiveType -> FLOAT .)
    LROUNPAREN      reduce using rule 15 (PrimitiveType -> FLOAT .)


state 67

    (9) PrimitiveType -> BOOLEAN .

    DOT             reduce using rule 9 (PrimitiveType -> BOOLEAN .)
    LSQPAREN        reduce using rule 9 (PrimitiveType -> BOOLEAN .)
    IDENTIFIER      reduce using rule 9 (PrimitiveType -> BOOLEAN .)
    LROUNPAREN      reduce using rule 9 (PrimitiveType -> BOOLEAN .)


state 68

    (11) PrimitiveType -> BYTE .

    DOT             reduce using rule 11 (PrimitiveType -> BYTE .)
    LSQPAREN        reduce using rule 11 (PrimitiveType -> BYTE .)
    IDENTIFIER      reduce using rule 11 (PrimitiveType -> BYTE .)
    LROUNPAREN      reduce using rule 11 (PrimitiveType -> BYTE .)


state 69

    (47) FieldDeclarationOptSemi -> FieldDeclaration .
    (48) FieldDeclarationOptSemi -> FieldDeclaration . SemiColons
    (18) SemiColons -> . SEMICOLON
    (19) SemiColons -> . SemiColons SEMICOLON

    RCURPAREN       reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    STATIC          reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    IDENTIFIER      reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    PUBLIC          reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    PRIVATE         reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    LCURPAREN       reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    CLASS           reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    BOOLEAN         reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    CHAR            reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    BYTE            reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    SHORT           reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    INT             reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    LONG            reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    FLOAT           reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    DOUBLE          reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    VOID            reduce using rule 47 (FieldDeclarationOptSemi -> FieldDeclaration .)
    SEMICOLON       shift and go to state 24

    SemiColons                     shift and go to state 166

state 70

    (34) QualifiedName -> QualifiedName DOT IDENTIFIER .

    DOT             reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    LSQPAREN        reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    OP_INC          reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    OP_DEC          reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    EQUAL           reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    ASS_MUL         reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    ASS_ADD         reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    ASS_SUB         reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    MULT            reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    DIV             reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    MOD             reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    PLUS            reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    MINUS           reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    OP_SHL          reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    OP_SHR          reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    OP_SHRR         reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    LESS            reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    MORE            reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    OP_LE           reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    OP_GE           reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    OP_EQ           reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    OP_NE           reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    &               reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    ^               reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    |               reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    OP_LAND         reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    OP_LOR          reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    QUES            reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    RROUNPAREN      reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    COMMA           reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    LROUNPAREN      reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    SEMICOLON       reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    IDENTIFIER      reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    COLON           reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)
    RSQPAREN        reduce using rule 34 (QualifiedName -> QualifiedName DOT IDENTIFIER .)


state 71

    (32) ImportStatement -> IMPORT QualifiedName DOT MULT . SemiColons
    (18) SemiColons -> . SEMICOLON
    (19) SemiColons -> . SemiColons SEMICOLON

    SEMICOLON       shift and go to state 24

    SemiColons                     shift and go to state 167

state 72

    (49) FieldDeclaration -> FieldVariableDeclaration SEMICOLON .

    SEMICOLON       reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)
    RCURPAREN       reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)
    STATIC          reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)
    IDENTIFIER      reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)
    PUBLIC          reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)
    PRIVATE         reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)
    LCURPAREN       reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)
    CLASS           reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)
    BOOLEAN         reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)
    CHAR            reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)
    BYTE            reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)
    SHORT           reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)
    INT             reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)
    LONG            reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)
    FLOAT           reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)
    DOUBLE          reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)
    VOID            reduce using rule 49 (FieldDeclaration -> FieldVariableDeclaration SEMICOLON .)


state 73

    (55) FieldVariableDeclaration -> Modifiers TypeSpecifier . VariableDeclarators
    (62) MethodDeclaration -> Modifiers TypeSpecifier . MethodDeclarator MethodBody
    (57) VariableDeclarators -> . VariableDeclarator
    (58) VariableDeclarators -> . VariableDeclarators COMMA VariableDeclarator
    (64) MethodDeclarator -> . DeclaratorName LROUNPAREN ParameterList RROUNPAREN
    (65) MethodDeclarator -> . DeclaratorName LROUNPAREN RROUNPAREN
    (59) VariableDeclarator -> . DeclaratorName
    (60) VariableDeclarator -> . DeclaratorName EQUAL VariableInitializer
    (69) DeclaratorName -> . IDENTIFIER
    (70) DeclaratorName -> . DeclaratorName OP_DIM

    IDENTIFIER      shift and go to state 79

    VariableDeclarators            shift and go to state 168
    DeclaratorName                 shift and go to state 77
    MethodDeclarator               shift and go to state 169
    VariableDeclarator             shift and go to state 80

state 74

    (74) ConstructorDeclaration -> Modifiers ConstructorDeclarator . Block
    (80) Block -> . Bl LocalVariableDeclarationsAndStatements Br
    (81) Block -> . Bl Br
    (82) Bl -> . LCURPAREN

    LCURPAREN       shift and go to state 58

    Bl                             shift and go to state 53
    Block                          shift and go to state 170

state 75

    (78) StaticInitializer -> STATIC Block .

    SEMICOLON       reduce using rule 78 (StaticInitializer -> STATIC Block .)
    RCURPAREN       reduce using rule 78 (StaticInitializer -> STATIC Block .)
    STATIC          reduce using rule 78 (StaticInitializer -> STATIC Block .)
    IDENTIFIER      reduce using rule 78 (StaticInitializer -> STATIC Block .)
    PUBLIC          reduce using rule 78 (StaticInitializer -> STATIC Block .)
    PRIVATE         reduce using rule 78 (StaticInitializer -> STATIC Block .)
    LCURPAREN       reduce using rule 78 (StaticInitializer -> STATIC Block .)
    CLASS           reduce using rule 78 (StaticInitializer -> STATIC Block .)
    BOOLEAN         reduce using rule 78 (StaticInitializer -> STATIC Block .)
    CHAR            reduce using rule 78 (StaticInitializer -> STATIC Block .)
    BYTE            reduce using rule 78 (StaticInitializer -> STATIC Block .)
    SHORT           reduce using rule 78 (StaticInitializer -> STATIC Block .)
    INT             reduce using rule 78 (StaticInitializer -> STATIC Block .)
    LONG            reduce using rule 78 (StaticInitializer -> STATIC Block .)
    FLOAT           reduce using rule 78 (StaticInitializer -> STATIC Block .)
    DOUBLE          reduce using rule 78 (StaticInitializer -> STATIC Block .)
    VOID            reduce using rule 78 (StaticInitializer -> STATIC Block .)


state 76

    (56) FieldVariableDeclaration -> TypeSpecifier VariableDeclarators .
    (58) VariableDeclarators -> VariableDeclarators . COMMA VariableDeclarator

    SEMICOLON       reduce using rule 56 (FieldVariableDeclaration -> TypeSpecifier VariableDeclarators .)
    COMMA           shift and go to state 171


state 77

    (64) MethodDeclarator -> DeclaratorName . LROUNPAREN ParameterList RROUNPAREN
    (65) MethodDeclarator -> DeclaratorName . LROUNPAREN RROUNPAREN
    (59) VariableDeclarator -> DeclaratorName .
    (60) VariableDeclarator -> DeclaratorName . EQUAL VariableInitializer
    (70) DeclaratorName -> DeclaratorName . OP_DIM
    (2) OP_DIM -> . LSQPAREN RSQPAREN

    LROUNPAREN      shift and go to state 174
    COMMA           reduce using rule 59 (VariableDeclarator -> DeclaratorName .)
    SEMICOLON       reduce using rule 59 (VariableDeclarator -> DeclaratorName .)
    EQUAL           shift and go to state 172
    LSQPAREN        shift and go to state 159

    OP_DIM                         shift and go to state 173

state 78

    (63) MethodDeclaration -> TypeSpecifier MethodDeclarator . MethodBody
    (71) MethodBody -> . LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN
    (72) MethodBody -> . LCURPAREN RCURPAREN
    (73) MethodBody -> . SEMICOLON

    LCURPAREN       shift and go to state 177
    SEMICOLON       shift and go to state 176

    MethodBody                     shift and go to state 175

state 79

    (69) DeclaratorName -> IDENTIFIER .

    EQUAL           reduce using rule 69 (DeclaratorName -> IDENTIFIER .)
    LSQPAREN        reduce using rule 69 (DeclaratorName -> IDENTIFIER .)
    COMMA           reduce using rule 69 (DeclaratorName -> IDENTIFIER .)
    SEMICOLON       reduce using rule 69 (DeclaratorName -> IDENTIFIER .)
    LROUNPAREN      reduce using rule 69 (DeclaratorName -> IDENTIFIER .)
    RROUNPAREN      reduce using rule 69 (DeclaratorName -> IDENTIFIER .)


state 80

    (57) VariableDeclarators -> VariableDeclarator .

    COMMA           reduce using rule 57 (VariableDeclarators -> VariableDeclarator .)
    SEMICOLON       reduce using rule 57 (VariableDeclarators -> VariableDeclarator .)


state 81

    (91) Statement -> ExpressionStatement . SEMICOLON Mark_quad

    SEMICOLON       shift and go to state 178


state 82

    (5) TypeName -> PrimitiveType .
    (147) FieldAccess -> PrimitiveType . DOT CLASS

    LSQPAREN        reduce using rule 5 (TypeName -> PrimitiveType .)
    IDENTIFIER      reduce using rule 5 (TypeName -> PrimitiveType .)
    DOT             shift and go to state 179


state 83

    (134) ComplexPrimaryNoParenthesis -> FLOAT_CONST .

    LSQPAREN        reduce using rule 134 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    DOT             reduce using rule 134 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    OP_INC          reduce using rule 134 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    OP_DEC          reduce using rule 134 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    MULT            reduce using rule 134 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    DIV             reduce using rule 134 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    MOD             reduce using rule 134 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    PLUS            reduce using rule 134 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    MINUS           reduce using rule 134 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    OP_SHL          reduce using rule 134 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    OP_SHR          reduce using rule 134 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    OP_SHRR         reduce using rule 134 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    LESS            reduce using rule 134 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    MORE            reduce using rule 134 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    OP_LE           reduce using rule 134 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    OP_GE           reduce using rule 134 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    OP_EQ           reduce using rule 134 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    OP_NE           reduce using rule 134 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    &               reduce using rule 134 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    ^               reduce using rule 134 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    |               reduce using rule 134 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    OP_LAND         reduce using rule 134 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    OP_LOR          reduce using rule 134 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    QUES            reduce using rule 134 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    SEMICOLON       reduce using rule 134 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    RROUNPAREN      reduce using rule 134 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    COLON           reduce using rule 134 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    COMMA           reduce using rule 134 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    RSQPAREN        reduce using rule 134 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    EQUAL           reduce using rule 134 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    ASS_MUL         reduce using rule 134 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    ASS_ADD         reduce using rule 134 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)
    ASS_SUB         reduce using rule 134 (ComplexPrimaryNoParenthesis -> FLOAT_CONST .)


state 84

    (87) LocalVariableDeclarationOrStatement -> Statement .

    RCURPAREN       reduce using rule 87 (LocalVariableDeclarationOrStatement -> Statement .)
    SEMICOLON       reduce using rule 87 (LocalVariableDeclarationOrStatement -> Statement .)
    IDENTIFIER      reduce using rule 87 (LocalVariableDeclarationOrStatement -> Statement .)
    CASE            reduce using rule 87 (LocalVariableDeclarationOrStatement -> Statement .)
    DEFAULT         reduce using rule 87 (LocalVariableDeclarationOrStatement -> Statement .)
    BREAK           reduce using rule 87 (LocalVariableDeclarationOrStatement -> Statement .)
    RETURN          reduce using rule 87 (LocalVariableDeclarationOrStatement -> Statement .)
    WHILE           reduce using rule 87 (LocalVariableDeclarationOrStatement -> Statement .)
    LCURPAREN       reduce using rule 87 (LocalVariableDeclarationOrStatement -> Statement .)
    DO              reduce using rule 87 (LocalVariableDeclarationOrStatement -> Statement .)
    FOR             reduce using rule 87 (LocalVariableDeclarationOrStatement -> Statement .)
    IF              reduce using rule 87 (LocalVariableDeclarationOrStatement -> Statement .)
    BOOLEAN         reduce using rule 87 (LocalVariableDeclarationOrStatement -> Statement .)
    CHAR            reduce using rule 87 (LocalVariableDeclarationOrStatement -> Statement .)
    BYTE            reduce using rule 87 (LocalVariableDeclarationOrStatement -> Statement .)
    SHORT           reduce using rule 87 (LocalVariableDeclarationOrStatement -> Statement .)
    INT             reduce using rule 87 (LocalVariableDeclarationOrStatement -> Statement .)
    LONG            reduce using rule 87 (LocalVariableDeclarationOrStatement -> Statement .)
    FLOAT           reduce using rule 87 (LocalVariableDeclarationOrStatement -> Statement .)
    DOUBLE          reduce using rule 87 (LocalVariableDeclarationOrStatement -> Statement .)
    VOID            reduce using rule 87 (LocalVariableDeclarationOrStatement -> Statement .)
    OP_INC          reduce using rule 87 (LocalVariableDeclarationOrStatement -> Statement .)
    OP_DEC          reduce using rule 87 (LocalVariableDeclarationOrStatement -> Statement .)
    PLUS            reduce using rule 87 (LocalVariableDeclarationOrStatement -> Statement .)
    MINUS           reduce using rule 87 (LocalVariableDeclarationOrStatement -> Statement .)
    ~               reduce using rule 87 (LocalVariableDeclarationOrStatement -> Statement .)
    NOT             reduce using rule 87 (LocalVariableDeclarationOrStatement -> Statement .)
    THIS            reduce using rule 87 (LocalVariableDeclarationOrStatement -> Statement .)
    SUPER           reduce using rule 87 (LocalVariableDeclarationOrStatement -> Statement .)
    NULL            reduce using rule 87 (LocalVariableDeclarationOrStatement -> Statement .)
    LROUNPAREN      reduce using rule 87 (LocalVariableDeclarationOrStatement -> Statement .)
    INT_CONST       reduce using rule 87 (LocalVariableDeclarationOrStatement -> Statement .)
    FLOAT_CONST     reduce using rule 87 (LocalVariableDeclarationOrStatement -> Statement .)
    STRING          reduce using rule 87 (LocalVariableDeclarationOrStatement -> Statement .)
    CHAR_CONST      reduce using rule 87 (LocalVariableDeclarationOrStatement -> Statement .)
    BOOLEAN_CONST   reduce using rule 87 (LocalVariableDeclarationOrStatement -> Statement .)
    NEW             reduce using rule 87 (LocalVariableDeclarationOrStatement -> Statement .)


state 85

    (212) ExclusiveOrExpression -> AndExpression .
    (211) AndExpression -> AndExpression . & EqualityExpression

    ^               reduce using rule 212 (ExclusiveOrExpression -> AndExpression .)
    |               reduce using rule 212 (ExclusiveOrExpression -> AndExpression .)
    OP_LAND         reduce using rule 212 (ExclusiveOrExpression -> AndExpression .)
    OP_LOR          reduce using rule 212 (ExclusiveOrExpression -> AndExpression .)
    QUES            reduce using rule 212 (ExclusiveOrExpression -> AndExpression .)
    SEMICOLON       reduce using rule 212 (ExclusiveOrExpression -> AndExpression .)
    RSQPAREN        reduce using rule 212 (ExclusiveOrExpression -> AndExpression .)
    COLON           reduce using rule 212 (ExclusiveOrExpression -> AndExpression .)
    COMMA           reduce using rule 212 (ExclusiveOrExpression -> AndExpression .)
    RROUNPAREN      reduce using rule 212 (ExclusiveOrExpression -> AndExpression .)
    &               shift and go to state 180


state 86

    (186) ArithmeticUnaryOperator -> MINUS .

    OP_INC          reduce using rule 186 (ArithmeticUnaryOperator -> MINUS .)
    OP_DEC          reduce using rule 186 (ArithmeticUnaryOperator -> MINUS .)
    PLUS            reduce using rule 186 (ArithmeticUnaryOperator -> MINUS .)
    MINUS           reduce using rule 186 (ArithmeticUnaryOperator -> MINUS .)
    ~               reduce using rule 186 (ArithmeticUnaryOperator -> MINUS .)
    NOT             reduce using rule 186 (ArithmeticUnaryOperator -> MINUS .)
    IDENTIFIER      reduce using rule 186 (ArithmeticUnaryOperator -> MINUS .)
    THIS            reduce using rule 186 (ArithmeticUnaryOperator -> MINUS .)
    SUPER           reduce using rule 186 (ArithmeticUnaryOperator -> MINUS .)
    NULL            reduce using rule 186 (ArithmeticUnaryOperator -> MINUS .)
    LROUNPAREN      reduce using rule 186 (ArithmeticUnaryOperator -> MINUS .)
    INT_CONST       reduce using rule 186 (ArithmeticUnaryOperator -> MINUS .)
    FLOAT_CONST     reduce using rule 186 (ArithmeticUnaryOperator -> MINUS .)
    STRING          reduce using rule 186 (ArithmeticUnaryOperator -> MINUS .)
    CHAR_CONST      reduce using rule 186 (ArithmeticUnaryOperator -> MINUS .)
    BOOLEAN_CONST   reduce using rule 186 (ArithmeticUnaryOperator -> MINUS .)
    NEW             reduce using rule 186 (ArithmeticUnaryOperator -> MINUS .)
    BOOLEAN         reduce using rule 186 (ArithmeticUnaryOperator -> MINUS .)
    CHAR            reduce using rule 186 (ArithmeticUnaryOperator -> MINUS .)
    BYTE            reduce using rule 186 (ArithmeticUnaryOperator -> MINUS .)
    SHORT           reduce using rule 186 (ArithmeticUnaryOperator -> MINUS .)
    INT             reduce using rule 186 (ArithmeticUnaryOperator -> MINUS .)
    LONG            reduce using rule 186 (ArithmeticUnaryOperator -> MINUS .)
    FLOAT           reduce using rule 186 (ArithmeticUnaryOperator -> MINUS .)
    DOUBLE          reduce using rule 186 (ArithmeticUnaryOperator -> MINUS .)
    VOID            reduce using rule 186 (ArithmeticUnaryOperator -> MINUS .)


state 87

    (185) ArithmeticUnaryOperator -> PLUS .

    OP_INC          reduce using rule 185 (ArithmeticUnaryOperator -> PLUS .)
    OP_DEC          reduce using rule 185 (ArithmeticUnaryOperator -> PLUS .)
    PLUS            reduce using rule 185 (ArithmeticUnaryOperator -> PLUS .)
    MINUS           reduce using rule 185 (ArithmeticUnaryOperator -> PLUS .)
    ~               reduce using rule 185 (ArithmeticUnaryOperator -> PLUS .)
    NOT             reduce using rule 185 (ArithmeticUnaryOperator -> PLUS .)
    IDENTIFIER      reduce using rule 185 (ArithmeticUnaryOperator -> PLUS .)
    THIS            reduce using rule 185 (ArithmeticUnaryOperator -> PLUS .)
    SUPER           reduce using rule 185 (ArithmeticUnaryOperator -> PLUS .)
    NULL            reduce using rule 185 (ArithmeticUnaryOperator -> PLUS .)
    LROUNPAREN      reduce using rule 185 (ArithmeticUnaryOperator -> PLUS .)
    INT_CONST       reduce using rule 185 (ArithmeticUnaryOperator -> PLUS .)
    FLOAT_CONST     reduce using rule 185 (ArithmeticUnaryOperator -> PLUS .)
    STRING          reduce using rule 185 (ArithmeticUnaryOperator -> PLUS .)
    CHAR_CONST      reduce using rule 185 (ArithmeticUnaryOperator -> PLUS .)
    BOOLEAN_CONST   reduce using rule 185 (ArithmeticUnaryOperator -> PLUS .)
    NEW             reduce using rule 185 (ArithmeticUnaryOperator -> PLUS .)
    BOOLEAN         reduce using rule 185 (ArithmeticUnaryOperator -> PLUS .)
    CHAR            reduce using rule 185 (ArithmeticUnaryOperator -> PLUS .)
    BYTE            reduce using rule 185 (ArithmeticUnaryOperator -> PLUS .)
    SHORT           reduce using rule 185 (ArithmeticUnaryOperator -> PLUS .)
    INT             reduce using rule 185 (ArithmeticUnaryOperator -> PLUS .)
    LONG            reduce using rule 185 (ArithmeticUnaryOperator -> PLUS .)
    FLOAT           reduce using rule 185 (ArithmeticUnaryOperator -> PLUS .)
    DOUBLE          reduce using rule 185 (ArithmeticUnaryOperator -> PLUS .)
    VOID            reduce using rule 185 (ArithmeticUnaryOperator -> PLUS .)


state 88

    (81) Block -> Bl Br .

    WHILE           reduce using rule 81 (Block -> Bl Br .)
    RCURPAREN       reduce using rule 81 (Block -> Bl Br .)
    SEMICOLON       reduce using rule 81 (Block -> Bl Br .)
    IDENTIFIER      reduce using rule 81 (Block -> Bl Br .)
    CASE            reduce using rule 81 (Block -> Bl Br .)
    DEFAULT         reduce using rule 81 (Block -> Bl Br .)
    BREAK           reduce using rule 81 (Block -> Bl Br .)
    RETURN          reduce using rule 81 (Block -> Bl Br .)
    LCURPAREN       reduce using rule 81 (Block -> Bl Br .)
    DO              reduce using rule 81 (Block -> Bl Br .)
    FOR             reduce using rule 81 (Block -> Bl Br .)
    IF              reduce using rule 81 (Block -> Bl Br .)
    BOOLEAN         reduce using rule 81 (Block -> Bl Br .)
    CHAR            reduce using rule 81 (Block -> Bl Br .)
    BYTE            reduce using rule 81 (Block -> Bl Br .)
    SHORT           reduce using rule 81 (Block -> Bl Br .)
    INT             reduce using rule 81 (Block -> Bl Br .)
    LONG            reduce using rule 81 (Block -> Bl Br .)
    FLOAT           reduce using rule 81 (Block -> Bl Br .)
    DOUBLE          reduce using rule 81 (Block -> Bl Br .)
    VOID            reduce using rule 81 (Block -> Bl Br .)
    OP_INC          reduce using rule 81 (Block -> Bl Br .)
    OP_DEC          reduce using rule 81 (Block -> Bl Br .)
    PLUS            reduce using rule 81 (Block -> Bl Br .)
    MINUS           reduce using rule 81 (Block -> Bl Br .)
    ~               reduce using rule 81 (Block -> Bl Br .)
    NOT             reduce using rule 81 (Block -> Bl Br .)
    THIS            reduce using rule 81 (Block -> Bl Br .)
    SUPER           reduce using rule 81 (Block -> Bl Br .)
    NULL            reduce using rule 81 (Block -> Bl Br .)
    LROUNPAREN      reduce using rule 81 (Block -> Bl Br .)
    INT_CONST       reduce using rule 81 (Block -> Bl Br .)
    FLOAT_CONST     reduce using rule 81 (Block -> Bl Br .)
    STRING          reduce using rule 81 (Block -> Bl Br .)
    CHAR_CONST      reduce using rule 81 (Block -> Bl Br .)
    BOOLEAN_CONST   reduce using rule 81 (Block -> Bl Br .)
    NEW             reduce using rule 81 (Block -> Bl Br .)
    ELSE            reduce using rule 81 (Block -> Bl Br .)
    STATIC          reduce using rule 81 (Block -> Bl Br .)
    PUBLIC          reduce using rule 81 (Block -> Bl Br .)
    PRIVATE         reduce using rule 81 (Block -> Bl Br .)
    CLASS           reduce using rule 81 (Block -> Bl Br .)


state 89

    (151) SpecialName -> THIS .

    DOT             reduce using rule 151 (SpecialName -> THIS .)
    OP_INC          reduce using rule 151 (SpecialName -> THIS .)
    OP_DEC          reduce using rule 151 (SpecialName -> THIS .)
    EQUAL           reduce using rule 151 (SpecialName -> THIS .)
    ASS_MUL         reduce using rule 151 (SpecialName -> THIS .)
    ASS_ADD         reduce using rule 151 (SpecialName -> THIS .)
    ASS_SUB         reduce using rule 151 (SpecialName -> THIS .)
    MULT            reduce using rule 151 (SpecialName -> THIS .)
    DIV             reduce using rule 151 (SpecialName -> THIS .)
    MOD             reduce using rule 151 (SpecialName -> THIS .)
    PLUS            reduce using rule 151 (SpecialName -> THIS .)
    MINUS           reduce using rule 151 (SpecialName -> THIS .)
    OP_SHL          reduce using rule 151 (SpecialName -> THIS .)
    OP_SHR          reduce using rule 151 (SpecialName -> THIS .)
    OP_SHRR         reduce using rule 151 (SpecialName -> THIS .)
    LESS            reduce using rule 151 (SpecialName -> THIS .)
    MORE            reduce using rule 151 (SpecialName -> THIS .)
    OP_LE           reduce using rule 151 (SpecialName -> THIS .)
    OP_GE           reduce using rule 151 (SpecialName -> THIS .)
    OP_EQ           reduce using rule 151 (SpecialName -> THIS .)
    OP_NE           reduce using rule 151 (SpecialName -> THIS .)
    &               reduce using rule 151 (SpecialName -> THIS .)
    ^               reduce using rule 151 (SpecialName -> THIS .)
    |               reduce using rule 151 (SpecialName -> THIS .)
    OP_LAND         reduce using rule 151 (SpecialName -> THIS .)
    OP_LOR          reduce using rule 151 (SpecialName -> THIS .)
    QUES            reduce using rule 151 (SpecialName -> THIS .)
    SEMICOLON       reduce using rule 151 (SpecialName -> THIS .)
    RROUNPAREN      reduce using rule 151 (SpecialName -> THIS .)
    COMMA           reduce using rule 151 (SpecialName -> THIS .)
    RSQPAREN        reduce using rule 151 (SpecialName -> THIS .)
    COLON           reduce using rule 151 (SpecialName -> THIS .)


state 90

    (218) ConditionalOrExpression -> ConditionalAndExpression .
    (217) ConditionalAndExpression -> ConditionalAndExpression . OP_LAND InclusiveOrExpression

    OP_LOR          reduce using rule 218 (ConditionalOrExpression -> ConditionalAndExpression .)
    QUES            reduce using rule 218 (ConditionalOrExpression -> ConditionalAndExpression .)
    RROUNPAREN      reduce using rule 218 (ConditionalOrExpression -> ConditionalAndExpression .)
    COMMA           reduce using rule 218 (ConditionalOrExpression -> ConditionalAndExpression .)
    RSQPAREN        reduce using rule 218 (ConditionalOrExpression -> ConditionalAndExpression .)
    SEMICOLON       reduce using rule 218 (ConditionalOrExpression -> ConditionalAndExpression .)
    COLON           reduce using rule 218 (ConditionalOrExpression -> ConditionalAndExpression .)
    OP_LAND         shift and go to state 181


state 91

    (89) Statement -> EmptyStatement . Mark_quad
    (96) Mark_quad -> .

    RCURPAREN       reduce using rule 96 (Mark_quad -> .)
    SEMICOLON       reduce using rule 96 (Mark_quad -> .)
    IDENTIFIER      reduce using rule 96 (Mark_quad -> .)
    CASE            reduce using rule 96 (Mark_quad -> .)
    DEFAULT         reduce using rule 96 (Mark_quad -> .)
    BREAK           reduce using rule 96 (Mark_quad -> .)
    RETURN          reduce using rule 96 (Mark_quad -> .)
    WHILE           reduce using rule 96 (Mark_quad -> .)
    LCURPAREN       reduce using rule 96 (Mark_quad -> .)
    DO              reduce using rule 96 (Mark_quad -> .)
    FOR             reduce using rule 96 (Mark_quad -> .)
    IF              reduce using rule 96 (Mark_quad -> .)
    BOOLEAN         reduce using rule 96 (Mark_quad -> .)
    CHAR            reduce using rule 96 (Mark_quad -> .)
    BYTE            reduce using rule 96 (Mark_quad -> .)
    SHORT           reduce using rule 96 (Mark_quad -> .)
    INT             reduce using rule 96 (Mark_quad -> .)
    LONG            reduce using rule 96 (Mark_quad -> .)
    FLOAT           reduce using rule 96 (Mark_quad -> .)
    DOUBLE          reduce using rule 96 (Mark_quad -> .)
    VOID            reduce using rule 96 (Mark_quad -> .)
    OP_INC          reduce using rule 96 (Mark_quad -> .)
    OP_DEC          reduce using rule 96 (Mark_quad -> .)
    PLUS            reduce using rule 96 (Mark_quad -> .)
    MINUS           reduce using rule 96 (Mark_quad -> .)
    ~               reduce using rule 96 (Mark_quad -> .)
    NOT             reduce using rule 96 (Mark_quad -> .)
    THIS            reduce using rule 96 (Mark_quad -> .)
    SUPER           reduce using rule 96 (Mark_quad -> .)
    NULL            reduce using rule 96 (Mark_quad -> .)
    LROUNPAREN      reduce using rule 96 (Mark_quad -> .)
    INT_CONST       reduce using rule 96 (Mark_quad -> .)
    FLOAT_CONST     reduce using rule 96 (Mark_quad -> .)
    STRING          reduce using rule 96 (Mark_quad -> .)
    CHAR_CONST      reduce using rule 96 (Mark_quad -> .)
    BOOLEAN_CONST   reduce using rule 96 (Mark_quad -> .)
    NEW             reduce using rule 96 (Mark_quad -> .)
    ELSE            reduce using rule 96 (Mark_quad -> .)

    Mark_quad                      shift and go to state 182

state 92

    (131) ComplexPrimary -> LROUNPAREN . Expression RROUNPAREN
    (230) Expression -> . AssignmentExpression
    (224) AssignmentExpression -> . ConditionalExpression
    (225) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (220) ConditionalExpression -> . ConditionalOrExpression
    (221) ConditionalExpression -> . ConditionalOrExpression Mark_quad Ques Mark_quad Expression Mark_quad Cln Mark_quad ConditionalExpression Mark_quad
    (177) UnaryExpression -> . OP_INC UnaryExpression
    (178) UnaryExpression -> . OP_DEC UnaryExpression
    (179) UnaryExpression -> . LogicalUnaryExpression
    (180) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) ConditionalOrExpression -> . ConditionalAndExpression
    (219) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (181) LogicalUnaryExpression -> . PostfixExpression
    (182) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (185) ArithmeticUnaryOperator -> . PLUS
    (186) ArithmeticUnaryOperator -> . MINUS
    (216) ConditionalAndExpression -> . InclusiveOrExpression
    (217) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (173) PostfixExpression -> . PrimaryExpression
    (174) PostfixExpression -> . RealPostfixExpression
    (183) LogicalUnaryOperator -> . ~
    (184) LogicalUnaryOperator -> . NOT
    (214) InclusiveOrExpression -> . ExclusiveOrExpression
    (215) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (126) PrimaryExpression -> . QualifiedName
    (127) PrimaryExpression -> . NotJustName
    (175) RealPostfixExpression -> . PostfixExpression OP_INC
    (176) RealPostfixExpression -> . PostfixExpression OP_DEC
    (212) ExclusiveOrExpression -> . AndExpression
    (213) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (128) NotJustName -> . SpecialName
    (129) NotJustName -> . NewAllocationExpression
    (130) NotJustName -> . ComplexPrimary
    (210) AndExpression -> . EqualityExpression
    (211) AndExpression -> . AndExpression & EqualityExpression
    (151) SpecialName -> . THIS
    (152) SpecialName -> . SUPER
    (153) SpecialName -> . NULL
    (156) NewAllocationExpression -> . PlainNewAllocationExpression
    (157) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (131) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (132) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (207) EqualityExpression -> . RelationalExpression
    (208) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (209) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (158) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (159) PlainNewAllocationExpression -> . ClassAllocationExpression
    (160) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (161) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (162) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (133) ComplexPrimaryNoParenthesis -> . INT_CONST
    (134) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (135) ComplexPrimaryNoParenthesis -> . STRING
    (136) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (137) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (138) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (139) ComplexPrimaryNoParenthesis -> . FieldAccess
    (140) ComplexPrimaryNoParenthesis -> . MethodCall
    (202) RelationalExpression -> . ShiftExpression
    (203) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (204) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (205) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (206) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (165) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (166) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (167) ArrayAllocationExpression -> . NEW TypeName Dims
    (163) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (164) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (141) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (142) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (143) FieldAccess -> . NotJustName DOT IDENTIFIER
    (144) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (145) FieldAccess -> . QualifiedName DOT THIS
    (146) FieldAccess -> . QualifiedName DOT CLASS
    (147) FieldAccess -> . PrimitiveType DOT CLASS
    (148) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (149) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (198) ShiftExpression -> . AdditiveExpression
    (199) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (200) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (201) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (150) MethodAccess -> . QualifiedName
    (195) AdditiveExpression -> . MultiplicativeExpression
    (196) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (197) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (191) MultiplicativeExpression -> . CastExpression
    (192) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (193) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (194) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (187) CastExpression -> . UnaryExpression

    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 124
    PLUS            shift and go to state 87
    MINUS           shift and go to state 86
    ~               shift and go to state 140
    NOT             shift and go to state 117
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 89
    SUPER           shift and go to state 156
    NULL            shift and go to state 143
    LROUNPAREN      shift and go to state 92
    INT_CONST       shift and go to state 106
    FLOAT_CONST     shift and go to state 83
    STRING          shift and go to state 149
    CHAR_CONST      shift and go to state 139
    BOOLEAN_CONST   shift and go to state 155
    NEW             shift and go to state 125
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 119
    PrimaryExpression              shift and go to state 127
    PrimitiveType                  shift and go to state 183
    RealPostfixExpression          shift and go to state 95
    ArithmeticUnaryOperator        shift and go to state 96
    AndExpression                  shift and go to state 85
    ArrayAccess                    shift and go to state 108
    CastExpression                 shift and go to state 142
    EqualityExpression             shift and go to state 97
    LogicalUnaryOperator           shift and go to state 145
    ComplexPrimaryNoParenthesis    shift and go to state 99
    MultiplicativeExpression       shift and go to state 100
    ClassAllocationExpression      shift and go to state 120
    MethodCall                     shift and go to state 101
    ConditionalOrExpression        shift and go to state 131
    ShiftExpression                shift and go to state 147
    AssignmentExpression           shift and go to state 103
    NewAllocationExpression        shift and go to state 133
    NotJustName                    shift and go to state 150
    QualifiedName                  shift and go to state 185
    LogicalUnaryExpression         shift and go to state 152
    Expression                     shift and go to state 184
    AdditiveExpression             shift and go to state 135
    ArrayAllocationExpression      shift and go to state 110
    ConditionalExpression          shift and go to state 136
    UnaryExpression                shift and go to state 137
    InclusiveOrExpression          shift and go to state 138
    MethodAccess                   shift and go to state 111
    ExclusiveOrExpression          shift and go to state 113
    ConditionalAndExpression       shift and go to state 90
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    FieldAccess                    shift and go to state 154
    SpecialName                    shift and go to state 118

state 93

    (90) Statement -> LabelStatement . Mark_quad
    (96) Mark_quad -> .

    RCURPAREN       reduce using rule 96 (Mark_quad -> .)
    SEMICOLON       reduce using rule 96 (Mark_quad -> .)
    IDENTIFIER      reduce using rule 96 (Mark_quad -> .)
    CASE            reduce using rule 96 (Mark_quad -> .)
    DEFAULT         reduce using rule 96 (Mark_quad -> .)
    BREAK           reduce using rule 96 (Mark_quad -> .)
    RETURN          reduce using rule 96 (Mark_quad -> .)
    WHILE           reduce using rule 96 (Mark_quad -> .)
    LCURPAREN       reduce using rule 96 (Mark_quad -> .)
    DO              reduce using rule 96 (Mark_quad -> .)
    FOR             reduce using rule 96 (Mark_quad -> .)
    IF              reduce using rule 96 (Mark_quad -> .)
    BOOLEAN         reduce using rule 96 (Mark_quad -> .)
    CHAR            reduce using rule 96 (Mark_quad -> .)
    BYTE            reduce using rule 96 (Mark_quad -> .)
    SHORT           reduce using rule 96 (Mark_quad -> .)
    INT             reduce using rule 96 (Mark_quad -> .)
    LONG            reduce using rule 96 (Mark_quad -> .)
    FLOAT           reduce using rule 96 (Mark_quad -> .)
    DOUBLE          reduce using rule 96 (Mark_quad -> .)
    VOID            reduce using rule 96 (Mark_quad -> .)
    OP_INC          reduce using rule 96 (Mark_quad -> .)
    OP_DEC          reduce using rule 96 (Mark_quad -> .)
    PLUS            reduce using rule 96 (Mark_quad -> .)
    MINUS           reduce using rule 96 (Mark_quad -> .)
    ~               reduce using rule 96 (Mark_quad -> .)
    NOT             reduce using rule 96 (Mark_quad -> .)
    THIS            reduce using rule 96 (Mark_quad -> .)
    SUPER           reduce using rule 96 (Mark_quad -> .)
    NULL            reduce using rule 96 (Mark_quad -> .)
    LROUNPAREN      reduce using rule 96 (Mark_quad -> .)
    INT_CONST       reduce using rule 96 (Mark_quad -> .)
    FLOAT_CONST     reduce using rule 96 (Mark_quad -> .)
    STRING          reduce using rule 96 (Mark_quad -> .)
    CHAR_CONST      reduce using rule 96 (Mark_quad -> .)
    BOOLEAN_CONST   reduce using rule 96 (Mark_quad -> .)
    NEW             reduce using rule 96 (Mark_quad -> .)
    ELSE            reduce using rule 96 (Mark_quad -> .)

    Mark_quad                      shift and go to state 186

state 94

    (124) JumpStatement -> RETURN . Expression SEMICOLON
    (125) JumpStatement -> RETURN . SEMICOLON
    (230) Expression -> . AssignmentExpression
    (224) AssignmentExpression -> . ConditionalExpression
    (225) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (220) ConditionalExpression -> . ConditionalOrExpression
    (221) ConditionalExpression -> . ConditionalOrExpression Mark_quad Ques Mark_quad Expression Mark_quad Cln Mark_quad ConditionalExpression Mark_quad
    (177) UnaryExpression -> . OP_INC UnaryExpression
    (178) UnaryExpression -> . OP_DEC UnaryExpression
    (179) UnaryExpression -> . LogicalUnaryExpression
    (180) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) ConditionalOrExpression -> . ConditionalAndExpression
    (219) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (181) LogicalUnaryExpression -> . PostfixExpression
    (182) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (185) ArithmeticUnaryOperator -> . PLUS
    (186) ArithmeticUnaryOperator -> . MINUS
    (216) ConditionalAndExpression -> . InclusiveOrExpression
    (217) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (173) PostfixExpression -> . PrimaryExpression
    (174) PostfixExpression -> . RealPostfixExpression
    (183) LogicalUnaryOperator -> . ~
    (184) LogicalUnaryOperator -> . NOT
    (214) InclusiveOrExpression -> . ExclusiveOrExpression
    (215) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (126) PrimaryExpression -> . QualifiedName
    (127) PrimaryExpression -> . NotJustName
    (175) RealPostfixExpression -> . PostfixExpression OP_INC
    (176) RealPostfixExpression -> . PostfixExpression OP_DEC
    (212) ExclusiveOrExpression -> . AndExpression
    (213) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (128) NotJustName -> . SpecialName
    (129) NotJustName -> . NewAllocationExpression
    (130) NotJustName -> . ComplexPrimary
    (210) AndExpression -> . EqualityExpression
    (211) AndExpression -> . AndExpression & EqualityExpression
    (151) SpecialName -> . THIS
    (152) SpecialName -> . SUPER
    (153) SpecialName -> . NULL
    (156) NewAllocationExpression -> . PlainNewAllocationExpression
    (157) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (131) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (132) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (207) EqualityExpression -> . RelationalExpression
    (208) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (209) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (158) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (159) PlainNewAllocationExpression -> . ClassAllocationExpression
    (160) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (161) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (162) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (133) ComplexPrimaryNoParenthesis -> . INT_CONST
    (134) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (135) ComplexPrimaryNoParenthesis -> . STRING
    (136) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (137) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (138) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (139) ComplexPrimaryNoParenthesis -> . FieldAccess
    (140) ComplexPrimaryNoParenthesis -> . MethodCall
    (202) RelationalExpression -> . ShiftExpression
    (203) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (204) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (205) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (206) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (165) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (166) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (167) ArrayAllocationExpression -> . NEW TypeName Dims
    (163) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (164) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (141) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (142) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (143) FieldAccess -> . NotJustName DOT IDENTIFIER
    (144) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (145) FieldAccess -> . QualifiedName DOT THIS
    (146) FieldAccess -> . QualifiedName DOT CLASS
    (147) FieldAccess -> . PrimitiveType DOT CLASS
    (148) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (149) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (198) ShiftExpression -> . AdditiveExpression
    (199) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (200) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (201) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (150) MethodAccess -> . QualifiedName
    (195) AdditiveExpression -> . MultiplicativeExpression
    (196) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (197) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (191) MultiplicativeExpression -> . CastExpression
    (192) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (193) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (194) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (187) CastExpression -> . UnaryExpression

    SEMICOLON       shift and go to state 187
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 124
    PLUS            shift and go to state 87
    MINUS           shift and go to state 86
    ~               shift and go to state 140
    NOT             shift and go to state 117
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 89
    SUPER           shift and go to state 156
    NULL            shift and go to state 143
    LROUNPAREN      shift and go to state 92
    INT_CONST       shift and go to state 106
    FLOAT_CONST     shift and go to state 83
    STRING          shift and go to state 149
    CHAR_CONST      shift and go to state 139
    BOOLEAN_CONST   shift and go to state 155
    NEW             shift and go to state 125
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 119
    PrimaryExpression              shift and go to state 127
    PrimitiveType                  shift and go to state 183
    RealPostfixExpression          shift and go to state 95
    ArithmeticUnaryOperator        shift and go to state 96
    AndExpression                  shift and go to state 85
    ArrayAccess                    shift and go to state 108
    CastExpression                 shift and go to state 142
    EqualityExpression             shift and go to state 97
    LogicalUnaryOperator           shift and go to state 145
    ComplexPrimaryNoParenthesis    shift and go to state 99
    MultiplicativeExpression       shift and go to state 100
    ClassAllocationExpression      shift and go to state 120
    MethodCall                     shift and go to state 101
    ConditionalOrExpression        shift and go to state 131
    ShiftExpression                shift and go to state 147
    AssignmentExpression           shift and go to state 103
    NewAllocationExpression        shift and go to state 133
    NotJustName                    shift and go to state 150
    QualifiedName                  shift and go to state 185
    LogicalUnaryExpression         shift and go to state 152
    Expression                     shift and go to state 188
    AdditiveExpression             shift and go to state 135
    ArrayAllocationExpression      shift and go to state 110
    ConditionalExpression          shift and go to state 136
    UnaryExpression                shift and go to state 137
    InclusiveOrExpression          shift and go to state 138
    MethodAccess                   shift and go to state 111
    ExclusiveOrExpression          shift and go to state 113
    ConditionalAndExpression       shift and go to state 90
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    FieldAccess                    shift and go to state 154
    SpecialName                    shift and go to state 118

state 95

    (174) PostfixExpression -> RealPostfixExpression .
    (144) FieldAccess -> RealPostfixExpression . DOT IDENTIFIER

    OP_INC          reduce using rule 174 (PostfixExpression -> RealPostfixExpression .)
    OP_DEC          reduce using rule 174 (PostfixExpression -> RealPostfixExpression .)
    EQUAL           reduce using rule 174 (PostfixExpression -> RealPostfixExpression .)
    ASS_MUL         reduce using rule 174 (PostfixExpression -> RealPostfixExpression .)
    ASS_ADD         reduce using rule 174 (PostfixExpression -> RealPostfixExpression .)
    ASS_SUB         reduce using rule 174 (PostfixExpression -> RealPostfixExpression .)
    MULT            reduce using rule 174 (PostfixExpression -> RealPostfixExpression .)
    DIV             reduce using rule 174 (PostfixExpression -> RealPostfixExpression .)
    MOD             reduce using rule 174 (PostfixExpression -> RealPostfixExpression .)
    PLUS            reduce using rule 174 (PostfixExpression -> RealPostfixExpression .)
    MINUS           reduce using rule 174 (PostfixExpression -> RealPostfixExpression .)
    OP_SHL          reduce using rule 174 (PostfixExpression -> RealPostfixExpression .)
    OP_SHR          reduce using rule 174 (PostfixExpression -> RealPostfixExpression .)
    OP_SHRR         reduce using rule 174 (PostfixExpression -> RealPostfixExpression .)
    LESS            reduce using rule 174 (PostfixExpression -> RealPostfixExpression .)
    MORE            reduce using rule 174 (PostfixExpression -> RealPostfixExpression .)
    OP_LE           reduce using rule 174 (PostfixExpression -> RealPostfixExpression .)
    OP_GE           reduce using rule 174 (PostfixExpression -> RealPostfixExpression .)
    OP_EQ           reduce using rule 174 (PostfixExpression -> RealPostfixExpression .)
    OP_NE           reduce using rule 174 (PostfixExpression -> RealPostfixExpression .)
    &               reduce using rule 174 (PostfixExpression -> RealPostfixExpression .)
    ^               reduce using rule 174 (PostfixExpression -> RealPostfixExpression .)
    |               reduce using rule 174 (PostfixExpression -> RealPostfixExpression .)
    OP_LAND         reduce using rule 174 (PostfixExpression -> RealPostfixExpression .)
    OP_LOR          reduce using rule 174 (PostfixExpression -> RealPostfixExpression .)
    QUES            reduce using rule 174 (PostfixExpression -> RealPostfixExpression .)
    RROUNPAREN      reduce using rule 174 (PostfixExpression -> RealPostfixExpression .)
    COMMA           reduce using rule 174 (PostfixExpression -> RealPostfixExpression .)
    SEMICOLON       reduce using rule 174 (PostfixExpression -> RealPostfixExpression .)
    COLON           reduce using rule 174 (PostfixExpression -> RealPostfixExpression .)
    RSQPAREN        reduce using rule 174 (PostfixExpression -> RealPostfixExpression .)
    DOT             shift and go to state 189


state 96

    (180) UnaryExpression -> ArithmeticUnaryOperator . CastExpression
    (187) CastExpression -> . UnaryExpression
    (177) UnaryExpression -> . OP_INC UnaryExpression
    (178) UnaryExpression -> . OP_DEC UnaryExpression
    (179) UnaryExpression -> . LogicalUnaryExpression
    (180) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (181) LogicalUnaryExpression -> . PostfixExpression
    (182) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (185) ArithmeticUnaryOperator -> . PLUS
    (186) ArithmeticUnaryOperator -> . MINUS
    (173) PostfixExpression -> . PrimaryExpression
    (174) PostfixExpression -> . RealPostfixExpression
    (183) LogicalUnaryOperator -> . ~
    (184) LogicalUnaryOperator -> . NOT
    (126) PrimaryExpression -> . QualifiedName
    (127) PrimaryExpression -> . NotJustName
    (175) RealPostfixExpression -> . PostfixExpression OP_INC
    (176) RealPostfixExpression -> . PostfixExpression OP_DEC
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (128) NotJustName -> . SpecialName
    (129) NotJustName -> . NewAllocationExpression
    (130) NotJustName -> . ComplexPrimary
    (151) SpecialName -> . THIS
    (152) SpecialName -> . SUPER
    (153) SpecialName -> . NULL
    (156) NewAllocationExpression -> . PlainNewAllocationExpression
    (157) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (131) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (132) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (158) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (159) PlainNewAllocationExpression -> . ClassAllocationExpression
    (160) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (161) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (162) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (133) ComplexPrimaryNoParenthesis -> . INT_CONST
    (134) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (135) ComplexPrimaryNoParenthesis -> . STRING
    (136) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (137) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (138) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (139) ComplexPrimaryNoParenthesis -> . FieldAccess
    (140) ComplexPrimaryNoParenthesis -> . MethodCall
    (165) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (166) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (167) ArrayAllocationExpression -> . NEW TypeName Dims
    (163) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (164) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (141) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (142) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (143) FieldAccess -> . NotJustName DOT IDENTIFIER
    (144) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (145) FieldAccess -> . QualifiedName DOT THIS
    (146) FieldAccess -> . QualifiedName DOT CLASS
    (147) FieldAccess -> . PrimitiveType DOT CLASS
    (148) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (149) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (150) MethodAccess -> . QualifiedName

    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 124
    PLUS            shift and go to state 87
    MINUS           shift and go to state 86
    ~               shift and go to state 140
    NOT             shift and go to state 117
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 89
    SUPER           shift and go to state 156
    NULL            shift and go to state 143
    LROUNPAREN      shift and go to state 92
    INT_CONST       shift and go to state 106
    FLOAT_CONST     shift and go to state 83
    STRING          shift and go to state 149
    CHAR_CONST      shift and go to state 139
    BOOLEAN_CONST   shift and go to state 155
    NEW             shift and go to state 125
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 119
    CastExpression                 shift and go to state 190
    PrimitiveType                  shift and go to state 183
    RealPostfixExpression          shift and go to state 95
    ArithmeticUnaryOperator        shift and go to state 96
    MethodCall                     shift and go to state 101
    ClassAllocationExpression      shift and go to state 120
    LogicalUnaryOperator           shift and go to state 145
    ComplexPrimaryNoParenthesis    shift and go to state 99
    ArrayAccess                    shift and go to state 108
    NewAllocationExpression        shift and go to state 133
    NotJustName                    shift and go to state 150
    QualifiedName                  shift and go to state 185
    LogicalUnaryExpression         shift and go to state 152
    ArrayAllocationExpression      shift and go to state 110
    UnaryExpression                shift and go to state 191
    PrimaryExpression              shift and go to state 127
    FieldAccess                    shift and go to state 154
    PlainNewAllocationExpression   shift and go to state 115
    MethodAccess                   shift and go to state 111
    SpecialName                    shift and go to state 118

state 97

    (210) AndExpression -> EqualityExpression .
    (208) EqualityExpression -> EqualityExpression . OP_EQ RelationalExpression
    (209) EqualityExpression -> EqualityExpression . OP_NE RelationalExpression

    &               reduce using rule 210 (AndExpression -> EqualityExpression .)
    ^               reduce using rule 210 (AndExpression -> EqualityExpression .)
    |               reduce using rule 210 (AndExpression -> EqualityExpression .)
    OP_LAND         reduce using rule 210 (AndExpression -> EqualityExpression .)
    OP_LOR          reduce using rule 210 (AndExpression -> EqualityExpression .)
    QUES            reduce using rule 210 (AndExpression -> EqualityExpression .)
    SEMICOLON       reduce using rule 210 (AndExpression -> EqualityExpression .)
    RROUNPAREN      reduce using rule 210 (AndExpression -> EqualityExpression .)
    COLON           reduce using rule 210 (AndExpression -> EqualityExpression .)
    COMMA           reduce using rule 210 (AndExpression -> EqualityExpression .)
    RSQPAREN        reduce using rule 210 (AndExpression -> EqualityExpression .)
    OP_EQ           shift and go to state 193
    OP_NE           shift and go to state 192


state 98

    (123) JumpStatement -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 194


state 99

    (132) ComplexPrimary -> ComplexPrimaryNoParenthesis .

    LSQPAREN        reduce using rule 132 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    DOT             reduce using rule 132 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_INC          reduce using rule 132 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_DEC          reduce using rule 132 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    MULT            reduce using rule 132 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    DIV             reduce using rule 132 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    MOD             reduce using rule 132 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    PLUS            reduce using rule 132 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    MINUS           reduce using rule 132 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_SHL          reduce using rule 132 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_SHR          reduce using rule 132 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_SHRR         reduce using rule 132 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    LESS            reduce using rule 132 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    MORE            reduce using rule 132 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_LE           reduce using rule 132 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_GE           reduce using rule 132 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_EQ           reduce using rule 132 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_NE           reduce using rule 132 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    &               reduce using rule 132 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    ^               reduce using rule 132 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    |               reduce using rule 132 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_LAND         reduce using rule 132 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    OP_LOR          reduce using rule 132 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    QUES            reduce using rule 132 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    SEMICOLON       reduce using rule 132 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    RROUNPAREN      reduce using rule 132 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    COLON           reduce using rule 132 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    COMMA           reduce using rule 132 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    RSQPAREN        reduce using rule 132 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    EQUAL           reduce using rule 132 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    ASS_MUL         reduce using rule 132 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    ASS_ADD         reduce using rule 132 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)
    ASS_SUB         reduce using rule 132 (ComplexPrimary -> ComplexPrimaryNoParenthesis .)


state 100

    (195) AdditiveExpression -> MultiplicativeExpression .
    (192) MultiplicativeExpression -> MultiplicativeExpression . MULT CastExpression
    (193) MultiplicativeExpression -> MultiplicativeExpression . DIV CastExpression
    (194) MultiplicativeExpression -> MultiplicativeExpression . MOD CastExpression

    PLUS            reduce using rule 195 (AdditiveExpression -> MultiplicativeExpression .)
    MINUS           reduce using rule 195 (AdditiveExpression -> MultiplicativeExpression .)
    OP_SHL          reduce using rule 195 (AdditiveExpression -> MultiplicativeExpression .)
    OP_SHR          reduce using rule 195 (AdditiveExpression -> MultiplicativeExpression .)
    OP_SHRR         reduce using rule 195 (AdditiveExpression -> MultiplicativeExpression .)
    LESS            reduce using rule 195 (AdditiveExpression -> MultiplicativeExpression .)
    MORE            reduce using rule 195 (AdditiveExpression -> MultiplicativeExpression .)
    OP_LE           reduce using rule 195 (AdditiveExpression -> MultiplicativeExpression .)
    OP_GE           reduce using rule 195 (AdditiveExpression -> MultiplicativeExpression .)
    OP_EQ           reduce using rule 195 (AdditiveExpression -> MultiplicativeExpression .)
    OP_NE           reduce using rule 195 (AdditiveExpression -> MultiplicativeExpression .)
    &               reduce using rule 195 (AdditiveExpression -> MultiplicativeExpression .)
    ^               reduce using rule 195 (AdditiveExpression -> MultiplicativeExpression .)
    |               reduce using rule 195 (AdditiveExpression -> MultiplicativeExpression .)
    OP_LAND         reduce using rule 195 (AdditiveExpression -> MultiplicativeExpression .)
    OP_LOR          reduce using rule 195 (AdditiveExpression -> MultiplicativeExpression .)
    QUES            reduce using rule 195 (AdditiveExpression -> MultiplicativeExpression .)
    SEMICOLON       reduce using rule 195 (AdditiveExpression -> MultiplicativeExpression .)
    RROUNPAREN      reduce using rule 195 (AdditiveExpression -> MultiplicativeExpression .)
    COLON           reduce using rule 195 (AdditiveExpression -> MultiplicativeExpression .)
    COMMA           reduce using rule 195 (AdditiveExpression -> MultiplicativeExpression .)
    RSQPAREN        reduce using rule 195 (AdditiveExpression -> MultiplicativeExpression .)
    MULT            shift and go to state 196
    DIV             shift and go to state 195
    MOD             shift and go to state 197


state 101

    (140) ComplexPrimaryNoParenthesis -> MethodCall .

    LSQPAREN        reduce using rule 140 (ComplexPrimaryNoParenthesis -> MethodCall .)
    DOT             reduce using rule 140 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_INC          reduce using rule 140 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_DEC          reduce using rule 140 (ComplexPrimaryNoParenthesis -> MethodCall .)
    MULT            reduce using rule 140 (ComplexPrimaryNoParenthesis -> MethodCall .)
    DIV             reduce using rule 140 (ComplexPrimaryNoParenthesis -> MethodCall .)
    MOD             reduce using rule 140 (ComplexPrimaryNoParenthesis -> MethodCall .)
    PLUS            reduce using rule 140 (ComplexPrimaryNoParenthesis -> MethodCall .)
    MINUS           reduce using rule 140 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_SHL          reduce using rule 140 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_SHR          reduce using rule 140 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_SHRR         reduce using rule 140 (ComplexPrimaryNoParenthesis -> MethodCall .)
    LESS            reduce using rule 140 (ComplexPrimaryNoParenthesis -> MethodCall .)
    MORE            reduce using rule 140 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_LE           reduce using rule 140 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_GE           reduce using rule 140 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_EQ           reduce using rule 140 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_NE           reduce using rule 140 (ComplexPrimaryNoParenthesis -> MethodCall .)
    &               reduce using rule 140 (ComplexPrimaryNoParenthesis -> MethodCall .)
    ^               reduce using rule 140 (ComplexPrimaryNoParenthesis -> MethodCall .)
    |               reduce using rule 140 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_LAND         reduce using rule 140 (ComplexPrimaryNoParenthesis -> MethodCall .)
    OP_LOR          reduce using rule 140 (ComplexPrimaryNoParenthesis -> MethodCall .)
    QUES            reduce using rule 140 (ComplexPrimaryNoParenthesis -> MethodCall .)
    SEMICOLON       reduce using rule 140 (ComplexPrimaryNoParenthesis -> MethodCall .)
    RROUNPAREN      reduce using rule 140 (ComplexPrimaryNoParenthesis -> MethodCall .)
    COLON           reduce using rule 140 (ComplexPrimaryNoParenthesis -> MethodCall .)
    COMMA           reduce using rule 140 (ComplexPrimaryNoParenthesis -> MethodCall .)
    RSQPAREN        reduce using rule 140 (ComplexPrimaryNoParenthesis -> MethodCall .)
    EQUAL           reduce using rule 140 (ComplexPrimaryNoParenthesis -> MethodCall .)
    ASS_MUL         reduce using rule 140 (ComplexPrimaryNoParenthesis -> MethodCall .)
    ASS_ADD         reduce using rule 140 (ComplexPrimaryNoParenthesis -> MethodCall .)
    ASS_SUB         reduce using rule 140 (ComplexPrimaryNoParenthesis -> MethodCall .)


state 102

    (95) Statement -> SelectionStatement . Mark_quad
    (96) Mark_quad -> .

    RCURPAREN       reduce using rule 96 (Mark_quad -> .)
    SEMICOLON       reduce using rule 96 (Mark_quad -> .)
    IDENTIFIER      reduce using rule 96 (Mark_quad -> .)
    CASE            reduce using rule 96 (Mark_quad -> .)
    DEFAULT         reduce using rule 96 (Mark_quad -> .)
    BREAK           reduce using rule 96 (Mark_quad -> .)
    RETURN          reduce using rule 96 (Mark_quad -> .)
    WHILE           reduce using rule 96 (Mark_quad -> .)
    LCURPAREN       reduce using rule 96 (Mark_quad -> .)
    DO              reduce using rule 96 (Mark_quad -> .)
    FOR             reduce using rule 96 (Mark_quad -> .)
    IF              reduce using rule 96 (Mark_quad -> .)
    BOOLEAN         reduce using rule 96 (Mark_quad -> .)
    CHAR            reduce using rule 96 (Mark_quad -> .)
    BYTE            reduce using rule 96 (Mark_quad -> .)
    SHORT           reduce using rule 96 (Mark_quad -> .)
    INT             reduce using rule 96 (Mark_quad -> .)
    LONG            reduce using rule 96 (Mark_quad -> .)
    FLOAT           reduce using rule 96 (Mark_quad -> .)
    DOUBLE          reduce using rule 96 (Mark_quad -> .)
    VOID            reduce using rule 96 (Mark_quad -> .)
    OP_INC          reduce using rule 96 (Mark_quad -> .)
    OP_DEC          reduce using rule 96 (Mark_quad -> .)
    PLUS            reduce using rule 96 (Mark_quad -> .)
    MINUS           reduce using rule 96 (Mark_quad -> .)
    ~               reduce using rule 96 (Mark_quad -> .)
    NOT             reduce using rule 96 (Mark_quad -> .)
    THIS            reduce using rule 96 (Mark_quad -> .)
    SUPER           reduce using rule 96 (Mark_quad -> .)
    NULL            reduce using rule 96 (Mark_quad -> .)
    LROUNPAREN      reduce using rule 96 (Mark_quad -> .)
    INT_CONST       reduce using rule 96 (Mark_quad -> .)
    FLOAT_CONST     reduce using rule 96 (Mark_quad -> .)
    STRING          reduce using rule 96 (Mark_quad -> .)
    CHAR_CONST      reduce using rule 96 (Mark_quad -> .)
    BOOLEAN_CONST   reduce using rule 96 (Mark_quad -> .)
    NEW             reduce using rule 96 (Mark_quad -> .)
    ELSE            reduce using rule 96 (Mark_quad -> .)

    Mark_quad                      shift and go to state 198

state 103

    (230) Expression -> AssignmentExpression .

    SEMICOLON       reduce using rule 230 (Expression -> AssignmentExpression .)
    RSQPAREN        reduce using rule 230 (Expression -> AssignmentExpression .)
    RROUNPAREN      reduce using rule 230 (Expression -> AssignmentExpression .)
    COMMA           reduce using rule 230 (Expression -> AssignmentExpression .)
    COLON           reduce using rule 230 (Expression -> AssignmentExpression .)


state 104

    (113) Fr -> FOR .

    LROUNPAREN      reduce using rule 113 (Fr -> FOR .)


state 105

    (177) UnaryExpression -> OP_INC . UnaryExpression
    (177) UnaryExpression -> . OP_INC UnaryExpression
    (178) UnaryExpression -> . OP_DEC UnaryExpression
    (179) UnaryExpression -> . LogicalUnaryExpression
    (180) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (181) LogicalUnaryExpression -> . PostfixExpression
    (182) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (185) ArithmeticUnaryOperator -> . PLUS
    (186) ArithmeticUnaryOperator -> . MINUS
    (173) PostfixExpression -> . PrimaryExpression
    (174) PostfixExpression -> . RealPostfixExpression
    (183) LogicalUnaryOperator -> . ~
    (184) LogicalUnaryOperator -> . NOT
    (126) PrimaryExpression -> . QualifiedName
    (127) PrimaryExpression -> . NotJustName
    (175) RealPostfixExpression -> . PostfixExpression OP_INC
    (176) RealPostfixExpression -> . PostfixExpression OP_DEC
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (128) NotJustName -> . SpecialName
    (129) NotJustName -> . NewAllocationExpression
    (130) NotJustName -> . ComplexPrimary
    (151) SpecialName -> . THIS
    (152) SpecialName -> . SUPER
    (153) SpecialName -> . NULL
    (156) NewAllocationExpression -> . PlainNewAllocationExpression
    (157) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (131) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (132) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (158) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (159) PlainNewAllocationExpression -> . ClassAllocationExpression
    (160) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (161) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (162) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (133) ComplexPrimaryNoParenthesis -> . INT_CONST
    (134) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (135) ComplexPrimaryNoParenthesis -> . STRING
    (136) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (137) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (138) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (139) ComplexPrimaryNoParenthesis -> . FieldAccess
    (140) ComplexPrimaryNoParenthesis -> . MethodCall
    (165) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (166) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (167) ArrayAllocationExpression -> . NEW TypeName Dims
    (163) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (164) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (141) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (142) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (143) FieldAccess -> . NotJustName DOT IDENTIFIER
    (144) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (145) FieldAccess -> . QualifiedName DOT THIS
    (146) FieldAccess -> . QualifiedName DOT CLASS
    (147) FieldAccess -> . PrimitiveType DOT CLASS
    (148) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (149) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (150) MethodAccess -> . QualifiedName

    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 124
    PLUS            shift and go to state 87
    MINUS           shift and go to state 86
    ~               shift and go to state 140
    NOT             shift and go to state 117
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 89
    SUPER           shift and go to state 156
    NULL            shift and go to state 143
    LROUNPAREN      shift and go to state 92
    INT_CONST       shift and go to state 106
    FLOAT_CONST     shift and go to state 83
    STRING          shift and go to state 149
    CHAR_CONST      shift and go to state 139
    BOOLEAN_CONST   shift and go to state 155
    NEW             shift and go to state 125
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 119
    PrimaryExpression              shift and go to state 127
    PrimitiveType                  shift and go to state 183
    RealPostfixExpression          shift and go to state 95
    ArithmeticUnaryOperator        shift and go to state 96
    MethodCall                     shift and go to state 101
    ClassAllocationExpression      shift and go to state 120
    LogicalUnaryOperator           shift and go to state 145
    ComplexPrimaryNoParenthesis    shift and go to state 99
    ArrayAccess                    shift and go to state 108
    NewAllocationExpression        shift and go to state 133
    NotJustName                    shift and go to state 150
    QualifiedName                  shift and go to state 185
    LogicalUnaryExpression         shift and go to state 152
    ArrayAllocationExpression      shift and go to state 110
    UnaryExpression                shift and go to state 199
    FieldAccess                    shift and go to state 154
    PlainNewAllocationExpression   shift and go to state 115
    MethodAccess                   shift and go to state 111
    SpecialName                    shift and go to state 118

state 106

    (133) ComplexPrimaryNoParenthesis -> INT_CONST .

    LSQPAREN        reduce using rule 133 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    DOT             reduce using rule 133 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    OP_INC          reduce using rule 133 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    OP_DEC          reduce using rule 133 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    MULT            reduce using rule 133 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    DIV             reduce using rule 133 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    MOD             reduce using rule 133 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    PLUS            reduce using rule 133 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    MINUS           reduce using rule 133 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    OP_SHL          reduce using rule 133 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    OP_SHR          reduce using rule 133 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    OP_SHRR         reduce using rule 133 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    LESS            reduce using rule 133 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    MORE            reduce using rule 133 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    OP_LE           reduce using rule 133 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    OP_GE           reduce using rule 133 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    OP_EQ           reduce using rule 133 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    OP_NE           reduce using rule 133 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    &               reduce using rule 133 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    ^               reduce using rule 133 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    |               reduce using rule 133 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    OP_LAND         reduce using rule 133 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    OP_LOR          reduce using rule 133 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    QUES            reduce using rule 133 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    SEMICOLON       reduce using rule 133 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    RROUNPAREN      reduce using rule 133 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    COLON           reduce using rule 133 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    COMMA           reduce using rule 133 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    RSQPAREN        reduce using rule 133 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    EQUAL           reduce using rule 133 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    ASS_MUL         reduce using rule 133 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    ASS_ADD         reduce using rule 133 (ComplexPrimaryNoParenthesis -> INT_CONST .)
    ASS_SUB         reduce using rule 133 (ComplexPrimaryNoParenthesis -> INT_CONST .)


state 107

    (83) Br -> RCURPAREN .

    SEMICOLON       reduce using rule 83 (Br -> RCURPAREN .)
    RCURPAREN       reduce using rule 83 (Br -> RCURPAREN .)
    STATIC          reduce using rule 83 (Br -> RCURPAREN .)
    IDENTIFIER      reduce using rule 83 (Br -> RCURPAREN .)
    PUBLIC          reduce using rule 83 (Br -> RCURPAREN .)
    PRIVATE         reduce using rule 83 (Br -> RCURPAREN .)
    LCURPAREN       reduce using rule 83 (Br -> RCURPAREN .)
    CLASS           reduce using rule 83 (Br -> RCURPAREN .)
    BOOLEAN         reduce using rule 83 (Br -> RCURPAREN .)
    CHAR            reduce using rule 83 (Br -> RCURPAREN .)
    BYTE            reduce using rule 83 (Br -> RCURPAREN .)
    SHORT           reduce using rule 83 (Br -> RCURPAREN .)
    INT             reduce using rule 83 (Br -> RCURPAREN .)
    LONG            reduce using rule 83 (Br -> RCURPAREN .)
    FLOAT           reduce using rule 83 (Br -> RCURPAREN .)
    DOUBLE          reduce using rule 83 (Br -> RCURPAREN .)
    VOID            reduce using rule 83 (Br -> RCURPAREN .)
    CASE            reduce using rule 83 (Br -> RCURPAREN .)
    DEFAULT         reduce using rule 83 (Br -> RCURPAREN .)
    BREAK           reduce using rule 83 (Br -> RCURPAREN .)
    RETURN          reduce using rule 83 (Br -> RCURPAREN .)
    WHILE           reduce using rule 83 (Br -> RCURPAREN .)
    DO              reduce using rule 83 (Br -> RCURPAREN .)
    FOR             reduce using rule 83 (Br -> RCURPAREN .)
    IF              reduce using rule 83 (Br -> RCURPAREN .)
    OP_INC          reduce using rule 83 (Br -> RCURPAREN .)
    OP_DEC          reduce using rule 83 (Br -> RCURPAREN .)
    PLUS            reduce using rule 83 (Br -> RCURPAREN .)
    MINUS           reduce using rule 83 (Br -> RCURPAREN .)
    ~               reduce using rule 83 (Br -> RCURPAREN .)
    NOT             reduce using rule 83 (Br -> RCURPAREN .)
    THIS            reduce using rule 83 (Br -> RCURPAREN .)
    SUPER           reduce using rule 83 (Br -> RCURPAREN .)
    NULL            reduce using rule 83 (Br -> RCURPAREN .)
    LROUNPAREN      reduce using rule 83 (Br -> RCURPAREN .)
    INT_CONST       reduce using rule 83 (Br -> RCURPAREN .)
    FLOAT_CONST     reduce using rule 83 (Br -> RCURPAREN .)
    STRING          reduce using rule 83 (Br -> RCURPAREN .)
    CHAR_CONST      reduce using rule 83 (Br -> RCURPAREN .)
    BOOLEAN_CONST   reduce using rule 83 (Br -> RCURPAREN .)
    NEW             reduce using rule 83 (Br -> RCURPAREN .)
    ELSE            reduce using rule 83 (Br -> RCURPAREN .)


state 108

    (138) ComplexPrimaryNoParenthesis -> ArrayAccess .

    LSQPAREN        reduce using rule 138 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    DOT             reduce using rule 138 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_INC          reduce using rule 138 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_DEC          reduce using rule 138 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    MULT            reduce using rule 138 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    DIV             reduce using rule 138 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    MOD             reduce using rule 138 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    PLUS            reduce using rule 138 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    MINUS           reduce using rule 138 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_SHL          reduce using rule 138 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_SHR          reduce using rule 138 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_SHRR         reduce using rule 138 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    LESS            reduce using rule 138 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    MORE            reduce using rule 138 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_LE           reduce using rule 138 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_GE           reduce using rule 138 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_EQ           reduce using rule 138 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_NE           reduce using rule 138 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    &               reduce using rule 138 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    ^               reduce using rule 138 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    |               reduce using rule 138 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_LAND         reduce using rule 138 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    OP_LOR          reduce using rule 138 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    QUES            reduce using rule 138 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    SEMICOLON       reduce using rule 138 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    RROUNPAREN      reduce using rule 138 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    COLON           reduce using rule 138 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    COMMA           reduce using rule 138 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    RSQPAREN        reduce using rule 138 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    EQUAL           reduce using rule 138 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    ASS_MUL         reduce using rule 138 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    ASS_ADD         reduce using rule 138 (ComplexPrimaryNoParenthesis -> ArrayAccess .)
    ASS_SUB         reduce using rule 138 (ComplexPrimaryNoParenthesis -> ArrayAccess .)


state 109

    (93) Statement -> Block . Mark_quad
    (96) Mark_quad -> .

    RCURPAREN       reduce using rule 96 (Mark_quad -> .)
    SEMICOLON       reduce using rule 96 (Mark_quad -> .)
    IDENTIFIER      reduce using rule 96 (Mark_quad -> .)
    CASE            reduce using rule 96 (Mark_quad -> .)
    DEFAULT         reduce using rule 96 (Mark_quad -> .)
    BREAK           reduce using rule 96 (Mark_quad -> .)
    RETURN          reduce using rule 96 (Mark_quad -> .)
    WHILE           reduce using rule 96 (Mark_quad -> .)
    LCURPAREN       reduce using rule 96 (Mark_quad -> .)
    DO              reduce using rule 96 (Mark_quad -> .)
    FOR             reduce using rule 96 (Mark_quad -> .)
    IF              reduce using rule 96 (Mark_quad -> .)
    BOOLEAN         reduce using rule 96 (Mark_quad -> .)
    CHAR            reduce using rule 96 (Mark_quad -> .)
    BYTE            reduce using rule 96 (Mark_quad -> .)
    SHORT           reduce using rule 96 (Mark_quad -> .)
    INT             reduce using rule 96 (Mark_quad -> .)
    LONG            reduce using rule 96 (Mark_quad -> .)
    FLOAT           reduce using rule 96 (Mark_quad -> .)
    DOUBLE          reduce using rule 96 (Mark_quad -> .)
    VOID            reduce using rule 96 (Mark_quad -> .)
    OP_INC          reduce using rule 96 (Mark_quad -> .)
    OP_DEC          reduce using rule 96 (Mark_quad -> .)
    PLUS            reduce using rule 96 (Mark_quad -> .)
    MINUS           reduce using rule 96 (Mark_quad -> .)
    ~               reduce using rule 96 (Mark_quad -> .)
    NOT             reduce using rule 96 (Mark_quad -> .)
    THIS            reduce using rule 96 (Mark_quad -> .)
    SUPER           reduce using rule 96 (Mark_quad -> .)
    NULL            reduce using rule 96 (Mark_quad -> .)
    LROUNPAREN      reduce using rule 96 (Mark_quad -> .)
    INT_CONST       reduce using rule 96 (Mark_quad -> .)
    FLOAT_CONST     reduce using rule 96 (Mark_quad -> .)
    STRING          reduce using rule 96 (Mark_quad -> .)
    CHAR_CONST      reduce using rule 96 (Mark_quad -> .)
    BOOLEAN_CONST   reduce using rule 96 (Mark_quad -> .)
    NEW             reduce using rule 96 (Mark_quad -> .)
    ELSE            reduce using rule 96 (Mark_quad -> .)

    Mark_quad                      shift and go to state 200

state 110

    (158) PlainNewAllocationExpression -> ArrayAllocationExpression .
    (160) PlainNewAllocationExpression -> ArrayAllocationExpression . LCURPAREN RCURPAREN

    DOT             reduce using rule 158 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_INC          reduce using rule 158 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_DEC          reduce using rule 158 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    MULT            reduce using rule 158 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    DIV             reduce using rule 158 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    MOD             reduce using rule 158 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    PLUS            reduce using rule 158 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    MINUS           reduce using rule 158 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_SHL          reduce using rule 158 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_SHR          reduce using rule 158 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_SHRR         reduce using rule 158 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    LESS            reduce using rule 158 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    MORE            reduce using rule 158 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_LE           reduce using rule 158 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_GE           reduce using rule 158 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_EQ           reduce using rule 158 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_NE           reduce using rule 158 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    &               reduce using rule 158 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    ^               reduce using rule 158 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    |               reduce using rule 158 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_LAND         reduce using rule 158 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    OP_LOR          reduce using rule 158 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    QUES            reduce using rule 158 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    SEMICOLON       reduce using rule 158 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    RROUNPAREN      reduce using rule 158 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    COLON           reduce using rule 158 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    COMMA           reduce using rule 158 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    RSQPAREN        reduce using rule 158 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    EQUAL           reduce using rule 158 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    ASS_MUL         reduce using rule 158 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    ASS_ADD         reduce using rule 158 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    ASS_SUB         reduce using rule 158 (PlainNewAllocationExpression -> ArrayAllocationExpression .)
    LCURPAREN       shift and go to state 201


state 111

    (148) MethodCall -> MethodAccess . LROUNPAREN ArgumentList RROUNPAREN
    (149) MethodCall -> MethodAccess . LROUNPAREN RROUNPAREN

    LROUNPAREN      shift and go to state 202


state 112

    (181) LogicalUnaryExpression -> PostfixExpression .
    (175) RealPostfixExpression -> PostfixExpression . OP_INC
    (176) RealPostfixExpression -> PostfixExpression . OP_DEC

    EQUAL           reduce using rule 181 (LogicalUnaryExpression -> PostfixExpression .)
    ASS_MUL         reduce using rule 181 (LogicalUnaryExpression -> PostfixExpression .)
    ASS_ADD         reduce using rule 181 (LogicalUnaryExpression -> PostfixExpression .)
    ASS_SUB         reduce using rule 181 (LogicalUnaryExpression -> PostfixExpression .)
    MULT            reduce using rule 181 (LogicalUnaryExpression -> PostfixExpression .)
    DIV             reduce using rule 181 (LogicalUnaryExpression -> PostfixExpression .)
    MOD             reduce using rule 181 (LogicalUnaryExpression -> PostfixExpression .)
    PLUS            reduce using rule 181 (LogicalUnaryExpression -> PostfixExpression .)
    MINUS           reduce using rule 181 (LogicalUnaryExpression -> PostfixExpression .)
    OP_SHL          reduce using rule 181 (LogicalUnaryExpression -> PostfixExpression .)
    OP_SHR          reduce using rule 181 (LogicalUnaryExpression -> PostfixExpression .)
    OP_SHRR         reduce using rule 181 (LogicalUnaryExpression -> PostfixExpression .)
    LESS            reduce using rule 181 (LogicalUnaryExpression -> PostfixExpression .)
    MORE            reduce using rule 181 (LogicalUnaryExpression -> PostfixExpression .)
    OP_LE           reduce using rule 181 (LogicalUnaryExpression -> PostfixExpression .)
    OP_GE           reduce using rule 181 (LogicalUnaryExpression -> PostfixExpression .)
    OP_EQ           reduce using rule 181 (LogicalUnaryExpression -> PostfixExpression .)
    OP_NE           reduce using rule 181 (LogicalUnaryExpression -> PostfixExpression .)
    &               reduce using rule 181 (LogicalUnaryExpression -> PostfixExpression .)
    ^               reduce using rule 181 (LogicalUnaryExpression -> PostfixExpression .)
    |               reduce using rule 181 (LogicalUnaryExpression -> PostfixExpression .)
    OP_LAND         reduce using rule 181 (LogicalUnaryExpression -> PostfixExpression .)
    OP_LOR          reduce using rule 181 (LogicalUnaryExpression -> PostfixExpression .)
    QUES            reduce using rule 181 (LogicalUnaryExpression -> PostfixExpression .)
    SEMICOLON       reduce using rule 181 (LogicalUnaryExpression -> PostfixExpression .)
    RROUNPAREN      reduce using rule 181 (LogicalUnaryExpression -> PostfixExpression .)
    COLON           reduce using rule 181 (LogicalUnaryExpression -> PostfixExpression .)
    COMMA           reduce using rule 181 (LogicalUnaryExpression -> PostfixExpression .)
    RSQPAREN        reduce using rule 181 (LogicalUnaryExpression -> PostfixExpression .)
    OP_INC          shift and go to state 203
    OP_DEC          shift and go to state 204


state 113

    (214) InclusiveOrExpression -> ExclusiveOrExpression .
    (213) ExclusiveOrExpression -> ExclusiveOrExpression . ^ AndExpression

    |               reduce using rule 214 (InclusiveOrExpression -> ExclusiveOrExpression .)
    OP_LAND         reduce using rule 214 (InclusiveOrExpression -> ExclusiveOrExpression .)
    OP_LOR          reduce using rule 214 (InclusiveOrExpression -> ExclusiveOrExpression .)
    QUES            reduce using rule 214 (InclusiveOrExpression -> ExclusiveOrExpression .)
    SEMICOLON       reduce using rule 214 (InclusiveOrExpression -> ExclusiveOrExpression .)
    RROUNPAREN      reduce using rule 214 (InclusiveOrExpression -> ExclusiveOrExpression .)
    COMMA           reduce using rule 214 (InclusiveOrExpression -> ExclusiveOrExpression .)
    COLON           reduce using rule 214 (InclusiveOrExpression -> ExclusiveOrExpression .)
    RSQPAREN        reduce using rule 214 (InclusiveOrExpression -> ExclusiveOrExpression .)
    ^               shift and go to state 205


state 114

    (207) EqualityExpression -> RelationalExpression .
    (203) RelationalExpression -> RelationalExpression . LESS ShiftExpression
    (204) RelationalExpression -> RelationalExpression . MORE ShiftExpression
    (205) RelationalExpression -> RelationalExpression . OP_LE ShiftExpression
    (206) RelationalExpression -> RelationalExpression . OP_GE ShiftExpression

    OP_EQ           reduce using rule 207 (EqualityExpression -> RelationalExpression .)
    OP_NE           reduce using rule 207 (EqualityExpression -> RelationalExpression .)
    &               reduce using rule 207 (EqualityExpression -> RelationalExpression .)
    ^               reduce using rule 207 (EqualityExpression -> RelationalExpression .)
    |               reduce using rule 207 (EqualityExpression -> RelationalExpression .)
    OP_LAND         reduce using rule 207 (EqualityExpression -> RelationalExpression .)
    OP_LOR          reduce using rule 207 (EqualityExpression -> RelationalExpression .)
    QUES            reduce using rule 207 (EqualityExpression -> RelationalExpression .)
    SEMICOLON       reduce using rule 207 (EqualityExpression -> RelationalExpression .)
    RROUNPAREN      reduce using rule 207 (EqualityExpression -> RelationalExpression .)
    COMMA           reduce using rule 207 (EqualityExpression -> RelationalExpression .)
    COLON           reduce using rule 207 (EqualityExpression -> RelationalExpression .)
    RSQPAREN        reduce using rule 207 (EqualityExpression -> RelationalExpression .)
    LESS            shift and go to state 206
    MORE            shift and go to state 209
    OP_LE           shift and go to state 207
    OP_GE           shift and go to state 208


state 115

    (156) NewAllocationExpression -> PlainNewAllocationExpression .

    DOT             reduce using rule 156 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_INC          reduce using rule 156 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_DEC          reduce using rule 156 (NewAllocationExpression -> PlainNewAllocationExpression .)
    EQUAL           reduce using rule 156 (NewAllocationExpression -> PlainNewAllocationExpression .)
    ASS_MUL         reduce using rule 156 (NewAllocationExpression -> PlainNewAllocationExpression .)
    ASS_ADD         reduce using rule 156 (NewAllocationExpression -> PlainNewAllocationExpression .)
    ASS_SUB         reduce using rule 156 (NewAllocationExpression -> PlainNewAllocationExpression .)
    MULT            reduce using rule 156 (NewAllocationExpression -> PlainNewAllocationExpression .)
    DIV             reduce using rule 156 (NewAllocationExpression -> PlainNewAllocationExpression .)
    MOD             reduce using rule 156 (NewAllocationExpression -> PlainNewAllocationExpression .)
    PLUS            reduce using rule 156 (NewAllocationExpression -> PlainNewAllocationExpression .)
    MINUS           reduce using rule 156 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_SHL          reduce using rule 156 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_SHR          reduce using rule 156 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_SHRR         reduce using rule 156 (NewAllocationExpression -> PlainNewAllocationExpression .)
    LESS            reduce using rule 156 (NewAllocationExpression -> PlainNewAllocationExpression .)
    MORE            reduce using rule 156 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_LE           reduce using rule 156 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_GE           reduce using rule 156 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_EQ           reduce using rule 156 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_NE           reduce using rule 156 (NewAllocationExpression -> PlainNewAllocationExpression .)
    &               reduce using rule 156 (NewAllocationExpression -> PlainNewAllocationExpression .)
    ^               reduce using rule 156 (NewAllocationExpression -> PlainNewAllocationExpression .)
    |               reduce using rule 156 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_LAND         reduce using rule 156 (NewAllocationExpression -> PlainNewAllocationExpression .)
    OP_LOR          reduce using rule 156 (NewAllocationExpression -> PlainNewAllocationExpression .)
    QUES            reduce using rule 156 (NewAllocationExpression -> PlainNewAllocationExpression .)
    SEMICOLON       reduce using rule 156 (NewAllocationExpression -> PlainNewAllocationExpression .)
    COLON           reduce using rule 156 (NewAllocationExpression -> PlainNewAllocationExpression .)
    RROUNPAREN      reduce using rule 156 (NewAllocationExpression -> PlainNewAllocationExpression .)
    COMMA           reduce using rule 156 (NewAllocationExpression -> PlainNewAllocationExpression .)
    RSQPAREN        reduce using rule 156 (NewAllocationExpression -> PlainNewAllocationExpression .)


state 116

    (84) LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .

    RCURPAREN       reduce using rule 84 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    SEMICOLON       reduce using rule 84 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    IDENTIFIER      reduce using rule 84 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    CASE            reduce using rule 84 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    DEFAULT         reduce using rule 84 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    BREAK           reduce using rule 84 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    RETURN          reduce using rule 84 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    WHILE           reduce using rule 84 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    LCURPAREN       reduce using rule 84 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    DO              reduce using rule 84 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    FOR             reduce using rule 84 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    IF              reduce using rule 84 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    BOOLEAN         reduce using rule 84 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    CHAR            reduce using rule 84 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    BYTE            reduce using rule 84 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    SHORT           reduce using rule 84 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    INT             reduce using rule 84 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    LONG            reduce using rule 84 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    FLOAT           reduce using rule 84 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    DOUBLE          reduce using rule 84 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    VOID            reduce using rule 84 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    OP_INC          reduce using rule 84 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    OP_DEC          reduce using rule 84 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    PLUS            reduce using rule 84 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    MINUS           reduce using rule 84 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    ~               reduce using rule 84 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    NOT             reduce using rule 84 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    THIS            reduce using rule 84 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    SUPER           reduce using rule 84 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    NULL            reduce using rule 84 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    LROUNPAREN      reduce using rule 84 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    INT_CONST       reduce using rule 84 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    FLOAT_CONST     reduce using rule 84 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    STRING          reduce using rule 84 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    CHAR_CONST      reduce using rule 84 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    BOOLEAN_CONST   reduce using rule 84 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)
    NEW             reduce using rule 84 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationOrStatement .)


state 117

    (184) LogicalUnaryOperator -> NOT .

    OP_INC          reduce using rule 184 (LogicalUnaryOperator -> NOT .)
    OP_DEC          reduce using rule 184 (LogicalUnaryOperator -> NOT .)
    PLUS            reduce using rule 184 (LogicalUnaryOperator -> NOT .)
    MINUS           reduce using rule 184 (LogicalUnaryOperator -> NOT .)
    ~               reduce using rule 184 (LogicalUnaryOperator -> NOT .)
    NOT             reduce using rule 184 (LogicalUnaryOperator -> NOT .)
    IDENTIFIER      reduce using rule 184 (LogicalUnaryOperator -> NOT .)
    THIS            reduce using rule 184 (LogicalUnaryOperator -> NOT .)
    SUPER           reduce using rule 184 (LogicalUnaryOperator -> NOT .)
    NULL            reduce using rule 184 (LogicalUnaryOperator -> NOT .)
    LROUNPAREN      reduce using rule 184 (LogicalUnaryOperator -> NOT .)
    INT_CONST       reduce using rule 184 (LogicalUnaryOperator -> NOT .)
    FLOAT_CONST     reduce using rule 184 (LogicalUnaryOperator -> NOT .)
    STRING          reduce using rule 184 (LogicalUnaryOperator -> NOT .)
    CHAR_CONST      reduce using rule 184 (LogicalUnaryOperator -> NOT .)
    BOOLEAN_CONST   reduce using rule 184 (LogicalUnaryOperator -> NOT .)
    NEW             reduce using rule 184 (LogicalUnaryOperator -> NOT .)
    BOOLEAN         reduce using rule 184 (LogicalUnaryOperator -> NOT .)
    CHAR            reduce using rule 184 (LogicalUnaryOperator -> NOT .)
    BYTE            reduce using rule 184 (LogicalUnaryOperator -> NOT .)
    SHORT           reduce using rule 184 (LogicalUnaryOperator -> NOT .)
    INT             reduce using rule 184 (LogicalUnaryOperator -> NOT .)
    LONG            reduce using rule 184 (LogicalUnaryOperator -> NOT .)
    FLOAT           reduce using rule 184 (LogicalUnaryOperator -> NOT .)
    DOUBLE          reduce using rule 184 (LogicalUnaryOperator -> NOT .)
    VOID            reduce using rule 184 (LogicalUnaryOperator -> NOT .)


state 118

    (128) NotJustName -> SpecialName .

    DOT             reduce using rule 128 (NotJustName -> SpecialName .)
    OP_INC          reduce using rule 128 (NotJustName -> SpecialName .)
    OP_DEC          reduce using rule 128 (NotJustName -> SpecialName .)
    EQUAL           reduce using rule 128 (NotJustName -> SpecialName .)
    ASS_MUL         reduce using rule 128 (NotJustName -> SpecialName .)
    ASS_ADD         reduce using rule 128 (NotJustName -> SpecialName .)
    ASS_SUB         reduce using rule 128 (NotJustName -> SpecialName .)
    MULT            reduce using rule 128 (NotJustName -> SpecialName .)
    DIV             reduce using rule 128 (NotJustName -> SpecialName .)
    MOD             reduce using rule 128 (NotJustName -> SpecialName .)
    PLUS            reduce using rule 128 (NotJustName -> SpecialName .)
    MINUS           reduce using rule 128 (NotJustName -> SpecialName .)
    OP_SHL          reduce using rule 128 (NotJustName -> SpecialName .)
    OP_SHR          reduce using rule 128 (NotJustName -> SpecialName .)
    OP_SHRR         reduce using rule 128 (NotJustName -> SpecialName .)
    LESS            reduce using rule 128 (NotJustName -> SpecialName .)
    MORE            reduce using rule 128 (NotJustName -> SpecialName .)
    OP_LE           reduce using rule 128 (NotJustName -> SpecialName .)
    OP_GE           reduce using rule 128 (NotJustName -> SpecialName .)
    OP_EQ           reduce using rule 128 (NotJustName -> SpecialName .)
    OP_NE           reduce using rule 128 (NotJustName -> SpecialName .)
    &               reduce using rule 128 (NotJustName -> SpecialName .)
    ^               reduce using rule 128 (NotJustName -> SpecialName .)
    |               reduce using rule 128 (NotJustName -> SpecialName .)
    OP_LAND         reduce using rule 128 (NotJustName -> SpecialName .)
    OP_LOR          reduce using rule 128 (NotJustName -> SpecialName .)
    QUES            reduce using rule 128 (NotJustName -> SpecialName .)
    RROUNPAREN      reduce using rule 128 (NotJustName -> SpecialName .)
    RSQPAREN        reduce using rule 128 (NotJustName -> SpecialName .)
    COMMA           reduce using rule 128 (NotJustName -> SpecialName .)
    SEMICOLON       reduce using rule 128 (NotJustName -> SpecialName .)
    COLON           reduce using rule 128 (NotJustName -> SpecialName .)


state 119

    (130) NotJustName -> ComplexPrimary .
    (142) ArrayAccess -> ComplexPrimary . LSQPAREN Expression RSQPAREN

    DOT             reduce using rule 130 (NotJustName -> ComplexPrimary .)
    OP_INC          reduce using rule 130 (NotJustName -> ComplexPrimary .)
    OP_DEC          reduce using rule 130 (NotJustName -> ComplexPrimary .)
    EQUAL           reduce using rule 130 (NotJustName -> ComplexPrimary .)
    ASS_MUL         reduce using rule 130 (NotJustName -> ComplexPrimary .)
    ASS_ADD         reduce using rule 130 (NotJustName -> ComplexPrimary .)
    ASS_SUB         reduce using rule 130 (NotJustName -> ComplexPrimary .)
    MULT            reduce using rule 130 (NotJustName -> ComplexPrimary .)
    DIV             reduce using rule 130 (NotJustName -> ComplexPrimary .)
    MOD             reduce using rule 130 (NotJustName -> ComplexPrimary .)
    PLUS            reduce using rule 130 (NotJustName -> ComplexPrimary .)
    MINUS           reduce using rule 130 (NotJustName -> ComplexPrimary .)
    OP_SHL          reduce using rule 130 (NotJustName -> ComplexPrimary .)
    OP_SHR          reduce using rule 130 (NotJustName -> ComplexPrimary .)
    OP_SHRR         reduce using rule 130 (NotJustName -> ComplexPrimary .)
    LESS            reduce using rule 130 (NotJustName -> ComplexPrimary .)
    MORE            reduce using rule 130 (NotJustName -> ComplexPrimary .)
    OP_LE           reduce using rule 130 (NotJustName -> ComplexPrimary .)
    OP_GE           reduce using rule 130 (NotJustName -> ComplexPrimary .)
    OP_EQ           reduce using rule 130 (NotJustName -> ComplexPrimary .)
    OP_NE           reduce using rule 130 (NotJustName -> ComplexPrimary .)
    &               reduce using rule 130 (NotJustName -> ComplexPrimary .)
    ^               reduce using rule 130 (NotJustName -> ComplexPrimary .)
    |               reduce using rule 130 (NotJustName -> ComplexPrimary .)
    OP_LAND         reduce using rule 130 (NotJustName -> ComplexPrimary .)
    OP_LOR          reduce using rule 130 (NotJustName -> ComplexPrimary .)
    QUES            reduce using rule 130 (NotJustName -> ComplexPrimary .)
    RROUNPAREN      reduce using rule 130 (NotJustName -> ComplexPrimary .)
    RSQPAREN        reduce using rule 130 (NotJustName -> ComplexPrimary .)
    COMMA           reduce using rule 130 (NotJustName -> ComplexPrimary .)
    SEMICOLON       reduce using rule 130 (NotJustName -> ComplexPrimary .)
    COLON           reduce using rule 130 (NotJustName -> ComplexPrimary .)
    LSQPAREN        shift and go to state 210


state 120

    (159) PlainNewAllocationExpression -> ClassAllocationExpression .
    (161) PlainNewAllocationExpression -> ClassAllocationExpression . LCURPAREN RCURPAREN
    (162) PlainNewAllocationExpression -> ClassAllocationExpression . LCURPAREN FieldDeclarations RCURPAREN

    DOT             reduce using rule 159 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_INC          reduce using rule 159 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_DEC          reduce using rule 159 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    MULT            reduce using rule 159 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    DIV             reduce using rule 159 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    MOD             reduce using rule 159 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    PLUS            reduce using rule 159 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    MINUS           reduce using rule 159 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_SHL          reduce using rule 159 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_SHR          reduce using rule 159 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_SHRR         reduce using rule 159 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    LESS            reduce using rule 159 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    MORE            reduce using rule 159 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_LE           reduce using rule 159 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_GE           reduce using rule 159 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_EQ           reduce using rule 159 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_NE           reduce using rule 159 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    &               reduce using rule 159 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    ^               reduce using rule 159 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    |               reduce using rule 159 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_LAND         reduce using rule 159 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    OP_LOR          reduce using rule 159 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    QUES            reduce using rule 159 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    SEMICOLON       reduce using rule 159 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    RROUNPAREN      reduce using rule 159 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    COLON           reduce using rule 159 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    COMMA           reduce using rule 159 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    RSQPAREN        reduce using rule 159 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    EQUAL           reduce using rule 159 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    ASS_MUL         reduce using rule 159 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    ASS_ADD         reduce using rule 159 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    ASS_SUB         reduce using rule 159 (PlainNewAllocationExpression -> ClassAllocationExpression .)
    LCURPAREN       shift and go to state 211


state 121

    (100) LabelStatement -> DEFAULT . COLON

    COLON           shift and go to state 212


state 122

    (92) Statement -> JumpStatement . Mark_quad
    (96) Mark_quad -> .

    RCURPAREN       reduce using rule 96 (Mark_quad -> .)
    SEMICOLON       reduce using rule 96 (Mark_quad -> .)
    IDENTIFIER      reduce using rule 96 (Mark_quad -> .)
    CASE            reduce using rule 96 (Mark_quad -> .)
    DEFAULT         reduce using rule 96 (Mark_quad -> .)
    BREAK           reduce using rule 96 (Mark_quad -> .)
    RETURN          reduce using rule 96 (Mark_quad -> .)
    WHILE           reduce using rule 96 (Mark_quad -> .)
    LCURPAREN       reduce using rule 96 (Mark_quad -> .)
    DO              reduce using rule 96 (Mark_quad -> .)
    FOR             reduce using rule 96 (Mark_quad -> .)
    IF              reduce using rule 96 (Mark_quad -> .)
    BOOLEAN         reduce using rule 96 (Mark_quad -> .)
    CHAR            reduce using rule 96 (Mark_quad -> .)
    BYTE            reduce using rule 96 (Mark_quad -> .)
    SHORT           reduce using rule 96 (Mark_quad -> .)
    INT             reduce using rule 96 (Mark_quad -> .)
    LONG            reduce using rule 96 (Mark_quad -> .)
    FLOAT           reduce using rule 96 (Mark_quad -> .)
    DOUBLE          reduce using rule 96 (Mark_quad -> .)
    VOID            reduce using rule 96 (Mark_quad -> .)
    OP_INC          reduce using rule 96 (Mark_quad -> .)
    OP_DEC          reduce using rule 96 (Mark_quad -> .)
    PLUS            reduce using rule 96 (Mark_quad -> .)
    MINUS           reduce using rule 96 (Mark_quad -> .)
    ~               reduce using rule 96 (Mark_quad -> .)
    NOT             reduce using rule 96 (Mark_quad -> .)
    THIS            reduce using rule 96 (Mark_quad -> .)
    SUPER           reduce using rule 96 (Mark_quad -> .)
    NULL            reduce using rule 96 (Mark_quad -> .)
    LROUNPAREN      reduce using rule 96 (Mark_quad -> .)
    INT_CONST       reduce using rule 96 (Mark_quad -> .)
    FLOAT_CONST     reduce using rule 96 (Mark_quad -> .)
    STRING          reduce using rule 96 (Mark_quad -> .)
    CHAR_CONST      reduce using rule 96 (Mark_quad -> .)
    BOOLEAN_CONST   reduce using rule 96 (Mark_quad -> .)
    NEW             reduce using rule 96 (Mark_quad -> .)
    ELSE            reduce using rule 96 (Mark_quad -> .)

    Mark_quad                      shift and go to state 213

state 123

    (107) IterationStatement -> WHILE . Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement
    (96) Mark_quad -> .

    LROUNPAREN      reduce using rule 96 (Mark_quad -> .)

    Mark_quad                      shift and go to state 214

state 124

    (178) UnaryExpression -> OP_DEC . UnaryExpression
    (177) UnaryExpression -> . OP_INC UnaryExpression
    (178) UnaryExpression -> . OP_DEC UnaryExpression
    (179) UnaryExpression -> . LogicalUnaryExpression
    (180) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (181) LogicalUnaryExpression -> . PostfixExpression
    (182) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (185) ArithmeticUnaryOperator -> . PLUS
    (186) ArithmeticUnaryOperator -> . MINUS
    (173) PostfixExpression -> . PrimaryExpression
    (174) PostfixExpression -> . RealPostfixExpression
    (183) LogicalUnaryOperator -> . ~
    (184) LogicalUnaryOperator -> . NOT
    (126) PrimaryExpression -> . QualifiedName
    (127) PrimaryExpression -> . NotJustName
    (175) RealPostfixExpression -> . PostfixExpression OP_INC
    (176) RealPostfixExpression -> . PostfixExpression OP_DEC
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (128) NotJustName -> . SpecialName
    (129) NotJustName -> . NewAllocationExpression
    (130) NotJustName -> . ComplexPrimary
    (151) SpecialName -> . THIS
    (152) SpecialName -> . SUPER
    (153) SpecialName -> . NULL
    (156) NewAllocationExpression -> . PlainNewAllocationExpression
    (157) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (131) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (132) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (158) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (159) PlainNewAllocationExpression -> . ClassAllocationExpression
    (160) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (161) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (162) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (133) ComplexPrimaryNoParenthesis -> . INT_CONST
    (134) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (135) ComplexPrimaryNoParenthesis -> . STRING
    (136) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (137) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (138) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (139) ComplexPrimaryNoParenthesis -> . FieldAccess
    (140) ComplexPrimaryNoParenthesis -> . MethodCall
    (165) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (166) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (167) ArrayAllocationExpression -> . NEW TypeName Dims
    (163) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (164) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (141) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (142) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (143) FieldAccess -> . NotJustName DOT IDENTIFIER
    (144) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (145) FieldAccess -> . QualifiedName DOT THIS
    (146) FieldAccess -> . QualifiedName DOT CLASS
    (147) FieldAccess -> . PrimitiveType DOT CLASS
    (148) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (149) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (150) MethodAccess -> . QualifiedName

    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 124
    PLUS            shift and go to state 87
    MINUS           shift and go to state 86
    ~               shift and go to state 140
    NOT             shift and go to state 117
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 89
    SUPER           shift and go to state 156
    NULL            shift and go to state 143
    LROUNPAREN      shift and go to state 92
    INT_CONST       shift and go to state 106
    FLOAT_CONST     shift and go to state 83
    STRING          shift and go to state 149
    CHAR_CONST      shift and go to state 139
    BOOLEAN_CONST   shift and go to state 155
    NEW             shift and go to state 125
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 119
    PrimaryExpression              shift and go to state 127
    PrimitiveType                  shift and go to state 183
    RealPostfixExpression          shift and go to state 95
    ArithmeticUnaryOperator        shift and go to state 96
    MethodCall                     shift and go to state 101
    ClassAllocationExpression      shift and go to state 120
    LogicalUnaryOperator           shift and go to state 145
    ComplexPrimaryNoParenthesis    shift and go to state 99
    ArrayAccess                    shift and go to state 108
    NewAllocationExpression        shift and go to state 133
    NotJustName                    shift and go to state 150
    QualifiedName                  shift and go to state 185
    LogicalUnaryExpression         shift and go to state 152
    ArrayAllocationExpression      shift and go to state 110
    UnaryExpression                shift and go to state 215
    FieldAccess                    shift and go to state 154
    PlainNewAllocationExpression   shift and go to state 115
    MethodAccess                   shift and go to state 111
    SpecialName                    shift and go to state 118

state 125

    (165) ArrayAllocationExpression -> NEW . TypeName DimExprs Dims
    (166) ArrayAllocationExpression -> NEW . TypeName DimExprs
    (167) ArrayAllocationExpression -> NEW . TypeName Dims
    (163) ClassAllocationExpression -> NEW . TypeName LROUNPAREN ArgumentList RROUNPAREN
    (164) ClassAllocationExpression -> NEW . TypeName LROUNPAREN RROUNPAREN
    (5) TypeName -> . PrimitiveType
    (6) TypeName -> . QualifiedName
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER

    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43
    IDENTIFIER      shift and go to state 22

    QualifiedName                  shift and go to state 52
    PrimitiveType                  shift and go to state 45
    TypeName                       shift and go to state 216

state 126

    (88) LocalVariableDeclarationStatement -> TypeSpecifier . VariableDeclarators SEMICOLON
    (57) VariableDeclarators -> . VariableDeclarator
    (58) VariableDeclarators -> . VariableDeclarators COMMA VariableDeclarator
    (59) VariableDeclarator -> . DeclaratorName
    (60) VariableDeclarator -> . DeclaratorName EQUAL VariableInitializer
    (69) DeclaratorName -> . IDENTIFIER
    (70) DeclaratorName -> . DeclaratorName OP_DIM

    IDENTIFIER      shift and go to state 79

    VariableDeclarators            shift and go to state 217
    DeclaratorName                 shift and go to state 218
    VariableDeclarator             shift and go to state 80

state 127

    (173) PostfixExpression -> PrimaryExpression .

    OP_INC          reduce using rule 173 (PostfixExpression -> PrimaryExpression .)
    OP_DEC          reduce using rule 173 (PostfixExpression -> PrimaryExpression .)
    EQUAL           reduce using rule 173 (PostfixExpression -> PrimaryExpression .)
    ASS_MUL         reduce using rule 173 (PostfixExpression -> PrimaryExpression .)
    ASS_ADD         reduce using rule 173 (PostfixExpression -> PrimaryExpression .)
    ASS_SUB         reduce using rule 173 (PostfixExpression -> PrimaryExpression .)
    MULT            reduce using rule 173 (PostfixExpression -> PrimaryExpression .)
    DIV             reduce using rule 173 (PostfixExpression -> PrimaryExpression .)
    MOD             reduce using rule 173 (PostfixExpression -> PrimaryExpression .)
    PLUS            reduce using rule 173 (PostfixExpression -> PrimaryExpression .)
    MINUS           reduce using rule 173 (PostfixExpression -> PrimaryExpression .)
    OP_SHL          reduce using rule 173 (PostfixExpression -> PrimaryExpression .)
    OP_SHR          reduce using rule 173 (PostfixExpression -> PrimaryExpression .)
    OP_SHRR         reduce using rule 173 (PostfixExpression -> PrimaryExpression .)
    LESS            reduce using rule 173 (PostfixExpression -> PrimaryExpression .)
    MORE            reduce using rule 173 (PostfixExpression -> PrimaryExpression .)
    OP_LE           reduce using rule 173 (PostfixExpression -> PrimaryExpression .)
    OP_GE           reduce using rule 173 (PostfixExpression -> PrimaryExpression .)
    OP_EQ           reduce using rule 173 (PostfixExpression -> PrimaryExpression .)
    OP_NE           reduce using rule 173 (PostfixExpression -> PrimaryExpression .)
    &               reduce using rule 173 (PostfixExpression -> PrimaryExpression .)
    ^               reduce using rule 173 (PostfixExpression -> PrimaryExpression .)
    |               reduce using rule 173 (PostfixExpression -> PrimaryExpression .)
    OP_LAND         reduce using rule 173 (PostfixExpression -> PrimaryExpression .)
    OP_LOR          reduce using rule 173 (PostfixExpression -> PrimaryExpression .)
    QUES            reduce using rule 173 (PostfixExpression -> PrimaryExpression .)
    RROUNPAREN      reduce using rule 173 (PostfixExpression -> PrimaryExpression .)
    COMMA           reduce using rule 173 (PostfixExpression -> PrimaryExpression .)
    SEMICOLON       reduce using rule 173 (PostfixExpression -> PrimaryExpression .)
    COLON           reduce using rule 173 (PostfixExpression -> PrimaryExpression .)
    RSQPAREN        reduce using rule 173 (PostfixExpression -> PrimaryExpression .)


state 128

    (99) LabelStatement -> CASE . ConstantExpression COLON
    (231) ConstantExpression -> . ConditionalExpression
    (220) ConditionalExpression -> . ConditionalOrExpression
    (221) ConditionalExpression -> . ConditionalOrExpression Mark_quad Ques Mark_quad Expression Mark_quad Cln Mark_quad ConditionalExpression Mark_quad
    (218) ConditionalOrExpression -> . ConditionalAndExpression
    (219) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (216) ConditionalAndExpression -> . InclusiveOrExpression
    (217) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (214) InclusiveOrExpression -> . ExclusiveOrExpression
    (215) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (212) ExclusiveOrExpression -> . AndExpression
    (213) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (210) AndExpression -> . EqualityExpression
    (211) AndExpression -> . AndExpression & EqualityExpression
    (207) EqualityExpression -> . RelationalExpression
    (208) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (209) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (202) RelationalExpression -> . ShiftExpression
    (203) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (204) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (205) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (206) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (198) ShiftExpression -> . AdditiveExpression
    (199) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (200) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (201) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (195) AdditiveExpression -> . MultiplicativeExpression
    (196) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (197) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (191) MultiplicativeExpression -> . CastExpression
    (192) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (193) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (194) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (187) CastExpression -> . UnaryExpression
    (177) UnaryExpression -> . OP_INC UnaryExpression
    (178) UnaryExpression -> . OP_DEC UnaryExpression
    (179) UnaryExpression -> . LogicalUnaryExpression
    (180) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (181) LogicalUnaryExpression -> . PostfixExpression
    (182) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (185) ArithmeticUnaryOperator -> . PLUS
    (186) ArithmeticUnaryOperator -> . MINUS
    (173) PostfixExpression -> . PrimaryExpression
    (174) PostfixExpression -> . RealPostfixExpression
    (183) LogicalUnaryOperator -> . ~
    (184) LogicalUnaryOperator -> . NOT
    (126) PrimaryExpression -> . QualifiedName
    (127) PrimaryExpression -> . NotJustName
    (175) RealPostfixExpression -> . PostfixExpression OP_INC
    (176) RealPostfixExpression -> . PostfixExpression OP_DEC
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (128) NotJustName -> . SpecialName
    (129) NotJustName -> . NewAllocationExpression
    (130) NotJustName -> . ComplexPrimary
    (151) SpecialName -> . THIS
    (152) SpecialName -> . SUPER
    (153) SpecialName -> . NULL
    (156) NewAllocationExpression -> . PlainNewAllocationExpression
    (157) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (131) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (132) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (158) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (159) PlainNewAllocationExpression -> . ClassAllocationExpression
    (160) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (161) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (162) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (133) ComplexPrimaryNoParenthesis -> . INT_CONST
    (134) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (135) ComplexPrimaryNoParenthesis -> . STRING
    (136) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (137) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (138) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (139) ComplexPrimaryNoParenthesis -> . FieldAccess
    (140) ComplexPrimaryNoParenthesis -> . MethodCall
    (165) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (166) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (167) ArrayAllocationExpression -> . NEW TypeName Dims
    (163) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (164) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (141) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (142) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (143) FieldAccess -> . NotJustName DOT IDENTIFIER
    (144) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (145) FieldAccess -> . QualifiedName DOT THIS
    (146) FieldAccess -> . QualifiedName DOT CLASS
    (147) FieldAccess -> . PrimitiveType DOT CLASS
    (148) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (149) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (150) MethodAccess -> . QualifiedName

    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 124
    PLUS            shift and go to state 87
    MINUS           shift and go to state 86
    ~               shift and go to state 140
    NOT             shift and go to state 117
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 89
    SUPER           shift and go to state 156
    NULL            shift and go to state 143
    LROUNPAREN      shift and go to state 92
    INT_CONST       shift and go to state 106
    FLOAT_CONST     shift and go to state 83
    STRING          shift and go to state 149
    CHAR_CONST      shift and go to state 139
    BOOLEAN_CONST   shift and go to state 155
    NEW             shift and go to state 125
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43

    ConstantExpression             shift and go to state 219
    PostfixExpression              shift and go to state 112
    CastExpression                 shift and go to state 142
    PrimitiveType                  shift and go to state 183
    RealPostfixExpression          shift and go to state 95
    ArithmeticUnaryOperator        shift and go to state 96
    AndExpression                  shift and go to state 85
    ArrayAccess                    shift and go to state 108
    PrimaryExpression              shift and go to state 127
    EqualityExpression             shift and go to state 97
    LogicalUnaryOperator           shift and go to state 145
    ComplexPrimaryNoParenthesis    shift and go to state 99
    MultiplicativeExpression       shift and go to state 100
    ClassAllocationExpression      shift and go to state 120
    MethodCall                     shift and go to state 101
    ConditionalOrExpression        shift and go to state 131
    ShiftExpression                shift and go to state 147
    NewAllocationExpression        shift and go to state 133
    NotJustName                    shift and go to state 150
    QualifiedName                  shift and go to state 185
    ComplexPrimary                 shift and go to state 119
    LogicalUnaryExpression         shift and go to state 152
    AdditiveExpression             shift and go to state 135
    ArrayAllocationExpression      shift and go to state 110
    ConditionalExpression          shift and go to state 220
    UnaryExpression                shift and go to state 191
    InclusiveOrExpression          shift and go to state 138
    FieldAccess                    shift and go to state 154
    ExclusiveOrExpression          shift and go to state 113
    ConditionalAndExpression       shift and go to state 90
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    MethodAccess                   shift and go to state 111
    SpecialName                    shift and go to state 118

state 129

    (112) IterationStatement -> Fr . LROUNPAREN ForInit ForExpr Mark_for ForIncr RROUNPAREN Mark_quad Statement

    LROUNPAREN      shift and go to state 221


state 130

    (97) EmptyStatement -> SEMICOLON .

    ELSE            reduce using rule 97 (EmptyStatement -> SEMICOLON .)
    RCURPAREN       reduce using rule 97 (EmptyStatement -> SEMICOLON .)
    SEMICOLON       reduce using rule 97 (EmptyStatement -> SEMICOLON .)
    IDENTIFIER      reduce using rule 97 (EmptyStatement -> SEMICOLON .)
    CASE            reduce using rule 97 (EmptyStatement -> SEMICOLON .)
    DEFAULT         reduce using rule 97 (EmptyStatement -> SEMICOLON .)
    BREAK           reduce using rule 97 (EmptyStatement -> SEMICOLON .)
    RETURN          reduce using rule 97 (EmptyStatement -> SEMICOLON .)
    WHILE           reduce using rule 97 (EmptyStatement -> SEMICOLON .)
    LCURPAREN       reduce using rule 97 (EmptyStatement -> SEMICOLON .)
    DO              reduce using rule 97 (EmptyStatement -> SEMICOLON .)
    FOR             reduce using rule 97 (EmptyStatement -> SEMICOLON .)
    IF              reduce using rule 97 (EmptyStatement -> SEMICOLON .)
    BOOLEAN         reduce using rule 97 (EmptyStatement -> SEMICOLON .)
    CHAR            reduce using rule 97 (EmptyStatement -> SEMICOLON .)
    BYTE            reduce using rule 97 (EmptyStatement -> SEMICOLON .)
    SHORT           reduce using rule 97 (EmptyStatement -> SEMICOLON .)
    INT             reduce using rule 97 (EmptyStatement -> SEMICOLON .)
    LONG            reduce using rule 97 (EmptyStatement -> SEMICOLON .)
    FLOAT           reduce using rule 97 (EmptyStatement -> SEMICOLON .)
    DOUBLE          reduce using rule 97 (EmptyStatement -> SEMICOLON .)
    VOID            reduce using rule 97 (EmptyStatement -> SEMICOLON .)
    OP_INC          reduce using rule 97 (EmptyStatement -> SEMICOLON .)
    OP_DEC          reduce using rule 97 (EmptyStatement -> SEMICOLON .)
    PLUS            reduce using rule 97 (EmptyStatement -> SEMICOLON .)
    MINUS           reduce using rule 97 (EmptyStatement -> SEMICOLON .)
    ~               reduce using rule 97 (EmptyStatement -> SEMICOLON .)
    NOT             reduce using rule 97 (EmptyStatement -> SEMICOLON .)
    THIS            reduce using rule 97 (EmptyStatement -> SEMICOLON .)
    SUPER           reduce using rule 97 (EmptyStatement -> SEMICOLON .)
    NULL            reduce using rule 97 (EmptyStatement -> SEMICOLON .)
    LROUNPAREN      reduce using rule 97 (EmptyStatement -> SEMICOLON .)
    INT_CONST       reduce using rule 97 (EmptyStatement -> SEMICOLON .)
    FLOAT_CONST     reduce using rule 97 (EmptyStatement -> SEMICOLON .)
    STRING          reduce using rule 97 (EmptyStatement -> SEMICOLON .)
    CHAR_CONST      reduce using rule 97 (EmptyStatement -> SEMICOLON .)
    BOOLEAN_CONST   reduce using rule 97 (EmptyStatement -> SEMICOLON .)
    NEW             reduce using rule 97 (EmptyStatement -> SEMICOLON .)


state 131

    (220) ConditionalExpression -> ConditionalOrExpression .
    (221) ConditionalExpression -> ConditionalOrExpression . Mark_quad Ques Mark_quad Expression Mark_quad Cln Mark_quad ConditionalExpression Mark_quad
    (219) ConditionalOrExpression -> ConditionalOrExpression . OP_LOR ConditionalAndExpression
    (96) Mark_quad -> .

    RSQPAREN        reduce using rule 220 (ConditionalExpression -> ConditionalOrExpression .)
    SEMICOLON       reduce using rule 220 (ConditionalExpression -> ConditionalOrExpression .)
    RROUNPAREN      reduce using rule 220 (ConditionalExpression -> ConditionalOrExpression .)
    COLON           reduce using rule 220 (ConditionalExpression -> ConditionalOrExpression .)
    COMMA           reduce using rule 220 (ConditionalExpression -> ConditionalOrExpression .)
    OP_LOR          shift and go to state 222
    QUES            reduce using rule 96 (Mark_quad -> .)

    Mark_quad                      shift and go to state 223

state 132

    (98) LabelStatement -> IDENTIFIER . COLON
    (33) QualifiedName -> IDENTIFIER .

    COLON           shift and go to state 224
    DOT             reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    LSQPAREN        reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    OP_INC          reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    OP_DEC          reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    EQUAL           reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    ASS_MUL         reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    ASS_ADD         reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    ASS_SUB         reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    MULT            reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    DIV             reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    MOD             reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    PLUS            reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    MINUS           reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    OP_SHL          reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    OP_SHR          reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    OP_SHRR         reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    LESS            reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    MORE            reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    OP_LE           reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    OP_GE           reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    OP_EQ           reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    OP_NE           reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    &               reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    ^               reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    |               reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    OP_LAND         reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    OP_LOR          reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    QUES            reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    SEMICOLON       reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    LROUNPAREN      reduce using rule 33 (QualifiedName -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 33 (QualifiedName -> IDENTIFIER .)


state 133

    (129) NotJustName -> NewAllocationExpression .

    DOT             reduce using rule 129 (NotJustName -> NewAllocationExpression .)
    OP_INC          reduce using rule 129 (NotJustName -> NewAllocationExpression .)
    OP_DEC          reduce using rule 129 (NotJustName -> NewAllocationExpression .)
    EQUAL           reduce using rule 129 (NotJustName -> NewAllocationExpression .)
    ASS_MUL         reduce using rule 129 (NotJustName -> NewAllocationExpression .)
    ASS_ADD         reduce using rule 129 (NotJustName -> NewAllocationExpression .)
    ASS_SUB         reduce using rule 129 (NotJustName -> NewAllocationExpression .)
    MULT            reduce using rule 129 (NotJustName -> NewAllocationExpression .)
    DIV             reduce using rule 129 (NotJustName -> NewAllocationExpression .)
    MOD             reduce using rule 129 (NotJustName -> NewAllocationExpression .)
    PLUS            reduce using rule 129 (NotJustName -> NewAllocationExpression .)
    MINUS           reduce using rule 129 (NotJustName -> NewAllocationExpression .)
    OP_SHL          reduce using rule 129 (NotJustName -> NewAllocationExpression .)
    OP_SHR          reduce using rule 129 (NotJustName -> NewAllocationExpression .)
    OP_SHRR         reduce using rule 129 (NotJustName -> NewAllocationExpression .)
    LESS            reduce using rule 129 (NotJustName -> NewAllocationExpression .)
    MORE            reduce using rule 129 (NotJustName -> NewAllocationExpression .)
    OP_LE           reduce using rule 129 (NotJustName -> NewAllocationExpression .)
    OP_GE           reduce using rule 129 (NotJustName -> NewAllocationExpression .)
    OP_EQ           reduce using rule 129 (NotJustName -> NewAllocationExpression .)
    OP_NE           reduce using rule 129 (NotJustName -> NewAllocationExpression .)
    &               reduce using rule 129 (NotJustName -> NewAllocationExpression .)
    ^               reduce using rule 129 (NotJustName -> NewAllocationExpression .)
    |               reduce using rule 129 (NotJustName -> NewAllocationExpression .)
    OP_LAND         reduce using rule 129 (NotJustName -> NewAllocationExpression .)
    OP_LOR          reduce using rule 129 (NotJustName -> NewAllocationExpression .)
    QUES            reduce using rule 129 (NotJustName -> NewAllocationExpression .)
    RROUNPAREN      reduce using rule 129 (NotJustName -> NewAllocationExpression .)
    RSQPAREN        reduce using rule 129 (NotJustName -> NewAllocationExpression .)
    COMMA           reduce using rule 129 (NotJustName -> NewAllocationExpression .)
    SEMICOLON       reduce using rule 129 (NotJustName -> NewAllocationExpression .)
    COLON           reduce using rule 129 (NotJustName -> NewAllocationExpression .)


state 134

    (101) ExpressionStatement -> Expression .

    SEMICOLON       reduce using rule 101 (ExpressionStatement -> Expression .)
    COMMA           reduce using rule 101 (ExpressionStatement -> Expression .)
    RROUNPAREN      reduce using rule 101 (ExpressionStatement -> Expression .)


state 135

    (198) ShiftExpression -> AdditiveExpression .
    (196) AdditiveExpression -> AdditiveExpression . PLUS MultiplicativeExpression
    (197) AdditiveExpression -> AdditiveExpression . MINUS MultiplicativeExpression

    OP_SHL          reduce using rule 198 (ShiftExpression -> AdditiveExpression .)
    OP_SHR          reduce using rule 198 (ShiftExpression -> AdditiveExpression .)
    OP_SHRR         reduce using rule 198 (ShiftExpression -> AdditiveExpression .)
    LESS            reduce using rule 198 (ShiftExpression -> AdditiveExpression .)
    MORE            reduce using rule 198 (ShiftExpression -> AdditiveExpression .)
    OP_LE           reduce using rule 198 (ShiftExpression -> AdditiveExpression .)
    OP_GE           reduce using rule 198 (ShiftExpression -> AdditiveExpression .)
    OP_EQ           reduce using rule 198 (ShiftExpression -> AdditiveExpression .)
    OP_NE           reduce using rule 198 (ShiftExpression -> AdditiveExpression .)
    &               reduce using rule 198 (ShiftExpression -> AdditiveExpression .)
    ^               reduce using rule 198 (ShiftExpression -> AdditiveExpression .)
    |               reduce using rule 198 (ShiftExpression -> AdditiveExpression .)
    OP_LAND         reduce using rule 198 (ShiftExpression -> AdditiveExpression .)
    OP_LOR          reduce using rule 198 (ShiftExpression -> AdditiveExpression .)
    QUES            reduce using rule 198 (ShiftExpression -> AdditiveExpression .)
    SEMICOLON       reduce using rule 198 (ShiftExpression -> AdditiveExpression .)
    RROUNPAREN      reduce using rule 198 (ShiftExpression -> AdditiveExpression .)
    COLON           reduce using rule 198 (ShiftExpression -> AdditiveExpression .)
    COMMA           reduce using rule 198 (ShiftExpression -> AdditiveExpression .)
    RSQPAREN        reduce using rule 198 (ShiftExpression -> AdditiveExpression .)
    PLUS            shift and go to state 225
    MINUS           shift and go to state 226


state 136

    (224) AssignmentExpression -> ConditionalExpression .

    RROUNPAREN      reduce using rule 224 (AssignmentExpression -> ConditionalExpression .)
    SEMICOLON       reduce using rule 224 (AssignmentExpression -> ConditionalExpression .)
    COMMA           reduce using rule 224 (AssignmentExpression -> ConditionalExpression .)
    RSQPAREN        reduce using rule 224 (AssignmentExpression -> ConditionalExpression .)
    COLON           reduce using rule 224 (AssignmentExpression -> ConditionalExpression .)


state 137

    (225) AssignmentExpression -> UnaryExpression . AssignmentOperator AssignmentExpression
    (187) CastExpression -> UnaryExpression .
    (226) AssignmentOperator -> . EQUAL
    (227) AssignmentOperator -> . ASS_MUL
    (228) AssignmentOperator -> . ASS_ADD
    (229) AssignmentOperator -> . ASS_SUB

    MULT            reduce using rule 187 (CastExpression -> UnaryExpression .)
    DIV             reduce using rule 187 (CastExpression -> UnaryExpression .)
    MOD             reduce using rule 187 (CastExpression -> UnaryExpression .)
    PLUS            reduce using rule 187 (CastExpression -> UnaryExpression .)
    MINUS           reduce using rule 187 (CastExpression -> UnaryExpression .)
    OP_SHL          reduce using rule 187 (CastExpression -> UnaryExpression .)
    OP_SHR          reduce using rule 187 (CastExpression -> UnaryExpression .)
    OP_SHRR         reduce using rule 187 (CastExpression -> UnaryExpression .)
    LESS            reduce using rule 187 (CastExpression -> UnaryExpression .)
    MORE            reduce using rule 187 (CastExpression -> UnaryExpression .)
    OP_LE           reduce using rule 187 (CastExpression -> UnaryExpression .)
    OP_GE           reduce using rule 187 (CastExpression -> UnaryExpression .)
    OP_EQ           reduce using rule 187 (CastExpression -> UnaryExpression .)
    OP_NE           reduce using rule 187 (CastExpression -> UnaryExpression .)
    &               reduce using rule 187 (CastExpression -> UnaryExpression .)
    ^               reduce using rule 187 (CastExpression -> UnaryExpression .)
    |               reduce using rule 187 (CastExpression -> UnaryExpression .)
    OP_LAND         reduce using rule 187 (CastExpression -> UnaryExpression .)
    OP_LOR          reduce using rule 187 (CastExpression -> UnaryExpression .)
    QUES            reduce using rule 187 (CastExpression -> UnaryExpression .)
    RSQPAREN        reduce using rule 187 (CastExpression -> UnaryExpression .)
    COLON           reduce using rule 187 (CastExpression -> UnaryExpression .)
    RROUNPAREN      reduce using rule 187 (CastExpression -> UnaryExpression .)
    COMMA           reduce using rule 187 (CastExpression -> UnaryExpression .)
    SEMICOLON       reduce using rule 187 (CastExpression -> UnaryExpression .)
    EQUAL           shift and go to state 230
    ASS_MUL         shift and go to state 227
    ASS_ADD         shift and go to state 228
    ASS_SUB         shift and go to state 231

    AssignmentOperator             shift and go to state 229

state 138

    (216) ConditionalAndExpression -> InclusiveOrExpression .
    (215) InclusiveOrExpression -> InclusiveOrExpression . | ExclusiveOrExpression

    OP_LAND         reduce using rule 216 (ConditionalAndExpression -> InclusiveOrExpression .)
    OP_LOR          reduce using rule 216 (ConditionalAndExpression -> InclusiveOrExpression .)
    QUES            reduce using rule 216 (ConditionalAndExpression -> InclusiveOrExpression .)
    RROUNPAREN      reduce using rule 216 (ConditionalAndExpression -> InclusiveOrExpression .)
    COMMA           reduce using rule 216 (ConditionalAndExpression -> InclusiveOrExpression .)
    COLON           reduce using rule 216 (ConditionalAndExpression -> InclusiveOrExpression .)
    RSQPAREN        reduce using rule 216 (ConditionalAndExpression -> InclusiveOrExpression .)
    SEMICOLON       reduce using rule 216 (ConditionalAndExpression -> InclusiveOrExpression .)
    |               shift and go to state 232


state 139

    (136) ComplexPrimaryNoParenthesis -> CHAR_CONST .

    LSQPAREN        reduce using rule 136 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    DOT             reduce using rule 136 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    OP_INC          reduce using rule 136 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    OP_DEC          reduce using rule 136 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    MULT            reduce using rule 136 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    DIV             reduce using rule 136 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    MOD             reduce using rule 136 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    PLUS            reduce using rule 136 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    MINUS           reduce using rule 136 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    OP_SHL          reduce using rule 136 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    OP_SHR          reduce using rule 136 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    OP_SHRR         reduce using rule 136 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    LESS            reduce using rule 136 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    MORE            reduce using rule 136 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    OP_LE           reduce using rule 136 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    OP_GE           reduce using rule 136 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    OP_EQ           reduce using rule 136 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    OP_NE           reduce using rule 136 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    &               reduce using rule 136 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    ^               reduce using rule 136 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    |               reduce using rule 136 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    OP_LAND         reduce using rule 136 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    OP_LOR          reduce using rule 136 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    QUES            reduce using rule 136 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    SEMICOLON       reduce using rule 136 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    RROUNPAREN      reduce using rule 136 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    COLON           reduce using rule 136 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    COMMA           reduce using rule 136 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    RSQPAREN        reduce using rule 136 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    EQUAL           reduce using rule 136 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    ASS_MUL         reduce using rule 136 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    ASS_ADD         reduce using rule 136 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)
    ASS_SUB         reduce using rule 136 (ComplexPrimaryNoParenthesis -> CHAR_CONST .)


state 140

    (183) LogicalUnaryOperator -> ~ .

    OP_INC          reduce using rule 183 (LogicalUnaryOperator -> ~ .)
    OP_DEC          reduce using rule 183 (LogicalUnaryOperator -> ~ .)
    PLUS            reduce using rule 183 (LogicalUnaryOperator -> ~ .)
    MINUS           reduce using rule 183 (LogicalUnaryOperator -> ~ .)
    ~               reduce using rule 183 (LogicalUnaryOperator -> ~ .)
    NOT             reduce using rule 183 (LogicalUnaryOperator -> ~ .)
    IDENTIFIER      reduce using rule 183 (LogicalUnaryOperator -> ~ .)
    THIS            reduce using rule 183 (LogicalUnaryOperator -> ~ .)
    SUPER           reduce using rule 183 (LogicalUnaryOperator -> ~ .)
    NULL            reduce using rule 183 (LogicalUnaryOperator -> ~ .)
    LROUNPAREN      reduce using rule 183 (LogicalUnaryOperator -> ~ .)
    INT_CONST       reduce using rule 183 (LogicalUnaryOperator -> ~ .)
    FLOAT_CONST     reduce using rule 183 (LogicalUnaryOperator -> ~ .)
    STRING          reduce using rule 183 (LogicalUnaryOperator -> ~ .)
    CHAR_CONST      reduce using rule 183 (LogicalUnaryOperator -> ~ .)
    BOOLEAN_CONST   reduce using rule 183 (LogicalUnaryOperator -> ~ .)
    NEW             reduce using rule 183 (LogicalUnaryOperator -> ~ .)
    BOOLEAN         reduce using rule 183 (LogicalUnaryOperator -> ~ .)
    CHAR            reduce using rule 183 (LogicalUnaryOperator -> ~ .)
    BYTE            reduce using rule 183 (LogicalUnaryOperator -> ~ .)
    SHORT           reduce using rule 183 (LogicalUnaryOperator -> ~ .)
    INT             reduce using rule 183 (LogicalUnaryOperator -> ~ .)
    LONG            reduce using rule 183 (LogicalUnaryOperator -> ~ .)
    FLOAT           reduce using rule 183 (LogicalUnaryOperator -> ~ .)
    DOUBLE          reduce using rule 183 (LogicalUnaryOperator -> ~ .)
    VOID            reduce using rule 183 (LogicalUnaryOperator -> ~ .)


state 141

    (110) Do -> DO .

    SEMICOLON       reduce using rule 110 (Do -> DO .)
    IDENTIFIER      reduce using rule 110 (Do -> DO .)
    CASE            reduce using rule 110 (Do -> DO .)
    DEFAULT         reduce using rule 110 (Do -> DO .)
    BREAK           reduce using rule 110 (Do -> DO .)
    RETURN          reduce using rule 110 (Do -> DO .)
    WHILE           reduce using rule 110 (Do -> DO .)
    LCURPAREN       reduce using rule 110 (Do -> DO .)
    DO              reduce using rule 110 (Do -> DO .)
    FOR             reduce using rule 110 (Do -> DO .)
    IF              reduce using rule 110 (Do -> DO .)
    OP_INC          reduce using rule 110 (Do -> DO .)
    OP_DEC          reduce using rule 110 (Do -> DO .)
    PLUS            reduce using rule 110 (Do -> DO .)
    MINUS           reduce using rule 110 (Do -> DO .)
    ~               reduce using rule 110 (Do -> DO .)
    NOT             reduce using rule 110 (Do -> DO .)
    THIS            reduce using rule 110 (Do -> DO .)
    SUPER           reduce using rule 110 (Do -> DO .)
    NULL            reduce using rule 110 (Do -> DO .)
    LROUNPAREN      reduce using rule 110 (Do -> DO .)
    INT_CONST       reduce using rule 110 (Do -> DO .)
    FLOAT_CONST     reduce using rule 110 (Do -> DO .)
    STRING          reduce using rule 110 (Do -> DO .)
    CHAR_CONST      reduce using rule 110 (Do -> DO .)
    BOOLEAN_CONST   reduce using rule 110 (Do -> DO .)
    NEW             reduce using rule 110 (Do -> DO .)
    BOOLEAN         reduce using rule 110 (Do -> DO .)
    CHAR            reduce using rule 110 (Do -> DO .)
    BYTE            reduce using rule 110 (Do -> DO .)
    SHORT           reduce using rule 110 (Do -> DO .)
    INT             reduce using rule 110 (Do -> DO .)
    LONG            reduce using rule 110 (Do -> DO .)
    FLOAT           reduce using rule 110 (Do -> DO .)
    DOUBLE          reduce using rule 110 (Do -> DO .)
    VOID            reduce using rule 110 (Do -> DO .)


state 142

    (191) MultiplicativeExpression -> CastExpression .

    MULT            reduce using rule 191 (MultiplicativeExpression -> CastExpression .)
    DIV             reduce using rule 191 (MultiplicativeExpression -> CastExpression .)
    MOD             reduce using rule 191 (MultiplicativeExpression -> CastExpression .)
    PLUS            reduce using rule 191 (MultiplicativeExpression -> CastExpression .)
    MINUS           reduce using rule 191 (MultiplicativeExpression -> CastExpression .)
    OP_SHL          reduce using rule 191 (MultiplicativeExpression -> CastExpression .)
    OP_SHR          reduce using rule 191 (MultiplicativeExpression -> CastExpression .)
    OP_SHRR         reduce using rule 191 (MultiplicativeExpression -> CastExpression .)
    LESS            reduce using rule 191 (MultiplicativeExpression -> CastExpression .)
    MORE            reduce using rule 191 (MultiplicativeExpression -> CastExpression .)
    OP_LE           reduce using rule 191 (MultiplicativeExpression -> CastExpression .)
    OP_GE           reduce using rule 191 (MultiplicativeExpression -> CastExpression .)
    OP_EQ           reduce using rule 191 (MultiplicativeExpression -> CastExpression .)
    OP_NE           reduce using rule 191 (MultiplicativeExpression -> CastExpression .)
    &               reduce using rule 191 (MultiplicativeExpression -> CastExpression .)
    ^               reduce using rule 191 (MultiplicativeExpression -> CastExpression .)
    |               reduce using rule 191 (MultiplicativeExpression -> CastExpression .)
    OP_LAND         reduce using rule 191 (MultiplicativeExpression -> CastExpression .)
    OP_LOR          reduce using rule 191 (MultiplicativeExpression -> CastExpression .)
    QUES            reduce using rule 191 (MultiplicativeExpression -> CastExpression .)
    SEMICOLON       reduce using rule 191 (MultiplicativeExpression -> CastExpression .)
    COMMA           reduce using rule 191 (MultiplicativeExpression -> CastExpression .)
    RROUNPAREN      reduce using rule 191 (MultiplicativeExpression -> CastExpression .)
    COLON           reduce using rule 191 (MultiplicativeExpression -> CastExpression .)
    RSQPAREN        reduce using rule 191 (MultiplicativeExpression -> CastExpression .)


state 143

    (153) SpecialName -> NULL .

    DOT             reduce using rule 153 (SpecialName -> NULL .)
    OP_INC          reduce using rule 153 (SpecialName -> NULL .)
    OP_DEC          reduce using rule 153 (SpecialName -> NULL .)
    EQUAL           reduce using rule 153 (SpecialName -> NULL .)
    ASS_MUL         reduce using rule 153 (SpecialName -> NULL .)
    ASS_ADD         reduce using rule 153 (SpecialName -> NULL .)
    ASS_SUB         reduce using rule 153 (SpecialName -> NULL .)
    MULT            reduce using rule 153 (SpecialName -> NULL .)
    DIV             reduce using rule 153 (SpecialName -> NULL .)
    MOD             reduce using rule 153 (SpecialName -> NULL .)
    PLUS            reduce using rule 153 (SpecialName -> NULL .)
    MINUS           reduce using rule 153 (SpecialName -> NULL .)
    OP_SHL          reduce using rule 153 (SpecialName -> NULL .)
    OP_SHR          reduce using rule 153 (SpecialName -> NULL .)
    OP_SHRR         reduce using rule 153 (SpecialName -> NULL .)
    LESS            reduce using rule 153 (SpecialName -> NULL .)
    MORE            reduce using rule 153 (SpecialName -> NULL .)
    OP_LE           reduce using rule 153 (SpecialName -> NULL .)
    OP_GE           reduce using rule 153 (SpecialName -> NULL .)
    OP_EQ           reduce using rule 153 (SpecialName -> NULL .)
    OP_NE           reduce using rule 153 (SpecialName -> NULL .)
    &               reduce using rule 153 (SpecialName -> NULL .)
    ^               reduce using rule 153 (SpecialName -> NULL .)
    |               reduce using rule 153 (SpecialName -> NULL .)
    OP_LAND         reduce using rule 153 (SpecialName -> NULL .)
    OP_LOR          reduce using rule 153 (SpecialName -> NULL .)
    QUES            reduce using rule 153 (SpecialName -> NULL .)
    SEMICOLON       reduce using rule 153 (SpecialName -> NULL .)
    RROUNPAREN      reduce using rule 153 (SpecialName -> NULL .)
    COMMA           reduce using rule 153 (SpecialName -> NULL .)
    RSQPAREN        reduce using rule 153 (SpecialName -> NULL .)
    COLON           reduce using rule 153 (SpecialName -> NULL .)


state 144

    (109) IterationStatement -> Do . Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON
    (96) Mark_quad -> .

    SEMICOLON       reduce using rule 96 (Mark_quad -> .)
    IDENTIFIER      reduce using rule 96 (Mark_quad -> .)
    CASE            reduce using rule 96 (Mark_quad -> .)
    DEFAULT         reduce using rule 96 (Mark_quad -> .)
    BREAK           reduce using rule 96 (Mark_quad -> .)
    RETURN          reduce using rule 96 (Mark_quad -> .)
    WHILE           reduce using rule 96 (Mark_quad -> .)
    LCURPAREN       reduce using rule 96 (Mark_quad -> .)
    DO              reduce using rule 96 (Mark_quad -> .)
    FOR             reduce using rule 96 (Mark_quad -> .)
    IF              reduce using rule 96 (Mark_quad -> .)
    OP_INC          reduce using rule 96 (Mark_quad -> .)
    OP_DEC          reduce using rule 96 (Mark_quad -> .)
    PLUS            reduce using rule 96 (Mark_quad -> .)
    MINUS           reduce using rule 96 (Mark_quad -> .)
    ~               reduce using rule 96 (Mark_quad -> .)
    NOT             reduce using rule 96 (Mark_quad -> .)
    THIS            reduce using rule 96 (Mark_quad -> .)
    SUPER           reduce using rule 96 (Mark_quad -> .)
    NULL            reduce using rule 96 (Mark_quad -> .)
    LROUNPAREN      reduce using rule 96 (Mark_quad -> .)
    INT_CONST       reduce using rule 96 (Mark_quad -> .)
    FLOAT_CONST     reduce using rule 96 (Mark_quad -> .)
    STRING          reduce using rule 96 (Mark_quad -> .)
    CHAR_CONST      reduce using rule 96 (Mark_quad -> .)
    BOOLEAN_CONST   reduce using rule 96 (Mark_quad -> .)
    NEW             reduce using rule 96 (Mark_quad -> .)
    BOOLEAN         reduce using rule 96 (Mark_quad -> .)
    CHAR            reduce using rule 96 (Mark_quad -> .)
    BYTE            reduce using rule 96 (Mark_quad -> .)
    SHORT           reduce using rule 96 (Mark_quad -> .)
    INT             reduce using rule 96 (Mark_quad -> .)
    LONG            reduce using rule 96 (Mark_quad -> .)
    FLOAT           reduce using rule 96 (Mark_quad -> .)
    DOUBLE          reduce using rule 96 (Mark_quad -> .)
    VOID            reduce using rule 96 (Mark_quad -> .)

    Mark_quad                      shift and go to state 233

state 145

    (182) LogicalUnaryExpression -> LogicalUnaryOperator . UnaryExpression
    (177) UnaryExpression -> . OP_INC UnaryExpression
    (178) UnaryExpression -> . OP_DEC UnaryExpression
    (179) UnaryExpression -> . LogicalUnaryExpression
    (180) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (181) LogicalUnaryExpression -> . PostfixExpression
    (182) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (185) ArithmeticUnaryOperator -> . PLUS
    (186) ArithmeticUnaryOperator -> . MINUS
    (173) PostfixExpression -> . PrimaryExpression
    (174) PostfixExpression -> . RealPostfixExpression
    (183) LogicalUnaryOperator -> . ~
    (184) LogicalUnaryOperator -> . NOT
    (126) PrimaryExpression -> . QualifiedName
    (127) PrimaryExpression -> . NotJustName
    (175) RealPostfixExpression -> . PostfixExpression OP_INC
    (176) RealPostfixExpression -> . PostfixExpression OP_DEC
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (128) NotJustName -> . SpecialName
    (129) NotJustName -> . NewAllocationExpression
    (130) NotJustName -> . ComplexPrimary
    (151) SpecialName -> . THIS
    (152) SpecialName -> . SUPER
    (153) SpecialName -> . NULL
    (156) NewAllocationExpression -> . PlainNewAllocationExpression
    (157) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (131) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (132) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (158) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (159) PlainNewAllocationExpression -> . ClassAllocationExpression
    (160) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (161) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (162) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (133) ComplexPrimaryNoParenthesis -> . INT_CONST
    (134) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (135) ComplexPrimaryNoParenthesis -> . STRING
    (136) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (137) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (138) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (139) ComplexPrimaryNoParenthesis -> . FieldAccess
    (140) ComplexPrimaryNoParenthesis -> . MethodCall
    (165) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (166) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (167) ArrayAllocationExpression -> . NEW TypeName Dims
    (163) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (164) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (141) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (142) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (143) FieldAccess -> . NotJustName DOT IDENTIFIER
    (144) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (145) FieldAccess -> . QualifiedName DOT THIS
    (146) FieldAccess -> . QualifiedName DOT CLASS
    (147) FieldAccess -> . PrimitiveType DOT CLASS
    (148) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (149) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (150) MethodAccess -> . QualifiedName

    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 124
    PLUS            shift and go to state 87
    MINUS           shift and go to state 86
    ~               shift and go to state 140
    NOT             shift and go to state 117
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 89
    SUPER           shift and go to state 156
    NULL            shift and go to state 143
    LROUNPAREN      shift and go to state 92
    INT_CONST       shift and go to state 106
    FLOAT_CONST     shift and go to state 83
    STRING          shift and go to state 149
    CHAR_CONST      shift and go to state 139
    BOOLEAN_CONST   shift and go to state 155
    NEW             shift and go to state 125
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 119
    PrimaryExpression              shift and go to state 127
    PrimitiveType                  shift and go to state 183
    RealPostfixExpression          shift and go to state 95
    ArithmeticUnaryOperator        shift and go to state 96
    MethodCall                     shift and go to state 101
    ClassAllocationExpression      shift and go to state 120
    LogicalUnaryOperator           shift and go to state 145
    ComplexPrimaryNoParenthesis    shift and go to state 99
    ArrayAccess                    shift and go to state 108
    NewAllocationExpression        shift and go to state 133
    NotJustName                    shift and go to state 150
    QualifiedName                  shift and go to state 185
    LogicalUnaryExpression         shift and go to state 152
    ArrayAllocationExpression      shift and go to state 110
    UnaryExpression                shift and go to state 234
    FieldAccess                    shift and go to state 154
    PlainNewAllocationExpression   shift and go to state 115
    MethodAccess                   shift and go to state 111
    SpecialName                    shift and go to state 118

state 146

    (86) LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .

    RCURPAREN       reduce using rule 86 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    SEMICOLON       reduce using rule 86 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    IDENTIFIER      reduce using rule 86 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    CASE            reduce using rule 86 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    DEFAULT         reduce using rule 86 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    BREAK           reduce using rule 86 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    RETURN          reduce using rule 86 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    WHILE           reduce using rule 86 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    LCURPAREN       reduce using rule 86 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    DO              reduce using rule 86 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    FOR             reduce using rule 86 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    IF              reduce using rule 86 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    BOOLEAN         reduce using rule 86 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    CHAR            reduce using rule 86 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    BYTE            reduce using rule 86 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    SHORT           reduce using rule 86 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    INT             reduce using rule 86 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    LONG            reduce using rule 86 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    FLOAT           reduce using rule 86 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    DOUBLE          reduce using rule 86 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    VOID            reduce using rule 86 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    OP_INC          reduce using rule 86 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    OP_DEC          reduce using rule 86 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    PLUS            reduce using rule 86 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    MINUS           reduce using rule 86 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    ~               reduce using rule 86 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    NOT             reduce using rule 86 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    THIS            reduce using rule 86 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    SUPER           reduce using rule 86 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    NULL            reduce using rule 86 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    LROUNPAREN      reduce using rule 86 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    INT_CONST       reduce using rule 86 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    FLOAT_CONST     reduce using rule 86 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    STRING          reduce using rule 86 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    CHAR_CONST      reduce using rule 86 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    BOOLEAN_CONST   reduce using rule 86 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)
    NEW             reduce using rule 86 (LocalVariableDeclarationOrStatement -> LocalVariableDeclarationStatement .)


state 147

    (202) RelationalExpression -> ShiftExpression .
    (199) ShiftExpression -> ShiftExpression . OP_SHL AdditiveExpression
    (200) ShiftExpression -> ShiftExpression . OP_SHR AdditiveExpression
    (201) ShiftExpression -> ShiftExpression . OP_SHRR AdditiveExpression

    LESS            reduce using rule 202 (RelationalExpression -> ShiftExpression .)
    MORE            reduce using rule 202 (RelationalExpression -> ShiftExpression .)
    OP_LE           reduce using rule 202 (RelationalExpression -> ShiftExpression .)
    OP_GE           reduce using rule 202 (RelationalExpression -> ShiftExpression .)
    OP_EQ           reduce using rule 202 (RelationalExpression -> ShiftExpression .)
    OP_NE           reduce using rule 202 (RelationalExpression -> ShiftExpression .)
    &               reduce using rule 202 (RelationalExpression -> ShiftExpression .)
    ^               reduce using rule 202 (RelationalExpression -> ShiftExpression .)
    |               reduce using rule 202 (RelationalExpression -> ShiftExpression .)
    OP_LAND         reduce using rule 202 (RelationalExpression -> ShiftExpression .)
    OP_LOR          reduce using rule 202 (RelationalExpression -> ShiftExpression .)
    QUES            reduce using rule 202 (RelationalExpression -> ShiftExpression .)
    COMMA           reduce using rule 202 (RelationalExpression -> ShiftExpression .)
    RROUNPAREN      reduce using rule 202 (RelationalExpression -> ShiftExpression .)
    SEMICOLON       reduce using rule 202 (RelationalExpression -> ShiftExpression .)
    RSQPAREN        reduce using rule 202 (RelationalExpression -> ShiftExpression .)
    COLON           reduce using rule 202 (RelationalExpression -> ShiftExpression .)
    OP_SHL          shift and go to state 235
    OP_SHR          shift and go to state 237
    OP_SHRR         shift and go to state 236


state 148

    (80) Block -> Bl LocalVariableDeclarationsAndStatements . Br
    (85) LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements . LocalVariableDeclarationOrStatement
    (83) Br -> . RCURPAREN
    (86) LocalVariableDeclarationOrStatement -> . LocalVariableDeclarationStatement
    (87) LocalVariableDeclarationOrStatement -> . Statement
    (88) LocalVariableDeclarationStatement -> . TypeSpecifier VariableDeclarators SEMICOLON
    (89) Statement -> . EmptyStatement Mark_quad
    (90) Statement -> . LabelStatement Mark_quad
    (91) Statement -> . ExpressionStatement SEMICOLON Mark_quad
    (92) Statement -> . JumpStatement Mark_quad
    (93) Statement -> . Block Mark_quad
    (94) Statement -> . IterationStatement Mark_quad
    (95) Statement -> . SelectionStatement Mark_quad
    (3) TypeSpecifier -> . TypeName
    (4) TypeSpecifier -> . TypeName Dims
    (97) EmptyStatement -> . SEMICOLON
    (98) LabelStatement -> . IDENTIFIER COLON
    (99) LabelStatement -> . CASE ConstantExpression COLON
    (100) LabelStatement -> . DEFAULT COLON
    (101) ExpressionStatement -> . Expression
    (123) JumpStatement -> . BREAK SEMICOLON
    (124) JumpStatement -> . RETURN Expression SEMICOLON
    (125) JumpStatement -> . RETURN SEMICOLON
    (80) Block -> . Bl LocalVariableDeclarationsAndStatements Br
    (81) Block -> . Bl Br
    (107) IterationStatement -> . WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement
    (109) IterationStatement -> . Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON
    (112) IterationStatement -> . Fr LROUNPAREN ForInit ForExpr Mark_for ForIncr RROUNPAREN Mark_quad Statement
    (102) SelectionStatement -> . If LROUNPAREN Expression RROUNPAREN Mark_if Statement
    (103) SelectionStatement -> . If LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement
    (5) TypeName -> . PrimitiveType
    (6) TypeName -> . QualifiedName
    (230) Expression -> . AssignmentExpression
    (82) Bl -> . LCURPAREN
    (110) Do -> . DO
    (113) Fr -> . FOR
    (104) If -> . IF
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (224) AssignmentExpression -> . ConditionalExpression
    (225) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (220) ConditionalExpression -> . ConditionalOrExpression
    (221) ConditionalExpression -> . ConditionalOrExpression Mark_quad Ques Mark_quad Expression Mark_quad Cln Mark_quad ConditionalExpression Mark_quad
    (177) UnaryExpression -> . OP_INC UnaryExpression
    (178) UnaryExpression -> . OP_DEC UnaryExpression
    (179) UnaryExpression -> . LogicalUnaryExpression
    (180) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) ConditionalOrExpression -> . ConditionalAndExpression
    (219) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (181) LogicalUnaryExpression -> . PostfixExpression
    (182) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (185) ArithmeticUnaryOperator -> . PLUS
    (186) ArithmeticUnaryOperator -> . MINUS
    (216) ConditionalAndExpression -> . InclusiveOrExpression
    (217) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (173) PostfixExpression -> . PrimaryExpression
    (174) PostfixExpression -> . RealPostfixExpression
    (183) LogicalUnaryOperator -> . ~
    (184) LogicalUnaryOperator -> . NOT
    (214) InclusiveOrExpression -> . ExclusiveOrExpression
    (215) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (126) PrimaryExpression -> . QualifiedName
    (127) PrimaryExpression -> . NotJustName
    (175) RealPostfixExpression -> . PostfixExpression OP_INC
    (176) RealPostfixExpression -> . PostfixExpression OP_DEC
    (212) ExclusiveOrExpression -> . AndExpression
    (213) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (128) NotJustName -> . SpecialName
    (129) NotJustName -> . NewAllocationExpression
    (130) NotJustName -> . ComplexPrimary
    (210) AndExpression -> . EqualityExpression
    (211) AndExpression -> . AndExpression & EqualityExpression
    (151) SpecialName -> . THIS
    (152) SpecialName -> . SUPER
    (153) SpecialName -> . NULL
    (156) NewAllocationExpression -> . PlainNewAllocationExpression
    (157) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (131) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (132) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (207) EqualityExpression -> . RelationalExpression
    (208) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (209) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (158) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (159) PlainNewAllocationExpression -> . ClassAllocationExpression
    (160) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (161) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (162) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (133) ComplexPrimaryNoParenthesis -> . INT_CONST
    (134) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (135) ComplexPrimaryNoParenthesis -> . STRING
    (136) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (137) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (138) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (139) ComplexPrimaryNoParenthesis -> . FieldAccess
    (140) ComplexPrimaryNoParenthesis -> . MethodCall
    (202) RelationalExpression -> . ShiftExpression
    (203) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (204) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (205) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (206) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (165) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (166) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (167) ArrayAllocationExpression -> . NEW TypeName Dims
    (163) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (164) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (141) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (142) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (143) FieldAccess -> . NotJustName DOT IDENTIFIER
    (144) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (145) FieldAccess -> . QualifiedName DOT THIS
    (146) FieldAccess -> . QualifiedName DOT CLASS
    (147) FieldAccess -> . PrimitiveType DOT CLASS
    (148) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (149) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (198) ShiftExpression -> . AdditiveExpression
    (199) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (200) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (201) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (150) MethodAccess -> . QualifiedName
    (195) AdditiveExpression -> . MultiplicativeExpression
    (196) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (197) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (191) MultiplicativeExpression -> . CastExpression
    (192) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (193) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (194) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (187) CastExpression -> . UnaryExpression

    RCURPAREN       shift and go to state 107
    SEMICOLON       shift and go to state 130
    IDENTIFIER      shift and go to state 132
    CASE            shift and go to state 128
    DEFAULT         shift and go to state 121
    BREAK           shift and go to state 98
    RETURN          shift and go to state 94
    WHILE           shift and go to state 123
    LCURPAREN       shift and go to state 58
    DO              shift and go to state 141
    FOR             shift and go to state 104
    IF              shift and go to state 153
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 124
    PLUS            shift and go to state 87
    MINUS           shift and go to state 86
    ~               shift and go to state 140
    NOT             shift and go to state 117
    THIS            shift and go to state 89
    SUPER           shift and go to state 156
    NULL            shift and go to state 143
    LROUNPAREN      shift and go to state 92
    INT_CONST       shift and go to state 106
    FLOAT_CONST     shift and go to state 83
    STRING          shift and go to state 149
    CHAR_CONST      shift and go to state 139
    BOOLEAN_CONST   shift and go to state 155
    NEW             shift and go to state 125

    PostfixExpression              shift and go to state 112
    LabelStatement                 shift and go to state 93
    ArithmeticUnaryOperator        shift and go to state 96
    AssignmentExpression           shift and go to state 103
    ExpressionStatement            shift and go to state 81
    JumpStatement                  shift and go to state 122
    RealPostfixExpression          shift and go to state 95
    Statement                      shift and go to state 84
    AndExpression                  shift and go to state 85
    ArrayAccess                    shift and go to state 108
    MultiplicativeExpression       shift and go to state 100
    TypeSpecifier                  shift and go to state 126
    CastExpression                 shift and go to state 142
    EqualityExpression             shift and go to state 97
    Do                             shift and go to state 144
    Fr                             shift and go to state 129
    MethodAccess                   shift and go to state 111
    ComplexPrimaryNoParenthesis    shift and go to state 99
    Bl                             shift and go to state 53
    ClassAllocationExpression      shift and go to state 120
    LogicalUnaryOperator           shift and go to state 145
    TypeName                       shift and go to state 54
    Br                             shift and go to state 238
    LocalVariableDeclarationStatement shift and go to state 146
    ShiftExpression                shift and go to state 147
    SelectionStatement             shift and go to state 102
    NotJustName                    shift and go to state 150
    ConditionalOrExpression        shift and go to state 131
    QualifiedName                  shift and go to state 151
    ComplexPrimary                 shift and go to state 119
    MethodCall                     shift and go to state 101
    PrimitiveType                  shift and go to state 82
    LogicalUnaryExpression         shift and go to state 152
    UnaryExpression                shift and go to state 137
    Expression                     shift and go to state 134
    Block                          shift and go to state 109
    AdditiveExpression             shift and go to state 135
    ArrayAllocationExpression      shift and go to state 110
    ConditionalExpression          shift and go to state 136
    InclusiveOrExpression          shift and go to state 138
    PrimaryExpression              shift and go to state 127
    ExclusiveOrExpression          shift and go to state 113
    ConditionalAndExpression       shift and go to state 90
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    LocalVariableDeclarationOrStatement shift and go to state 239
    NewAllocationExpression        shift and go to state 133
    FieldAccess                    shift and go to state 154
    EmptyStatement                 shift and go to state 91
    SpecialName                    shift and go to state 118
    IterationStatement             shift and go to state 157
    If                             shift and go to state 158

state 149

    (135) ComplexPrimaryNoParenthesis -> STRING .

    LSQPAREN        reduce using rule 135 (ComplexPrimaryNoParenthesis -> STRING .)
    DOT             reduce using rule 135 (ComplexPrimaryNoParenthesis -> STRING .)
    OP_INC          reduce using rule 135 (ComplexPrimaryNoParenthesis -> STRING .)
    OP_DEC          reduce using rule 135 (ComplexPrimaryNoParenthesis -> STRING .)
    MULT            reduce using rule 135 (ComplexPrimaryNoParenthesis -> STRING .)
    DIV             reduce using rule 135 (ComplexPrimaryNoParenthesis -> STRING .)
    MOD             reduce using rule 135 (ComplexPrimaryNoParenthesis -> STRING .)
    PLUS            reduce using rule 135 (ComplexPrimaryNoParenthesis -> STRING .)
    MINUS           reduce using rule 135 (ComplexPrimaryNoParenthesis -> STRING .)
    OP_SHL          reduce using rule 135 (ComplexPrimaryNoParenthesis -> STRING .)
    OP_SHR          reduce using rule 135 (ComplexPrimaryNoParenthesis -> STRING .)
    OP_SHRR         reduce using rule 135 (ComplexPrimaryNoParenthesis -> STRING .)
    LESS            reduce using rule 135 (ComplexPrimaryNoParenthesis -> STRING .)
    MORE            reduce using rule 135 (ComplexPrimaryNoParenthesis -> STRING .)
    OP_LE           reduce using rule 135 (ComplexPrimaryNoParenthesis -> STRING .)
    OP_GE           reduce using rule 135 (ComplexPrimaryNoParenthesis -> STRING .)
    OP_EQ           reduce using rule 135 (ComplexPrimaryNoParenthesis -> STRING .)
    OP_NE           reduce using rule 135 (ComplexPrimaryNoParenthesis -> STRING .)
    &               reduce using rule 135 (ComplexPrimaryNoParenthesis -> STRING .)
    ^               reduce using rule 135 (ComplexPrimaryNoParenthesis -> STRING .)
    |               reduce using rule 135 (ComplexPrimaryNoParenthesis -> STRING .)
    OP_LAND         reduce using rule 135 (ComplexPrimaryNoParenthesis -> STRING .)
    OP_LOR          reduce using rule 135 (ComplexPrimaryNoParenthesis -> STRING .)
    QUES            reduce using rule 135 (ComplexPrimaryNoParenthesis -> STRING .)
    SEMICOLON       reduce using rule 135 (ComplexPrimaryNoParenthesis -> STRING .)
    RROUNPAREN      reduce using rule 135 (ComplexPrimaryNoParenthesis -> STRING .)
    COLON           reduce using rule 135 (ComplexPrimaryNoParenthesis -> STRING .)
    COMMA           reduce using rule 135 (ComplexPrimaryNoParenthesis -> STRING .)
    RSQPAREN        reduce using rule 135 (ComplexPrimaryNoParenthesis -> STRING .)
    EQUAL           reduce using rule 135 (ComplexPrimaryNoParenthesis -> STRING .)
    ASS_MUL         reduce using rule 135 (ComplexPrimaryNoParenthesis -> STRING .)
    ASS_ADD         reduce using rule 135 (ComplexPrimaryNoParenthesis -> STRING .)
    ASS_SUB         reduce using rule 135 (ComplexPrimaryNoParenthesis -> STRING .)


state 150

    (127) PrimaryExpression -> NotJustName .
    (143) FieldAccess -> NotJustName . DOT IDENTIFIER

    OP_INC          reduce using rule 127 (PrimaryExpression -> NotJustName .)
    OP_DEC          reduce using rule 127 (PrimaryExpression -> NotJustName .)
    MULT            reduce using rule 127 (PrimaryExpression -> NotJustName .)
    DIV             reduce using rule 127 (PrimaryExpression -> NotJustName .)
    MOD             reduce using rule 127 (PrimaryExpression -> NotJustName .)
    PLUS            reduce using rule 127 (PrimaryExpression -> NotJustName .)
    MINUS           reduce using rule 127 (PrimaryExpression -> NotJustName .)
    OP_SHL          reduce using rule 127 (PrimaryExpression -> NotJustName .)
    OP_SHR          reduce using rule 127 (PrimaryExpression -> NotJustName .)
    OP_SHRR         reduce using rule 127 (PrimaryExpression -> NotJustName .)
    LESS            reduce using rule 127 (PrimaryExpression -> NotJustName .)
    MORE            reduce using rule 127 (PrimaryExpression -> NotJustName .)
    OP_LE           reduce using rule 127 (PrimaryExpression -> NotJustName .)
    OP_GE           reduce using rule 127 (PrimaryExpression -> NotJustName .)
    OP_EQ           reduce using rule 127 (PrimaryExpression -> NotJustName .)
    OP_NE           reduce using rule 127 (PrimaryExpression -> NotJustName .)
    &               reduce using rule 127 (PrimaryExpression -> NotJustName .)
    ^               reduce using rule 127 (PrimaryExpression -> NotJustName .)
    |               reduce using rule 127 (PrimaryExpression -> NotJustName .)
    OP_LAND         reduce using rule 127 (PrimaryExpression -> NotJustName .)
    OP_LOR          reduce using rule 127 (PrimaryExpression -> NotJustName .)
    QUES            reduce using rule 127 (PrimaryExpression -> NotJustName .)
    SEMICOLON       reduce using rule 127 (PrimaryExpression -> NotJustName .)
    RROUNPAREN      reduce using rule 127 (PrimaryExpression -> NotJustName .)
    COLON           reduce using rule 127 (PrimaryExpression -> NotJustName .)
    COMMA           reduce using rule 127 (PrimaryExpression -> NotJustName .)
    RSQPAREN        reduce using rule 127 (PrimaryExpression -> NotJustName .)
    EQUAL           reduce using rule 127 (PrimaryExpression -> NotJustName .)
    ASS_MUL         reduce using rule 127 (PrimaryExpression -> NotJustName .)
    ASS_ADD         reduce using rule 127 (PrimaryExpression -> NotJustName .)
    ASS_SUB         reduce using rule 127 (PrimaryExpression -> NotJustName .)
    DOT             shift and go to state 240


state 151

    (6) TypeName -> QualifiedName .
    (34) QualifiedName -> QualifiedName . DOT IDENTIFIER
    (126) PrimaryExpression -> QualifiedName .
    (157) NewAllocationExpression -> QualifiedName . DOT PlainNewAllocationExpression
    (141) ArrayAccess -> QualifiedName . LSQPAREN Expression RSQPAREN
    (145) FieldAccess -> QualifiedName . DOT THIS
    (146) FieldAccess -> QualifiedName . DOT CLASS
    (150) MethodAccess -> QualifiedName .

  ! shift/reduce conflict for LSQPAREN resolved as shift
    IDENTIFIER      reduce using rule 6 (TypeName -> QualifiedName .)
    DOT             shift and go to state 242
    OP_INC          reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    OP_DEC          reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    EQUAL           reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    ASS_MUL         reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    ASS_ADD         reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    ASS_SUB         reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    MULT            reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    DIV             reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    MOD             reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    PLUS            reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    MINUS           reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    OP_SHL          reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    OP_SHR          reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    OP_SHRR         reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    LESS            reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    MORE            reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    OP_LE           reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    OP_GE           reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    OP_EQ           reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    OP_NE           reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    &               reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    ^               reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    |               reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    OP_LAND         reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    OP_LOR          reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    QUES            reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    SEMICOLON       reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    COMMA           reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    LSQPAREN        shift and go to state 241
    LROUNPAREN      reduce using rule 150 (MethodAccess -> QualifiedName .)

  ! LSQPAREN        [ reduce using rule 6 (TypeName -> QualifiedName .) ]


state 152

    (179) UnaryExpression -> LogicalUnaryExpression .

    EQUAL           reduce using rule 179 (UnaryExpression -> LogicalUnaryExpression .)
    ASS_MUL         reduce using rule 179 (UnaryExpression -> LogicalUnaryExpression .)
    ASS_ADD         reduce using rule 179 (UnaryExpression -> LogicalUnaryExpression .)
    ASS_SUB         reduce using rule 179 (UnaryExpression -> LogicalUnaryExpression .)
    MULT            reduce using rule 179 (UnaryExpression -> LogicalUnaryExpression .)
    DIV             reduce using rule 179 (UnaryExpression -> LogicalUnaryExpression .)
    MOD             reduce using rule 179 (UnaryExpression -> LogicalUnaryExpression .)
    PLUS            reduce using rule 179 (UnaryExpression -> LogicalUnaryExpression .)
    MINUS           reduce using rule 179 (UnaryExpression -> LogicalUnaryExpression .)
    OP_SHL          reduce using rule 179 (UnaryExpression -> LogicalUnaryExpression .)
    OP_SHR          reduce using rule 179 (UnaryExpression -> LogicalUnaryExpression .)
    OP_SHRR         reduce using rule 179 (UnaryExpression -> LogicalUnaryExpression .)
    LESS            reduce using rule 179 (UnaryExpression -> LogicalUnaryExpression .)
    MORE            reduce using rule 179 (UnaryExpression -> LogicalUnaryExpression .)
    OP_LE           reduce using rule 179 (UnaryExpression -> LogicalUnaryExpression .)
    OP_GE           reduce using rule 179 (UnaryExpression -> LogicalUnaryExpression .)
    OP_EQ           reduce using rule 179 (UnaryExpression -> LogicalUnaryExpression .)
    OP_NE           reduce using rule 179 (UnaryExpression -> LogicalUnaryExpression .)
    &               reduce using rule 179 (UnaryExpression -> LogicalUnaryExpression .)
    ^               reduce using rule 179 (UnaryExpression -> LogicalUnaryExpression .)
    |               reduce using rule 179 (UnaryExpression -> LogicalUnaryExpression .)
    OP_LAND         reduce using rule 179 (UnaryExpression -> LogicalUnaryExpression .)
    OP_LOR          reduce using rule 179 (UnaryExpression -> LogicalUnaryExpression .)
    QUES            reduce using rule 179 (UnaryExpression -> LogicalUnaryExpression .)
    RSQPAREN        reduce using rule 179 (UnaryExpression -> LogicalUnaryExpression .)
    RROUNPAREN      reduce using rule 179 (UnaryExpression -> LogicalUnaryExpression .)
    COMMA           reduce using rule 179 (UnaryExpression -> LogicalUnaryExpression .)
    SEMICOLON       reduce using rule 179 (UnaryExpression -> LogicalUnaryExpression .)
    COLON           reduce using rule 179 (UnaryExpression -> LogicalUnaryExpression .)


state 153

    (104) If -> IF .

    LROUNPAREN      reduce using rule 104 (If -> IF .)


state 154

    (139) ComplexPrimaryNoParenthesis -> FieldAccess .

    LSQPAREN        reduce using rule 139 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    DOT             reduce using rule 139 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_INC          reduce using rule 139 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_DEC          reduce using rule 139 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    MULT            reduce using rule 139 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    DIV             reduce using rule 139 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    MOD             reduce using rule 139 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    PLUS            reduce using rule 139 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    MINUS           reduce using rule 139 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_SHL          reduce using rule 139 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_SHR          reduce using rule 139 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_SHRR         reduce using rule 139 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    LESS            reduce using rule 139 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    MORE            reduce using rule 139 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_LE           reduce using rule 139 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_GE           reduce using rule 139 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_EQ           reduce using rule 139 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_NE           reduce using rule 139 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    &               reduce using rule 139 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    ^               reduce using rule 139 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    |               reduce using rule 139 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_LAND         reduce using rule 139 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    OP_LOR          reduce using rule 139 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    QUES            reduce using rule 139 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    SEMICOLON       reduce using rule 139 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    RROUNPAREN      reduce using rule 139 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    COLON           reduce using rule 139 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    COMMA           reduce using rule 139 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    RSQPAREN        reduce using rule 139 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    EQUAL           reduce using rule 139 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    ASS_MUL         reduce using rule 139 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    ASS_ADD         reduce using rule 139 (ComplexPrimaryNoParenthesis -> FieldAccess .)
    ASS_SUB         reduce using rule 139 (ComplexPrimaryNoParenthesis -> FieldAccess .)


state 155

    (137) ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .

    LSQPAREN        reduce using rule 137 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    DOT             reduce using rule 137 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    OP_INC          reduce using rule 137 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    OP_DEC          reduce using rule 137 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    MULT            reduce using rule 137 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    DIV             reduce using rule 137 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    MOD             reduce using rule 137 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    PLUS            reduce using rule 137 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    MINUS           reduce using rule 137 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    OP_SHL          reduce using rule 137 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    OP_SHR          reduce using rule 137 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    OP_SHRR         reduce using rule 137 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    LESS            reduce using rule 137 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    MORE            reduce using rule 137 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    OP_LE           reduce using rule 137 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    OP_GE           reduce using rule 137 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    OP_EQ           reduce using rule 137 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    OP_NE           reduce using rule 137 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    &               reduce using rule 137 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    ^               reduce using rule 137 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    |               reduce using rule 137 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    OP_LAND         reduce using rule 137 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    OP_LOR          reduce using rule 137 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    QUES            reduce using rule 137 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    SEMICOLON       reduce using rule 137 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    RROUNPAREN      reduce using rule 137 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    COLON           reduce using rule 137 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    COMMA           reduce using rule 137 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    RSQPAREN        reduce using rule 137 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    EQUAL           reduce using rule 137 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    ASS_MUL         reduce using rule 137 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    ASS_ADD         reduce using rule 137 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)
    ASS_SUB         reduce using rule 137 (ComplexPrimaryNoParenthesis -> BOOLEAN_CONST .)


state 156

    (152) SpecialName -> SUPER .

    DOT             reduce using rule 152 (SpecialName -> SUPER .)
    OP_INC          reduce using rule 152 (SpecialName -> SUPER .)
    OP_DEC          reduce using rule 152 (SpecialName -> SUPER .)
    EQUAL           reduce using rule 152 (SpecialName -> SUPER .)
    ASS_MUL         reduce using rule 152 (SpecialName -> SUPER .)
    ASS_ADD         reduce using rule 152 (SpecialName -> SUPER .)
    ASS_SUB         reduce using rule 152 (SpecialName -> SUPER .)
    MULT            reduce using rule 152 (SpecialName -> SUPER .)
    DIV             reduce using rule 152 (SpecialName -> SUPER .)
    MOD             reduce using rule 152 (SpecialName -> SUPER .)
    PLUS            reduce using rule 152 (SpecialName -> SUPER .)
    MINUS           reduce using rule 152 (SpecialName -> SUPER .)
    OP_SHL          reduce using rule 152 (SpecialName -> SUPER .)
    OP_SHR          reduce using rule 152 (SpecialName -> SUPER .)
    OP_SHRR         reduce using rule 152 (SpecialName -> SUPER .)
    LESS            reduce using rule 152 (SpecialName -> SUPER .)
    MORE            reduce using rule 152 (SpecialName -> SUPER .)
    OP_LE           reduce using rule 152 (SpecialName -> SUPER .)
    OP_GE           reduce using rule 152 (SpecialName -> SUPER .)
    OP_EQ           reduce using rule 152 (SpecialName -> SUPER .)
    OP_NE           reduce using rule 152 (SpecialName -> SUPER .)
    &               reduce using rule 152 (SpecialName -> SUPER .)
    ^               reduce using rule 152 (SpecialName -> SUPER .)
    |               reduce using rule 152 (SpecialName -> SUPER .)
    OP_LAND         reduce using rule 152 (SpecialName -> SUPER .)
    OP_LOR          reduce using rule 152 (SpecialName -> SUPER .)
    QUES            reduce using rule 152 (SpecialName -> SUPER .)
    SEMICOLON       reduce using rule 152 (SpecialName -> SUPER .)
    RROUNPAREN      reduce using rule 152 (SpecialName -> SUPER .)
    COMMA           reduce using rule 152 (SpecialName -> SUPER .)
    RSQPAREN        reduce using rule 152 (SpecialName -> SUPER .)
    COLON           reduce using rule 152 (SpecialName -> SUPER .)


state 157

    (94) Statement -> IterationStatement . Mark_quad
    (96) Mark_quad -> .

    RCURPAREN       reduce using rule 96 (Mark_quad -> .)
    SEMICOLON       reduce using rule 96 (Mark_quad -> .)
    IDENTIFIER      reduce using rule 96 (Mark_quad -> .)
    CASE            reduce using rule 96 (Mark_quad -> .)
    DEFAULT         reduce using rule 96 (Mark_quad -> .)
    BREAK           reduce using rule 96 (Mark_quad -> .)
    RETURN          reduce using rule 96 (Mark_quad -> .)
    WHILE           reduce using rule 96 (Mark_quad -> .)
    LCURPAREN       reduce using rule 96 (Mark_quad -> .)
    DO              reduce using rule 96 (Mark_quad -> .)
    FOR             reduce using rule 96 (Mark_quad -> .)
    IF              reduce using rule 96 (Mark_quad -> .)
    BOOLEAN         reduce using rule 96 (Mark_quad -> .)
    CHAR            reduce using rule 96 (Mark_quad -> .)
    BYTE            reduce using rule 96 (Mark_quad -> .)
    SHORT           reduce using rule 96 (Mark_quad -> .)
    INT             reduce using rule 96 (Mark_quad -> .)
    LONG            reduce using rule 96 (Mark_quad -> .)
    FLOAT           reduce using rule 96 (Mark_quad -> .)
    DOUBLE          reduce using rule 96 (Mark_quad -> .)
    VOID            reduce using rule 96 (Mark_quad -> .)
    OP_INC          reduce using rule 96 (Mark_quad -> .)
    OP_DEC          reduce using rule 96 (Mark_quad -> .)
    PLUS            reduce using rule 96 (Mark_quad -> .)
    MINUS           reduce using rule 96 (Mark_quad -> .)
    ~               reduce using rule 96 (Mark_quad -> .)
    NOT             reduce using rule 96 (Mark_quad -> .)
    THIS            reduce using rule 96 (Mark_quad -> .)
    SUPER           reduce using rule 96 (Mark_quad -> .)
    NULL            reduce using rule 96 (Mark_quad -> .)
    LROUNPAREN      reduce using rule 96 (Mark_quad -> .)
    INT_CONST       reduce using rule 96 (Mark_quad -> .)
    FLOAT_CONST     reduce using rule 96 (Mark_quad -> .)
    STRING          reduce using rule 96 (Mark_quad -> .)
    CHAR_CONST      reduce using rule 96 (Mark_quad -> .)
    BOOLEAN_CONST   reduce using rule 96 (Mark_quad -> .)
    NEW             reduce using rule 96 (Mark_quad -> .)
    ELSE            reduce using rule 96 (Mark_quad -> .)

    Mark_quad                      shift and go to state 243

state 158

    (102) SelectionStatement -> If . LROUNPAREN Expression RROUNPAREN Mark_if Statement
    (103) SelectionStatement -> If . LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement

    LROUNPAREN      shift and go to state 244


state 159

    (2) OP_DIM -> LSQPAREN . RSQPAREN

    RSQPAREN        shift and go to state 245


state 160

    (171) Dims -> OP_DIM .

    LSQPAREN        reduce using rule 171 (Dims -> OP_DIM .)
    LCURPAREN       reduce using rule 171 (Dims -> OP_DIM .)
    DOT             reduce using rule 171 (Dims -> OP_DIM .)
    OP_INC          reduce using rule 171 (Dims -> OP_DIM .)
    OP_DEC          reduce using rule 171 (Dims -> OP_DIM .)
    EQUAL           reduce using rule 171 (Dims -> OP_DIM .)
    ASS_MUL         reduce using rule 171 (Dims -> OP_DIM .)
    ASS_ADD         reduce using rule 171 (Dims -> OP_DIM .)
    ASS_SUB         reduce using rule 171 (Dims -> OP_DIM .)
    MULT            reduce using rule 171 (Dims -> OP_DIM .)
    DIV             reduce using rule 171 (Dims -> OP_DIM .)
    MOD             reduce using rule 171 (Dims -> OP_DIM .)
    PLUS            reduce using rule 171 (Dims -> OP_DIM .)
    MINUS           reduce using rule 171 (Dims -> OP_DIM .)
    OP_SHL          reduce using rule 171 (Dims -> OP_DIM .)
    OP_SHR          reduce using rule 171 (Dims -> OP_DIM .)
    OP_SHRR         reduce using rule 171 (Dims -> OP_DIM .)
    LESS            reduce using rule 171 (Dims -> OP_DIM .)
    MORE            reduce using rule 171 (Dims -> OP_DIM .)
    OP_LE           reduce using rule 171 (Dims -> OP_DIM .)
    OP_GE           reduce using rule 171 (Dims -> OP_DIM .)
    OP_EQ           reduce using rule 171 (Dims -> OP_DIM .)
    OP_NE           reduce using rule 171 (Dims -> OP_DIM .)
    &               reduce using rule 171 (Dims -> OP_DIM .)
    ^               reduce using rule 171 (Dims -> OP_DIM .)
    |               reduce using rule 171 (Dims -> OP_DIM .)
    OP_LAND         reduce using rule 171 (Dims -> OP_DIM .)
    OP_LOR          reduce using rule 171 (Dims -> OP_DIM .)
    QUES            reduce using rule 171 (Dims -> OP_DIM .)
    SEMICOLON       reduce using rule 171 (Dims -> OP_DIM .)
    RROUNPAREN      reduce using rule 171 (Dims -> OP_DIM .)
    COLON           reduce using rule 171 (Dims -> OP_DIM .)
    COMMA           reduce using rule 171 (Dims -> OP_DIM .)
    RSQPAREN        reduce using rule 171 (Dims -> OP_DIM .)
    IDENTIFIER      reduce using rule 171 (Dims -> OP_DIM .)


state 161

    (4) TypeSpecifier -> TypeName Dims .
    (172) Dims -> Dims . OP_DIM
    (2) OP_DIM -> . LSQPAREN RSQPAREN

    IDENTIFIER      reduce using rule 4 (TypeSpecifier -> TypeName Dims .)
    LSQPAREN        shift and go to state 159

    OP_DIM                         shift and go to state 246

state 162

    (76) ConstructorDeclarator -> IDENTIFIER LROUNPAREN . ParameterList RROUNPAREN
    (77) ConstructorDeclarator -> IDENTIFIER LROUNPAREN . RROUNPAREN
    (66) ParameterList -> . Parameter
    (67) ParameterList -> . ParameterList COMMA Parameter
    (68) Parameter -> . TypeSpecifier DeclaratorName
    (3) TypeSpecifier -> . TypeName
    (4) TypeSpecifier -> . TypeName Dims
    (5) TypeName -> . PrimitiveType
    (6) TypeName -> . QualifiedName
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER

    RROUNPAREN      shift and go to state 247
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43
    IDENTIFIER      shift and go to state 22

    QualifiedName                  shift and go to state 52
    PrimitiveType                  shift and go to state 45
    ParameterList                  shift and go to state 250
    TypeName                       shift and go to state 54
    Parameter                      shift and go to state 248
    TypeSpecifier                  shift and go to state 249

state 163

    (35) TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .

    SEMICOLON       reduce using rule 35 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    CLASS           reduce using rule 35 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    PUBLIC          reduce using rule 35 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    PRIVATE         reduce using rule 35 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    STATIC          reduce using rule 35 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    $end            reduce using rule 35 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    RCURPAREN       reduce using rule 35 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    IDENTIFIER      reduce using rule 35 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    LCURPAREN       reduce using rule 35 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    BOOLEAN         reduce using rule 35 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    CHAR            reduce using rule 35 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    BYTE            reduce using rule 35 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    SHORT           reduce using rule 35 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    INT             reduce using rule 35 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    LONG            reduce using rule 35 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    FLOAT           reduce using rule 35 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    DOUBLE          reduce using rule 35 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)
    VOID            reduce using rule 35 (TypeDeclaration -> ClassHeader LCURPAREN FieldDeclarations RCURPAREN .)


state 164

    (46) FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .

    RCURPAREN       reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    STATIC          reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    IDENTIFIER      reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    PUBLIC          reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    PRIVATE         reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    LCURPAREN       reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    CLASS           reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    BOOLEAN         reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    CHAR            reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    BYTE            reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    SHORT           reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    INT             reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    LONG            reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    FLOAT           reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    DOUBLE          reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)
    VOID            reduce using rule 46 (FieldDeclarations -> FieldDeclarations FieldDeclarationOptSemi .)


state 165

    (75) ConstructorDeclaration -> ConstructorDeclarator Block .

    SEMICOLON       reduce using rule 75 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    RCURPAREN       reduce using rule 75 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    STATIC          reduce using rule 75 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    IDENTIFIER      reduce using rule 75 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    PUBLIC          reduce using rule 75 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    PRIVATE         reduce using rule 75 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    LCURPAREN       reduce using rule 75 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    CLASS           reduce using rule 75 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    BOOLEAN         reduce using rule 75 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    CHAR            reduce using rule 75 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    BYTE            reduce using rule 75 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    SHORT           reduce using rule 75 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    INT             reduce using rule 75 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    LONG            reduce using rule 75 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    FLOAT           reduce using rule 75 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    DOUBLE          reduce using rule 75 (ConstructorDeclaration -> ConstructorDeclarator Block .)
    VOID            reduce using rule 75 (ConstructorDeclaration -> ConstructorDeclarator Block .)


state 166

    (48) FieldDeclarationOptSemi -> FieldDeclaration SemiColons .
    (19) SemiColons -> SemiColons . SEMICOLON

    RCURPAREN       reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    STATIC          reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    IDENTIFIER      reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    PUBLIC          reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    PRIVATE         reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    LCURPAREN       reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    CLASS           reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    BOOLEAN         reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    CHAR            reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    BYTE            reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    SHORT           reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    INT             reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    LONG            reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    FLOAT           reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    DOUBLE          reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    VOID            reduce using rule 48 (FieldDeclarationOptSemi -> FieldDeclaration SemiColons .)
    SEMICOLON       shift and go to state 36


state 167

    (32) ImportStatement -> IMPORT QualifiedName DOT MULT SemiColons .
    (19) SemiColons -> SemiColons . SEMICOLON

    IMPORT          reduce using rule 32 (ImportStatement -> IMPORT QualifiedName DOT MULT SemiColons .)
    CLASS           reduce using rule 32 (ImportStatement -> IMPORT QualifiedName DOT MULT SemiColons .)
    PUBLIC          reduce using rule 32 (ImportStatement -> IMPORT QualifiedName DOT MULT SemiColons .)
    PRIVATE         reduce using rule 32 (ImportStatement -> IMPORT QualifiedName DOT MULT SemiColons .)
    STATIC          reduce using rule 32 (ImportStatement -> IMPORT QualifiedName DOT MULT SemiColons .)
    SEMICOLON       shift and go to state 36


state 168

    (55) FieldVariableDeclaration -> Modifiers TypeSpecifier VariableDeclarators .
    (58) VariableDeclarators -> VariableDeclarators . COMMA VariableDeclarator

    SEMICOLON       reduce using rule 55 (FieldVariableDeclaration -> Modifiers TypeSpecifier VariableDeclarators .)
    COMMA           shift and go to state 171


state 169

    (62) MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator . MethodBody
    (71) MethodBody -> . LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN
    (72) MethodBody -> . LCURPAREN RCURPAREN
    (73) MethodBody -> . SEMICOLON

    LCURPAREN       shift and go to state 177
    SEMICOLON       shift and go to state 176

    MethodBody                     shift and go to state 251

state 170

    (74) ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .

    SEMICOLON       reduce using rule 74 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    RCURPAREN       reduce using rule 74 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    STATIC          reduce using rule 74 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    IDENTIFIER      reduce using rule 74 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    PUBLIC          reduce using rule 74 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    PRIVATE         reduce using rule 74 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    LCURPAREN       reduce using rule 74 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    CLASS           reduce using rule 74 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    BOOLEAN         reduce using rule 74 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    CHAR            reduce using rule 74 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    BYTE            reduce using rule 74 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    SHORT           reduce using rule 74 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    INT             reduce using rule 74 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    LONG            reduce using rule 74 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    FLOAT           reduce using rule 74 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    DOUBLE          reduce using rule 74 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)
    VOID            reduce using rule 74 (ConstructorDeclaration -> Modifiers ConstructorDeclarator Block .)


state 171

    (58) VariableDeclarators -> VariableDeclarators COMMA . VariableDeclarator
    (59) VariableDeclarator -> . DeclaratorName
    (60) VariableDeclarator -> . DeclaratorName EQUAL VariableInitializer
    (69) DeclaratorName -> . IDENTIFIER
    (70) DeclaratorName -> . DeclaratorName OP_DIM

    IDENTIFIER      shift and go to state 79

    DeclaratorName                 shift and go to state 218
    VariableDeclarator             shift and go to state 252

state 172

    (60) VariableDeclarator -> DeclaratorName EQUAL . VariableInitializer
    (61) VariableInitializer -> . Expression
    (230) Expression -> . AssignmentExpression
    (224) AssignmentExpression -> . ConditionalExpression
    (225) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (220) ConditionalExpression -> . ConditionalOrExpression
    (221) ConditionalExpression -> . ConditionalOrExpression Mark_quad Ques Mark_quad Expression Mark_quad Cln Mark_quad ConditionalExpression Mark_quad
    (177) UnaryExpression -> . OP_INC UnaryExpression
    (178) UnaryExpression -> . OP_DEC UnaryExpression
    (179) UnaryExpression -> . LogicalUnaryExpression
    (180) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) ConditionalOrExpression -> . ConditionalAndExpression
    (219) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (181) LogicalUnaryExpression -> . PostfixExpression
    (182) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (185) ArithmeticUnaryOperator -> . PLUS
    (186) ArithmeticUnaryOperator -> . MINUS
    (216) ConditionalAndExpression -> . InclusiveOrExpression
    (217) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (173) PostfixExpression -> . PrimaryExpression
    (174) PostfixExpression -> . RealPostfixExpression
    (183) LogicalUnaryOperator -> . ~
    (184) LogicalUnaryOperator -> . NOT
    (214) InclusiveOrExpression -> . ExclusiveOrExpression
    (215) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (126) PrimaryExpression -> . QualifiedName
    (127) PrimaryExpression -> . NotJustName
    (175) RealPostfixExpression -> . PostfixExpression OP_INC
    (176) RealPostfixExpression -> . PostfixExpression OP_DEC
    (212) ExclusiveOrExpression -> . AndExpression
    (213) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (128) NotJustName -> . SpecialName
    (129) NotJustName -> . NewAllocationExpression
    (130) NotJustName -> . ComplexPrimary
    (210) AndExpression -> . EqualityExpression
    (211) AndExpression -> . AndExpression & EqualityExpression
    (151) SpecialName -> . THIS
    (152) SpecialName -> . SUPER
    (153) SpecialName -> . NULL
    (156) NewAllocationExpression -> . PlainNewAllocationExpression
    (157) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (131) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (132) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (207) EqualityExpression -> . RelationalExpression
    (208) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (209) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (158) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (159) PlainNewAllocationExpression -> . ClassAllocationExpression
    (160) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (161) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (162) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (133) ComplexPrimaryNoParenthesis -> . INT_CONST
    (134) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (135) ComplexPrimaryNoParenthesis -> . STRING
    (136) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (137) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (138) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (139) ComplexPrimaryNoParenthesis -> . FieldAccess
    (140) ComplexPrimaryNoParenthesis -> . MethodCall
    (202) RelationalExpression -> . ShiftExpression
    (203) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (204) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (205) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (206) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (165) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (166) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (167) ArrayAllocationExpression -> . NEW TypeName Dims
    (163) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (164) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (141) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (142) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (143) FieldAccess -> . NotJustName DOT IDENTIFIER
    (144) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (145) FieldAccess -> . QualifiedName DOT THIS
    (146) FieldAccess -> . QualifiedName DOT CLASS
    (147) FieldAccess -> . PrimitiveType DOT CLASS
    (148) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (149) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (198) ShiftExpression -> . AdditiveExpression
    (199) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (200) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (201) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (150) MethodAccess -> . QualifiedName
    (195) AdditiveExpression -> . MultiplicativeExpression
    (196) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (197) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (191) MultiplicativeExpression -> . CastExpression
    (192) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (193) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (194) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (187) CastExpression -> . UnaryExpression

    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 124
    PLUS            shift and go to state 87
    MINUS           shift and go to state 86
    ~               shift and go to state 140
    NOT             shift and go to state 117
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 89
    SUPER           shift and go to state 156
    NULL            shift and go to state 143
    LROUNPAREN      shift and go to state 92
    INT_CONST       shift and go to state 106
    FLOAT_CONST     shift and go to state 83
    STRING          shift and go to state 149
    CHAR_CONST      shift and go to state 139
    BOOLEAN_CONST   shift and go to state 155
    NEW             shift and go to state 125
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 119
    PrimaryExpression              shift and go to state 127
    VariableInitializer            shift and go to state 253
    PrimitiveType                  shift and go to state 183
    RealPostfixExpression          shift and go to state 95
    ArithmeticUnaryOperator        shift and go to state 96
    AndExpression                  shift and go to state 85
    ArrayAccess                    shift and go to state 108
    CastExpression                 shift and go to state 142
    EqualityExpression             shift and go to state 97
    LogicalUnaryOperator           shift and go to state 145
    ComplexPrimaryNoParenthesis    shift and go to state 99
    MultiplicativeExpression       shift and go to state 100
    ClassAllocationExpression      shift and go to state 120
    MethodCall                     shift and go to state 101
    ConditionalOrExpression        shift and go to state 131
    ShiftExpression                shift and go to state 147
    AssignmentExpression           shift and go to state 103
    NewAllocationExpression        shift and go to state 133
    NotJustName                    shift and go to state 150
    QualifiedName                  shift and go to state 185
    LogicalUnaryExpression         shift and go to state 152
    Expression                     shift and go to state 254
    AdditiveExpression             shift and go to state 135
    ArrayAllocationExpression      shift and go to state 110
    ConditionalExpression          shift and go to state 136
    UnaryExpression                shift and go to state 137
    InclusiveOrExpression          shift and go to state 138
    MethodAccess                   shift and go to state 111
    ExclusiveOrExpression          shift and go to state 113
    ConditionalAndExpression       shift and go to state 90
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    FieldAccess                    shift and go to state 154
    SpecialName                    shift and go to state 118

state 173

    (70) DeclaratorName -> DeclaratorName OP_DIM .

    EQUAL           reduce using rule 70 (DeclaratorName -> DeclaratorName OP_DIM .)
    LSQPAREN        reduce using rule 70 (DeclaratorName -> DeclaratorName OP_DIM .)
    COMMA           reduce using rule 70 (DeclaratorName -> DeclaratorName OP_DIM .)
    SEMICOLON       reduce using rule 70 (DeclaratorName -> DeclaratorName OP_DIM .)
    LROUNPAREN      reduce using rule 70 (DeclaratorName -> DeclaratorName OP_DIM .)
    RROUNPAREN      reduce using rule 70 (DeclaratorName -> DeclaratorName OP_DIM .)


state 174

    (64) MethodDeclarator -> DeclaratorName LROUNPAREN . ParameterList RROUNPAREN
    (65) MethodDeclarator -> DeclaratorName LROUNPAREN . RROUNPAREN
    (66) ParameterList -> . Parameter
    (67) ParameterList -> . ParameterList COMMA Parameter
    (68) Parameter -> . TypeSpecifier DeclaratorName
    (3) TypeSpecifier -> . TypeName
    (4) TypeSpecifier -> . TypeName Dims
    (5) TypeName -> . PrimitiveType
    (6) TypeName -> . QualifiedName
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER

    RROUNPAREN      shift and go to state 255
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43
    IDENTIFIER      shift and go to state 22

    QualifiedName                  shift and go to state 52
    PrimitiveType                  shift and go to state 45
    ParameterList                  shift and go to state 256
    TypeName                       shift and go to state 54
    Parameter                      shift and go to state 248
    TypeSpecifier                  shift and go to state 249

state 175

    (63) MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .

    SEMICOLON       reduce using rule 63 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    RCURPAREN       reduce using rule 63 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    STATIC          reduce using rule 63 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    IDENTIFIER      reduce using rule 63 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    PUBLIC          reduce using rule 63 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    PRIVATE         reduce using rule 63 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    LCURPAREN       reduce using rule 63 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    CLASS           reduce using rule 63 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    BOOLEAN         reduce using rule 63 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    CHAR            reduce using rule 63 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    BYTE            reduce using rule 63 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    SHORT           reduce using rule 63 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    INT             reduce using rule 63 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    LONG            reduce using rule 63 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    FLOAT           reduce using rule 63 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    DOUBLE          reduce using rule 63 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)
    VOID            reduce using rule 63 (MethodDeclaration -> TypeSpecifier MethodDeclarator MethodBody .)


state 176

    (73) MethodBody -> SEMICOLON .

    SEMICOLON       reduce using rule 73 (MethodBody -> SEMICOLON .)
    RCURPAREN       reduce using rule 73 (MethodBody -> SEMICOLON .)
    STATIC          reduce using rule 73 (MethodBody -> SEMICOLON .)
    IDENTIFIER      reduce using rule 73 (MethodBody -> SEMICOLON .)
    PUBLIC          reduce using rule 73 (MethodBody -> SEMICOLON .)
    PRIVATE         reduce using rule 73 (MethodBody -> SEMICOLON .)
    LCURPAREN       reduce using rule 73 (MethodBody -> SEMICOLON .)
    CLASS           reduce using rule 73 (MethodBody -> SEMICOLON .)
    BOOLEAN         reduce using rule 73 (MethodBody -> SEMICOLON .)
    CHAR            reduce using rule 73 (MethodBody -> SEMICOLON .)
    BYTE            reduce using rule 73 (MethodBody -> SEMICOLON .)
    SHORT           reduce using rule 73 (MethodBody -> SEMICOLON .)
    INT             reduce using rule 73 (MethodBody -> SEMICOLON .)
    LONG            reduce using rule 73 (MethodBody -> SEMICOLON .)
    FLOAT           reduce using rule 73 (MethodBody -> SEMICOLON .)
    DOUBLE          reduce using rule 73 (MethodBody -> SEMICOLON .)
    VOID            reduce using rule 73 (MethodBody -> SEMICOLON .)


state 177

    (71) MethodBody -> LCURPAREN . LocalVariableDeclarationsAndStatements RCURPAREN
    (72) MethodBody -> LCURPAREN . RCURPAREN
    (84) LocalVariableDeclarationsAndStatements -> . LocalVariableDeclarationOrStatement
    (85) LocalVariableDeclarationsAndStatements -> . LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement
    (86) LocalVariableDeclarationOrStatement -> . LocalVariableDeclarationStatement
    (87) LocalVariableDeclarationOrStatement -> . Statement
    (88) LocalVariableDeclarationStatement -> . TypeSpecifier VariableDeclarators SEMICOLON
    (89) Statement -> . EmptyStatement Mark_quad
    (90) Statement -> . LabelStatement Mark_quad
    (91) Statement -> . ExpressionStatement SEMICOLON Mark_quad
    (92) Statement -> . JumpStatement Mark_quad
    (93) Statement -> . Block Mark_quad
    (94) Statement -> . IterationStatement Mark_quad
    (95) Statement -> . SelectionStatement Mark_quad
    (3) TypeSpecifier -> . TypeName
    (4) TypeSpecifier -> . TypeName Dims
    (97) EmptyStatement -> . SEMICOLON
    (98) LabelStatement -> . IDENTIFIER COLON
    (99) LabelStatement -> . CASE ConstantExpression COLON
    (100) LabelStatement -> . DEFAULT COLON
    (101) ExpressionStatement -> . Expression
    (123) JumpStatement -> . BREAK SEMICOLON
    (124) JumpStatement -> . RETURN Expression SEMICOLON
    (125) JumpStatement -> . RETURN SEMICOLON
    (80) Block -> . Bl LocalVariableDeclarationsAndStatements Br
    (81) Block -> . Bl Br
    (107) IterationStatement -> . WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement
    (109) IterationStatement -> . Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON
    (112) IterationStatement -> . Fr LROUNPAREN ForInit ForExpr Mark_for ForIncr RROUNPAREN Mark_quad Statement
    (102) SelectionStatement -> . If LROUNPAREN Expression RROUNPAREN Mark_if Statement
    (103) SelectionStatement -> . If LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement
    (5) TypeName -> . PrimitiveType
    (6) TypeName -> . QualifiedName
    (230) Expression -> . AssignmentExpression
    (82) Bl -> . LCURPAREN
    (110) Do -> . DO
    (113) Fr -> . FOR
    (104) If -> . IF
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (224) AssignmentExpression -> . ConditionalExpression
    (225) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (220) ConditionalExpression -> . ConditionalOrExpression
    (221) ConditionalExpression -> . ConditionalOrExpression Mark_quad Ques Mark_quad Expression Mark_quad Cln Mark_quad ConditionalExpression Mark_quad
    (177) UnaryExpression -> . OP_INC UnaryExpression
    (178) UnaryExpression -> . OP_DEC UnaryExpression
    (179) UnaryExpression -> . LogicalUnaryExpression
    (180) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) ConditionalOrExpression -> . ConditionalAndExpression
    (219) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (181) LogicalUnaryExpression -> . PostfixExpression
    (182) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (185) ArithmeticUnaryOperator -> . PLUS
    (186) ArithmeticUnaryOperator -> . MINUS
    (216) ConditionalAndExpression -> . InclusiveOrExpression
    (217) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (173) PostfixExpression -> . PrimaryExpression
    (174) PostfixExpression -> . RealPostfixExpression
    (183) LogicalUnaryOperator -> . ~
    (184) LogicalUnaryOperator -> . NOT
    (214) InclusiveOrExpression -> . ExclusiveOrExpression
    (215) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (126) PrimaryExpression -> . QualifiedName
    (127) PrimaryExpression -> . NotJustName
    (175) RealPostfixExpression -> . PostfixExpression OP_INC
    (176) RealPostfixExpression -> . PostfixExpression OP_DEC
    (212) ExclusiveOrExpression -> . AndExpression
    (213) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (128) NotJustName -> . SpecialName
    (129) NotJustName -> . NewAllocationExpression
    (130) NotJustName -> . ComplexPrimary
    (210) AndExpression -> . EqualityExpression
    (211) AndExpression -> . AndExpression & EqualityExpression
    (151) SpecialName -> . THIS
    (152) SpecialName -> . SUPER
    (153) SpecialName -> . NULL
    (156) NewAllocationExpression -> . PlainNewAllocationExpression
    (157) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (131) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (132) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (207) EqualityExpression -> . RelationalExpression
    (208) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (209) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (158) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (159) PlainNewAllocationExpression -> . ClassAllocationExpression
    (160) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (161) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (162) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (133) ComplexPrimaryNoParenthesis -> . INT_CONST
    (134) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (135) ComplexPrimaryNoParenthesis -> . STRING
    (136) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (137) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (138) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (139) ComplexPrimaryNoParenthesis -> . FieldAccess
    (140) ComplexPrimaryNoParenthesis -> . MethodCall
    (202) RelationalExpression -> . ShiftExpression
    (203) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (204) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (205) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (206) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (165) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (166) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (167) ArrayAllocationExpression -> . NEW TypeName Dims
    (163) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (164) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (141) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (142) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (143) FieldAccess -> . NotJustName DOT IDENTIFIER
    (144) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (145) FieldAccess -> . QualifiedName DOT THIS
    (146) FieldAccess -> . QualifiedName DOT CLASS
    (147) FieldAccess -> . PrimitiveType DOT CLASS
    (148) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (149) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (198) ShiftExpression -> . AdditiveExpression
    (199) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (200) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (201) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (150) MethodAccess -> . QualifiedName
    (195) AdditiveExpression -> . MultiplicativeExpression
    (196) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (197) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (191) MultiplicativeExpression -> . CastExpression
    (192) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (193) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (194) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (187) CastExpression -> . UnaryExpression

    RCURPAREN       shift and go to state 257
    SEMICOLON       shift and go to state 130
    IDENTIFIER      shift and go to state 132
    CASE            shift and go to state 128
    DEFAULT         shift and go to state 121
    BREAK           shift and go to state 98
    RETURN          shift and go to state 94
    WHILE           shift and go to state 123
    LCURPAREN       shift and go to state 58
    DO              shift and go to state 141
    FOR             shift and go to state 104
    IF              shift and go to state 153
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 124
    PLUS            shift and go to state 87
    MINUS           shift and go to state 86
    ~               shift and go to state 140
    NOT             shift and go to state 117
    THIS            shift and go to state 89
    SUPER           shift and go to state 156
    NULL            shift and go to state 143
    LROUNPAREN      shift and go to state 92
    INT_CONST       shift and go to state 106
    FLOAT_CONST     shift and go to state 83
    STRING          shift and go to state 149
    CHAR_CONST      shift and go to state 139
    BOOLEAN_CONST   shift and go to state 155
    NEW             shift and go to state 125

    PostfixExpression              shift and go to state 112
    LabelStatement                 shift and go to state 93
    ArithmeticUnaryOperator        shift and go to state 96
    AssignmentExpression           shift and go to state 103
    ExpressionStatement            shift and go to state 81
    JumpStatement                  shift and go to state 122
    RealPostfixExpression          shift and go to state 95
    Statement                      shift and go to state 84
    AndExpression                  shift and go to state 85
    ArrayAccess                    shift and go to state 108
    MultiplicativeExpression       shift and go to state 100
    TypeSpecifier                  shift and go to state 126
    CastExpression                 shift and go to state 142
    EqualityExpression             shift and go to state 97
    Do                             shift and go to state 144
    Fr                             shift and go to state 129
    MethodAccess                   shift and go to state 111
    ComplexPrimaryNoParenthesis    shift and go to state 99
    Bl                             shift and go to state 53
    ClassAllocationExpression      shift and go to state 120
    LogicalUnaryOperator           shift and go to state 145
    TypeName                       shift and go to state 54
    LocalVariableDeclarationStatement shift and go to state 146
    ShiftExpression                shift and go to state 147
    SelectionStatement             shift and go to state 102
    LocalVariableDeclarationsAndStatements shift and go to state 258
    NotJustName                    shift and go to state 150
    ConditionalOrExpression        shift and go to state 131
    QualifiedName                  shift and go to state 151
    ComplexPrimary                 shift and go to state 119
    MethodCall                     shift and go to state 101
    PrimitiveType                  shift and go to state 82
    LogicalUnaryExpression         shift and go to state 152
    UnaryExpression                shift and go to state 137
    Expression                     shift and go to state 134
    Block                          shift and go to state 109
    AdditiveExpression             shift and go to state 135
    ArrayAllocationExpression      shift and go to state 110
    ConditionalExpression          shift and go to state 136
    InclusiveOrExpression          shift and go to state 138
    PrimaryExpression              shift and go to state 127
    ExclusiveOrExpression          shift and go to state 113
    ConditionalAndExpression       shift and go to state 90
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    LocalVariableDeclarationOrStatement shift and go to state 116
    NewAllocationExpression        shift and go to state 133
    FieldAccess                    shift and go to state 154
    EmptyStatement                 shift and go to state 91
    SpecialName                    shift and go to state 118
    IterationStatement             shift and go to state 157
    If                             shift and go to state 158

state 178

    (91) Statement -> ExpressionStatement SEMICOLON . Mark_quad
    (96) Mark_quad -> .

    RCURPAREN       reduce using rule 96 (Mark_quad -> .)
    SEMICOLON       reduce using rule 96 (Mark_quad -> .)
    IDENTIFIER      reduce using rule 96 (Mark_quad -> .)
    CASE            reduce using rule 96 (Mark_quad -> .)
    DEFAULT         reduce using rule 96 (Mark_quad -> .)
    BREAK           reduce using rule 96 (Mark_quad -> .)
    RETURN          reduce using rule 96 (Mark_quad -> .)
    WHILE           reduce using rule 96 (Mark_quad -> .)
    LCURPAREN       reduce using rule 96 (Mark_quad -> .)
    DO              reduce using rule 96 (Mark_quad -> .)
    FOR             reduce using rule 96 (Mark_quad -> .)
    IF              reduce using rule 96 (Mark_quad -> .)
    BOOLEAN         reduce using rule 96 (Mark_quad -> .)
    CHAR            reduce using rule 96 (Mark_quad -> .)
    BYTE            reduce using rule 96 (Mark_quad -> .)
    SHORT           reduce using rule 96 (Mark_quad -> .)
    INT             reduce using rule 96 (Mark_quad -> .)
    LONG            reduce using rule 96 (Mark_quad -> .)
    FLOAT           reduce using rule 96 (Mark_quad -> .)
    DOUBLE          reduce using rule 96 (Mark_quad -> .)
    VOID            reduce using rule 96 (Mark_quad -> .)
    OP_INC          reduce using rule 96 (Mark_quad -> .)
    OP_DEC          reduce using rule 96 (Mark_quad -> .)
    PLUS            reduce using rule 96 (Mark_quad -> .)
    MINUS           reduce using rule 96 (Mark_quad -> .)
    ~               reduce using rule 96 (Mark_quad -> .)
    NOT             reduce using rule 96 (Mark_quad -> .)
    THIS            reduce using rule 96 (Mark_quad -> .)
    SUPER           reduce using rule 96 (Mark_quad -> .)
    NULL            reduce using rule 96 (Mark_quad -> .)
    LROUNPAREN      reduce using rule 96 (Mark_quad -> .)
    INT_CONST       reduce using rule 96 (Mark_quad -> .)
    FLOAT_CONST     reduce using rule 96 (Mark_quad -> .)
    STRING          reduce using rule 96 (Mark_quad -> .)
    CHAR_CONST      reduce using rule 96 (Mark_quad -> .)
    BOOLEAN_CONST   reduce using rule 96 (Mark_quad -> .)
    NEW             reduce using rule 96 (Mark_quad -> .)
    ELSE            reduce using rule 96 (Mark_quad -> .)

    Mark_quad                      shift and go to state 259

state 179

    (147) FieldAccess -> PrimitiveType DOT . CLASS

    CLASS           shift and go to state 260


state 180

    (211) AndExpression -> AndExpression & . EqualityExpression
    (207) EqualityExpression -> . RelationalExpression
    (208) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (209) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (202) RelationalExpression -> . ShiftExpression
    (203) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (204) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (205) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (206) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (198) ShiftExpression -> . AdditiveExpression
    (199) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (200) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (201) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (195) AdditiveExpression -> . MultiplicativeExpression
    (196) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (197) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (191) MultiplicativeExpression -> . CastExpression
    (192) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (193) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (194) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (187) CastExpression -> . UnaryExpression
    (177) UnaryExpression -> . OP_INC UnaryExpression
    (178) UnaryExpression -> . OP_DEC UnaryExpression
    (179) UnaryExpression -> . LogicalUnaryExpression
    (180) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (181) LogicalUnaryExpression -> . PostfixExpression
    (182) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (185) ArithmeticUnaryOperator -> . PLUS
    (186) ArithmeticUnaryOperator -> . MINUS
    (173) PostfixExpression -> . PrimaryExpression
    (174) PostfixExpression -> . RealPostfixExpression
    (183) LogicalUnaryOperator -> . ~
    (184) LogicalUnaryOperator -> . NOT
    (126) PrimaryExpression -> . QualifiedName
    (127) PrimaryExpression -> . NotJustName
    (175) RealPostfixExpression -> . PostfixExpression OP_INC
    (176) RealPostfixExpression -> . PostfixExpression OP_DEC
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (128) NotJustName -> . SpecialName
    (129) NotJustName -> . NewAllocationExpression
    (130) NotJustName -> . ComplexPrimary
    (151) SpecialName -> . THIS
    (152) SpecialName -> . SUPER
    (153) SpecialName -> . NULL
    (156) NewAllocationExpression -> . PlainNewAllocationExpression
    (157) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (131) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (132) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (158) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (159) PlainNewAllocationExpression -> . ClassAllocationExpression
    (160) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (161) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (162) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (133) ComplexPrimaryNoParenthesis -> . INT_CONST
    (134) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (135) ComplexPrimaryNoParenthesis -> . STRING
    (136) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (137) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (138) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (139) ComplexPrimaryNoParenthesis -> . FieldAccess
    (140) ComplexPrimaryNoParenthesis -> . MethodCall
    (165) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (166) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (167) ArrayAllocationExpression -> . NEW TypeName Dims
    (163) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (164) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (141) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (142) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (143) FieldAccess -> . NotJustName DOT IDENTIFIER
    (144) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (145) FieldAccess -> . QualifiedName DOT THIS
    (146) FieldAccess -> . QualifiedName DOT CLASS
    (147) FieldAccess -> . PrimitiveType DOT CLASS
    (148) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (149) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (150) MethodAccess -> . QualifiedName

    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 124
    PLUS            shift and go to state 87
    MINUS           shift and go to state 86
    ~               shift and go to state 140
    NOT             shift and go to state 117
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 89
    SUPER           shift and go to state 156
    NULL            shift and go to state 143
    LROUNPAREN      shift and go to state 92
    INT_CONST       shift and go to state 106
    FLOAT_CONST     shift and go to state 83
    STRING          shift and go to state 149
    CHAR_CONST      shift and go to state 139
    BOOLEAN_CONST   shift and go to state 155
    NEW             shift and go to state 125
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 119
    CastExpression                 shift and go to state 142
    PrimitiveType                  shift and go to state 183
    RealPostfixExpression          shift and go to state 95
    ArithmeticUnaryOperator        shift and go to state 96
    ArrayAccess                    shift and go to state 108
    PrimaryExpression              shift and go to state 127
    EqualityExpression             shift and go to state 261
    LogicalUnaryOperator           shift and go to state 145
    ComplexPrimaryNoParenthesis    shift and go to state 99
    MultiplicativeExpression       shift and go to state 100
    ClassAllocationExpression      shift and go to state 120
    MethodCall                     shift and go to state 101
    ShiftExpression                shift and go to state 147
    NewAllocationExpression        shift and go to state 133
    NotJustName                    shift and go to state 150
    QualifiedName                  shift and go to state 185
    LogicalUnaryExpression         shift and go to state 152
    AdditiveExpression             shift and go to state 135
    ArrayAllocationExpression      shift and go to state 110
    UnaryExpression                shift and go to state 191
    FieldAccess                    shift and go to state 154
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    MethodAccess                   shift and go to state 111
    SpecialName                    shift and go to state 118

state 181

    (217) ConditionalAndExpression -> ConditionalAndExpression OP_LAND . InclusiveOrExpression
    (214) InclusiveOrExpression -> . ExclusiveOrExpression
    (215) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (212) ExclusiveOrExpression -> . AndExpression
    (213) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (210) AndExpression -> . EqualityExpression
    (211) AndExpression -> . AndExpression & EqualityExpression
    (207) EqualityExpression -> . RelationalExpression
    (208) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (209) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (202) RelationalExpression -> . ShiftExpression
    (203) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (204) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (205) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (206) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (198) ShiftExpression -> . AdditiveExpression
    (199) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (200) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (201) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (195) AdditiveExpression -> . MultiplicativeExpression
    (196) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (197) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (191) MultiplicativeExpression -> . CastExpression
    (192) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (193) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (194) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (187) CastExpression -> . UnaryExpression
    (177) UnaryExpression -> . OP_INC UnaryExpression
    (178) UnaryExpression -> . OP_DEC UnaryExpression
    (179) UnaryExpression -> . LogicalUnaryExpression
    (180) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (181) LogicalUnaryExpression -> . PostfixExpression
    (182) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (185) ArithmeticUnaryOperator -> . PLUS
    (186) ArithmeticUnaryOperator -> . MINUS
    (173) PostfixExpression -> . PrimaryExpression
    (174) PostfixExpression -> . RealPostfixExpression
    (183) LogicalUnaryOperator -> . ~
    (184) LogicalUnaryOperator -> . NOT
    (126) PrimaryExpression -> . QualifiedName
    (127) PrimaryExpression -> . NotJustName
    (175) RealPostfixExpression -> . PostfixExpression OP_INC
    (176) RealPostfixExpression -> . PostfixExpression OP_DEC
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (128) NotJustName -> . SpecialName
    (129) NotJustName -> . NewAllocationExpression
    (130) NotJustName -> . ComplexPrimary
    (151) SpecialName -> . THIS
    (152) SpecialName -> . SUPER
    (153) SpecialName -> . NULL
    (156) NewAllocationExpression -> . PlainNewAllocationExpression
    (157) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (131) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (132) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (158) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (159) PlainNewAllocationExpression -> . ClassAllocationExpression
    (160) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (161) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (162) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (133) ComplexPrimaryNoParenthesis -> . INT_CONST
    (134) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (135) ComplexPrimaryNoParenthesis -> . STRING
    (136) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (137) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (138) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (139) ComplexPrimaryNoParenthesis -> . FieldAccess
    (140) ComplexPrimaryNoParenthesis -> . MethodCall
    (165) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (166) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (167) ArrayAllocationExpression -> . NEW TypeName Dims
    (163) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (164) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (141) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (142) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (143) FieldAccess -> . NotJustName DOT IDENTIFIER
    (144) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (145) FieldAccess -> . QualifiedName DOT THIS
    (146) FieldAccess -> . QualifiedName DOT CLASS
    (147) FieldAccess -> . PrimitiveType DOT CLASS
    (148) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (149) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (150) MethodAccess -> . QualifiedName

    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 124
    PLUS            shift and go to state 87
    MINUS           shift and go to state 86
    ~               shift and go to state 140
    NOT             shift and go to state 117
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 89
    SUPER           shift and go to state 156
    NULL            shift and go to state 143
    LROUNPAREN      shift and go to state 92
    INT_CONST       shift and go to state 106
    FLOAT_CONST     shift and go to state 83
    STRING          shift and go to state 149
    CHAR_CONST      shift and go to state 139
    BOOLEAN_CONST   shift and go to state 155
    NEW             shift and go to state 125
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 119
    CastExpression                 shift and go to state 142
    PrimitiveType                  shift and go to state 183
    RealPostfixExpression          shift and go to state 95
    ArithmeticUnaryOperator        shift and go to state 96
    AndExpression                  shift and go to state 85
    ArrayAccess                    shift and go to state 108
    PrimaryExpression              shift and go to state 127
    EqualityExpression             shift and go to state 97
    LogicalUnaryOperator           shift and go to state 145
    ComplexPrimaryNoParenthesis    shift and go to state 99
    MultiplicativeExpression       shift and go to state 100
    ClassAllocationExpression      shift and go to state 120
    MethodCall                     shift and go to state 101
    ShiftExpression                shift and go to state 147
    NewAllocationExpression        shift and go to state 133
    NotJustName                    shift and go to state 150
    QualifiedName                  shift and go to state 185
    LogicalUnaryExpression         shift and go to state 152
    AdditiveExpression             shift and go to state 135
    ArrayAllocationExpression      shift and go to state 110
    UnaryExpression                shift and go to state 191
    InclusiveOrExpression          shift and go to state 262
    FieldAccess                    shift and go to state 154
    ExclusiveOrExpression          shift and go to state 113
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    MethodAccess                   shift and go to state 111
    SpecialName                    shift and go to state 118

state 182

    (89) Statement -> EmptyStatement Mark_quad .

    WHILE           reduce using rule 89 (Statement -> EmptyStatement Mark_quad .)
    RCURPAREN       reduce using rule 89 (Statement -> EmptyStatement Mark_quad .)
    SEMICOLON       reduce using rule 89 (Statement -> EmptyStatement Mark_quad .)
    IDENTIFIER      reduce using rule 89 (Statement -> EmptyStatement Mark_quad .)
    CASE            reduce using rule 89 (Statement -> EmptyStatement Mark_quad .)
    DEFAULT         reduce using rule 89 (Statement -> EmptyStatement Mark_quad .)
    BREAK           reduce using rule 89 (Statement -> EmptyStatement Mark_quad .)
    RETURN          reduce using rule 89 (Statement -> EmptyStatement Mark_quad .)
    LCURPAREN       reduce using rule 89 (Statement -> EmptyStatement Mark_quad .)
    DO              reduce using rule 89 (Statement -> EmptyStatement Mark_quad .)
    FOR             reduce using rule 89 (Statement -> EmptyStatement Mark_quad .)
    IF              reduce using rule 89 (Statement -> EmptyStatement Mark_quad .)
    BOOLEAN         reduce using rule 89 (Statement -> EmptyStatement Mark_quad .)
    CHAR            reduce using rule 89 (Statement -> EmptyStatement Mark_quad .)
    BYTE            reduce using rule 89 (Statement -> EmptyStatement Mark_quad .)
    SHORT           reduce using rule 89 (Statement -> EmptyStatement Mark_quad .)
    INT             reduce using rule 89 (Statement -> EmptyStatement Mark_quad .)
    LONG            reduce using rule 89 (Statement -> EmptyStatement Mark_quad .)
    FLOAT           reduce using rule 89 (Statement -> EmptyStatement Mark_quad .)
    DOUBLE          reduce using rule 89 (Statement -> EmptyStatement Mark_quad .)
    VOID            reduce using rule 89 (Statement -> EmptyStatement Mark_quad .)
    OP_INC          reduce using rule 89 (Statement -> EmptyStatement Mark_quad .)
    OP_DEC          reduce using rule 89 (Statement -> EmptyStatement Mark_quad .)
    PLUS            reduce using rule 89 (Statement -> EmptyStatement Mark_quad .)
    MINUS           reduce using rule 89 (Statement -> EmptyStatement Mark_quad .)
    ~               reduce using rule 89 (Statement -> EmptyStatement Mark_quad .)
    NOT             reduce using rule 89 (Statement -> EmptyStatement Mark_quad .)
    THIS            reduce using rule 89 (Statement -> EmptyStatement Mark_quad .)
    SUPER           reduce using rule 89 (Statement -> EmptyStatement Mark_quad .)
    NULL            reduce using rule 89 (Statement -> EmptyStatement Mark_quad .)
    LROUNPAREN      reduce using rule 89 (Statement -> EmptyStatement Mark_quad .)
    INT_CONST       reduce using rule 89 (Statement -> EmptyStatement Mark_quad .)
    FLOAT_CONST     reduce using rule 89 (Statement -> EmptyStatement Mark_quad .)
    STRING          reduce using rule 89 (Statement -> EmptyStatement Mark_quad .)
    CHAR_CONST      reduce using rule 89 (Statement -> EmptyStatement Mark_quad .)
    BOOLEAN_CONST   reduce using rule 89 (Statement -> EmptyStatement Mark_quad .)
    NEW             reduce using rule 89 (Statement -> EmptyStatement Mark_quad .)
    ELSE            reduce using rule 89 (Statement -> EmptyStatement Mark_quad .)


state 183

    (147) FieldAccess -> PrimitiveType . DOT CLASS

    DOT             shift and go to state 179


state 184

    (131) ComplexPrimary -> LROUNPAREN Expression . RROUNPAREN

    RROUNPAREN      shift and go to state 263


state 185

    (126) PrimaryExpression -> QualifiedName .
    (34) QualifiedName -> QualifiedName . DOT IDENTIFIER
    (157) NewAllocationExpression -> QualifiedName . DOT PlainNewAllocationExpression
    (141) ArrayAccess -> QualifiedName . LSQPAREN Expression RSQPAREN
    (145) FieldAccess -> QualifiedName . DOT THIS
    (146) FieldAccess -> QualifiedName . DOT CLASS
    (150) MethodAccess -> QualifiedName .

    OP_INC          reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    OP_DEC          reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    MULT            reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    DIV             reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    MOD             reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    PLUS            reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    MINUS           reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    OP_SHL          reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    OP_SHR          reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    OP_SHRR         reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    LESS            reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    MORE            reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    OP_LE           reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    OP_GE           reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    OP_EQ           reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    OP_NE           reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    &               reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    ^               reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    |               reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    OP_LAND         reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    OP_LOR          reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    QUES            reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    SEMICOLON       reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    RROUNPAREN      reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    COLON           reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    COMMA           reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    RSQPAREN        reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    EQUAL           reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    ASS_MUL         reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    ASS_ADD         reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    ASS_SUB         reduce using rule 126 (PrimaryExpression -> QualifiedName .)
    DOT             shift and go to state 242
    LSQPAREN        shift and go to state 241
    LROUNPAREN      reduce using rule 150 (MethodAccess -> QualifiedName .)


state 186

    (90) Statement -> LabelStatement Mark_quad .

    WHILE           reduce using rule 90 (Statement -> LabelStatement Mark_quad .)
    RCURPAREN       reduce using rule 90 (Statement -> LabelStatement Mark_quad .)
    SEMICOLON       reduce using rule 90 (Statement -> LabelStatement Mark_quad .)
    IDENTIFIER      reduce using rule 90 (Statement -> LabelStatement Mark_quad .)
    CASE            reduce using rule 90 (Statement -> LabelStatement Mark_quad .)
    DEFAULT         reduce using rule 90 (Statement -> LabelStatement Mark_quad .)
    BREAK           reduce using rule 90 (Statement -> LabelStatement Mark_quad .)
    RETURN          reduce using rule 90 (Statement -> LabelStatement Mark_quad .)
    LCURPAREN       reduce using rule 90 (Statement -> LabelStatement Mark_quad .)
    DO              reduce using rule 90 (Statement -> LabelStatement Mark_quad .)
    FOR             reduce using rule 90 (Statement -> LabelStatement Mark_quad .)
    IF              reduce using rule 90 (Statement -> LabelStatement Mark_quad .)
    BOOLEAN         reduce using rule 90 (Statement -> LabelStatement Mark_quad .)
    CHAR            reduce using rule 90 (Statement -> LabelStatement Mark_quad .)
    BYTE            reduce using rule 90 (Statement -> LabelStatement Mark_quad .)
    SHORT           reduce using rule 90 (Statement -> LabelStatement Mark_quad .)
    INT             reduce using rule 90 (Statement -> LabelStatement Mark_quad .)
    LONG            reduce using rule 90 (Statement -> LabelStatement Mark_quad .)
    FLOAT           reduce using rule 90 (Statement -> LabelStatement Mark_quad .)
    DOUBLE          reduce using rule 90 (Statement -> LabelStatement Mark_quad .)
    VOID            reduce using rule 90 (Statement -> LabelStatement Mark_quad .)
    OP_INC          reduce using rule 90 (Statement -> LabelStatement Mark_quad .)
    OP_DEC          reduce using rule 90 (Statement -> LabelStatement Mark_quad .)
    PLUS            reduce using rule 90 (Statement -> LabelStatement Mark_quad .)
    MINUS           reduce using rule 90 (Statement -> LabelStatement Mark_quad .)
    ~               reduce using rule 90 (Statement -> LabelStatement Mark_quad .)
    NOT             reduce using rule 90 (Statement -> LabelStatement Mark_quad .)
    THIS            reduce using rule 90 (Statement -> LabelStatement Mark_quad .)
    SUPER           reduce using rule 90 (Statement -> LabelStatement Mark_quad .)
    NULL            reduce using rule 90 (Statement -> LabelStatement Mark_quad .)
    LROUNPAREN      reduce using rule 90 (Statement -> LabelStatement Mark_quad .)
    INT_CONST       reduce using rule 90 (Statement -> LabelStatement Mark_quad .)
    FLOAT_CONST     reduce using rule 90 (Statement -> LabelStatement Mark_quad .)
    STRING          reduce using rule 90 (Statement -> LabelStatement Mark_quad .)
    CHAR_CONST      reduce using rule 90 (Statement -> LabelStatement Mark_quad .)
    BOOLEAN_CONST   reduce using rule 90 (Statement -> LabelStatement Mark_quad .)
    NEW             reduce using rule 90 (Statement -> LabelStatement Mark_quad .)
    ELSE            reduce using rule 90 (Statement -> LabelStatement Mark_quad .)


state 187

    (125) JumpStatement -> RETURN SEMICOLON .

    ELSE            reduce using rule 125 (JumpStatement -> RETURN SEMICOLON .)
    RCURPAREN       reduce using rule 125 (JumpStatement -> RETURN SEMICOLON .)
    SEMICOLON       reduce using rule 125 (JumpStatement -> RETURN SEMICOLON .)
    IDENTIFIER      reduce using rule 125 (JumpStatement -> RETURN SEMICOLON .)
    CASE            reduce using rule 125 (JumpStatement -> RETURN SEMICOLON .)
    DEFAULT         reduce using rule 125 (JumpStatement -> RETURN SEMICOLON .)
    BREAK           reduce using rule 125 (JumpStatement -> RETURN SEMICOLON .)
    RETURN          reduce using rule 125 (JumpStatement -> RETURN SEMICOLON .)
    WHILE           reduce using rule 125 (JumpStatement -> RETURN SEMICOLON .)
    LCURPAREN       reduce using rule 125 (JumpStatement -> RETURN SEMICOLON .)
    DO              reduce using rule 125 (JumpStatement -> RETURN SEMICOLON .)
    FOR             reduce using rule 125 (JumpStatement -> RETURN SEMICOLON .)
    IF              reduce using rule 125 (JumpStatement -> RETURN SEMICOLON .)
    BOOLEAN         reduce using rule 125 (JumpStatement -> RETURN SEMICOLON .)
    CHAR            reduce using rule 125 (JumpStatement -> RETURN SEMICOLON .)
    BYTE            reduce using rule 125 (JumpStatement -> RETURN SEMICOLON .)
    SHORT           reduce using rule 125 (JumpStatement -> RETURN SEMICOLON .)
    INT             reduce using rule 125 (JumpStatement -> RETURN SEMICOLON .)
    LONG            reduce using rule 125 (JumpStatement -> RETURN SEMICOLON .)
    FLOAT           reduce using rule 125 (JumpStatement -> RETURN SEMICOLON .)
    DOUBLE          reduce using rule 125 (JumpStatement -> RETURN SEMICOLON .)
    VOID            reduce using rule 125 (JumpStatement -> RETURN SEMICOLON .)
    OP_INC          reduce using rule 125 (JumpStatement -> RETURN SEMICOLON .)
    OP_DEC          reduce using rule 125 (JumpStatement -> RETURN SEMICOLON .)
    PLUS            reduce using rule 125 (JumpStatement -> RETURN SEMICOLON .)
    MINUS           reduce using rule 125 (JumpStatement -> RETURN SEMICOLON .)
    ~               reduce using rule 125 (JumpStatement -> RETURN SEMICOLON .)
    NOT             reduce using rule 125 (JumpStatement -> RETURN SEMICOLON .)
    THIS            reduce using rule 125 (JumpStatement -> RETURN SEMICOLON .)
    SUPER           reduce using rule 125 (JumpStatement -> RETURN SEMICOLON .)
    NULL            reduce using rule 125 (JumpStatement -> RETURN SEMICOLON .)
    LROUNPAREN      reduce using rule 125 (JumpStatement -> RETURN SEMICOLON .)
    INT_CONST       reduce using rule 125 (JumpStatement -> RETURN SEMICOLON .)
    FLOAT_CONST     reduce using rule 125 (JumpStatement -> RETURN SEMICOLON .)
    STRING          reduce using rule 125 (JumpStatement -> RETURN SEMICOLON .)
    CHAR_CONST      reduce using rule 125 (JumpStatement -> RETURN SEMICOLON .)
    BOOLEAN_CONST   reduce using rule 125 (JumpStatement -> RETURN SEMICOLON .)
    NEW             reduce using rule 125 (JumpStatement -> RETURN SEMICOLON .)


state 188

    (124) JumpStatement -> RETURN Expression . SEMICOLON

    SEMICOLON       shift and go to state 264


state 189

    (144) FieldAccess -> RealPostfixExpression DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 265


state 190

    (180) UnaryExpression -> ArithmeticUnaryOperator CastExpression .

    EQUAL           reduce using rule 180 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    ASS_MUL         reduce using rule 180 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    ASS_ADD         reduce using rule 180 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    ASS_SUB         reduce using rule 180 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    MULT            reduce using rule 180 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    DIV             reduce using rule 180 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    MOD             reduce using rule 180 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    PLUS            reduce using rule 180 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    MINUS           reduce using rule 180 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OP_SHL          reduce using rule 180 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OP_SHR          reduce using rule 180 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OP_SHRR         reduce using rule 180 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    LESS            reduce using rule 180 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    MORE            reduce using rule 180 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OP_LE           reduce using rule 180 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OP_GE           reduce using rule 180 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OP_EQ           reduce using rule 180 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OP_NE           reduce using rule 180 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    &               reduce using rule 180 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    ^               reduce using rule 180 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    |               reduce using rule 180 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OP_LAND         reduce using rule 180 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    OP_LOR          reduce using rule 180 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    QUES            reduce using rule 180 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    RSQPAREN        reduce using rule 180 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    RROUNPAREN      reduce using rule 180 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    COMMA           reduce using rule 180 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    SEMICOLON       reduce using rule 180 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)
    COLON           reduce using rule 180 (UnaryExpression -> ArithmeticUnaryOperator CastExpression .)


state 191

    (187) CastExpression -> UnaryExpression .

    MULT            reduce using rule 187 (CastExpression -> UnaryExpression .)
    DIV             reduce using rule 187 (CastExpression -> UnaryExpression .)
    MOD             reduce using rule 187 (CastExpression -> UnaryExpression .)
    PLUS            reduce using rule 187 (CastExpression -> UnaryExpression .)
    MINUS           reduce using rule 187 (CastExpression -> UnaryExpression .)
    OP_SHL          reduce using rule 187 (CastExpression -> UnaryExpression .)
    OP_SHR          reduce using rule 187 (CastExpression -> UnaryExpression .)
    OP_SHRR         reduce using rule 187 (CastExpression -> UnaryExpression .)
    LESS            reduce using rule 187 (CastExpression -> UnaryExpression .)
    MORE            reduce using rule 187 (CastExpression -> UnaryExpression .)
    OP_LE           reduce using rule 187 (CastExpression -> UnaryExpression .)
    OP_GE           reduce using rule 187 (CastExpression -> UnaryExpression .)
    OP_EQ           reduce using rule 187 (CastExpression -> UnaryExpression .)
    OP_NE           reduce using rule 187 (CastExpression -> UnaryExpression .)
    &               reduce using rule 187 (CastExpression -> UnaryExpression .)
    ^               reduce using rule 187 (CastExpression -> UnaryExpression .)
    |               reduce using rule 187 (CastExpression -> UnaryExpression .)
    OP_LAND         reduce using rule 187 (CastExpression -> UnaryExpression .)
    OP_LOR          reduce using rule 187 (CastExpression -> UnaryExpression .)
    QUES            reduce using rule 187 (CastExpression -> UnaryExpression .)
    SEMICOLON       reduce using rule 187 (CastExpression -> UnaryExpression .)
    RROUNPAREN      reduce using rule 187 (CastExpression -> UnaryExpression .)
    COLON           reduce using rule 187 (CastExpression -> UnaryExpression .)
    COMMA           reduce using rule 187 (CastExpression -> UnaryExpression .)
    RSQPAREN        reduce using rule 187 (CastExpression -> UnaryExpression .)
    EQUAL           reduce using rule 187 (CastExpression -> UnaryExpression .)
    ASS_MUL         reduce using rule 187 (CastExpression -> UnaryExpression .)
    ASS_ADD         reduce using rule 187 (CastExpression -> UnaryExpression .)
    ASS_SUB         reduce using rule 187 (CastExpression -> UnaryExpression .)


state 192

    (209) EqualityExpression -> EqualityExpression OP_NE . RelationalExpression
    (202) RelationalExpression -> . ShiftExpression
    (203) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (204) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (205) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (206) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (198) ShiftExpression -> . AdditiveExpression
    (199) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (200) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (201) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (195) AdditiveExpression -> . MultiplicativeExpression
    (196) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (197) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (191) MultiplicativeExpression -> . CastExpression
    (192) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (193) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (194) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (187) CastExpression -> . UnaryExpression
    (177) UnaryExpression -> . OP_INC UnaryExpression
    (178) UnaryExpression -> . OP_DEC UnaryExpression
    (179) UnaryExpression -> . LogicalUnaryExpression
    (180) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (181) LogicalUnaryExpression -> . PostfixExpression
    (182) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (185) ArithmeticUnaryOperator -> . PLUS
    (186) ArithmeticUnaryOperator -> . MINUS
    (173) PostfixExpression -> . PrimaryExpression
    (174) PostfixExpression -> . RealPostfixExpression
    (183) LogicalUnaryOperator -> . ~
    (184) LogicalUnaryOperator -> . NOT
    (126) PrimaryExpression -> . QualifiedName
    (127) PrimaryExpression -> . NotJustName
    (175) RealPostfixExpression -> . PostfixExpression OP_INC
    (176) RealPostfixExpression -> . PostfixExpression OP_DEC
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (128) NotJustName -> . SpecialName
    (129) NotJustName -> . NewAllocationExpression
    (130) NotJustName -> . ComplexPrimary
    (151) SpecialName -> . THIS
    (152) SpecialName -> . SUPER
    (153) SpecialName -> . NULL
    (156) NewAllocationExpression -> . PlainNewAllocationExpression
    (157) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (131) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (132) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (158) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (159) PlainNewAllocationExpression -> . ClassAllocationExpression
    (160) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (161) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (162) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (133) ComplexPrimaryNoParenthesis -> . INT_CONST
    (134) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (135) ComplexPrimaryNoParenthesis -> . STRING
    (136) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (137) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (138) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (139) ComplexPrimaryNoParenthesis -> . FieldAccess
    (140) ComplexPrimaryNoParenthesis -> . MethodCall
    (165) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (166) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (167) ArrayAllocationExpression -> . NEW TypeName Dims
    (163) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (164) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (141) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (142) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (143) FieldAccess -> . NotJustName DOT IDENTIFIER
    (144) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (145) FieldAccess -> . QualifiedName DOT THIS
    (146) FieldAccess -> . QualifiedName DOT CLASS
    (147) FieldAccess -> . PrimitiveType DOT CLASS
    (148) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (149) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (150) MethodAccess -> . QualifiedName

    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 124
    PLUS            shift and go to state 87
    MINUS           shift and go to state 86
    ~               shift and go to state 140
    NOT             shift and go to state 117
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 89
    SUPER           shift and go to state 156
    NULL            shift and go to state 143
    LROUNPAREN      shift and go to state 92
    INT_CONST       shift and go to state 106
    FLOAT_CONST     shift and go to state 83
    STRING          shift and go to state 149
    CHAR_CONST      shift and go to state 139
    BOOLEAN_CONST   shift and go to state 155
    NEW             shift and go to state 125
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 119
    CastExpression                 shift and go to state 142
    PrimitiveType                  shift and go to state 183
    RealPostfixExpression          shift and go to state 95
    ArithmeticUnaryOperator        shift and go to state 96
    ArrayAccess                    shift and go to state 108
    PrimaryExpression              shift and go to state 127
    LogicalUnaryOperator           shift and go to state 145
    ComplexPrimaryNoParenthesis    shift and go to state 99
    MultiplicativeExpression       shift and go to state 100
    ClassAllocationExpression      shift and go to state 120
    MethodCall                     shift and go to state 101
    ShiftExpression                shift and go to state 147
    NewAllocationExpression        shift and go to state 133
    NotJustName                    shift and go to state 150
    QualifiedName                  shift and go to state 185
    LogicalUnaryExpression         shift and go to state 152
    AdditiveExpression             shift and go to state 135
    ArrayAllocationExpression      shift and go to state 110
    UnaryExpression                shift and go to state 191
    FieldAccess                    shift and go to state 154
    RelationalExpression           shift and go to state 266
    PlainNewAllocationExpression   shift and go to state 115
    MethodAccess                   shift and go to state 111
    SpecialName                    shift and go to state 118

state 193

    (208) EqualityExpression -> EqualityExpression OP_EQ . RelationalExpression
    (202) RelationalExpression -> . ShiftExpression
    (203) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (204) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (205) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (206) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (198) ShiftExpression -> . AdditiveExpression
    (199) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (200) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (201) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (195) AdditiveExpression -> . MultiplicativeExpression
    (196) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (197) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (191) MultiplicativeExpression -> . CastExpression
    (192) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (193) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (194) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (187) CastExpression -> . UnaryExpression
    (177) UnaryExpression -> . OP_INC UnaryExpression
    (178) UnaryExpression -> . OP_DEC UnaryExpression
    (179) UnaryExpression -> . LogicalUnaryExpression
    (180) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (181) LogicalUnaryExpression -> . PostfixExpression
    (182) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (185) ArithmeticUnaryOperator -> . PLUS
    (186) ArithmeticUnaryOperator -> . MINUS
    (173) PostfixExpression -> . PrimaryExpression
    (174) PostfixExpression -> . RealPostfixExpression
    (183) LogicalUnaryOperator -> . ~
    (184) LogicalUnaryOperator -> . NOT
    (126) PrimaryExpression -> . QualifiedName
    (127) PrimaryExpression -> . NotJustName
    (175) RealPostfixExpression -> . PostfixExpression OP_INC
    (176) RealPostfixExpression -> . PostfixExpression OP_DEC
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (128) NotJustName -> . SpecialName
    (129) NotJustName -> . NewAllocationExpression
    (130) NotJustName -> . ComplexPrimary
    (151) SpecialName -> . THIS
    (152) SpecialName -> . SUPER
    (153) SpecialName -> . NULL
    (156) NewAllocationExpression -> . PlainNewAllocationExpression
    (157) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (131) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (132) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (158) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (159) PlainNewAllocationExpression -> . ClassAllocationExpression
    (160) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (161) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (162) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (133) ComplexPrimaryNoParenthesis -> . INT_CONST
    (134) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (135) ComplexPrimaryNoParenthesis -> . STRING
    (136) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (137) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (138) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (139) ComplexPrimaryNoParenthesis -> . FieldAccess
    (140) ComplexPrimaryNoParenthesis -> . MethodCall
    (165) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (166) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (167) ArrayAllocationExpression -> . NEW TypeName Dims
    (163) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (164) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (141) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (142) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (143) FieldAccess -> . NotJustName DOT IDENTIFIER
    (144) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (145) FieldAccess -> . QualifiedName DOT THIS
    (146) FieldAccess -> . QualifiedName DOT CLASS
    (147) FieldAccess -> . PrimitiveType DOT CLASS
    (148) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (149) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (150) MethodAccess -> . QualifiedName

    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 124
    PLUS            shift and go to state 87
    MINUS           shift and go to state 86
    ~               shift and go to state 140
    NOT             shift and go to state 117
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 89
    SUPER           shift and go to state 156
    NULL            shift and go to state 143
    LROUNPAREN      shift and go to state 92
    INT_CONST       shift and go to state 106
    FLOAT_CONST     shift and go to state 83
    STRING          shift and go to state 149
    CHAR_CONST      shift and go to state 139
    BOOLEAN_CONST   shift and go to state 155
    NEW             shift and go to state 125
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 119
    CastExpression                 shift and go to state 142
    PrimitiveType                  shift and go to state 183
    RealPostfixExpression          shift and go to state 95
    ArithmeticUnaryOperator        shift and go to state 96
    ArrayAccess                    shift and go to state 108
    PrimaryExpression              shift and go to state 127
    LogicalUnaryOperator           shift and go to state 145
    ComplexPrimaryNoParenthesis    shift and go to state 99
    MultiplicativeExpression       shift and go to state 100
    ClassAllocationExpression      shift and go to state 120
    MethodCall                     shift and go to state 101
    ShiftExpression                shift and go to state 147
    NewAllocationExpression        shift and go to state 133
    NotJustName                    shift and go to state 150
    QualifiedName                  shift and go to state 185
    LogicalUnaryExpression         shift and go to state 152
    AdditiveExpression             shift and go to state 135
    ArrayAllocationExpression      shift and go to state 110
    UnaryExpression                shift and go to state 191
    FieldAccess                    shift and go to state 154
    RelationalExpression           shift and go to state 267
    PlainNewAllocationExpression   shift and go to state 115
    MethodAccess                   shift and go to state 111
    SpecialName                    shift and go to state 118

state 194

    (123) JumpStatement -> BREAK SEMICOLON .

    ELSE            reduce using rule 123 (JumpStatement -> BREAK SEMICOLON .)
    RCURPAREN       reduce using rule 123 (JumpStatement -> BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 123 (JumpStatement -> BREAK SEMICOLON .)
    IDENTIFIER      reduce using rule 123 (JumpStatement -> BREAK SEMICOLON .)
    CASE            reduce using rule 123 (JumpStatement -> BREAK SEMICOLON .)
    DEFAULT         reduce using rule 123 (JumpStatement -> BREAK SEMICOLON .)
    BREAK           reduce using rule 123 (JumpStatement -> BREAK SEMICOLON .)
    RETURN          reduce using rule 123 (JumpStatement -> BREAK SEMICOLON .)
    WHILE           reduce using rule 123 (JumpStatement -> BREAK SEMICOLON .)
    LCURPAREN       reduce using rule 123 (JumpStatement -> BREAK SEMICOLON .)
    DO              reduce using rule 123 (JumpStatement -> BREAK SEMICOLON .)
    FOR             reduce using rule 123 (JumpStatement -> BREAK SEMICOLON .)
    IF              reduce using rule 123 (JumpStatement -> BREAK SEMICOLON .)
    BOOLEAN         reduce using rule 123 (JumpStatement -> BREAK SEMICOLON .)
    CHAR            reduce using rule 123 (JumpStatement -> BREAK SEMICOLON .)
    BYTE            reduce using rule 123 (JumpStatement -> BREAK SEMICOLON .)
    SHORT           reduce using rule 123 (JumpStatement -> BREAK SEMICOLON .)
    INT             reduce using rule 123 (JumpStatement -> BREAK SEMICOLON .)
    LONG            reduce using rule 123 (JumpStatement -> BREAK SEMICOLON .)
    FLOAT           reduce using rule 123 (JumpStatement -> BREAK SEMICOLON .)
    DOUBLE          reduce using rule 123 (JumpStatement -> BREAK SEMICOLON .)
    VOID            reduce using rule 123 (JumpStatement -> BREAK SEMICOLON .)
    OP_INC          reduce using rule 123 (JumpStatement -> BREAK SEMICOLON .)
    OP_DEC          reduce using rule 123 (JumpStatement -> BREAK SEMICOLON .)
    PLUS            reduce using rule 123 (JumpStatement -> BREAK SEMICOLON .)
    MINUS           reduce using rule 123 (JumpStatement -> BREAK SEMICOLON .)
    ~               reduce using rule 123 (JumpStatement -> BREAK SEMICOLON .)
    NOT             reduce using rule 123 (JumpStatement -> BREAK SEMICOLON .)
    THIS            reduce using rule 123 (JumpStatement -> BREAK SEMICOLON .)
    SUPER           reduce using rule 123 (JumpStatement -> BREAK SEMICOLON .)
    NULL            reduce using rule 123 (JumpStatement -> BREAK SEMICOLON .)
    LROUNPAREN      reduce using rule 123 (JumpStatement -> BREAK SEMICOLON .)
    INT_CONST       reduce using rule 123 (JumpStatement -> BREAK SEMICOLON .)
    FLOAT_CONST     reduce using rule 123 (JumpStatement -> BREAK SEMICOLON .)
    STRING          reduce using rule 123 (JumpStatement -> BREAK SEMICOLON .)
    CHAR_CONST      reduce using rule 123 (JumpStatement -> BREAK SEMICOLON .)
    BOOLEAN_CONST   reduce using rule 123 (JumpStatement -> BREAK SEMICOLON .)
    NEW             reduce using rule 123 (JumpStatement -> BREAK SEMICOLON .)


state 195

    (193) MultiplicativeExpression -> MultiplicativeExpression DIV . CastExpression
    (187) CastExpression -> . UnaryExpression
    (177) UnaryExpression -> . OP_INC UnaryExpression
    (178) UnaryExpression -> . OP_DEC UnaryExpression
    (179) UnaryExpression -> . LogicalUnaryExpression
    (180) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (181) LogicalUnaryExpression -> . PostfixExpression
    (182) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (185) ArithmeticUnaryOperator -> . PLUS
    (186) ArithmeticUnaryOperator -> . MINUS
    (173) PostfixExpression -> . PrimaryExpression
    (174) PostfixExpression -> . RealPostfixExpression
    (183) LogicalUnaryOperator -> . ~
    (184) LogicalUnaryOperator -> . NOT
    (126) PrimaryExpression -> . QualifiedName
    (127) PrimaryExpression -> . NotJustName
    (175) RealPostfixExpression -> . PostfixExpression OP_INC
    (176) RealPostfixExpression -> . PostfixExpression OP_DEC
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (128) NotJustName -> . SpecialName
    (129) NotJustName -> . NewAllocationExpression
    (130) NotJustName -> . ComplexPrimary
    (151) SpecialName -> . THIS
    (152) SpecialName -> . SUPER
    (153) SpecialName -> . NULL
    (156) NewAllocationExpression -> . PlainNewAllocationExpression
    (157) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (131) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (132) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (158) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (159) PlainNewAllocationExpression -> . ClassAllocationExpression
    (160) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (161) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (162) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (133) ComplexPrimaryNoParenthesis -> . INT_CONST
    (134) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (135) ComplexPrimaryNoParenthesis -> . STRING
    (136) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (137) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (138) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (139) ComplexPrimaryNoParenthesis -> . FieldAccess
    (140) ComplexPrimaryNoParenthesis -> . MethodCall
    (165) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (166) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (167) ArrayAllocationExpression -> . NEW TypeName Dims
    (163) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (164) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (141) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (142) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (143) FieldAccess -> . NotJustName DOT IDENTIFIER
    (144) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (145) FieldAccess -> . QualifiedName DOT THIS
    (146) FieldAccess -> . QualifiedName DOT CLASS
    (147) FieldAccess -> . PrimitiveType DOT CLASS
    (148) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (149) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (150) MethodAccess -> . QualifiedName

    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 124
    PLUS            shift and go to state 87
    MINUS           shift and go to state 86
    ~               shift and go to state 140
    NOT             shift and go to state 117
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 89
    SUPER           shift and go to state 156
    NULL            shift and go to state 143
    LROUNPAREN      shift and go to state 92
    INT_CONST       shift and go to state 106
    FLOAT_CONST     shift and go to state 83
    STRING          shift and go to state 149
    CHAR_CONST      shift and go to state 139
    BOOLEAN_CONST   shift and go to state 155
    NEW             shift and go to state 125
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 119
    CastExpression                 shift and go to state 268
    PrimitiveType                  shift and go to state 183
    RealPostfixExpression          shift and go to state 95
    ArithmeticUnaryOperator        shift and go to state 96
    ArrayAccess                    shift and go to state 108
    ClassAllocationExpression      shift and go to state 120
    LogicalUnaryOperator           shift and go to state 145
    ComplexPrimaryNoParenthesis    shift and go to state 99
    MethodCall                     shift and go to state 101
    NewAllocationExpression        shift and go to state 133
    NotJustName                    shift and go to state 150
    QualifiedName                  shift and go to state 185
    LogicalUnaryExpression         shift and go to state 152
    ArrayAllocationExpression      shift and go to state 110
    UnaryExpression                shift and go to state 191
    PrimaryExpression              shift and go to state 127
    FieldAccess                    shift and go to state 154
    PlainNewAllocationExpression   shift and go to state 115
    MethodAccess                   shift and go to state 111
    SpecialName                    shift and go to state 118

state 196

    (192) MultiplicativeExpression -> MultiplicativeExpression MULT . CastExpression
    (187) CastExpression -> . UnaryExpression
    (177) UnaryExpression -> . OP_INC UnaryExpression
    (178) UnaryExpression -> . OP_DEC UnaryExpression
    (179) UnaryExpression -> . LogicalUnaryExpression
    (180) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (181) LogicalUnaryExpression -> . PostfixExpression
    (182) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (185) ArithmeticUnaryOperator -> . PLUS
    (186) ArithmeticUnaryOperator -> . MINUS
    (173) PostfixExpression -> . PrimaryExpression
    (174) PostfixExpression -> . RealPostfixExpression
    (183) LogicalUnaryOperator -> . ~
    (184) LogicalUnaryOperator -> . NOT
    (126) PrimaryExpression -> . QualifiedName
    (127) PrimaryExpression -> . NotJustName
    (175) RealPostfixExpression -> . PostfixExpression OP_INC
    (176) RealPostfixExpression -> . PostfixExpression OP_DEC
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (128) NotJustName -> . SpecialName
    (129) NotJustName -> . NewAllocationExpression
    (130) NotJustName -> . ComplexPrimary
    (151) SpecialName -> . THIS
    (152) SpecialName -> . SUPER
    (153) SpecialName -> . NULL
    (156) NewAllocationExpression -> . PlainNewAllocationExpression
    (157) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (131) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (132) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (158) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (159) PlainNewAllocationExpression -> . ClassAllocationExpression
    (160) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (161) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (162) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (133) ComplexPrimaryNoParenthesis -> . INT_CONST
    (134) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (135) ComplexPrimaryNoParenthesis -> . STRING
    (136) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (137) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (138) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (139) ComplexPrimaryNoParenthesis -> . FieldAccess
    (140) ComplexPrimaryNoParenthesis -> . MethodCall
    (165) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (166) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (167) ArrayAllocationExpression -> . NEW TypeName Dims
    (163) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (164) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (141) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (142) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (143) FieldAccess -> . NotJustName DOT IDENTIFIER
    (144) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (145) FieldAccess -> . QualifiedName DOT THIS
    (146) FieldAccess -> . QualifiedName DOT CLASS
    (147) FieldAccess -> . PrimitiveType DOT CLASS
    (148) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (149) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (150) MethodAccess -> . QualifiedName

    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 124
    PLUS            shift and go to state 87
    MINUS           shift and go to state 86
    ~               shift and go to state 140
    NOT             shift and go to state 117
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 89
    SUPER           shift and go to state 156
    NULL            shift and go to state 143
    LROUNPAREN      shift and go to state 92
    INT_CONST       shift and go to state 106
    FLOAT_CONST     shift and go to state 83
    STRING          shift and go to state 149
    CHAR_CONST      shift and go to state 139
    BOOLEAN_CONST   shift and go to state 155
    NEW             shift and go to state 125
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 119
    CastExpression                 shift and go to state 269
    PrimitiveType                  shift and go to state 183
    RealPostfixExpression          shift and go to state 95
    ArithmeticUnaryOperator        shift and go to state 96
    ArrayAccess                    shift and go to state 108
    ClassAllocationExpression      shift and go to state 120
    LogicalUnaryOperator           shift and go to state 145
    ComplexPrimaryNoParenthesis    shift and go to state 99
    MethodCall                     shift and go to state 101
    NewAllocationExpression        shift and go to state 133
    NotJustName                    shift and go to state 150
    QualifiedName                  shift and go to state 185
    LogicalUnaryExpression         shift and go to state 152
    ArrayAllocationExpression      shift and go to state 110
    UnaryExpression                shift and go to state 191
    PrimaryExpression              shift and go to state 127
    FieldAccess                    shift and go to state 154
    PlainNewAllocationExpression   shift and go to state 115
    MethodAccess                   shift and go to state 111
    SpecialName                    shift and go to state 118

state 197

    (194) MultiplicativeExpression -> MultiplicativeExpression MOD . CastExpression
    (187) CastExpression -> . UnaryExpression
    (177) UnaryExpression -> . OP_INC UnaryExpression
    (178) UnaryExpression -> . OP_DEC UnaryExpression
    (179) UnaryExpression -> . LogicalUnaryExpression
    (180) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (181) LogicalUnaryExpression -> . PostfixExpression
    (182) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (185) ArithmeticUnaryOperator -> . PLUS
    (186) ArithmeticUnaryOperator -> . MINUS
    (173) PostfixExpression -> . PrimaryExpression
    (174) PostfixExpression -> . RealPostfixExpression
    (183) LogicalUnaryOperator -> . ~
    (184) LogicalUnaryOperator -> . NOT
    (126) PrimaryExpression -> . QualifiedName
    (127) PrimaryExpression -> . NotJustName
    (175) RealPostfixExpression -> . PostfixExpression OP_INC
    (176) RealPostfixExpression -> . PostfixExpression OP_DEC
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (128) NotJustName -> . SpecialName
    (129) NotJustName -> . NewAllocationExpression
    (130) NotJustName -> . ComplexPrimary
    (151) SpecialName -> . THIS
    (152) SpecialName -> . SUPER
    (153) SpecialName -> . NULL
    (156) NewAllocationExpression -> . PlainNewAllocationExpression
    (157) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (131) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (132) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (158) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (159) PlainNewAllocationExpression -> . ClassAllocationExpression
    (160) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (161) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (162) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (133) ComplexPrimaryNoParenthesis -> . INT_CONST
    (134) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (135) ComplexPrimaryNoParenthesis -> . STRING
    (136) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (137) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (138) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (139) ComplexPrimaryNoParenthesis -> . FieldAccess
    (140) ComplexPrimaryNoParenthesis -> . MethodCall
    (165) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (166) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (167) ArrayAllocationExpression -> . NEW TypeName Dims
    (163) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (164) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (141) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (142) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (143) FieldAccess -> . NotJustName DOT IDENTIFIER
    (144) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (145) FieldAccess -> . QualifiedName DOT THIS
    (146) FieldAccess -> . QualifiedName DOT CLASS
    (147) FieldAccess -> . PrimitiveType DOT CLASS
    (148) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (149) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (150) MethodAccess -> . QualifiedName

    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 124
    PLUS            shift and go to state 87
    MINUS           shift and go to state 86
    ~               shift and go to state 140
    NOT             shift and go to state 117
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 89
    SUPER           shift and go to state 156
    NULL            shift and go to state 143
    LROUNPAREN      shift and go to state 92
    INT_CONST       shift and go to state 106
    FLOAT_CONST     shift and go to state 83
    STRING          shift and go to state 149
    CHAR_CONST      shift and go to state 139
    BOOLEAN_CONST   shift and go to state 155
    NEW             shift and go to state 125
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 119
    CastExpression                 shift and go to state 270
    PrimitiveType                  shift and go to state 183
    RealPostfixExpression          shift and go to state 95
    ArithmeticUnaryOperator        shift and go to state 96
    ArrayAccess                    shift and go to state 108
    ClassAllocationExpression      shift and go to state 120
    LogicalUnaryOperator           shift and go to state 145
    ComplexPrimaryNoParenthesis    shift and go to state 99
    MethodCall                     shift and go to state 101
    NewAllocationExpression        shift and go to state 133
    NotJustName                    shift and go to state 150
    QualifiedName                  shift and go to state 185
    LogicalUnaryExpression         shift and go to state 152
    ArrayAllocationExpression      shift and go to state 110
    UnaryExpression                shift and go to state 191
    PrimaryExpression              shift and go to state 127
    FieldAccess                    shift and go to state 154
    PlainNewAllocationExpression   shift and go to state 115
    MethodAccess                   shift and go to state 111
    SpecialName                    shift and go to state 118

state 198

    (95) Statement -> SelectionStatement Mark_quad .

    WHILE           reduce using rule 95 (Statement -> SelectionStatement Mark_quad .)
    RCURPAREN       reduce using rule 95 (Statement -> SelectionStatement Mark_quad .)
    SEMICOLON       reduce using rule 95 (Statement -> SelectionStatement Mark_quad .)
    IDENTIFIER      reduce using rule 95 (Statement -> SelectionStatement Mark_quad .)
    CASE            reduce using rule 95 (Statement -> SelectionStatement Mark_quad .)
    DEFAULT         reduce using rule 95 (Statement -> SelectionStatement Mark_quad .)
    BREAK           reduce using rule 95 (Statement -> SelectionStatement Mark_quad .)
    RETURN          reduce using rule 95 (Statement -> SelectionStatement Mark_quad .)
    LCURPAREN       reduce using rule 95 (Statement -> SelectionStatement Mark_quad .)
    DO              reduce using rule 95 (Statement -> SelectionStatement Mark_quad .)
    FOR             reduce using rule 95 (Statement -> SelectionStatement Mark_quad .)
    IF              reduce using rule 95 (Statement -> SelectionStatement Mark_quad .)
    BOOLEAN         reduce using rule 95 (Statement -> SelectionStatement Mark_quad .)
    CHAR            reduce using rule 95 (Statement -> SelectionStatement Mark_quad .)
    BYTE            reduce using rule 95 (Statement -> SelectionStatement Mark_quad .)
    SHORT           reduce using rule 95 (Statement -> SelectionStatement Mark_quad .)
    INT             reduce using rule 95 (Statement -> SelectionStatement Mark_quad .)
    LONG            reduce using rule 95 (Statement -> SelectionStatement Mark_quad .)
    FLOAT           reduce using rule 95 (Statement -> SelectionStatement Mark_quad .)
    DOUBLE          reduce using rule 95 (Statement -> SelectionStatement Mark_quad .)
    VOID            reduce using rule 95 (Statement -> SelectionStatement Mark_quad .)
    OP_INC          reduce using rule 95 (Statement -> SelectionStatement Mark_quad .)
    OP_DEC          reduce using rule 95 (Statement -> SelectionStatement Mark_quad .)
    PLUS            reduce using rule 95 (Statement -> SelectionStatement Mark_quad .)
    MINUS           reduce using rule 95 (Statement -> SelectionStatement Mark_quad .)
    ~               reduce using rule 95 (Statement -> SelectionStatement Mark_quad .)
    NOT             reduce using rule 95 (Statement -> SelectionStatement Mark_quad .)
    THIS            reduce using rule 95 (Statement -> SelectionStatement Mark_quad .)
    SUPER           reduce using rule 95 (Statement -> SelectionStatement Mark_quad .)
    NULL            reduce using rule 95 (Statement -> SelectionStatement Mark_quad .)
    LROUNPAREN      reduce using rule 95 (Statement -> SelectionStatement Mark_quad .)
    INT_CONST       reduce using rule 95 (Statement -> SelectionStatement Mark_quad .)
    FLOAT_CONST     reduce using rule 95 (Statement -> SelectionStatement Mark_quad .)
    STRING          reduce using rule 95 (Statement -> SelectionStatement Mark_quad .)
    CHAR_CONST      reduce using rule 95 (Statement -> SelectionStatement Mark_quad .)
    BOOLEAN_CONST   reduce using rule 95 (Statement -> SelectionStatement Mark_quad .)
    NEW             reduce using rule 95 (Statement -> SelectionStatement Mark_quad .)
    ELSE            reduce using rule 95 (Statement -> SelectionStatement Mark_quad .)


state 199

    (177) UnaryExpression -> OP_INC UnaryExpression .

    EQUAL           reduce using rule 177 (UnaryExpression -> OP_INC UnaryExpression .)
    ASS_MUL         reduce using rule 177 (UnaryExpression -> OP_INC UnaryExpression .)
    ASS_ADD         reduce using rule 177 (UnaryExpression -> OP_INC UnaryExpression .)
    ASS_SUB         reduce using rule 177 (UnaryExpression -> OP_INC UnaryExpression .)
    MULT            reduce using rule 177 (UnaryExpression -> OP_INC UnaryExpression .)
    DIV             reduce using rule 177 (UnaryExpression -> OP_INC UnaryExpression .)
    MOD             reduce using rule 177 (UnaryExpression -> OP_INC UnaryExpression .)
    PLUS            reduce using rule 177 (UnaryExpression -> OP_INC UnaryExpression .)
    MINUS           reduce using rule 177 (UnaryExpression -> OP_INC UnaryExpression .)
    OP_SHL          reduce using rule 177 (UnaryExpression -> OP_INC UnaryExpression .)
    OP_SHR          reduce using rule 177 (UnaryExpression -> OP_INC UnaryExpression .)
    OP_SHRR         reduce using rule 177 (UnaryExpression -> OP_INC UnaryExpression .)
    LESS            reduce using rule 177 (UnaryExpression -> OP_INC UnaryExpression .)
    MORE            reduce using rule 177 (UnaryExpression -> OP_INC UnaryExpression .)
    OP_LE           reduce using rule 177 (UnaryExpression -> OP_INC UnaryExpression .)
    OP_GE           reduce using rule 177 (UnaryExpression -> OP_INC UnaryExpression .)
    OP_EQ           reduce using rule 177 (UnaryExpression -> OP_INC UnaryExpression .)
    OP_NE           reduce using rule 177 (UnaryExpression -> OP_INC UnaryExpression .)
    &               reduce using rule 177 (UnaryExpression -> OP_INC UnaryExpression .)
    ^               reduce using rule 177 (UnaryExpression -> OP_INC UnaryExpression .)
    |               reduce using rule 177 (UnaryExpression -> OP_INC UnaryExpression .)
    OP_LAND         reduce using rule 177 (UnaryExpression -> OP_INC UnaryExpression .)
    OP_LOR          reduce using rule 177 (UnaryExpression -> OP_INC UnaryExpression .)
    QUES            reduce using rule 177 (UnaryExpression -> OP_INC UnaryExpression .)
    RSQPAREN        reduce using rule 177 (UnaryExpression -> OP_INC UnaryExpression .)
    RROUNPAREN      reduce using rule 177 (UnaryExpression -> OP_INC UnaryExpression .)
    COMMA           reduce using rule 177 (UnaryExpression -> OP_INC UnaryExpression .)
    SEMICOLON       reduce using rule 177 (UnaryExpression -> OP_INC UnaryExpression .)
    COLON           reduce using rule 177 (UnaryExpression -> OP_INC UnaryExpression .)


state 200

    (93) Statement -> Block Mark_quad .

    WHILE           reduce using rule 93 (Statement -> Block Mark_quad .)
    RCURPAREN       reduce using rule 93 (Statement -> Block Mark_quad .)
    SEMICOLON       reduce using rule 93 (Statement -> Block Mark_quad .)
    IDENTIFIER      reduce using rule 93 (Statement -> Block Mark_quad .)
    CASE            reduce using rule 93 (Statement -> Block Mark_quad .)
    DEFAULT         reduce using rule 93 (Statement -> Block Mark_quad .)
    BREAK           reduce using rule 93 (Statement -> Block Mark_quad .)
    RETURN          reduce using rule 93 (Statement -> Block Mark_quad .)
    LCURPAREN       reduce using rule 93 (Statement -> Block Mark_quad .)
    DO              reduce using rule 93 (Statement -> Block Mark_quad .)
    FOR             reduce using rule 93 (Statement -> Block Mark_quad .)
    IF              reduce using rule 93 (Statement -> Block Mark_quad .)
    BOOLEAN         reduce using rule 93 (Statement -> Block Mark_quad .)
    CHAR            reduce using rule 93 (Statement -> Block Mark_quad .)
    BYTE            reduce using rule 93 (Statement -> Block Mark_quad .)
    SHORT           reduce using rule 93 (Statement -> Block Mark_quad .)
    INT             reduce using rule 93 (Statement -> Block Mark_quad .)
    LONG            reduce using rule 93 (Statement -> Block Mark_quad .)
    FLOAT           reduce using rule 93 (Statement -> Block Mark_quad .)
    DOUBLE          reduce using rule 93 (Statement -> Block Mark_quad .)
    VOID            reduce using rule 93 (Statement -> Block Mark_quad .)
    OP_INC          reduce using rule 93 (Statement -> Block Mark_quad .)
    OP_DEC          reduce using rule 93 (Statement -> Block Mark_quad .)
    PLUS            reduce using rule 93 (Statement -> Block Mark_quad .)
    MINUS           reduce using rule 93 (Statement -> Block Mark_quad .)
    ~               reduce using rule 93 (Statement -> Block Mark_quad .)
    NOT             reduce using rule 93 (Statement -> Block Mark_quad .)
    THIS            reduce using rule 93 (Statement -> Block Mark_quad .)
    SUPER           reduce using rule 93 (Statement -> Block Mark_quad .)
    NULL            reduce using rule 93 (Statement -> Block Mark_quad .)
    LROUNPAREN      reduce using rule 93 (Statement -> Block Mark_quad .)
    INT_CONST       reduce using rule 93 (Statement -> Block Mark_quad .)
    FLOAT_CONST     reduce using rule 93 (Statement -> Block Mark_quad .)
    STRING          reduce using rule 93 (Statement -> Block Mark_quad .)
    CHAR_CONST      reduce using rule 93 (Statement -> Block Mark_quad .)
    BOOLEAN_CONST   reduce using rule 93 (Statement -> Block Mark_quad .)
    NEW             reduce using rule 93 (Statement -> Block Mark_quad .)
    ELSE            reduce using rule 93 (Statement -> Block Mark_quad .)


state 201

    (160) PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN . RCURPAREN

    RCURPAREN       shift and go to state 271


state 202

    (148) MethodCall -> MethodAccess LROUNPAREN . ArgumentList RROUNPAREN
    (149) MethodCall -> MethodAccess LROUNPAREN . RROUNPAREN
    (154) ArgumentList -> . Expression
    (155) ArgumentList -> . ArgumentList COMMA Expression
    (230) Expression -> . AssignmentExpression
    (224) AssignmentExpression -> . ConditionalExpression
    (225) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (220) ConditionalExpression -> . ConditionalOrExpression
    (221) ConditionalExpression -> . ConditionalOrExpression Mark_quad Ques Mark_quad Expression Mark_quad Cln Mark_quad ConditionalExpression Mark_quad
    (177) UnaryExpression -> . OP_INC UnaryExpression
    (178) UnaryExpression -> . OP_DEC UnaryExpression
    (179) UnaryExpression -> . LogicalUnaryExpression
    (180) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) ConditionalOrExpression -> . ConditionalAndExpression
    (219) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (181) LogicalUnaryExpression -> . PostfixExpression
    (182) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (185) ArithmeticUnaryOperator -> . PLUS
    (186) ArithmeticUnaryOperator -> . MINUS
    (216) ConditionalAndExpression -> . InclusiveOrExpression
    (217) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (173) PostfixExpression -> . PrimaryExpression
    (174) PostfixExpression -> . RealPostfixExpression
    (183) LogicalUnaryOperator -> . ~
    (184) LogicalUnaryOperator -> . NOT
    (214) InclusiveOrExpression -> . ExclusiveOrExpression
    (215) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (126) PrimaryExpression -> . QualifiedName
    (127) PrimaryExpression -> . NotJustName
    (175) RealPostfixExpression -> . PostfixExpression OP_INC
    (176) RealPostfixExpression -> . PostfixExpression OP_DEC
    (212) ExclusiveOrExpression -> . AndExpression
    (213) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (128) NotJustName -> . SpecialName
    (129) NotJustName -> . NewAllocationExpression
    (130) NotJustName -> . ComplexPrimary
    (210) AndExpression -> . EqualityExpression
    (211) AndExpression -> . AndExpression & EqualityExpression
    (151) SpecialName -> . THIS
    (152) SpecialName -> . SUPER
    (153) SpecialName -> . NULL
    (156) NewAllocationExpression -> . PlainNewAllocationExpression
    (157) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (131) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (132) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (207) EqualityExpression -> . RelationalExpression
    (208) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (209) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (158) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (159) PlainNewAllocationExpression -> . ClassAllocationExpression
    (160) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (161) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (162) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (133) ComplexPrimaryNoParenthesis -> . INT_CONST
    (134) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (135) ComplexPrimaryNoParenthesis -> . STRING
    (136) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (137) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (138) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (139) ComplexPrimaryNoParenthesis -> . FieldAccess
    (140) ComplexPrimaryNoParenthesis -> . MethodCall
    (202) RelationalExpression -> . ShiftExpression
    (203) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (204) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (205) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (206) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (165) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (166) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (167) ArrayAllocationExpression -> . NEW TypeName Dims
    (163) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (164) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (141) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (142) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (143) FieldAccess -> . NotJustName DOT IDENTIFIER
    (144) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (145) FieldAccess -> . QualifiedName DOT THIS
    (146) FieldAccess -> . QualifiedName DOT CLASS
    (147) FieldAccess -> . PrimitiveType DOT CLASS
    (148) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (149) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (198) ShiftExpression -> . AdditiveExpression
    (199) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (200) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (201) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (150) MethodAccess -> . QualifiedName
    (195) AdditiveExpression -> . MultiplicativeExpression
    (196) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (197) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (191) MultiplicativeExpression -> . CastExpression
    (192) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (193) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (194) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (187) CastExpression -> . UnaryExpression

    RROUNPAREN      shift and go to state 273
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 124
    PLUS            shift and go to state 87
    MINUS           shift and go to state 86
    ~               shift and go to state 140
    NOT             shift and go to state 117
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 89
    SUPER           shift and go to state 156
    NULL            shift and go to state 143
    LROUNPAREN      shift and go to state 92
    INT_CONST       shift and go to state 106
    FLOAT_CONST     shift and go to state 83
    STRING          shift and go to state 149
    CHAR_CONST      shift and go to state 139
    BOOLEAN_CONST   shift and go to state 155
    NEW             shift and go to state 125
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 119
    FieldAccess                    shift and go to state 154
    PrimaryExpression              shift and go to state 127
    PrimitiveType                  shift and go to state 183
    RealPostfixExpression          shift and go to state 95
    ArithmeticUnaryOperator        shift and go to state 96
    AndExpression                  shift and go to state 85
    ArrayAccess                    shift and go to state 108
    CastExpression                 shift and go to state 142
    EqualityExpression             shift and go to state 97
    ArgumentList                   shift and go to state 272
    LogicalUnaryOperator           shift and go to state 145
    ComplexPrimaryNoParenthesis    shift and go to state 99
    MultiplicativeExpression       shift and go to state 100
    ClassAllocationExpression      shift and go to state 120
    MethodCall                     shift and go to state 101
    ConditionalOrExpression        shift and go to state 131
    ShiftExpression                shift and go to state 147
    AssignmentExpression           shift and go to state 103
    NewAllocationExpression        shift and go to state 133
    NotJustName                    shift and go to state 150
    QualifiedName                  shift and go to state 185
    LogicalUnaryExpression         shift and go to state 152
    Expression                     shift and go to state 274
    AdditiveExpression             shift and go to state 135
    ArrayAllocationExpression      shift and go to state 110
    ConditionalExpression          shift and go to state 136
    UnaryExpression                shift and go to state 137
    InclusiveOrExpression          shift and go to state 138
    MethodAccess                   shift and go to state 111
    ExclusiveOrExpression          shift and go to state 113
    ConditionalAndExpression       shift and go to state 90
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    SpecialName                    shift and go to state 118

state 203

    (175) RealPostfixExpression -> PostfixExpression OP_INC .

    DOT             reduce using rule 175 (RealPostfixExpression -> PostfixExpression OP_INC .)
    OP_INC          reduce using rule 175 (RealPostfixExpression -> PostfixExpression OP_INC .)
    OP_DEC          reduce using rule 175 (RealPostfixExpression -> PostfixExpression OP_INC .)
    EQUAL           reduce using rule 175 (RealPostfixExpression -> PostfixExpression OP_INC .)
    ASS_MUL         reduce using rule 175 (RealPostfixExpression -> PostfixExpression OP_INC .)
    ASS_ADD         reduce using rule 175 (RealPostfixExpression -> PostfixExpression OP_INC .)
    ASS_SUB         reduce using rule 175 (RealPostfixExpression -> PostfixExpression OP_INC .)
    MULT            reduce using rule 175 (RealPostfixExpression -> PostfixExpression OP_INC .)
    DIV             reduce using rule 175 (RealPostfixExpression -> PostfixExpression OP_INC .)
    MOD             reduce using rule 175 (RealPostfixExpression -> PostfixExpression OP_INC .)
    PLUS            reduce using rule 175 (RealPostfixExpression -> PostfixExpression OP_INC .)
    MINUS           reduce using rule 175 (RealPostfixExpression -> PostfixExpression OP_INC .)
    OP_SHL          reduce using rule 175 (RealPostfixExpression -> PostfixExpression OP_INC .)
    OP_SHR          reduce using rule 175 (RealPostfixExpression -> PostfixExpression OP_INC .)
    OP_SHRR         reduce using rule 175 (RealPostfixExpression -> PostfixExpression OP_INC .)
    LESS            reduce using rule 175 (RealPostfixExpression -> PostfixExpression OP_INC .)
    MORE            reduce using rule 175 (RealPostfixExpression -> PostfixExpression OP_INC .)
    OP_LE           reduce using rule 175 (RealPostfixExpression -> PostfixExpression OP_INC .)
    OP_GE           reduce using rule 175 (RealPostfixExpression -> PostfixExpression OP_INC .)
    OP_EQ           reduce using rule 175 (RealPostfixExpression -> PostfixExpression OP_INC .)
    OP_NE           reduce using rule 175 (RealPostfixExpression -> PostfixExpression OP_INC .)
    &               reduce using rule 175 (RealPostfixExpression -> PostfixExpression OP_INC .)
    ^               reduce using rule 175 (RealPostfixExpression -> PostfixExpression OP_INC .)
    |               reduce using rule 175 (RealPostfixExpression -> PostfixExpression OP_INC .)
    OP_LAND         reduce using rule 175 (RealPostfixExpression -> PostfixExpression OP_INC .)
    OP_LOR          reduce using rule 175 (RealPostfixExpression -> PostfixExpression OP_INC .)
    QUES            reduce using rule 175 (RealPostfixExpression -> PostfixExpression OP_INC .)
    RROUNPAREN      reduce using rule 175 (RealPostfixExpression -> PostfixExpression OP_INC .)
    SEMICOLON       reduce using rule 175 (RealPostfixExpression -> PostfixExpression OP_INC .)
    COLON           reduce using rule 175 (RealPostfixExpression -> PostfixExpression OP_INC .)
    COMMA           reduce using rule 175 (RealPostfixExpression -> PostfixExpression OP_INC .)
    RSQPAREN        reduce using rule 175 (RealPostfixExpression -> PostfixExpression OP_INC .)


state 204

    (176) RealPostfixExpression -> PostfixExpression OP_DEC .

    DOT             reduce using rule 176 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    OP_INC          reduce using rule 176 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    OP_DEC          reduce using rule 176 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    EQUAL           reduce using rule 176 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    ASS_MUL         reduce using rule 176 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    ASS_ADD         reduce using rule 176 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    ASS_SUB         reduce using rule 176 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    MULT            reduce using rule 176 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    DIV             reduce using rule 176 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    MOD             reduce using rule 176 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    PLUS            reduce using rule 176 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    MINUS           reduce using rule 176 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    OP_SHL          reduce using rule 176 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    OP_SHR          reduce using rule 176 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    OP_SHRR         reduce using rule 176 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    LESS            reduce using rule 176 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    MORE            reduce using rule 176 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    OP_LE           reduce using rule 176 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    OP_GE           reduce using rule 176 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    OP_EQ           reduce using rule 176 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    OP_NE           reduce using rule 176 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    &               reduce using rule 176 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    ^               reduce using rule 176 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    |               reduce using rule 176 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    OP_LAND         reduce using rule 176 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    OP_LOR          reduce using rule 176 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    QUES            reduce using rule 176 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    RROUNPAREN      reduce using rule 176 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    SEMICOLON       reduce using rule 176 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    COLON           reduce using rule 176 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    COMMA           reduce using rule 176 (RealPostfixExpression -> PostfixExpression OP_DEC .)
    RSQPAREN        reduce using rule 176 (RealPostfixExpression -> PostfixExpression OP_DEC .)


state 205

    (213) ExclusiveOrExpression -> ExclusiveOrExpression ^ . AndExpression
    (210) AndExpression -> . EqualityExpression
    (211) AndExpression -> . AndExpression & EqualityExpression
    (207) EqualityExpression -> . RelationalExpression
    (208) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (209) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (202) RelationalExpression -> . ShiftExpression
    (203) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (204) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (205) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (206) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (198) ShiftExpression -> . AdditiveExpression
    (199) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (200) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (201) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (195) AdditiveExpression -> . MultiplicativeExpression
    (196) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (197) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (191) MultiplicativeExpression -> . CastExpression
    (192) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (193) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (194) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (187) CastExpression -> . UnaryExpression
    (177) UnaryExpression -> . OP_INC UnaryExpression
    (178) UnaryExpression -> . OP_DEC UnaryExpression
    (179) UnaryExpression -> . LogicalUnaryExpression
    (180) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (181) LogicalUnaryExpression -> . PostfixExpression
    (182) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (185) ArithmeticUnaryOperator -> . PLUS
    (186) ArithmeticUnaryOperator -> . MINUS
    (173) PostfixExpression -> . PrimaryExpression
    (174) PostfixExpression -> . RealPostfixExpression
    (183) LogicalUnaryOperator -> . ~
    (184) LogicalUnaryOperator -> . NOT
    (126) PrimaryExpression -> . QualifiedName
    (127) PrimaryExpression -> . NotJustName
    (175) RealPostfixExpression -> . PostfixExpression OP_INC
    (176) RealPostfixExpression -> . PostfixExpression OP_DEC
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (128) NotJustName -> . SpecialName
    (129) NotJustName -> . NewAllocationExpression
    (130) NotJustName -> . ComplexPrimary
    (151) SpecialName -> . THIS
    (152) SpecialName -> . SUPER
    (153) SpecialName -> . NULL
    (156) NewAllocationExpression -> . PlainNewAllocationExpression
    (157) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (131) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (132) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (158) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (159) PlainNewAllocationExpression -> . ClassAllocationExpression
    (160) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (161) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (162) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (133) ComplexPrimaryNoParenthesis -> . INT_CONST
    (134) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (135) ComplexPrimaryNoParenthesis -> . STRING
    (136) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (137) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (138) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (139) ComplexPrimaryNoParenthesis -> . FieldAccess
    (140) ComplexPrimaryNoParenthesis -> . MethodCall
    (165) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (166) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (167) ArrayAllocationExpression -> . NEW TypeName Dims
    (163) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (164) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (141) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (142) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (143) FieldAccess -> . NotJustName DOT IDENTIFIER
    (144) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (145) FieldAccess -> . QualifiedName DOT THIS
    (146) FieldAccess -> . QualifiedName DOT CLASS
    (147) FieldAccess -> . PrimitiveType DOT CLASS
    (148) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (149) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (150) MethodAccess -> . QualifiedName

    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 124
    PLUS            shift and go to state 87
    MINUS           shift and go to state 86
    ~               shift and go to state 140
    NOT             shift and go to state 117
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 89
    SUPER           shift and go to state 156
    NULL            shift and go to state 143
    LROUNPAREN      shift and go to state 92
    INT_CONST       shift and go to state 106
    FLOAT_CONST     shift and go to state 83
    STRING          shift and go to state 149
    CHAR_CONST      shift and go to state 139
    BOOLEAN_CONST   shift and go to state 155
    NEW             shift and go to state 125
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 119
    CastExpression                 shift and go to state 142
    PrimitiveType                  shift and go to state 183
    RealPostfixExpression          shift and go to state 95
    ArithmeticUnaryOperator        shift and go to state 96
    AndExpression                  shift and go to state 275
    ArrayAccess                    shift and go to state 108
    PrimaryExpression              shift and go to state 127
    EqualityExpression             shift and go to state 97
    LogicalUnaryOperator           shift and go to state 145
    ComplexPrimaryNoParenthesis    shift and go to state 99
    MultiplicativeExpression       shift and go to state 100
    ClassAllocationExpression      shift and go to state 120
    MethodCall                     shift and go to state 101
    ShiftExpression                shift and go to state 147
    NewAllocationExpression        shift and go to state 133
    NotJustName                    shift and go to state 150
    QualifiedName                  shift and go to state 185
    LogicalUnaryExpression         shift and go to state 152
    AdditiveExpression             shift and go to state 135
    ArrayAllocationExpression      shift and go to state 110
    UnaryExpression                shift and go to state 191
    FieldAccess                    shift and go to state 154
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    MethodAccess                   shift and go to state 111
    SpecialName                    shift and go to state 118

state 206

    (203) RelationalExpression -> RelationalExpression LESS . ShiftExpression
    (198) ShiftExpression -> . AdditiveExpression
    (199) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (200) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (201) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (195) AdditiveExpression -> . MultiplicativeExpression
    (196) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (197) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (191) MultiplicativeExpression -> . CastExpression
    (192) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (193) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (194) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (187) CastExpression -> . UnaryExpression
    (177) UnaryExpression -> . OP_INC UnaryExpression
    (178) UnaryExpression -> . OP_DEC UnaryExpression
    (179) UnaryExpression -> . LogicalUnaryExpression
    (180) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (181) LogicalUnaryExpression -> . PostfixExpression
    (182) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (185) ArithmeticUnaryOperator -> . PLUS
    (186) ArithmeticUnaryOperator -> . MINUS
    (173) PostfixExpression -> . PrimaryExpression
    (174) PostfixExpression -> . RealPostfixExpression
    (183) LogicalUnaryOperator -> . ~
    (184) LogicalUnaryOperator -> . NOT
    (126) PrimaryExpression -> . QualifiedName
    (127) PrimaryExpression -> . NotJustName
    (175) RealPostfixExpression -> . PostfixExpression OP_INC
    (176) RealPostfixExpression -> . PostfixExpression OP_DEC
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (128) NotJustName -> . SpecialName
    (129) NotJustName -> . NewAllocationExpression
    (130) NotJustName -> . ComplexPrimary
    (151) SpecialName -> . THIS
    (152) SpecialName -> . SUPER
    (153) SpecialName -> . NULL
    (156) NewAllocationExpression -> . PlainNewAllocationExpression
    (157) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (131) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (132) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (158) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (159) PlainNewAllocationExpression -> . ClassAllocationExpression
    (160) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (161) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (162) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (133) ComplexPrimaryNoParenthesis -> . INT_CONST
    (134) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (135) ComplexPrimaryNoParenthesis -> . STRING
    (136) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (137) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (138) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (139) ComplexPrimaryNoParenthesis -> . FieldAccess
    (140) ComplexPrimaryNoParenthesis -> . MethodCall
    (165) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (166) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (167) ArrayAllocationExpression -> . NEW TypeName Dims
    (163) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (164) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (141) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (142) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (143) FieldAccess -> . NotJustName DOT IDENTIFIER
    (144) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (145) FieldAccess -> . QualifiedName DOT THIS
    (146) FieldAccess -> . QualifiedName DOT CLASS
    (147) FieldAccess -> . PrimitiveType DOT CLASS
    (148) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (149) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (150) MethodAccess -> . QualifiedName

    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 124
    PLUS            shift and go to state 87
    MINUS           shift and go to state 86
    ~               shift and go to state 140
    NOT             shift and go to state 117
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 89
    SUPER           shift and go to state 156
    NULL            shift and go to state 143
    LROUNPAREN      shift and go to state 92
    INT_CONST       shift and go to state 106
    FLOAT_CONST     shift and go to state 83
    STRING          shift and go to state 149
    CHAR_CONST      shift and go to state 139
    BOOLEAN_CONST   shift and go to state 155
    NEW             shift and go to state 125
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 119
    CastExpression                 shift and go to state 142
    PrimitiveType                  shift and go to state 183
    RealPostfixExpression          shift and go to state 95
    ArithmeticUnaryOperator        shift and go to state 96
    ArrayAccess                    shift and go to state 108
    ClassAllocationExpression      shift and go to state 120
    LogicalUnaryOperator           shift and go to state 145
    ComplexPrimaryNoParenthesis    shift and go to state 99
    MultiplicativeExpression       shift and go to state 100
    MethodCall                     shift and go to state 101
    ShiftExpression                shift and go to state 276
    NewAllocationExpression        shift and go to state 133
    NotJustName                    shift and go to state 150
    QualifiedName                  shift and go to state 185
    LogicalUnaryExpression         shift and go to state 152
    AdditiveExpression             shift and go to state 135
    ArrayAllocationExpression      shift and go to state 110
    UnaryExpression                shift and go to state 191
    PrimaryExpression              shift and go to state 127
    FieldAccess                    shift and go to state 154
    PlainNewAllocationExpression   shift and go to state 115
    MethodAccess                   shift and go to state 111
    SpecialName                    shift and go to state 118

state 207

    (205) RelationalExpression -> RelationalExpression OP_LE . ShiftExpression
    (198) ShiftExpression -> . AdditiveExpression
    (199) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (200) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (201) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (195) AdditiveExpression -> . MultiplicativeExpression
    (196) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (197) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (191) MultiplicativeExpression -> . CastExpression
    (192) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (193) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (194) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (187) CastExpression -> . UnaryExpression
    (177) UnaryExpression -> . OP_INC UnaryExpression
    (178) UnaryExpression -> . OP_DEC UnaryExpression
    (179) UnaryExpression -> . LogicalUnaryExpression
    (180) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (181) LogicalUnaryExpression -> . PostfixExpression
    (182) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (185) ArithmeticUnaryOperator -> . PLUS
    (186) ArithmeticUnaryOperator -> . MINUS
    (173) PostfixExpression -> . PrimaryExpression
    (174) PostfixExpression -> . RealPostfixExpression
    (183) LogicalUnaryOperator -> . ~
    (184) LogicalUnaryOperator -> . NOT
    (126) PrimaryExpression -> . QualifiedName
    (127) PrimaryExpression -> . NotJustName
    (175) RealPostfixExpression -> . PostfixExpression OP_INC
    (176) RealPostfixExpression -> . PostfixExpression OP_DEC
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (128) NotJustName -> . SpecialName
    (129) NotJustName -> . NewAllocationExpression
    (130) NotJustName -> . ComplexPrimary
    (151) SpecialName -> . THIS
    (152) SpecialName -> . SUPER
    (153) SpecialName -> . NULL
    (156) NewAllocationExpression -> . PlainNewAllocationExpression
    (157) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (131) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (132) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (158) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (159) PlainNewAllocationExpression -> . ClassAllocationExpression
    (160) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (161) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (162) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (133) ComplexPrimaryNoParenthesis -> . INT_CONST
    (134) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (135) ComplexPrimaryNoParenthesis -> . STRING
    (136) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (137) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (138) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (139) ComplexPrimaryNoParenthesis -> . FieldAccess
    (140) ComplexPrimaryNoParenthesis -> . MethodCall
    (165) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (166) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (167) ArrayAllocationExpression -> . NEW TypeName Dims
    (163) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (164) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (141) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (142) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (143) FieldAccess -> . NotJustName DOT IDENTIFIER
    (144) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (145) FieldAccess -> . QualifiedName DOT THIS
    (146) FieldAccess -> . QualifiedName DOT CLASS
    (147) FieldAccess -> . PrimitiveType DOT CLASS
    (148) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (149) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (150) MethodAccess -> . QualifiedName

    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 124
    PLUS            shift and go to state 87
    MINUS           shift and go to state 86
    ~               shift and go to state 140
    NOT             shift and go to state 117
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 89
    SUPER           shift and go to state 156
    NULL            shift and go to state 143
    LROUNPAREN      shift and go to state 92
    INT_CONST       shift and go to state 106
    FLOAT_CONST     shift and go to state 83
    STRING          shift and go to state 149
    CHAR_CONST      shift and go to state 139
    BOOLEAN_CONST   shift and go to state 155
    NEW             shift and go to state 125
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 119
    CastExpression                 shift and go to state 142
    PrimitiveType                  shift and go to state 183
    RealPostfixExpression          shift and go to state 95
    ArithmeticUnaryOperator        shift and go to state 96
    ArrayAccess                    shift and go to state 108
    ClassAllocationExpression      shift and go to state 120
    LogicalUnaryOperator           shift and go to state 145
    ComplexPrimaryNoParenthesis    shift and go to state 99
    MultiplicativeExpression       shift and go to state 100
    MethodCall                     shift and go to state 101
    ShiftExpression                shift and go to state 277
    NewAllocationExpression        shift and go to state 133
    NotJustName                    shift and go to state 150
    QualifiedName                  shift and go to state 185
    LogicalUnaryExpression         shift and go to state 152
    AdditiveExpression             shift and go to state 135
    ArrayAllocationExpression      shift and go to state 110
    UnaryExpression                shift and go to state 191
    PrimaryExpression              shift and go to state 127
    FieldAccess                    shift and go to state 154
    PlainNewAllocationExpression   shift and go to state 115
    MethodAccess                   shift and go to state 111
    SpecialName                    shift and go to state 118

state 208

    (206) RelationalExpression -> RelationalExpression OP_GE . ShiftExpression
    (198) ShiftExpression -> . AdditiveExpression
    (199) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (200) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (201) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (195) AdditiveExpression -> . MultiplicativeExpression
    (196) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (197) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (191) MultiplicativeExpression -> . CastExpression
    (192) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (193) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (194) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (187) CastExpression -> . UnaryExpression
    (177) UnaryExpression -> . OP_INC UnaryExpression
    (178) UnaryExpression -> . OP_DEC UnaryExpression
    (179) UnaryExpression -> . LogicalUnaryExpression
    (180) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (181) LogicalUnaryExpression -> . PostfixExpression
    (182) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (185) ArithmeticUnaryOperator -> . PLUS
    (186) ArithmeticUnaryOperator -> . MINUS
    (173) PostfixExpression -> . PrimaryExpression
    (174) PostfixExpression -> . RealPostfixExpression
    (183) LogicalUnaryOperator -> . ~
    (184) LogicalUnaryOperator -> . NOT
    (126) PrimaryExpression -> . QualifiedName
    (127) PrimaryExpression -> . NotJustName
    (175) RealPostfixExpression -> . PostfixExpression OP_INC
    (176) RealPostfixExpression -> . PostfixExpression OP_DEC
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (128) NotJustName -> . SpecialName
    (129) NotJustName -> . NewAllocationExpression
    (130) NotJustName -> . ComplexPrimary
    (151) SpecialName -> . THIS
    (152) SpecialName -> . SUPER
    (153) SpecialName -> . NULL
    (156) NewAllocationExpression -> . PlainNewAllocationExpression
    (157) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (131) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (132) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (158) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (159) PlainNewAllocationExpression -> . ClassAllocationExpression
    (160) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (161) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (162) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (133) ComplexPrimaryNoParenthesis -> . INT_CONST
    (134) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (135) ComplexPrimaryNoParenthesis -> . STRING
    (136) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (137) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (138) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (139) ComplexPrimaryNoParenthesis -> . FieldAccess
    (140) ComplexPrimaryNoParenthesis -> . MethodCall
    (165) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (166) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (167) ArrayAllocationExpression -> . NEW TypeName Dims
    (163) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (164) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (141) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (142) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (143) FieldAccess -> . NotJustName DOT IDENTIFIER
    (144) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (145) FieldAccess -> . QualifiedName DOT THIS
    (146) FieldAccess -> . QualifiedName DOT CLASS
    (147) FieldAccess -> . PrimitiveType DOT CLASS
    (148) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (149) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (150) MethodAccess -> . QualifiedName

    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 124
    PLUS            shift and go to state 87
    MINUS           shift and go to state 86
    ~               shift and go to state 140
    NOT             shift and go to state 117
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 89
    SUPER           shift and go to state 156
    NULL            shift and go to state 143
    LROUNPAREN      shift and go to state 92
    INT_CONST       shift and go to state 106
    FLOAT_CONST     shift and go to state 83
    STRING          shift and go to state 149
    CHAR_CONST      shift and go to state 139
    BOOLEAN_CONST   shift and go to state 155
    NEW             shift and go to state 125
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 119
    CastExpression                 shift and go to state 142
    PrimitiveType                  shift and go to state 183
    RealPostfixExpression          shift and go to state 95
    ArithmeticUnaryOperator        shift and go to state 96
    ArrayAccess                    shift and go to state 108
    ClassAllocationExpression      shift and go to state 120
    LogicalUnaryOperator           shift and go to state 145
    ComplexPrimaryNoParenthesis    shift and go to state 99
    MultiplicativeExpression       shift and go to state 100
    MethodCall                     shift and go to state 101
    ShiftExpression                shift and go to state 278
    NewAllocationExpression        shift and go to state 133
    NotJustName                    shift and go to state 150
    QualifiedName                  shift and go to state 185
    LogicalUnaryExpression         shift and go to state 152
    AdditiveExpression             shift and go to state 135
    ArrayAllocationExpression      shift and go to state 110
    UnaryExpression                shift and go to state 191
    PrimaryExpression              shift and go to state 127
    FieldAccess                    shift and go to state 154
    PlainNewAllocationExpression   shift and go to state 115
    MethodAccess                   shift and go to state 111
    SpecialName                    shift and go to state 118

state 209

    (204) RelationalExpression -> RelationalExpression MORE . ShiftExpression
    (198) ShiftExpression -> . AdditiveExpression
    (199) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (200) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (201) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (195) AdditiveExpression -> . MultiplicativeExpression
    (196) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (197) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (191) MultiplicativeExpression -> . CastExpression
    (192) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (193) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (194) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (187) CastExpression -> . UnaryExpression
    (177) UnaryExpression -> . OP_INC UnaryExpression
    (178) UnaryExpression -> . OP_DEC UnaryExpression
    (179) UnaryExpression -> . LogicalUnaryExpression
    (180) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (181) LogicalUnaryExpression -> . PostfixExpression
    (182) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (185) ArithmeticUnaryOperator -> . PLUS
    (186) ArithmeticUnaryOperator -> . MINUS
    (173) PostfixExpression -> . PrimaryExpression
    (174) PostfixExpression -> . RealPostfixExpression
    (183) LogicalUnaryOperator -> . ~
    (184) LogicalUnaryOperator -> . NOT
    (126) PrimaryExpression -> . QualifiedName
    (127) PrimaryExpression -> . NotJustName
    (175) RealPostfixExpression -> . PostfixExpression OP_INC
    (176) RealPostfixExpression -> . PostfixExpression OP_DEC
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (128) NotJustName -> . SpecialName
    (129) NotJustName -> . NewAllocationExpression
    (130) NotJustName -> . ComplexPrimary
    (151) SpecialName -> . THIS
    (152) SpecialName -> . SUPER
    (153) SpecialName -> . NULL
    (156) NewAllocationExpression -> . PlainNewAllocationExpression
    (157) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (131) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (132) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (158) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (159) PlainNewAllocationExpression -> . ClassAllocationExpression
    (160) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (161) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (162) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (133) ComplexPrimaryNoParenthesis -> . INT_CONST
    (134) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (135) ComplexPrimaryNoParenthesis -> . STRING
    (136) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (137) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (138) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (139) ComplexPrimaryNoParenthesis -> . FieldAccess
    (140) ComplexPrimaryNoParenthesis -> . MethodCall
    (165) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (166) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (167) ArrayAllocationExpression -> . NEW TypeName Dims
    (163) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (164) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (141) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (142) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (143) FieldAccess -> . NotJustName DOT IDENTIFIER
    (144) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (145) FieldAccess -> . QualifiedName DOT THIS
    (146) FieldAccess -> . QualifiedName DOT CLASS
    (147) FieldAccess -> . PrimitiveType DOT CLASS
    (148) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (149) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (150) MethodAccess -> . QualifiedName

    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 124
    PLUS            shift and go to state 87
    MINUS           shift and go to state 86
    ~               shift and go to state 140
    NOT             shift and go to state 117
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 89
    SUPER           shift and go to state 156
    NULL            shift and go to state 143
    LROUNPAREN      shift and go to state 92
    INT_CONST       shift and go to state 106
    FLOAT_CONST     shift and go to state 83
    STRING          shift and go to state 149
    CHAR_CONST      shift and go to state 139
    BOOLEAN_CONST   shift and go to state 155
    NEW             shift and go to state 125
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 119
    CastExpression                 shift and go to state 142
    PrimitiveType                  shift and go to state 183
    RealPostfixExpression          shift and go to state 95
    ArithmeticUnaryOperator        shift and go to state 96
    ArrayAccess                    shift and go to state 108
    ClassAllocationExpression      shift and go to state 120
    LogicalUnaryOperator           shift and go to state 145
    ComplexPrimaryNoParenthesis    shift and go to state 99
    MultiplicativeExpression       shift and go to state 100
    MethodCall                     shift and go to state 101
    ShiftExpression                shift and go to state 279
    NewAllocationExpression        shift and go to state 133
    NotJustName                    shift and go to state 150
    QualifiedName                  shift and go to state 185
    LogicalUnaryExpression         shift and go to state 152
    AdditiveExpression             shift and go to state 135
    ArrayAllocationExpression      shift and go to state 110
    UnaryExpression                shift and go to state 191
    PrimaryExpression              shift and go to state 127
    FieldAccess                    shift and go to state 154
    PlainNewAllocationExpression   shift and go to state 115
    MethodAccess                   shift and go to state 111
    SpecialName                    shift and go to state 118

state 210

    (142) ArrayAccess -> ComplexPrimary LSQPAREN . Expression RSQPAREN
    (230) Expression -> . AssignmentExpression
    (224) AssignmentExpression -> . ConditionalExpression
    (225) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (220) ConditionalExpression -> . ConditionalOrExpression
    (221) ConditionalExpression -> . ConditionalOrExpression Mark_quad Ques Mark_quad Expression Mark_quad Cln Mark_quad ConditionalExpression Mark_quad
    (177) UnaryExpression -> . OP_INC UnaryExpression
    (178) UnaryExpression -> . OP_DEC UnaryExpression
    (179) UnaryExpression -> . LogicalUnaryExpression
    (180) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) ConditionalOrExpression -> . ConditionalAndExpression
    (219) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (181) LogicalUnaryExpression -> . PostfixExpression
    (182) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (185) ArithmeticUnaryOperator -> . PLUS
    (186) ArithmeticUnaryOperator -> . MINUS
    (216) ConditionalAndExpression -> . InclusiveOrExpression
    (217) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (173) PostfixExpression -> . PrimaryExpression
    (174) PostfixExpression -> . RealPostfixExpression
    (183) LogicalUnaryOperator -> . ~
    (184) LogicalUnaryOperator -> . NOT
    (214) InclusiveOrExpression -> . ExclusiveOrExpression
    (215) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (126) PrimaryExpression -> . QualifiedName
    (127) PrimaryExpression -> . NotJustName
    (175) RealPostfixExpression -> . PostfixExpression OP_INC
    (176) RealPostfixExpression -> . PostfixExpression OP_DEC
    (212) ExclusiveOrExpression -> . AndExpression
    (213) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (128) NotJustName -> . SpecialName
    (129) NotJustName -> . NewAllocationExpression
    (130) NotJustName -> . ComplexPrimary
    (210) AndExpression -> . EqualityExpression
    (211) AndExpression -> . AndExpression & EqualityExpression
    (151) SpecialName -> . THIS
    (152) SpecialName -> . SUPER
    (153) SpecialName -> . NULL
    (156) NewAllocationExpression -> . PlainNewAllocationExpression
    (157) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (131) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (132) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (207) EqualityExpression -> . RelationalExpression
    (208) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (209) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (158) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (159) PlainNewAllocationExpression -> . ClassAllocationExpression
    (160) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (161) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (162) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (133) ComplexPrimaryNoParenthesis -> . INT_CONST
    (134) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (135) ComplexPrimaryNoParenthesis -> . STRING
    (136) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (137) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (138) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (139) ComplexPrimaryNoParenthesis -> . FieldAccess
    (140) ComplexPrimaryNoParenthesis -> . MethodCall
    (202) RelationalExpression -> . ShiftExpression
    (203) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (204) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (205) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (206) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (165) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (166) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (167) ArrayAllocationExpression -> . NEW TypeName Dims
    (163) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (164) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (141) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (142) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (143) FieldAccess -> . NotJustName DOT IDENTIFIER
    (144) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (145) FieldAccess -> . QualifiedName DOT THIS
    (146) FieldAccess -> . QualifiedName DOT CLASS
    (147) FieldAccess -> . PrimitiveType DOT CLASS
    (148) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (149) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (198) ShiftExpression -> . AdditiveExpression
    (199) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (200) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (201) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (150) MethodAccess -> . QualifiedName
    (195) AdditiveExpression -> . MultiplicativeExpression
    (196) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (197) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (191) MultiplicativeExpression -> . CastExpression
    (192) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (193) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (194) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (187) CastExpression -> . UnaryExpression

    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 124
    PLUS            shift and go to state 87
    MINUS           shift and go to state 86
    ~               shift and go to state 140
    NOT             shift and go to state 117
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 89
    SUPER           shift and go to state 156
    NULL            shift and go to state 143
    LROUNPAREN      shift and go to state 92
    INT_CONST       shift and go to state 106
    FLOAT_CONST     shift and go to state 83
    STRING          shift and go to state 149
    CHAR_CONST      shift and go to state 139
    BOOLEAN_CONST   shift and go to state 155
    NEW             shift and go to state 125
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43

    ComplexPrimary                 shift and go to state 119
    PostfixExpression              shift and go to state 112
    PrimaryExpression              shift and go to state 127
    PrimitiveType                  shift and go to state 183
    RealPostfixExpression          shift and go to state 95
    ArithmeticUnaryOperator        shift and go to state 96
    AndExpression                  shift and go to state 85
    ArrayAccess                    shift and go to state 108
    CastExpression                 shift and go to state 142
    EqualityExpression             shift and go to state 97
    LogicalUnaryOperator           shift and go to state 145
    ComplexPrimaryNoParenthesis    shift and go to state 99
    MultiplicativeExpression       shift and go to state 100
    ClassAllocationExpression      shift and go to state 120
    MethodCall                     shift and go to state 101
    ConditionalOrExpression        shift and go to state 131
    ShiftExpression                shift and go to state 147
    AssignmentExpression           shift and go to state 103
    NewAllocationExpression        shift and go to state 133
    NotJustName                    shift and go to state 150
    QualifiedName                  shift and go to state 185
    LogicalUnaryExpression         shift and go to state 152
    Expression                     shift and go to state 280
    AdditiveExpression             shift and go to state 135
    ArrayAllocationExpression      shift and go to state 110
    ConditionalExpression          shift and go to state 136
    UnaryExpression                shift and go to state 137
    InclusiveOrExpression          shift and go to state 138
    MethodAccess                   shift and go to state 111
    ExclusiveOrExpression          shift and go to state 113
    ConditionalAndExpression       shift and go to state 90
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    FieldAccess                    shift and go to state 154
    SpecialName                    shift and go to state 118

state 211

    (161) PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN . RCURPAREN
    (162) PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN . FieldDeclarations RCURPAREN
    (45) FieldDeclarations -> . FieldDeclarationOptSemi
    (46) FieldDeclarations -> . FieldDeclarations FieldDeclarationOptSemi
    (47) FieldDeclarationOptSemi -> . FieldDeclaration
    (48) FieldDeclarationOptSemi -> . FieldDeclaration SemiColons
    (49) FieldDeclaration -> . FieldVariableDeclaration SEMICOLON
    (50) FieldDeclaration -> . MethodDeclaration
    (51) FieldDeclaration -> . ConstructorDeclaration
    (52) FieldDeclaration -> . StaticInitializer
    (53) FieldDeclaration -> . NonStaticInitializer
    (54) FieldDeclaration -> . TypeDeclaration
    (55) FieldVariableDeclaration -> . Modifiers TypeSpecifier VariableDeclarators
    (56) FieldVariableDeclaration -> . TypeSpecifier VariableDeclarators
    (62) MethodDeclaration -> . Modifiers TypeSpecifier MethodDeclarator MethodBody
    (63) MethodDeclaration -> . TypeSpecifier MethodDeclarator MethodBody
    (74) ConstructorDeclaration -> . Modifiers ConstructorDeclarator Block
    (75) ConstructorDeclaration -> . ConstructorDeclarator Block
    (78) StaticInitializer -> . STATIC Block
    (79) NonStaticInitializer -> . Block
    (35) TypeDeclaration -> . ClassHeader LCURPAREN FieldDeclarations RCURPAREN
    (36) TypeDeclaration -> . ClassHeader LCURPAREN RCURPAREN
    (39) Modifiers -> . Modifier
    (40) Modifiers -> . Modifiers Modifier
    (3) TypeSpecifier -> . TypeName
    (4) TypeSpecifier -> . TypeName Dims
    (76) ConstructorDeclarator -> . IDENTIFIER LROUNPAREN ParameterList RROUNPAREN
    (77) ConstructorDeclarator -> . IDENTIFIER LROUNPAREN RROUNPAREN
    (80) Block -> . Bl LocalVariableDeclarationsAndStatements Br
    (81) Block -> . Bl Br
    (37) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (38) ClassHeader -> . ClassWord IDENTIFIER
    (41) Modifier -> . PUBLIC
    (42) Modifier -> . PRIVATE
    (43) Modifier -> . STATIC
    (5) TypeName -> . PrimitiveType
    (6) TypeName -> . QualifiedName
    (82) Bl -> . LCURPAREN
    (44) ClassWord -> . CLASS
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER

    RCURPAREN       shift and go to state 281
    STATIC          shift and go to state 48
    IDENTIFIER      shift and go to state 55
    PUBLIC          shift and go to state 18
    PRIVATE         shift and go to state 4
    LCURPAREN       shift and go to state 58
    CLASS           shift and go to state 6
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43

    FieldVariableDeclaration       shift and go to state 42
    TypeDeclaration                shift and go to state 44
    PrimitiveType                  shift and go to state 45
    StaticInitializer              shift and go to state 46
    NonStaticInitializer           shift and go to state 50
    TypeSpecifier                  shift and go to state 51
    QualifiedName                  shift and go to state 52
    Bl                             shift and go to state 53
    TypeName                       shift and go to state 54
    MethodDeclaration              shift and go to state 56
    Modifiers                      shift and go to state 47
    ConstructorDeclaration         shift and go to state 41
    FieldDeclarations              shift and go to state 282
    Modifier                       shift and go to state 12
    Block                          shift and go to state 61
    ClassWord                      shift and go to state 14
    FieldDeclarationOptSemi        shift and go to state 62
    ConstructorDeclarator          shift and go to state 63
    ClassHeader                    shift and go to state 17
    FieldDeclaration               shift and go to state 69

state 212

    (100) LabelStatement -> DEFAULT COLON .

    ELSE            reduce using rule 100 (LabelStatement -> DEFAULT COLON .)
    RCURPAREN       reduce using rule 100 (LabelStatement -> DEFAULT COLON .)
    SEMICOLON       reduce using rule 100 (LabelStatement -> DEFAULT COLON .)
    IDENTIFIER      reduce using rule 100 (LabelStatement -> DEFAULT COLON .)
    CASE            reduce using rule 100 (LabelStatement -> DEFAULT COLON .)
    DEFAULT         reduce using rule 100 (LabelStatement -> DEFAULT COLON .)
    BREAK           reduce using rule 100 (LabelStatement -> DEFAULT COLON .)
    RETURN          reduce using rule 100 (LabelStatement -> DEFAULT COLON .)
    WHILE           reduce using rule 100 (LabelStatement -> DEFAULT COLON .)
    LCURPAREN       reduce using rule 100 (LabelStatement -> DEFAULT COLON .)
    DO              reduce using rule 100 (LabelStatement -> DEFAULT COLON .)
    FOR             reduce using rule 100 (LabelStatement -> DEFAULT COLON .)
    IF              reduce using rule 100 (LabelStatement -> DEFAULT COLON .)
    BOOLEAN         reduce using rule 100 (LabelStatement -> DEFAULT COLON .)
    CHAR            reduce using rule 100 (LabelStatement -> DEFAULT COLON .)
    BYTE            reduce using rule 100 (LabelStatement -> DEFAULT COLON .)
    SHORT           reduce using rule 100 (LabelStatement -> DEFAULT COLON .)
    INT             reduce using rule 100 (LabelStatement -> DEFAULT COLON .)
    LONG            reduce using rule 100 (LabelStatement -> DEFAULT COLON .)
    FLOAT           reduce using rule 100 (LabelStatement -> DEFAULT COLON .)
    DOUBLE          reduce using rule 100 (LabelStatement -> DEFAULT COLON .)
    VOID            reduce using rule 100 (LabelStatement -> DEFAULT COLON .)
    OP_INC          reduce using rule 100 (LabelStatement -> DEFAULT COLON .)
    OP_DEC          reduce using rule 100 (LabelStatement -> DEFAULT COLON .)
    PLUS            reduce using rule 100 (LabelStatement -> DEFAULT COLON .)
    MINUS           reduce using rule 100 (LabelStatement -> DEFAULT COLON .)
    ~               reduce using rule 100 (LabelStatement -> DEFAULT COLON .)
    NOT             reduce using rule 100 (LabelStatement -> DEFAULT COLON .)
    THIS            reduce using rule 100 (LabelStatement -> DEFAULT COLON .)
    SUPER           reduce using rule 100 (LabelStatement -> DEFAULT COLON .)
    NULL            reduce using rule 100 (LabelStatement -> DEFAULT COLON .)
    LROUNPAREN      reduce using rule 100 (LabelStatement -> DEFAULT COLON .)
    INT_CONST       reduce using rule 100 (LabelStatement -> DEFAULT COLON .)
    FLOAT_CONST     reduce using rule 100 (LabelStatement -> DEFAULT COLON .)
    STRING          reduce using rule 100 (LabelStatement -> DEFAULT COLON .)
    CHAR_CONST      reduce using rule 100 (LabelStatement -> DEFAULT COLON .)
    BOOLEAN_CONST   reduce using rule 100 (LabelStatement -> DEFAULT COLON .)
    NEW             reduce using rule 100 (LabelStatement -> DEFAULT COLON .)


state 213

    (92) Statement -> JumpStatement Mark_quad .

    WHILE           reduce using rule 92 (Statement -> JumpStatement Mark_quad .)
    RCURPAREN       reduce using rule 92 (Statement -> JumpStatement Mark_quad .)
    SEMICOLON       reduce using rule 92 (Statement -> JumpStatement Mark_quad .)
    IDENTIFIER      reduce using rule 92 (Statement -> JumpStatement Mark_quad .)
    CASE            reduce using rule 92 (Statement -> JumpStatement Mark_quad .)
    DEFAULT         reduce using rule 92 (Statement -> JumpStatement Mark_quad .)
    BREAK           reduce using rule 92 (Statement -> JumpStatement Mark_quad .)
    RETURN          reduce using rule 92 (Statement -> JumpStatement Mark_quad .)
    LCURPAREN       reduce using rule 92 (Statement -> JumpStatement Mark_quad .)
    DO              reduce using rule 92 (Statement -> JumpStatement Mark_quad .)
    FOR             reduce using rule 92 (Statement -> JumpStatement Mark_quad .)
    IF              reduce using rule 92 (Statement -> JumpStatement Mark_quad .)
    BOOLEAN         reduce using rule 92 (Statement -> JumpStatement Mark_quad .)
    CHAR            reduce using rule 92 (Statement -> JumpStatement Mark_quad .)
    BYTE            reduce using rule 92 (Statement -> JumpStatement Mark_quad .)
    SHORT           reduce using rule 92 (Statement -> JumpStatement Mark_quad .)
    INT             reduce using rule 92 (Statement -> JumpStatement Mark_quad .)
    LONG            reduce using rule 92 (Statement -> JumpStatement Mark_quad .)
    FLOAT           reduce using rule 92 (Statement -> JumpStatement Mark_quad .)
    DOUBLE          reduce using rule 92 (Statement -> JumpStatement Mark_quad .)
    VOID            reduce using rule 92 (Statement -> JumpStatement Mark_quad .)
    OP_INC          reduce using rule 92 (Statement -> JumpStatement Mark_quad .)
    OP_DEC          reduce using rule 92 (Statement -> JumpStatement Mark_quad .)
    PLUS            reduce using rule 92 (Statement -> JumpStatement Mark_quad .)
    MINUS           reduce using rule 92 (Statement -> JumpStatement Mark_quad .)
    ~               reduce using rule 92 (Statement -> JumpStatement Mark_quad .)
    NOT             reduce using rule 92 (Statement -> JumpStatement Mark_quad .)
    THIS            reduce using rule 92 (Statement -> JumpStatement Mark_quad .)
    SUPER           reduce using rule 92 (Statement -> JumpStatement Mark_quad .)
    NULL            reduce using rule 92 (Statement -> JumpStatement Mark_quad .)
    LROUNPAREN      reduce using rule 92 (Statement -> JumpStatement Mark_quad .)
    INT_CONST       reduce using rule 92 (Statement -> JumpStatement Mark_quad .)
    FLOAT_CONST     reduce using rule 92 (Statement -> JumpStatement Mark_quad .)
    STRING          reduce using rule 92 (Statement -> JumpStatement Mark_quad .)
    CHAR_CONST      reduce using rule 92 (Statement -> JumpStatement Mark_quad .)
    BOOLEAN_CONST   reduce using rule 92 (Statement -> JumpStatement Mark_quad .)
    NEW             reduce using rule 92 (Statement -> JumpStatement Mark_quad .)
    ELSE            reduce using rule 92 (Statement -> JumpStatement Mark_quad .)


state 214

    (107) IterationStatement -> WHILE Mark_quad . LROUNPAREN Expression RROUNPAREN Mark_while Statement

    LROUNPAREN      shift and go to state 283


state 215

    (178) UnaryExpression -> OP_DEC UnaryExpression .

    EQUAL           reduce using rule 178 (UnaryExpression -> OP_DEC UnaryExpression .)
    ASS_MUL         reduce using rule 178 (UnaryExpression -> OP_DEC UnaryExpression .)
    ASS_ADD         reduce using rule 178 (UnaryExpression -> OP_DEC UnaryExpression .)
    ASS_SUB         reduce using rule 178 (UnaryExpression -> OP_DEC UnaryExpression .)
    MULT            reduce using rule 178 (UnaryExpression -> OP_DEC UnaryExpression .)
    DIV             reduce using rule 178 (UnaryExpression -> OP_DEC UnaryExpression .)
    MOD             reduce using rule 178 (UnaryExpression -> OP_DEC UnaryExpression .)
    PLUS            reduce using rule 178 (UnaryExpression -> OP_DEC UnaryExpression .)
    MINUS           reduce using rule 178 (UnaryExpression -> OP_DEC UnaryExpression .)
    OP_SHL          reduce using rule 178 (UnaryExpression -> OP_DEC UnaryExpression .)
    OP_SHR          reduce using rule 178 (UnaryExpression -> OP_DEC UnaryExpression .)
    OP_SHRR         reduce using rule 178 (UnaryExpression -> OP_DEC UnaryExpression .)
    LESS            reduce using rule 178 (UnaryExpression -> OP_DEC UnaryExpression .)
    MORE            reduce using rule 178 (UnaryExpression -> OP_DEC UnaryExpression .)
    OP_LE           reduce using rule 178 (UnaryExpression -> OP_DEC UnaryExpression .)
    OP_GE           reduce using rule 178 (UnaryExpression -> OP_DEC UnaryExpression .)
    OP_EQ           reduce using rule 178 (UnaryExpression -> OP_DEC UnaryExpression .)
    OP_NE           reduce using rule 178 (UnaryExpression -> OP_DEC UnaryExpression .)
    &               reduce using rule 178 (UnaryExpression -> OP_DEC UnaryExpression .)
    ^               reduce using rule 178 (UnaryExpression -> OP_DEC UnaryExpression .)
    |               reduce using rule 178 (UnaryExpression -> OP_DEC UnaryExpression .)
    OP_LAND         reduce using rule 178 (UnaryExpression -> OP_DEC UnaryExpression .)
    OP_LOR          reduce using rule 178 (UnaryExpression -> OP_DEC UnaryExpression .)
    QUES            reduce using rule 178 (UnaryExpression -> OP_DEC UnaryExpression .)
    RSQPAREN        reduce using rule 178 (UnaryExpression -> OP_DEC UnaryExpression .)
    RROUNPAREN      reduce using rule 178 (UnaryExpression -> OP_DEC UnaryExpression .)
    COMMA           reduce using rule 178 (UnaryExpression -> OP_DEC UnaryExpression .)
    SEMICOLON       reduce using rule 178 (UnaryExpression -> OP_DEC UnaryExpression .)
    COLON           reduce using rule 178 (UnaryExpression -> OP_DEC UnaryExpression .)


state 216

    (165) ArrayAllocationExpression -> NEW TypeName . DimExprs Dims
    (166) ArrayAllocationExpression -> NEW TypeName . DimExprs
    (167) ArrayAllocationExpression -> NEW TypeName . Dims
    (163) ClassAllocationExpression -> NEW TypeName . LROUNPAREN ArgumentList RROUNPAREN
    (164) ClassAllocationExpression -> NEW TypeName . LROUNPAREN RROUNPAREN
    (168) DimExprs -> . DimExpr
    (169) DimExprs -> . DimExprs DimExpr
    (171) Dims -> . OP_DIM
    (172) Dims -> . Dims OP_DIM
    (170) DimExpr -> . LSQPAREN Expression RSQPAREN
    (2) OP_DIM -> . LSQPAREN RSQPAREN

    LROUNPAREN      shift and go to state 288
    LSQPAREN        shift and go to state 285

    Dims                           shift and go to state 286
    DimExpr                        shift and go to state 287
    DimExprs                       shift and go to state 284
    OP_DIM                         shift and go to state 160

state 217

    (88) LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators . SEMICOLON
    (58) VariableDeclarators -> VariableDeclarators . COMMA VariableDeclarator

    SEMICOLON       shift and go to state 289
    COMMA           shift and go to state 171


state 218

    (59) VariableDeclarator -> DeclaratorName .
    (60) VariableDeclarator -> DeclaratorName . EQUAL VariableInitializer
    (70) DeclaratorName -> DeclaratorName . OP_DIM
    (2) OP_DIM -> . LSQPAREN RSQPAREN

    SEMICOLON       reduce using rule 59 (VariableDeclarator -> DeclaratorName .)
    COMMA           reduce using rule 59 (VariableDeclarator -> DeclaratorName .)
    EQUAL           shift and go to state 172
    LSQPAREN        shift and go to state 159

    OP_DIM                         shift and go to state 173

state 219

    (99) LabelStatement -> CASE ConstantExpression . COLON

    COLON           shift and go to state 290


state 220

    (231) ConstantExpression -> ConditionalExpression .

    COLON           reduce using rule 231 (ConstantExpression -> ConditionalExpression .)


state 221

    (112) IterationStatement -> Fr LROUNPAREN . ForInit ForExpr Mark_for ForIncr RROUNPAREN Mark_quad Statement
    (115) ForInit -> . ExpressionStatements SEMICOLON
    (116) ForInit -> . LocalVariableDeclarationStatement
    (117) ForInit -> . SEMICOLON
    (121) ExpressionStatements -> . ExpressionStatement
    (122) ExpressionStatements -> . ExpressionStatements COMMA ExpressionStatement
    (88) LocalVariableDeclarationStatement -> . TypeSpecifier VariableDeclarators SEMICOLON
    (101) ExpressionStatement -> . Expression
    (3) TypeSpecifier -> . TypeName
    (4) TypeSpecifier -> . TypeName Dims
    (230) Expression -> . AssignmentExpression
    (5) TypeName -> . PrimitiveType
    (6) TypeName -> . QualifiedName
    (224) AssignmentExpression -> . ConditionalExpression
    (225) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (220) ConditionalExpression -> . ConditionalOrExpression
    (221) ConditionalExpression -> . ConditionalOrExpression Mark_quad Ques Mark_quad Expression Mark_quad Cln Mark_quad ConditionalExpression Mark_quad
    (177) UnaryExpression -> . OP_INC UnaryExpression
    (178) UnaryExpression -> . OP_DEC UnaryExpression
    (179) UnaryExpression -> . LogicalUnaryExpression
    (180) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) ConditionalOrExpression -> . ConditionalAndExpression
    (219) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (181) LogicalUnaryExpression -> . PostfixExpression
    (182) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (185) ArithmeticUnaryOperator -> . PLUS
    (186) ArithmeticUnaryOperator -> . MINUS
    (216) ConditionalAndExpression -> . InclusiveOrExpression
    (217) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (173) PostfixExpression -> . PrimaryExpression
    (174) PostfixExpression -> . RealPostfixExpression
    (183) LogicalUnaryOperator -> . ~
    (184) LogicalUnaryOperator -> . NOT
    (214) InclusiveOrExpression -> . ExclusiveOrExpression
    (215) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (126) PrimaryExpression -> . QualifiedName
    (127) PrimaryExpression -> . NotJustName
    (175) RealPostfixExpression -> . PostfixExpression OP_INC
    (176) RealPostfixExpression -> . PostfixExpression OP_DEC
    (212) ExclusiveOrExpression -> . AndExpression
    (213) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (128) NotJustName -> . SpecialName
    (129) NotJustName -> . NewAllocationExpression
    (130) NotJustName -> . ComplexPrimary
    (210) AndExpression -> . EqualityExpression
    (211) AndExpression -> . AndExpression & EqualityExpression
    (151) SpecialName -> . THIS
    (152) SpecialName -> . SUPER
    (153) SpecialName -> . NULL
    (156) NewAllocationExpression -> . PlainNewAllocationExpression
    (157) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (131) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (132) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (207) EqualityExpression -> . RelationalExpression
    (208) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (209) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (158) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (159) PlainNewAllocationExpression -> . ClassAllocationExpression
    (160) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (161) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (162) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (133) ComplexPrimaryNoParenthesis -> . INT_CONST
    (134) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (135) ComplexPrimaryNoParenthesis -> . STRING
    (136) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (137) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (138) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (139) ComplexPrimaryNoParenthesis -> . FieldAccess
    (140) ComplexPrimaryNoParenthesis -> . MethodCall
    (202) RelationalExpression -> . ShiftExpression
    (203) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (204) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (205) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (206) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (165) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (166) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (167) ArrayAllocationExpression -> . NEW TypeName Dims
    (163) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (164) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (141) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (142) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (143) FieldAccess -> . NotJustName DOT IDENTIFIER
    (144) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (145) FieldAccess -> . QualifiedName DOT THIS
    (146) FieldAccess -> . QualifiedName DOT CLASS
    (147) FieldAccess -> . PrimitiveType DOT CLASS
    (148) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (149) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (198) ShiftExpression -> . AdditiveExpression
    (199) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (200) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (201) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (150) MethodAccess -> . QualifiedName
    (195) AdditiveExpression -> . MultiplicativeExpression
    (196) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (197) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (191) MultiplicativeExpression -> . CastExpression
    (192) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (193) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (194) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (187) CastExpression -> . UnaryExpression

    SEMICOLON       shift and go to state 293
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43
    IDENTIFIER      shift and go to state 22
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 124
    PLUS            shift and go to state 87
    MINUS           shift and go to state 86
    ~               shift and go to state 140
    NOT             shift and go to state 117
    THIS            shift and go to state 89
    SUPER           shift and go to state 156
    NULL            shift and go to state 143
    LROUNPAREN      shift and go to state 92
    INT_CONST       shift and go to state 106
    FLOAT_CONST     shift and go to state 83
    STRING          shift and go to state 149
    CHAR_CONST      shift and go to state 139
    BOOLEAN_CONST   shift and go to state 155
    NEW             shift and go to state 125

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 119
    ArithmeticUnaryOperator        shift and go to state 96
    MethodAccess                   shift and go to state 111
    ExclusiveOrExpression          shift and go to state 113
    ExpressionStatement            shift and go to state 291
    PrimitiveType                  shift and go to state 82
    RealPostfixExpression          shift and go to state 95
    AndExpression                  shift and go to state 85
    MultiplicativeExpression       shift and go to state 100
    TypeSpecifier                  shift and go to state 126
    CastExpression                 shift and go to state 142
    EqualityExpression             shift and go to state 97
    ComplexPrimaryNoParenthesis    shift and go to state 99
    TypeName                       shift and go to state 54
    ArrayAccess                    shift and go to state 108
    ClassAllocationExpression      shift and go to state 120
    LogicalUnaryOperator           shift and go to state 145
    ConditionalOrExpression        shift and go to state 131
    LocalVariableDeclarationStatement shift and go to state 295
    ShiftExpression                shift and go to state 147
    AssignmentExpression           shift and go to state 103
    NotJustName                    shift and go to state 150
    NewAllocationExpression        shift and go to state 133
    QualifiedName                  shift and go to state 151
    MethodCall                     shift and go to state 101
    LogicalUnaryExpression         shift and go to state 152
    UnaryExpression                shift and go to state 137
    Expression                     shift and go to state 134
    AdditiveExpression             shift and go to state 135
    ArrayAllocationExpression      shift and go to state 110
    ConditionalExpression          shift and go to state 136
    ForInit                        shift and go to state 292
    InclusiveOrExpression          shift and go to state 138
    PrimaryExpression              shift and go to state 127
    ExpressionStatements           shift and go to state 294
    ConditionalAndExpression       shift and go to state 90
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    FieldAccess                    shift and go to state 154
    SpecialName                    shift and go to state 118

state 222

    (219) ConditionalOrExpression -> ConditionalOrExpression OP_LOR . ConditionalAndExpression
    (216) ConditionalAndExpression -> . InclusiveOrExpression
    (217) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (214) InclusiveOrExpression -> . ExclusiveOrExpression
    (215) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (212) ExclusiveOrExpression -> . AndExpression
    (213) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (210) AndExpression -> . EqualityExpression
    (211) AndExpression -> . AndExpression & EqualityExpression
    (207) EqualityExpression -> . RelationalExpression
    (208) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (209) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (202) RelationalExpression -> . ShiftExpression
    (203) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (204) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (205) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (206) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (198) ShiftExpression -> . AdditiveExpression
    (199) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (200) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (201) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (195) AdditiveExpression -> . MultiplicativeExpression
    (196) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (197) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (191) MultiplicativeExpression -> . CastExpression
    (192) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (193) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (194) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (187) CastExpression -> . UnaryExpression
    (177) UnaryExpression -> . OP_INC UnaryExpression
    (178) UnaryExpression -> . OP_DEC UnaryExpression
    (179) UnaryExpression -> . LogicalUnaryExpression
    (180) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (181) LogicalUnaryExpression -> . PostfixExpression
    (182) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (185) ArithmeticUnaryOperator -> . PLUS
    (186) ArithmeticUnaryOperator -> . MINUS
    (173) PostfixExpression -> . PrimaryExpression
    (174) PostfixExpression -> . RealPostfixExpression
    (183) LogicalUnaryOperator -> . ~
    (184) LogicalUnaryOperator -> . NOT
    (126) PrimaryExpression -> . QualifiedName
    (127) PrimaryExpression -> . NotJustName
    (175) RealPostfixExpression -> . PostfixExpression OP_INC
    (176) RealPostfixExpression -> . PostfixExpression OP_DEC
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (128) NotJustName -> . SpecialName
    (129) NotJustName -> . NewAllocationExpression
    (130) NotJustName -> . ComplexPrimary
    (151) SpecialName -> . THIS
    (152) SpecialName -> . SUPER
    (153) SpecialName -> . NULL
    (156) NewAllocationExpression -> . PlainNewAllocationExpression
    (157) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (131) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (132) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (158) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (159) PlainNewAllocationExpression -> . ClassAllocationExpression
    (160) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (161) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (162) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (133) ComplexPrimaryNoParenthesis -> . INT_CONST
    (134) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (135) ComplexPrimaryNoParenthesis -> . STRING
    (136) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (137) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (138) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (139) ComplexPrimaryNoParenthesis -> . FieldAccess
    (140) ComplexPrimaryNoParenthesis -> . MethodCall
    (165) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (166) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (167) ArrayAllocationExpression -> . NEW TypeName Dims
    (163) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (164) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (141) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (142) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (143) FieldAccess -> . NotJustName DOT IDENTIFIER
    (144) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (145) FieldAccess -> . QualifiedName DOT THIS
    (146) FieldAccess -> . QualifiedName DOT CLASS
    (147) FieldAccess -> . PrimitiveType DOT CLASS
    (148) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (149) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (150) MethodAccess -> . QualifiedName

    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 124
    PLUS            shift and go to state 87
    MINUS           shift and go to state 86
    ~               shift and go to state 140
    NOT             shift and go to state 117
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 89
    SUPER           shift and go to state 156
    NULL            shift and go to state 143
    LROUNPAREN      shift and go to state 92
    INT_CONST       shift and go to state 106
    FLOAT_CONST     shift and go to state 83
    STRING          shift and go to state 149
    CHAR_CONST      shift and go to state 139
    BOOLEAN_CONST   shift and go to state 155
    NEW             shift and go to state 125
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 119
    CastExpression                 shift and go to state 142
    PrimitiveType                  shift and go to state 183
    RealPostfixExpression          shift and go to state 95
    ArithmeticUnaryOperator        shift and go to state 96
    AndExpression                  shift and go to state 85
    ArrayAccess                    shift and go to state 108
    PrimaryExpression              shift and go to state 127
    EqualityExpression             shift and go to state 97
    LogicalUnaryOperator           shift and go to state 145
    ComplexPrimaryNoParenthesis    shift and go to state 99
    MultiplicativeExpression       shift and go to state 100
    ClassAllocationExpression      shift and go to state 120
    MethodCall                     shift and go to state 101
    ShiftExpression                shift and go to state 147
    NewAllocationExpression        shift and go to state 133
    NotJustName                    shift and go to state 150
    QualifiedName                  shift and go to state 185
    LogicalUnaryExpression         shift and go to state 152
    AdditiveExpression             shift and go to state 135
    ArrayAllocationExpression      shift and go to state 110
    UnaryExpression                shift and go to state 191
    InclusiveOrExpression          shift and go to state 138
    FieldAccess                    shift and go to state 154
    ExclusiveOrExpression          shift and go to state 113
    ConditionalAndExpression       shift and go to state 296
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    MethodAccess                   shift and go to state 111
    SpecialName                    shift and go to state 118

state 223

    (221) ConditionalExpression -> ConditionalOrExpression Mark_quad . Ques Mark_quad Expression Mark_quad Cln Mark_quad ConditionalExpression Mark_quad
    (222) Ques -> . QUES

    QUES            shift and go to state 297

    Ques                           shift and go to state 298

state 224

    (98) LabelStatement -> IDENTIFIER COLON .

    ELSE            reduce using rule 98 (LabelStatement -> IDENTIFIER COLON .)
    RCURPAREN       reduce using rule 98 (LabelStatement -> IDENTIFIER COLON .)
    SEMICOLON       reduce using rule 98 (LabelStatement -> IDENTIFIER COLON .)
    IDENTIFIER      reduce using rule 98 (LabelStatement -> IDENTIFIER COLON .)
    CASE            reduce using rule 98 (LabelStatement -> IDENTIFIER COLON .)
    DEFAULT         reduce using rule 98 (LabelStatement -> IDENTIFIER COLON .)
    BREAK           reduce using rule 98 (LabelStatement -> IDENTIFIER COLON .)
    RETURN          reduce using rule 98 (LabelStatement -> IDENTIFIER COLON .)
    WHILE           reduce using rule 98 (LabelStatement -> IDENTIFIER COLON .)
    LCURPAREN       reduce using rule 98 (LabelStatement -> IDENTIFIER COLON .)
    DO              reduce using rule 98 (LabelStatement -> IDENTIFIER COLON .)
    FOR             reduce using rule 98 (LabelStatement -> IDENTIFIER COLON .)
    IF              reduce using rule 98 (LabelStatement -> IDENTIFIER COLON .)
    BOOLEAN         reduce using rule 98 (LabelStatement -> IDENTIFIER COLON .)
    CHAR            reduce using rule 98 (LabelStatement -> IDENTIFIER COLON .)
    BYTE            reduce using rule 98 (LabelStatement -> IDENTIFIER COLON .)
    SHORT           reduce using rule 98 (LabelStatement -> IDENTIFIER COLON .)
    INT             reduce using rule 98 (LabelStatement -> IDENTIFIER COLON .)
    LONG            reduce using rule 98 (LabelStatement -> IDENTIFIER COLON .)
    FLOAT           reduce using rule 98 (LabelStatement -> IDENTIFIER COLON .)
    DOUBLE          reduce using rule 98 (LabelStatement -> IDENTIFIER COLON .)
    VOID            reduce using rule 98 (LabelStatement -> IDENTIFIER COLON .)
    OP_INC          reduce using rule 98 (LabelStatement -> IDENTIFIER COLON .)
    OP_DEC          reduce using rule 98 (LabelStatement -> IDENTIFIER COLON .)
    PLUS            reduce using rule 98 (LabelStatement -> IDENTIFIER COLON .)
    MINUS           reduce using rule 98 (LabelStatement -> IDENTIFIER COLON .)
    ~               reduce using rule 98 (LabelStatement -> IDENTIFIER COLON .)
    NOT             reduce using rule 98 (LabelStatement -> IDENTIFIER COLON .)
    THIS            reduce using rule 98 (LabelStatement -> IDENTIFIER COLON .)
    SUPER           reduce using rule 98 (LabelStatement -> IDENTIFIER COLON .)
    NULL            reduce using rule 98 (LabelStatement -> IDENTIFIER COLON .)
    LROUNPAREN      reduce using rule 98 (LabelStatement -> IDENTIFIER COLON .)
    INT_CONST       reduce using rule 98 (LabelStatement -> IDENTIFIER COLON .)
    FLOAT_CONST     reduce using rule 98 (LabelStatement -> IDENTIFIER COLON .)
    STRING          reduce using rule 98 (LabelStatement -> IDENTIFIER COLON .)
    CHAR_CONST      reduce using rule 98 (LabelStatement -> IDENTIFIER COLON .)
    BOOLEAN_CONST   reduce using rule 98 (LabelStatement -> IDENTIFIER COLON .)
    NEW             reduce using rule 98 (LabelStatement -> IDENTIFIER COLON .)


state 225

    (196) AdditiveExpression -> AdditiveExpression PLUS . MultiplicativeExpression
    (191) MultiplicativeExpression -> . CastExpression
    (192) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (193) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (194) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (187) CastExpression -> . UnaryExpression
    (177) UnaryExpression -> . OP_INC UnaryExpression
    (178) UnaryExpression -> . OP_DEC UnaryExpression
    (179) UnaryExpression -> . LogicalUnaryExpression
    (180) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (181) LogicalUnaryExpression -> . PostfixExpression
    (182) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (185) ArithmeticUnaryOperator -> . PLUS
    (186) ArithmeticUnaryOperator -> . MINUS
    (173) PostfixExpression -> . PrimaryExpression
    (174) PostfixExpression -> . RealPostfixExpression
    (183) LogicalUnaryOperator -> . ~
    (184) LogicalUnaryOperator -> . NOT
    (126) PrimaryExpression -> . QualifiedName
    (127) PrimaryExpression -> . NotJustName
    (175) RealPostfixExpression -> . PostfixExpression OP_INC
    (176) RealPostfixExpression -> . PostfixExpression OP_DEC
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (128) NotJustName -> . SpecialName
    (129) NotJustName -> . NewAllocationExpression
    (130) NotJustName -> . ComplexPrimary
    (151) SpecialName -> . THIS
    (152) SpecialName -> . SUPER
    (153) SpecialName -> . NULL
    (156) NewAllocationExpression -> . PlainNewAllocationExpression
    (157) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (131) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (132) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (158) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (159) PlainNewAllocationExpression -> . ClassAllocationExpression
    (160) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (161) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (162) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (133) ComplexPrimaryNoParenthesis -> . INT_CONST
    (134) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (135) ComplexPrimaryNoParenthesis -> . STRING
    (136) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (137) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (138) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (139) ComplexPrimaryNoParenthesis -> . FieldAccess
    (140) ComplexPrimaryNoParenthesis -> . MethodCall
    (165) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (166) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (167) ArrayAllocationExpression -> . NEW TypeName Dims
    (163) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (164) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (141) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (142) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (143) FieldAccess -> . NotJustName DOT IDENTIFIER
    (144) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (145) FieldAccess -> . QualifiedName DOT THIS
    (146) FieldAccess -> . QualifiedName DOT CLASS
    (147) FieldAccess -> . PrimitiveType DOT CLASS
    (148) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (149) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (150) MethodAccess -> . QualifiedName

    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 124
    PLUS            shift and go to state 87
    MINUS           shift and go to state 86
    ~               shift and go to state 140
    NOT             shift and go to state 117
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 89
    SUPER           shift and go to state 156
    NULL            shift and go to state 143
    LROUNPAREN      shift and go to state 92
    INT_CONST       shift and go to state 106
    FLOAT_CONST     shift and go to state 83
    STRING          shift and go to state 149
    CHAR_CONST      shift and go to state 139
    BOOLEAN_CONST   shift and go to state 155
    NEW             shift and go to state 125
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 119
    CastExpression                 shift and go to state 142
    PrimitiveType                  shift and go to state 183
    RealPostfixExpression          shift and go to state 95
    ArithmeticUnaryOperator        shift and go to state 96
    ArrayAccess                    shift and go to state 108
    ClassAllocationExpression      shift and go to state 120
    LogicalUnaryOperator           shift and go to state 145
    ComplexPrimaryNoParenthesis    shift and go to state 99
    MultiplicativeExpression       shift and go to state 299
    MethodCall                     shift and go to state 101
    NewAllocationExpression        shift and go to state 133
    NotJustName                    shift and go to state 150
    QualifiedName                  shift and go to state 185
    LogicalUnaryExpression         shift and go to state 152
    ArrayAllocationExpression      shift and go to state 110
    UnaryExpression                shift and go to state 191
    PrimaryExpression              shift and go to state 127
    FieldAccess                    shift and go to state 154
    PlainNewAllocationExpression   shift and go to state 115
    MethodAccess                   shift and go to state 111
    SpecialName                    shift and go to state 118

state 226

    (197) AdditiveExpression -> AdditiveExpression MINUS . MultiplicativeExpression
    (191) MultiplicativeExpression -> . CastExpression
    (192) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (193) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (194) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (187) CastExpression -> . UnaryExpression
    (177) UnaryExpression -> . OP_INC UnaryExpression
    (178) UnaryExpression -> . OP_DEC UnaryExpression
    (179) UnaryExpression -> . LogicalUnaryExpression
    (180) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (181) LogicalUnaryExpression -> . PostfixExpression
    (182) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (185) ArithmeticUnaryOperator -> . PLUS
    (186) ArithmeticUnaryOperator -> . MINUS
    (173) PostfixExpression -> . PrimaryExpression
    (174) PostfixExpression -> . RealPostfixExpression
    (183) LogicalUnaryOperator -> . ~
    (184) LogicalUnaryOperator -> . NOT
    (126) PrimaryExpression -> . QualifiedName
    (127) PrimaryExpression -> . NotJustName
    (175) RealPostfixExpression -> . PostfixExpression OP_INC
    (176) RealPostfixExpression -> . PostfixExpression OP_DEC
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (128) NotJustName -> . SpecialName
    (129) NotJustName -> . NewAllocationExpression
    (130) NotJustName -> . ComplexPrimary
    (151) SpecialName -> . THIS
    (152) SpecialName -> . SUPER
    (153) SpecialName -> . NULL
    (156) NewAllocationExpression -> . PlainNewAllocationExpression
    (157) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (131) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (132) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (158) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (159) PlainNewAllocationExpression -> . ClassAllocationExpression
    (160) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (161) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (162) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (133) ComplexPrimaryNoParenthesis -> . INT_CONST
    (134) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (135) ComplexPrimaryNoParenthesis -> . STRING
    (136) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (137) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (138) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (139) ComplexPrimaryNoParenthesis -> . FieldAccess
    (140) ComplexPrimaryNoParenthesis -> . MethodCall
    (165) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (166) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (167) ArrayAllocationExpression -> . NEW TypeName Dims
    (163) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (164) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (141) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (142) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (143) FieldAccess -> . NotJustName DOT IDENTIFIER
    (144) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (145) FieldAccess -> . QualifiedName DOT THIS
    (146) FieldAccess -> . QualifiedName DOT CLASS
    (147) FieldAccess -> . PrimitiveType DOT CLASS
    (148) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (149) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (150) MethodAccess -> . QualifiedName

    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 124
    PLUS            shift and go to state 87
    MINUS           shift and go to state 86
    ~               shift and go to state 140
    NOT             shift and go to state 117
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 89
    SUPER           shift and go to state 156
    NULL            shift and go to state 143
    LROUNPAREN      shift and go to state 92
    INT_CONST       shift and go to state 106
    FLOAT_CONST     shift and go to state 83
    STRING          shift and go to state 149
    CHAR_CONST      shift and go to state 139
    BOOLEAN_CONST   shift and go to state 155
    NEW             shift and go to state 125
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 119
    CastExpression                 shift and go to state 142
    PrimitiveType                  shift and go to state 183
    RealPostfixExpression          shift and go to state 95
    ArithmeticUnaryOperator        shift and go to state 96
    ArrayAccess                    shift and go to state 108
    ClassAllocationExpression      shift and go to state 120
    LogicalUnaryOperator           shift and go to state 145
    ComplexPrimaryNoParenthesis    shift and go to state 99
    MultiplicativeExpression       shift and go to state 300
    MethodCall                     shift and go to state 101
    NewAllocationExpression        shift and go to state 133
    NotJustName                    shift and go to state 150
    QualifiedName                  shift and go to state 185
    LogicalUnaryExpression         shift and go to state 152
    ArrayAllocationExpression      shift and go to state 110
    UnaryExpression                shift and go to state 191
    PrimaryExpression              shift and go to state 127
    FieldAccess                    shift and go to state 154
    PlainNewAllocationExpression   shift and go to state 115
    MethodAccess                   shift and go to state 111
    SpecialName                    shift and go to state 118

state 227

    (227) AssignmentOperator -> ASS_MUL .

    OP_INC          reduce using rule 227 (AssignmentOperator -> ASS_MUL .)
    OP_DEC          reduce using rule 227 (AssignmentOperator -> ASS_MUL .)
    PLUS            reduce using rule 227 (AssignmentOperator -> ASS_MUL .)
    MINUS           reduce using rule 227 (AssignmentOperator -> ASS_MUL .)
    ~               reduce using rule 227 (AssignmentOperator -> ASS_MUL .)
    NOT             reduce using rule 227 (AssignmentOperator -> ASS_MUL .)
    IDENTIFIER      reduce using rule 227 (AssignmentOperator -> ASS_MUL .)
    THIS            reduce using rule 227 (AssignmentOperator -> ASS_MUL .)
    SUPER           reduce using rule 227 (AssignmentOperator -> ASS_MUL .)
    NULL            reduce using rule 227 (AssignmentOperator -> ASS_MUL .)
    LROUNPAREN      reduce using rule 227 (AssignmentOperator -> ASS_MUL .)
    INT_CONST       reduce using rule 227 (AssignmentOperator -> ASS_MUL .)
    FLOAT_CONST     reduce using rule 227 (AssignmentOperator -> ASS_MUL .)
    STRING          reduce using rule 227 (AssignmentOperator -> ASS_MUL .)
    CHAR_CONST      reduce using rule 227 (AssignmentOperator -> ASS_MUL .)
    BOOLEAN_CONST   reduce using rule 227 (AssignmentOperator -> ASS_MUL .)
    NEW             reduce using rule 227 (AssignmentOperator -> ASS_MUL .)
    BOOLEAN         reduce using rule 227 (AssignmentOperator -> ASS_MUL .)
    CHAR            reduce using rule 227 (AssignmentOperator -> ASS_MUL .)
    BYTE            reduce using rule 227 (AssignmentOperator -> ASS_MUL .)
    SHORT           reduce using rule 227 (AssignmentOperator -> ASS_MUL .)
    INT             reduce using rule 227 (AssignmentOperator -> ASS_MUL .)
    LONG            reduce using rule 227 (AssignmentOperator -> ASS_MUL .)
    FLOAT           reduce using rule 227 (AssignmentOperator -> ASS_MUL .)
    DOUBLE          reduce using rule 227 (AssignmentOperator -> ASS_MUL .)
    VOID            reduce using rule 227 (AssignmentOperator -> ASS_MUL .)


state 228

    (228) AssignmentOperator -> ASS_ADD .

    OP_INC          reduce using rule 228 (AssignmentOperator -> ASS_ADD .)
    OP_DEC          reduce using rule 228 (AssignmentOperator -> ASS_ADD .)
    PLUS            reduce using rule 228 (AssignmentOperator -> ASS_ADD .)
    MINUS           reduce using rule 228 (AssignmentOperator -> ASS_ADD .)
    ~               reduce using rule 228 (AssignmentOperator -> ASS_ADD .)
    NOT             reduce using rule 228 (AssignmentOperator -> ASS_ADD .)
    IDENTIFIER      reduce using rule 228 (AssignmentOperator -> ASS_ADD .)
    THIS            reduce using rule 228 (AssignmentOperator -> ASS_ADD .)
    SUPER           reduce using rule 228 (AssignmentOperator -> ASS_ADD .)
    NULL            reduce using rule 228 (AssignmentOperator -> ASS_ADD .)
    LROUNPAREN      reduce using rule 228 (AssignmentOperator -> ASS_ADD .)
    INT_CONST       reduce using rule 228 (AssignmentOperator -> ASS_ADD .)
    FLOAT_CONST     reduce using rule 228 (AssignmentOperator -> ASS_ADD .)
    STRING          reduce using rule 228 (AssignmentOperator -> ASS_ADD .)
    CHAR_CONST      reduce using rule 228 (AssignmentOperator -> ASS_ADD .)
    BOOLEAN_CONST   reduce using rule 228 (AssignmentOperator -> ASS_ADD .)
    NEW             reduce using rule 228 (AssignmentOperator -> ASS_ADD .)
    BOOLEAN         reduce using rule 228 (AssignmentOperator -> ASS_ADD .)
    CHAR            reduce using rule 228 (AssignmentOperator -> ASS_ADD .)
    BYTE            reduce using rule 228 (AssignmentOperator -> ASS_ADD .)
    SHORT           reduce using rule 228 (AssignmentOperator -> ASS_ADD .)
    INT             reduce using rule 228 (AssignmentOperator -> ASS_ADD .)
    LONG            reduce using rule 228 (AssignmentOperator -> ASS_ADD .)
    FLOAT           reduce using rule 228 (AssignmentOperator -> ASS_ADD .)
    DOUBLE          reduce using rule 228 (AssignmentOperator -> ASS_ADD .)
    VOID            reduce using rule 228 (AssignmentOperator -> ASS_ADD .)


state 229

    (225) AssignmentExpression -> UnaryExpression AssignmentOperator . AssignmentExpression
    (224) AssignmentExpression -> . ConditionalExpression
    (225) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (220) ConditionalExpression -> . ConditionalOrExpression
    (221) ConditionalExpression -> . ConditionalOrExpression Mark_quad Ques Mark_quad Expression Mark_quad Cln Mark_quad ConditionalExpression Mark_quad
    (177) UnaryExpression -> . OP_INC UnaryExpression
    (178) UnaryExpression -> . OP_DEC UnaryExpression
    (179) UnaryExpression -> . LogicalUnaryExpression
    (180) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) ConditionalOrExpression -> . ConditionalAndExpression
    (219) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (181) LogicalUnaryExpression -> . PostfixExpression
    (182) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (185) ArithmeticUnaryOperator -> . PLUS
    (186) ArithmeticUnaryOperator -> . MINUS
    (216) ConditionalAndExpression -> . InclusiveOrExpression
    (217) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (173) PostfixExpression -> . PrimaryExpression
    (174) PostfixExpression -> . RealPostfixExpression
    (183) LogicalUnaryOperator -> . ~
    (184) LogicalUnaryOperator -> . NOT
    (214) InclusiveOrExpression -> . ExclusiveOrExpression
    (215) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (126) PrimaryExpression -> . QualifiedName
    (127) PrimaryExpression -> . NotJustName
    (175) RealPostfixExpression -> . PostfixExpression OP_INC
    (176) RealPostfixExpression -> . PostfixExpression OP_DEC
    (212) ExclusiveOrExpression -> . AndExpression
    (213) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (128) NotJustName -> . SpecialName
    (129) NotJustName -> . NewAllocationExpression
    (130) NotJustName -> . ComplexPrimary
    (210) AndExpression -> . EqualityExpression
    (211) AndExpression -> . AndExpression & EqualityExpression
    (151) SpecialName -> . THIS
    (152) SpecialName -> . SUPER
    (153) SpecialName -> . NULL
    (156) NewAllocationExpression -> . PlainNewAllocationExpression
    (157) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (131) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (132) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (207) EqualityExpression -> . RelationalExpression
    (208) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (209) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (158) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (159) PlainNewAllocationExpression -> . ClassAllocationExpression
    (160) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (161) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (162) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (133) ComplexPrimaryNoParenthesis -> . INT_CONST
    (134) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (135) ComplexPrimaryNoParenthesis -> . STRING
    (136) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (137) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (138) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (139) ComplexPrimaryNoParenthesis -> . FieldAccess
    (140) ComplexPrimaryNoParenthesis -> . MethodCall
    (202) RelationalExpression -> . ShiftExpression
    (203) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (204) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (205) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (206) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (165) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (166) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (167) ArrayAllocationExpression -> . NEW TypeName Dims
    (163) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (164) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (141) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (142) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (143) FieldAccess -> . NotJustName DOT IDENTIFIER
    (144) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (145) FieldAccess -> . QualifiedName DOT THIS
    (146) FieldAccess -> . QualifiedName DOT CLASS
    (147) FieldAccess -> . PrimitiveType DOT CLASS
    (148) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (149) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (198) ShiftExpression -> . AdditiveExpression
    (199) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (200) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (201) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (150) MethodAccess -> . QualifiedName
    (195) AdditiveExpression -> . MultiplicativeExpression
    (196) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (197) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (191) MultiplicativeExpression -> . CastExpression
    (192) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (193) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (194) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (187) CastExpression -> . UnaryExpression

    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 124
    PLUS            shift and go to state 87
    MINUS           shift and go to state 86
    ~               shift and go to state 140
    NOT             shift and go to state 117
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 89
    SUPER           shift and go to state 156
    NULL            shift and go to state 143
    LROUNPAREN      shift and go to state 92
    INT_CONST       shift and go to state 106
    FLOAT_CONST     shift and go to state 83
    STRING          shift and go to state 149
    CHAR_CONST      shift and go to state 139
    BOOLEAN_CONST   shift and go to state 155
    NEW             shift and go to state 125
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 119
    PrimaryExpression              shift and go to state 127
    PrimitiveType                  shift and go to state 183
    RealPostfixExpression          shift and go to state 95
    ArithmeticUnaryOperator        shift and go to state 96
    AndExpression                  shift and go to state 85
    ArrayAccess                    shift and go to state 108
    CastExpression                 shift and go to state 142
    EqualityExpression             shift and go to state 97
    LogicalUnaryOperator           shift and go to state 145
    ComplexPrimaryNoParenthesis    shift and go to state 99
    MultiplicativeExpression       shift and go to state 100
    ClassAllocationExpression      shift and go to state 120
    MethodCall                     shift and go to state 101
    ConditionalOrExpression        shift and go to state 131
    ShiftExpression                shift and go to state 147
    AssignmentExpression           shift and go to state 301
    NewAllocationExpression        shift and go to state 133
    NotJustName                    shift and go to state 150
    QualifiedName                  shift and go to state 185
    LogicalUnaryExpression         shift and go to state 152
    AdditiveExpression             shift and go to state 135
    ArrayAllocationExpression      shift and go to state 110
    ConditionalExpression          shift and go to state 136
    UnaryExpression                shift and go to state 137
    InclusiveOrExpression          shift and go to state 138
    MethodAccess                   shift and go to state 111
    ExclusiveOrExpression          shift and go to state 113
    ConditionalAndExpression       shift and go to state 90
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    FieldAccess                    shift and go to state 154
    SpecialName                    shift and go to state 118

state 230

    (226) AssignmentOperator -> EQUAL .

    OP_INC          reduce using rule 226 (AssignmentOperator -> EQUAL .)
    OP_DEC          reduce using rule 226 (AssignmentOperator -> EQUAL .)
    PLUS            reduce using rule 226 (AssignmentOperator -> EQUAL .)
    MINUS           reduce using rule 226 (AssignmentOperator -> EQUAL .)
    ~               reduce using rule 226 (AssignmentOperator -> EQUAL .)
    NOT             reduce using rule 226 (AssignmentOperator -> EQUAL .)
    IDENTIFIER      reduce using rule 226 (AssignmentOperator -> EQUAL .)
    THIS            reduce using rule 226 (AssignmentOperator -> EQUAL .)
    SUPER           reduce using rule 226 (AssignmentOperator -> EQUAL .)
    NULL            reduce using rule 226 (AssignmentOperator -> EQUAL .)
    LROUNPAREN      reduce using rule 226 (AssignmentOperator -> EQUAL .)
    INT_CONST       reduce using rule 226 (AssignmentOperator -> EQUAL .)
    FLOAT_CONST     reduce using rule 226 (AssignmentOperator -> EQUAL .)
    STRING          reduce using rule 226 (AssignmentOperator -> EQUAL .)
    CHAR_CONST      reduce using rule 226 (AssignmentOperator -> EQUAL .)
    BOOLEAN_CONST   reduce using rule 226 (AssignmentOperator -> EQUAL .)
    NEW             reduce using rule 226 (AssignmentOperator -> EQUAL .)
    BOOLEAN         reduce using rule 226 (AssignmentOperator -> EQUAL .)
    CHAR            reduce using rule 226 (AssignmentOperator -> EQUAL .)
    BYTE            reduce using rule 226 (AssignmentOperator -> EQUAL .)
    SHORT           reduce using rule 226 (AssignmentOperator -> EQUAL .)
    INT             reduce using rule 226 (AssignmentOperator -> EQUAL .)
    LONG            reduce using rule 226 (AssignmentOperator -> EQUAL .)
    FLOAT           reduce using rule 226 (AssignmentOperator -> EQUAL .)
    DOUBLE          reduce using rule 226 (AssignmentOperator -> EQUAL .)
    VOID            reduce using rule 226 (AssignmentOperator -> EQUAL .)


state 231

    (229) AssignmentOperator -> ASS_SUB .

    OP_INC          reduce using rule 229 (AssignmentOperator -> ASS_SUB .)
    OP_DEC          reduce using rule 229 (AssignmentOperator -> ASS_SUB .)
    PLUS            reduce using rule 229 (AssignmentOperator -> ASS_SUB .)
    MINUS           reduce using rule 229 (AssignmentOperator -> ASS_SUB .)
    ~               reduce using rule 229 (AssignmentOperator -> ASS_SUB .)
    NOT             reduce using rule 229 (AssignmentOperator -> ASS_SUB .)
    IDENTIFIER      reduce using rule 229 (AssignmentOperator -> ASS_SUB .)
    THIS            reduce using rule 229 (AssignmentOperator -> ASS_SUB .)
    SUPER           reduce using rule 229 (AssignmentOperator -> ASS_SUB .)
    NULL            reduce using rule 229 (AssignmentOperator -> ASS_SUB .)
    LROUNPAREN      reduce using rule 229 (AssignmentOperator -> ASS_SUB .)
    INT_CONST       reduce using rule 229 (AssignmentOperator -> ASS_SUB .)
    FLOAT_CONST     reduce using rule 229 (AssignmentOperator -> ASS_SUB .)
    STRING          reduce using rule 229 (AssignmentOperator -> ASS_SUB .)
    CHAR_CONST      reduce using rule 229 (AssignmentOperator -> ASS_SUB .)
    BOOLEAN_CONST   reduce using rule 229 (AssignmentOperator -> ASS_SUB .)
    NEW             reduce using rule 229 (AssignmentOperator -> ASS_SUB .)
    BOOLEAN         reduce using rule 229 (AssignmentOperator -> ASS_SUB .)
    CHAR            reduce using rule 229 (AssignmentOperator -> ASS_SUB .)
    BYTE            reduce using rule 229 (AssignmentOperator -> ASS_SUB .)
    SHORT           reduce using rule 229 (AssignmentOperator -> ASS_SUB .)
    INT             reduce using rule 229 (AssignmentOperator -> ASS_SUB .)
    LONG            reduce using rule 229 (AssignmentOperator -> ASS_SUB .)
    FLOAT           reduce using rule 229 (AssignmentOperator -> ASS_SUB .)
    DOUBLE          reduce using rule 229 (AssignmentOperator -> ASS_SUB .)
    VOID            reduce using rule 229 (AssignmentOperator -> ASS_SUB .)


state 232

    (215) InclusiveOrExpression -> InclusiveOrExpression | . ExclusiveOrExpression
    (212) ExclusiveOrExpression -> . AndExpression
    (213) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (210) AndExpression -> . EqualityExpression
    (211) AndExpression -> . AndExpression & EqualityExpression
    (207) EqualityExpression -> . RelationalExpression
    (208) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (209) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (202) RelationalExpression -> . ShiftExpression
    (203) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (204) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (205) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (206) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (198) ShiftExpression -> . AdditiveExpression
    (199) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (200) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (201) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (195) AdditiveExpression -> . MultiplicativeExpression
    (196) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (197) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (191) MultiplicativeExpression -> . CastExpression
    (192) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (193) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (194) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (187) CastExpression -> . UnaryExpression
    (177) UnaryExpression -> . OP_INC UnaryExpression
    (178) UnaryExpression -> . OP_DEC UnaryExpression
    (179) UnaryExpression -> . LogicalUnaryExpression
    (180) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (181) LogicalUnaryExpression -> . PostfixExpression
    (182) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (185) ArithmeticUnaryOperator -> . PLUS
    (186) ArithmeticUnaryOperator -> . MINUS
    (173) PostfixExpression -> . PrimaryExpression
    (174) PostfixExpression -> . RealPostfixExpression
    (183) LogicalUnaryOperator -> . ~
    (184) LogicalUnaryOperator -> . NOT
    (126) PrimaryExpression -> . QualifiedName
    (127) PrimaryExpression -> . NotJustName
    (175) RealPostfixExpression -> . PostfixExpression OP_INC
    (176) RealPostfixExpression -> . PostfixExpression OP_DEC
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (128) NotJustName -> . SpecialName
    (129) NotJustName -> . NewAllocationExpression
    (130) NotJustName -> . ComplexPrimary
    (151) SpecialName -> . THIS
    (152) SpecialName -> . SUPER
    (153) SpecialName -> . NULL
    (156) NewAllocationExpression -> . PlainNewAllocationExpression
    (157) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (131) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (132) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (158) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (159) PlainNewAllocationExpression -> . ClassAllocationExpression
    (160) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (161) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (162) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (133) ComplexPrimaryNoParenthesis -> . INT_CONST
    (134) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (135) ComplexPrimaryNoParenthesis -> . STRING
    (136) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (137) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (138) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (139) ComplexPrimaryNoParenthesis -> . FieldAccess
    (140) ComplexPrimaryNoParenthesis -> . MethodCall
    (165) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (166) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (167) ArrayAllocationExpression -> . NEW TypeName Dims
    (163) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (164) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (141) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (142) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (143) FieldAccess -> . NotJustName DOT IDENTIFIER
    (144) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (145) FieldAccess -> . QualifiedName DOT THIS
    (146) FieldAccess -> . QualifiedName DOT CLASS
    (147) FieldAccess -> . PrimitiveType DOT CLASS
    (148) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (149) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (150) MethodAccess -> . QualifiedName

    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 124
    PLUS            shift and go to state 87
    MINUS           shift and go to state 86
    ~               shift and go to state 140
    NOT             shift and go to state 117
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 89
    SUPER           shift and go to state 156
    NULL            shift and go to state 143
    LROUNPAREN      shift and go to state 92
    INT_CONST       shift and go to state 106
    FLOAT_CONST     shift and go to state 83
    STRING          shift and go to state 149
    CHAR_CONST      shift and go to state 139
    BOOLEAN_CONST   shift and go to state 155
    NEW             shift and go to state 125
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 119
    CastExpression                 shift and go to state 142
    PrimitiveType                  shift and go to state 183
    RealPostfixExpression          shift and go to state 95
    ArithmeticUnaryOperator        shift and go to state 96
    AndExpression                  shift and go to state 85
    ArrayAccess                    shift and go to state 108
    PrimaryExpression              shift and go to state 127
    EqualityExpression             shift and go to state 97
    LogicalUnaryOperator           shift and go to state 145
    ComplexPrimaryNoParenthesis    shift and go to state 99
    MultiplicativeExpression       shift and go to state 100
    ClassAllocationExpression      shift and go to state 120
    MethodCall                     shift and go to state 101
    ShiftExpression                shift and go to state 147
    NewAllocationExpression        shift and go to state 133
    NotJustName                    shift and go to state 150
    QualifiedName                  shift and go to state 185
    LogicalUnaryExpression         shift and go to state 152
    AdditiveExpression             shift and go to state 135
    ArrayAllocationExpression      shift and go to state 110
    UnaryExpression                shift and go to state 191
    FieldAccess                    shift and go to state 154
    ExclusiveOrExpression          shift and go to state 302
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    MethodAccess                   shift and go to state 111
    SpecialName                    shift and go to state 118

state 233

    (109) IterationStatement -> Do Mark_quad . Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON
    (89) Statement -> . EmptyStatement Mark_quad
    (90) Statement -> . LabelStatement Mark_quad
    (91) Statement -> . ExpressionStatement SEMICOLON Mark_quad
    (92) Statement -> . JumpStatement Mark_quad
    (93) Statement -> . Block Mark_quad
    (94) Statement -> . IterationStatement Mark_quad
    (95) Statement -> . SelectionStatement Mark_quad
    (97) EmptyStatement -> . SEMICOLON
    (98) LabelStatement -> . IDENTIFIER COLON
    (99) LabelStatement -> . CASE ConstantExpression COLON
    (100) LabelStatement -> . DEFAULT COLON
    (101) ExpressionStatement -> . Expression
    (123) JumpStatement -> . BREAK SEMICOLON
    (124) JumpStatement -> . RETURN Expression SEMICOLON
    (125) JumpStatement -> . RETURN SEMICOLON
    (80) Block -> . Bl LocalVariableDeclarationsAndStatements Br
    (81) Block -> . Bl Br
    (107) IterationStatement -> . WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement
    (109) IterationStatement -> . Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON
    (112) IterationStatement -> . Fr LROUNPAREN ForInit ForExpr Mark_for ForIncr RROUNPAREN Mark_quad Statement
    (102) SelectionStatement -> . If LROUNPAREN Expression RROUNPAREN Mark_if Statement
    (103) SelectionStatement -> . If LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement
    (230) Expression -> . AssignmentExpression
    (82) Bl -> . LCURPAREN
    (110) Do -> . DO
    (113) Fr -> . FOR
    (104) If -> . IF
    (224) AssignmentExpression -> . ConditionalExpression
    (225) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (220) ConditionalExpression -> . ConditionalOrExpression
    (221) ConditionalExpression -> . ConditionalOrExpression Mark_quad Ques Mark_quad Expression Mark_quad Cln Mark_quad ConditionalExpression Mark_quad
    (177) UnaryExpression -> . OP_INC UnaryExpression
    (178) UnaryExpression -> . OP_DEC UnaryExpression
    (179) UnaryExpression -> . LogicalUnaryExpression
    (180) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) ConditionalOrExpression -> . ConditionalAndExpression
    (219) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (181) LogicalUnaryExpression -> . PostfixExpression
    (182) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (185) ArithmeticUnaryOperator -> . PLUS
    (186) ArithmeticUnaryOperator -> . MINUS
    (216) ConditionalAndExpression -> . InclusiveOrExpression
    (217) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (173) PostfixExpression -> . PrimaryExpression
    (174) PostfixExpression -> . RealPostfixExpression
    (183) LogicalUnaryOperator -> . ~
    (184) LogicalUnaryOperator -> . NOT
    (214) InclusiveOrExpression -> . ExclusiveOrExpression
    (215) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (126) PrimaryExpression -> . QualifiedName
    (127) PrimaryExpression -> . NotJustName
    (175) RealPostfixExpression -> . PostfixExpression OP_INC
    (176) RealPostfixExpression -> . PostfixExpression OP_DEC
    (212) ExclusiveOrExpression -> . AndExpression
    (213) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (128) NotJustName -> . SpecialName
    (129) NotJustName -> . NewAllocationExpression
    (130) NotJustName -> . ComplexPrimary
    (210) AndExpression -> . EqualityExpression
    (211) AndExpression -> . AndExpression & EqualityExpression
    (151) SpecialName -> . THIS
    (152) SpecialName -> . SUPER
    (153) SpecialName -> . NULL
    (156) NewAllocationExpression -> . PlainNewAllocationExpression
    (157) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (131) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (132) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (207) EqualityExpression -> . RelationalExpression
    (208) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (209) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (158) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (159) PlainNewAllocationExpression -> . ClassAllocationExpression
    (160) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (161) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (162) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (133) ComplexPrimaryNoParenthesis -> . INT_CONST
    (134) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (135) ComplexPrimaryNoParenthesis -> . STRING
    (136) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (137) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (138) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (139) ComplexPrimaryNoParenthesis -> . FieldAccess
    (140) ComplexPrimaryNoParenthesis -> . MethodCall
    (202) RelationalExpression -> . ShiftExpression
    (203) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (204) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (205) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (206) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (165) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (166) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (167) ArrayAllocationExpression -> . NEW TypeName Dims
    (163) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (164) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (141) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (142) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (143) FieldAccess -> . NotJustName DOT IDENTIFIER
    (144) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (145) FieldAccess -> . QualifiedName DOT THIS
    (146) FieldAccess -> . QualifiedName DOT CLASS
    (147) FieldAccess -> . PrimitiveType DOT CLASS
    (148) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (149) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (198) ShiftExpression -> . AdditiveExpression
    (199) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (200) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (201) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (150) MethodAccess -> . QualifiedName
    (195) AdditiveExpression -> . MultiplicativeExpression
    (196) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (197) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (191) MultiplicativeExpression -> . CastExpression
    (192) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (193) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (194) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (187) CastExpression -> . UnaryExpression

    SEMICOLON       shift and go to state 130
    IDENTIFIER      shift and go to state 132
    CASE            shift and go to state 128
    DEFAULT         shift and go to state 121
    BREAK           shift and go to state 98
    RETURN          shift and go to state 94
    WHILE           shift and go to state 123
    LCURPAREN       shift and go to state 58
    DO              shift and go to state 141
    FOR             shift and go to state 104
    IF              shift and go to state 153
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 124
    PLUS            shift and go to state 87
    MINUS           shift and go to state 86
    ~               shift and go to state 140
    NOT             shift and go to state 117
    THIS            shift and go to state 89
    SUPER           shift and go to state 156
    NULL            shift and go to state 143
    LROUNPAREN      shift and go to state 92
    INT_CONST       shift and go to state 106
    FLOAT_CONST     shift and go to state 83
    STRING          shift and go to state 149
    CHAR_CONST      shift and go to state 139
    BOOLEAN_CONST   shift and go to state 155
    NEW             shift and go to state 125
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    LabelStatement                 shift and go to state 93
    ArithmeticUnaryOperator        shift and go to state 96
    AssignmentExpression           shift and go to state 103
    ExpressionStatement            shift and go to state 81
    JumpStatement                  shift and go to state 122
    RealPostfixExpression          shift and go to state 95
    Statement                      shift and go to state 303
    AndExpression                  shift and go to state 85
    MultiplicativeExpression       shift and go to state 100
    ArrayAccess                    shift and go to state 108
    CastExpression                 shift and go to state 142
    EqualityExpression             shift and go to state 97
    Do                             shift and go to state 144
    Fr                             shift and go to state 129
    ComplexPrimaryNoParenthesis    shift and go to state 99
    Bl                             shift and go to state 53
    ClassAllocationExpression      shift and go to state 120
    QualifiedName                  shift and go to state 185
    ShiftExpression                shift and go to state 147
    SelectionStatement             shift and go to state 102
    NotJustName                    shift and go to state 150
    ConditionalOrExpression        shift and go to state 131
    LogicalUnaryOperator           shift and go to state 145
    ComplexPrimary                 shift and go to state 119
    MethodCall                     shift and go to state 101
    PrimitiveType                  shift and go to state 183
    LogicalUnaryExpression         shift and go to state 152
    UnaryExpression                shift and go to state 137
    Expression                     shift and go to state 134
    Block                          shift and go to state 109
    AdditiveExpression             shift and go to state 135
    ArrayAllocationExpression      shift and go to state 110
    ConditionalExpression          shift and go to state 136
    InclusiveOrExpression          shift and go to state 138
    MethodAccess                   shift and go to state 111
    PrimaryExpression              shift and go to state 127
    ExclusiveOrExpression          shift and go to state 113
    ConditionalAndExpression       shift and go to state 90
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    NewAllocationExpression        shift and go to state 133
    FieldAccess                    shift and go to state 154
    EmptyStatement                 shift and go to state 91
    SpecialName                    shift and go to state 118
    IterationStatement             shift and go to state 157
    If                             shift and go to state 158

state 234

    (182) LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .

    EQUAL           reduce using rule 182 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    ASS_MUL         reduce using rule 182 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    ASS_ADD         reduce using rule 182 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    ASS_SUB         reduce using rule 182 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    MULT            reduce using rule 182 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    DIV             reduce using rule 182 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    MOD             reduce using rule 182 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    PLUS            reduce using rule 182 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    MINUS           reduce using rule 182 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OP_SHL          reduce using rule 182 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OP_SHR          reduce using rule 182 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OP_SHRR         reduce using rule 182 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    LESS            reduce using rule 182 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    MORE            reduce using rule 182 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OP_LE           reduce using rule 182 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OP_GE           reduce using rule 182 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OP_EQ           reduce using rule 182 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OP_NE           reduce using rule 182 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    &               reduce using rule 182 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    ^               reduce using rule 182 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    |               reduce using rule 182 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OP_LAND         reduce using rule 182 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    OP_LOR          reduce using rule 182 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    QUES            reduce using rule 182 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    SEMICOLON       reduce using rule 182 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    RROUNPAREN      reduce using rule 182 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    COLON           reduce using rule 182 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    COMMA           reduce using rule 182 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)
    RSQPAREN        reduce using rule 182 (LogicalUnaryExpression -> LogicalUnaryOperator UnaryExpression .)


state 235

    (199) ShiftExpression -> ShiftExpression OP_SHL . AdditiveExpression
    (195) AdditiveExpression -> . MultiplicativeExpression
    (196) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (197) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (191) MultiplicativeExpression -> . CastExpression
    (192) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (193) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (194) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (187) CastExpression -> . UnaryExpression
    (177) UnaryExpression -> . OP_INC UnaryExpression
    (178) UnaryExpression -> . OP_DEC UnaryExpression
    (179) UnaryExpression -> . LogicalUnaryExpression
    (180) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (181) LogicalUnaryExpression -> . PostfixExpression
    (182) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (185) ArithmeticUnaryOperator -> . PLUS
    (186) ArithmeticUnaryOperator -> . MINUS
    (173) PostfixExpression -> . PrimaryExpression
    (174) PostfixExpression -> . RealPostfixExpression
    (183) LogicalUnaryOperator -> . ~
    (184) LogicalUnaryOperator -> . NOT
    (126) PrimaryExpression -> . QualifiedName
    (127) PrimaryExpression -> . NotJustName
    (175) RealPostfixExpression -> . PostfixExpression OP_INC
    (176) RealPostfixExpression -> . PostfixExpression OP_DEC
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (128) NotJustName -> . SpecialName
    (129) NotJustName -> . NewAllocationExpression
    (130) NotJustName -> . ComplexPrimary
    (151) SpecialName -> . THIS
    (152) SpecialName -> . SUPER
    (153) SpecialName -> . NULL
    (156) NewAllocationExpression -> . PlainNewAllocationExpression
    (157) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (131) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (132) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (158) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (159) PlainNewAllocationExpression -> . ClassAllocationExpression
    (160) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (161) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (162) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (133) ComplexPrimaryNoParenthesis -> . INT_CONST
    (134) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (135) ComplexPrimaryNoParenthesis -> . STRING
    (136) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (137) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (138) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (139) ComplexPrimaryNoParenthesis -> . FieldAccess
    (140) ComplexPrimaryNoParenthesis -> . MethodCall
    (165) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (166) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (167) ArrayAllocationExpression -> . NEW TypeName Dims
    (163) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (164) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (141) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (142) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (143) FieldAccess -> . NotJustName DOT IDENTIFIER
    (144) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (145) FieldAccess -> . QualifiedName DOT THIS
    (146) FieldAccess -> . QualifiedName DOT CLASS
    (147) FieldAccess -> . PrimitiveType DOT CLASS
    (148) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (149) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (150) MethodAccess -> . QualifiedName

    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 124
    PLUS            shift and go to state 87
    MINUS           shift and go to state 86
    ~               shift and go to state 140
    NOT             shift and go to state 117
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 89
    SUPER           shift and go to state 156
    NULL            shift and go to state 143
    LROUNPAREN      shift and go to state 92
    INT_CONST       shift and go to state 106
    FLOAT_CONST     shift and go to state 83
    STRING          shift and go to state 149
    CHAR_CONST      shift and go to state 139
    BOOLEAN_CONST   shift and go to state 155
    NEW             shift and go to state 125
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 119
    CastExpression                 shift and go to state 142
    PrimitiveType                  shift and go to state 183
    RealPostfixExpression          shift and go to state 95
    ArithmeticUnaryOperator        shift and go to state 96
    ArrayAccess                    shift and go to state 108
    ClassAllocationExpression      shift and go to state 120
    LogicalUnaryOperator           shift and go to state 145
    ComplexPrimaryNoParenthesis    shift and go to state 99
    MultiplicativeExpression       shift and go to state 100
    MethodCall                     shift and go to state 101
    NewAllocationExpression        shift and go to state 133
    NotJustName                    shift and go to state 150
    QualifiedName                  shift and go to state 185
    LogicalUnaryExpression         shift and go to state 152
    AdditiveExpression             shift and go to state 304
    ArrayAllocationExpression      shift and go to state 110
    UnaryExpression                shift and go to state 191
    PrimaryExpression              shift and go to state 127
    FieldAccess                    shift and go to state 154
    PlainNewAllocationExpression   shift and go to state 115
    MethodAccess                   shift and go to state 111
    SpecialName                    shift and go to state 118

state 236

    (201) ShiftExpression -> ShiftExpression OP_SHRR . AdditiveExpression
    (195) AdditiveExpression -> . MultiplicativeExpression
    (196) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (197) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (191) MultiplicativeExpression -> . CastExpression
    (192) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (193) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (194) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (187) CastExpression -> . UnaryExpression
    (177) UnaryExpression -> . OP_INC UnaryExpression
    (178) UnaryExpression -> . OP_DEC UnaryExpression
    (179) UnaryExpression -> . LogicalUnaryExpression
    (180) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (181) LogicalUnaryExpression -> . PostfixExpression
    (182) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (185) ArithmeticUnaryOperator -> . PLUS
    (186) ArithmeticUnaryOperator -> . MINUS
    (173) PostfixExpression -> . PrimaryExpression
    (174) PostfixExpression -> . RealPostfixExpression
    (183) LogicalUnaryOperator -> . ~
    (184) LogicalUnaryOperator -> . NOT
    (126) PrimaryExpression -> . QualifiedName
    (127) PrimaryExpression -> . NotJustName
    (175) RealPostfixExpression -> . PostfixExpression OP_INC
    (176) RealPostfixExpression -> . PostfixExpression OP_DEC
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (128) NotJustName -> . SpecialName
    (129) NotJustName -> . NewAllocationExpression
    (130) NotJustName -> . ComplexPrimary
    (151) SpecialName -> . THIS
    (152) SpecialName -> . SUPER
    (153) SpecialName -> . NULL
    (156) NewAllocationExpression -> . PlainNewAllocationExpression
    (157) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (131) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (132) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (158) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (159) PlainNewAllocationExpression -> . ClassAllocationExpression
    (160) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (161) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (162) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (133) ComplexPrimaryNoParenthesis -> . INT_CONST
    (134) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (135) ComplexPrimaryNoParenthesis -> . STRING
    (136) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (137) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (138) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (139) ComplexPrimaryNoParenthesis -> . FieldAccess
    (140) ComplexPrimaryNoParenthesis -> . MethodCall
    (165) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (166) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (167) ArrayAllocationExpression -> . NEW TypeName Dims
    (163) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (164) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (141) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (142) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (143) FieldAccess -> . NotJustName DOT IDENTIFIER
    (144) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (145) FieldAccess -> . QualifiedName DOT THIS
    (146) FieldAccess -> . QualifiedName DOT CLASS
    (147) FieldAccess -> . PrimitiveType DOT CLASS
    (148) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (149) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (150) MethodAccess -> . QualifiedName

    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 124
    PLUS            shift and go to state 87
    MINUS           shift and go to state 86
    ~               shift and go to state 140
    NOT             shift and go to state 117
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 89
    SUPER           shift and go to state 156
    NULL            shift and go to state 143
    LROUNPAREN      shift and go to state 92
    INT_CONST       shift and go to state 106
    FLOAT_CONST     shift and go to state 83
    STRING          shift and go to state 149
    CHAR_CONST      shift and go to state 139
    BOOLEAN_CONST   shift and go to state 155
    NEW             shift and go to state 125
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 119
    CastExpression                 shift and go to state 142
    PrimitiveType                  shift and go to state 183
    RealPostfixExpression          shift and go to state 95
    ArithmeticUnaryOperator        shift and go to state 96
    ArrayAccess                    shift and go to state 108
    ClassAllocationExpression      shift and go to state 120
    LogicalUnaryOperator           shift and go to state 145
    ComplexPrimaryNoParenthesis    shift and go to state 99
    MultiplicativeExpression       shift and go to state 100
    MethodCall                     shift and go to state 101
    NewAllocationExpression        shift and go to state 133
    NotJustName                    shift and go to state 150
    QualifiedName                  shift and go to state 185
    LogicalUnaryExpression         shift and go to state 152
    AdditiveExpression             shift and go to state 305
    ArrayAllocationExpression      shift and go to state 110
    UnaryExpression                shift and go to state 191
    PrimaryExpression              shift and go to state 127
    FieldAccess                    shift and go to state 154
    PlainNewAllocationExpression   shift and go to state 115
    MethodAccess                   shift and go to state 111
    SpecialName                    shift and go to state 118

state 237

    (200) ShiftExpression -> ShiftExpression OP_SHR . AdditiveExpression
    (195) AdditiveExpression -> . MultiplicativeExpression
    (196) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (197) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (191) MultiplicativeExpression -> . CastExpression
    (192) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (193) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (194) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (187) CastExpression -> . UnaryExpression
    (177) UnaryExpression -> . OP_INC UnaryExpression
    (178) UnaryExpression -> . OP_DEC UnaryExpression
    (179) UnaryExpression -> . LogicalUnaryExpression
    (180) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (181) LogicalUnaryExpression -> . PostfixExpression
    (182) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (185) ArithmeticUnaryOperator -> . PLUS
    (186) ArithmeticUnaryOperator -> . MINUS
    (173) PostfixExpression -> . PrimaryExpression
    (174) PostfixExpression -> . RealPostfixExpression
    (183) LogicalUnaryOperator -> . ~
    (184) LogicalUnaryOperator -> . NOT
    (126) PrimaryExpression -> . QualifiedName
    (127) PrimaryExpression -> . NotJustName
    (175) RealPostfixExpression -> . PostfixExpression OP_INC
    (176) RealPostfixExpression -> . PostfixExpression OP_DEC
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (128) NotJustName -> . SpecialName
    (129) NotJustName -> . NewAllocationExpression
    (130) NotJustName -> . ComplexPrimary
    (151) SpecialName -> . THIS
    (152) SpecialName -> . SUPER
    (153) SpecialName -> . NULL
    (156) NewAllocationExpression -> . PlainNewAllocationExpression
    (157) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (131) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (132) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (158) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (159) PlainNewAllocationExpression -> . ClassAllocationExpression
    (160) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (161) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (162) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (133) ComplexPrimaryNoParenthesis -> . INT_CONST
    (134) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (135) ComplexPrimaryNoParenthesis -> . STRING
    (136) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (137) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (138) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (139) ComplexPrimaryNoParenthesis -> . FieldAccess
    (140) ComplexPrimaryNoParenthesis -> . MethodCall
    (165) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (166) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (167) ArrayAllocationExpression -> . NEW TypeName Dims
    (163) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (164) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (141) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (142) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (143) FieldAccess -> . NotJustName DOT IDENTIFIER
    (144) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (145) FieldAccess -> . QualifiedName DOT THIS
    (146) FieldAccess -> . QualifiedName DOT CLASS
    (147) FieldAccess -> . PrimitiveType DOT CLASS
    (148) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (149) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (150) MethodAccess -> . QualifiedName

    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 124
    PLUS            shift and go to state 87
    MINUS           shift and go to state 86
    ~               shift and go to state 140
    NOT             shift and go to state 117
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 89
    SUPER           shift and go to state 156
    NULL            shift and go to state 143
    LROUNPAREN      shift and go to state 92
    INT_CONST       shift and go to state 106
    FLOAT_CONST     shift and go to state 83
    STRING          shift and go to state 149
    CHAR_CONST      shift and go to state 139
    BOOLEAN_CONST   shift and go to state 155
    NEW             shift and go to state 125
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 119
    CastExpression                 shift and go to state 142
    PrimitiveType                  shift and go to state 183
    RealPostfixExpression          shift and go to state 95
    ArithmeticUnaryOperator        shift and go to state 96
    ArrayAccess                    shift and go to state 108
    ClassAllocationExpression      shift and go to state 120
    LogicalUnaryOperator           shift and go to state 145
    ComplexPrimaryNoParenthesis    shift and go to state 99
    MultiplicativeExpression       shift and go to state 100
    MethodCall                     shift and go to state 101
    NewAllocationExpression        shift and go to state 133
    NotJustName                    shift and go to state 150
    QualifiedName                  shift and go to state 185
    LogicalUnaryExpression         shift and go to state 152
    AdditiveExpression             shift and go to state 306
    ArrayAllocationExpression      shift and go to state 110
    UnaryExpression                shift and go to state 191
    PrimaryExpression              shift and go to state 127
    FieldAccess                    shift and go to state 154
    PlainNewAllocationExpression   shift and go to state 115
    MethodAccess                   shift and go to state 111
    SpecialName                    shift and go to state 118

state 238

    (80) Block -> Bl LocalVariableDeclarationsAndStatements Br .

    WHILE           reduce using rule 80 (Block -> Bl LocalVariableDeclarationsAndStatements Br .)
    RCURPAREN       reduce using rule 80 (Block -> Bl LocalVariableDeclarationsAndStatements Br .)
    SEMICOLON       reduce using rule 80 (Block -> Bl LocalVariableDeclarationsAndStatements Br .)
    IDENTIFIER      reduce using rule 80 (Block -> Bl LocalVariableDeclarationsAndStatements Br .)
    CASE            reduce using rule 80 (Block -> Bl LocalVariableDeclarationsAndStatements Br .)
    DEFAULT         reduce using rule 80 (Block -> Bl LocalVariableDeclarationsAndStatements Br .)
    BREAK           reduce using rule 80 (Block -> Bl LocalVariableDeclarationsAndStatements Br .)
    RETURN          reduce using rule 80 (Block -> Bl LocalVariableDeclarationsAndStatements Br .)
    LCURPAREN       reduce using rule 80 (Block -> Bl LocalVariableDeclarationsAndStatements Br .)
    DO              reduce using rule 80 (Block -> Bl LocalVariableDeclarationsAndStatements Br .)
    FOR             reduce using rule 80 (Block -> Bl LocalVariableDeclarationsAndStatements Br .)
    IF              reduce using rule 80 (Block -> Bl LocalVariableDeclarationsAndStatements Br .)
    BOOLEAN         reduce using rule 80 (Block -> Bl LocalVariableDeclarationsAndStatements Br .)
    CHAR            reduce using rule 80 (Block -> Bl LocalVariableDeclarationsAndStatements Br .)
    BYTE            reduce using rule 80 (Block -> Bl LocalVariableDeclarationsAndStatements Br .)
    SHORT           reduce using rule 80 (Block -> Bl LocalVariableDeclarationsAndStatements Br .)
    INT             reduce using rule 80 (Block -> Bl LocalVariableDeclarationsAndStatements Br .)
    LONG            reduce using rule 80 (Block -> Bl LocalVariableDeclarationsAndStatements Br .)
    FLOAT           reduce using rule 80 (Block -> Bl LocalVariableDeclarationsAndStatements Br .)
    DOUBLE          reduce using rule 80 (Block -> Bl LocalVariableDeclarationsAndStatements Br .)
    VOID            reduce using rule 80 (Block -> Bl LocalVariableDeclarationsAndStatements Br .)
    OP_INC          reduce using rule 80 (Block -> Bl LocalVariableDeclarationsAndStatements Br .)
    OP_DEC          reduce using rule 80 (Block -> Bl LocalVariableDeclarationsAndStatements Br .)
    PLUS            reduce using rule 80 (Block -> Bl LocalVariableDeclarationsAndStatements Br .)
    MINUS           reduce using rule 80 (Block -> Bl LocalVariableDeclarationsAndStatements Br .)
    ~               reduce using rule 80 (Block -> Bl LocalVariableDeclarationsAndStatements Br .)
    NOT             reduce using rule 80 (Block -> Bl LocalVariableDeclarationsAndStatements Br .)
    THIS            reduce using rule 80 (Block -> Bl LocalVariableDeclarationsAndStatements Br .)
    SUPER           reduce using rule 80 (Block -> Bl LocalVariableDeclarationsAndStatements Br .)
    NULL            reduce using rule 80 (Block -> Bl LocalVariableDeclarationsAndStatements Br .)
    LROUNPAREN      reduce using rule 80 (Block -> Bl LocalVariableDeclarationsAndStatements Br .)
    INT_CONST       reduce using rule 80 (Block -> Bl LocalVariableDeclarationsAndStatements Br .)
    FLOAT_CONST     reduce using rule 80 (Block -> Bl LocalVariableDeclarationsAndStatements Br .)
    STRING          reduce using rule 80 (Block -> Bl LocalVariableDeclarationsAndStatements Br .)
    CHAR_CONST      reduce using rule 80 (Block -> Bl LocalVariableDeclarationsAndStatements Br .)
    BOOLEAN_CONST   reduce using rule 80 (Block -> Bl LocalVariableDeclarationsAndStatements Br .)
    NEW             reduce using rule 80 (Block -> Bl LocalVariableDeclarationsAndStatements Br .)
    ELSE            reduce using rule 80 (Block -> Bl LocalVariableDeclarationsAndStatements Br .)
    STATIC          reduce using rule 80 (Block -> Bl LocalVariableDeclarationsAndStatements Br .)
    PUBLIC          reduce using rule 80 (Block -> Bl LocalVariableDeclarationsAndStatements Br .)
    PRIVATE         reduce using rule 80 (Block -> Bl LocalVariableDeclarationsAndStatements Br .)
    CLASS           reduce using rule 80 (Block -> Bl LocalVariableDeclarationsAndStatements Br .)


state 239

    (85) LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .

    RCURPAREN       reduce using rule 85 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    SEMICOLON       reduce using rule 85 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    IDENTIFIER      reduce using rule 85 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    CASE            reduce using rule 85 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    DEFAULT         reduce using rule 85 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    BREAK           reduce using rule 85 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    RETURN          reduce using rule 85 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    WHILE           reduce using rule 85 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    LCURPAREN       reduce using rule 85 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    DO              reduce using rule 85 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    FOR             reduce using rule 85 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    IF              reduce using rule 85 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    BOOLEAN         reduce using rule 85 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    CHAR            reduce using rule 85 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    BYTE            reduce using rule 85 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    SHORT           reduce using rule 85 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    INT             reduce using rule 85 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    LONG            reduce using rule 85 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    FLOAT           reduce using rule 85 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    DOUBLE          reduce using rule 85 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    VOID            reduce using rule 85 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    OP_INC          reduce using rule 85 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    OP_DEC          reduce using rule 85 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    PLUS            reduce using rule 85 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    MINUS           reduce using rule 85 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    ~               reduce using rule 85 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    NOT             reduce using rule 85 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    THIS            reduce using rule 85 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    SUPER           reduce using rule 85 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    NULL            reduce using rule 85 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    LROUNPAREN      reduce using rule 85 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    INT_CONST       reduce using rule 85 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    FLOAT_CONST     reduce using rule 85 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    STRING          reduce using rule 85 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    CHAR_CONST      reduce using rule 85 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    BOOLEAN_CONST   reduce using rule 85 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)
    NEW             reduce using rule 85 (LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements LocalVariableDeclarationOrStatement .)


state 240

    (143) FieldAccess -> NotJustName DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 307


state 241

    (141) ArrayAccess -> QualifiedName LSQPAREN . Expression RSQPAREN
    (230) Expression -> . AssignmentExpression
    (224) AssignmentExpression -> . ConditionalExpression
    (225) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (220) ConditionalExpression -> . ConditionalOrExpression
    (221) ConditionalExpression -> . ConditionalOrExpression Mark_quad Ques Mark_quad Expression Mark_quad Cln Mark_quad ConditionalExpression Mark_quad
    (177) UnaryExpression -> . OP_INC UnaryExpression
    (178) UnaryExpression -> . OP_DEC UnaryExpression
    (179) UnaryExpression -> . LogicalUnaryExpression
    (180) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) ConditionalOrExpression -> . ConditionalAndExpression
    (219) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (181) LogicalUnaryExpression -> . PostfixExpression
    (182) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (185) ArithmeticUnaryOperator -> . PLUS
    (186) ArithmeticUnaryOperator -> . MINUS
    (216) ConditionalAndExpression -> . InclusiveOrExpression
    (217) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (173) PostfixExpression -> . PrimaryExpression
    (174) PostfixExpression -> . RealPostfixExpression
    (183) LogicalUnaryOperator -> . ~
    (184) LogicalUnaryOperator -> . NOT
    (214) InclusiveOrExpression -> . ExclusiveOrExpression
    (215) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (126) PrimaryExpression -> . QualifiedName
    (127) PrimaryExpression -> . NotJustName
    (175) RealPostfixExpression -> . PostfixExpression OP_INC
    (176) RealPostfixExpression -> . PostfixExpression OP_DEC
    (212) ExclusiveOrExpression -> . AndExpression
    (213) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (128) NotJustName -> . SpecialName
    (129) NotJustName -> . NewAllocationExpression
    (130) NotJustName -> . ComplexPrimary
    (210) AndExpression -> . EqualityExpression
    (211) AndExpression -> . AndExpression & EqualityExpression
    (151) SpecialName -> . THIS
    (152) SpecialName -> . SUPER
    (153) SpecialName -> . NULL
    (156) NewAllocationExpression -> . PlainNewAllocationExpression
    (157) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (131) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (132) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (207) EqualityExpression -> . RelationalExpression
    (208) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (209) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (158) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (159) PlainNewAllocationExpression -> . ClassAllocationExpression
    (160) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (161) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (162) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (133) ComplexPrimaryNoParenthesis -> . INT_CONST
    (134) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (135) ComplexPrimaryNoParenthesis -> . STRING
    (136) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (137) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (138) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (139) ComplexPrimaryNoParenthesis -> . FieldAccess
    (140) ComplexPrimaryNoParenthesis -> . MethodCall
    (202) RelationalExpression -> . ShiftExpression
    (203) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (204) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (205) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (206) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (165) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (166) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (167) ArrayAllocationExpression -> . NEW TypeName Dims
    (163) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (164) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (141) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (142) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (143) FieldAccess -> . NotJustName DOT IDENTIFIER
    (144) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (145) FieldAccess -> . QualifiedName DOT THIS
    (146) FieldAccess -> . QualifiedName DOT CLASS
    (147) FieldAccess -> . PrimitiveType DOT CLASS
    (148) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (149) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (198) ShiftExpression -> . AdditiveExpression
    (199) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (200) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (201) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (150) MethodAccess -> . QualifiedName
    (195) AdditiveExpression -> . MultiplicativeExpression
    (196) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (197) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (191) MultiplicativeExpression -> . CastExpression
    (192) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (193) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (194) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (187) CastExpression -> . UnaryExpression

    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 124
    PLUS            shift and go to state 87
    MINUS           shift and go to state 86
    ~               shift and go to state 140
    NOT             shift and go to state 117
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 89
    SUPER           shift and go to state 156
    NULL            shift and go to state 143
    LROUNPAREN      shift and go to state 92
    INT_CONST       shift and go to state 106
    FLOAT_CONST     shift and go to state 83
    STRING          shift and go to state 149
    CHAR_CONST      shift and go to state 139
    BOOLEAN_CONST   shift and go to state 155
    NEW             shift and go to state 125
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 119
    PrimaryExpression              shift and go to state 127
    PrimitiveType                  shift and go to state 183
    RealPostfixExpression          shift and go to state 95
    ArithmeticUnaryOperator        shift and go to state 96
    AndExpression                  shift and go to state 85
    ArrayAccess                    shift and go to state 108
    CastExpression                 shift and go to state 142
    EqualityExpression             shift and go to state 97
    QualifiedName                  shift and go to state 185
    ComplexPrimaryNoParenthesis    shift and go to state 99
    MultiplicativeExpression       shift and go to state 100
    ClassAllocationExpression      shift and go to state 120
    MethodCall                     shift and go to state 101
    ConditionalOrExpression        shift and go to state 131
    ShiftExpression                shift and go to state 147
    AssignmentExpression           shift and go to state 103
    NewAllocationExpression        shift and go to state 133
    NotJustName                    shift and go to state 150
    LogicalUnaryOperator           shift and go to state 145
    LogicalUnaryExpression         shift and go to state 152
    Expression                     shift and go to state 308
    AdditiveExpression             shift and go to state 135
    ArrayAllocationExpression      shift and go to state 110
    ConditionalExpression          shift and go to state 136
    UnaryExpression                shift and go to state 137
    InclusiveOrExpression          shift and go to state 138
    MethodAccess                   shift and go to state 111
    ExclusiveOrExpression          shift and go to state 113
    ConditionalAndExpression       shift and go to state 90
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    FieldAccess                    shift and go to state 154
    SpecialName                    shift and go to state 118

state 242

    (34) QualifiedName -> QualifiedName DOT . IDENTIFIER
    (157) NewAllocationExpression -> QualifiedName DOT . PlainNewAllocationExpression
    (145) FieldAccess -> QualifiedName DOT . THIS
    (146) FieldAccess -> QualifiedName DOT . CLASS
    (158) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (159) PlainNewAllocationExpression -> . ClassAllocationExpression
    (160) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (161) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (162) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (165) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (166) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (167) ArrayAllocationExpression -> . NEW TypeName Dims
    (163) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (164) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN

    IDENTIFIER      shift and go to state 70
    THIS            shift and go to state 309
    CLASS           shift and go to state 311
    NEW             shift and go to state 125

    ArrayAllocationExpression      shift and go to state 110
    ClassAllocationExpression      shift and go to state 120
    PlainNewAllocationExpression   shift and go to state 310

state 243

    (94) Statement -> IterationStatement Mark_quad .

    WHILE           reduce using rule 94 (Statement -> IterationStatement Mark_quad .)
    RCURPAREN       reduce using rule 94 (Statement -> IterationStatement Mark_quad .)
    SEMICOLON       reduce using rule 94 (Statement -> IterationStatement Mark_quad .)
    IDENTIFIER      reduce using rule 94 (Statement -> IterationStatement Mark_quad .)
    CASE            reduce using rule 94 (Statement -> IterationStatement Mark_quad .)
    DEFAULT         reduce using rule 94 (Statement -> IterationStatement Mark_quad .)
    BREAK           reduce using rule 94 (Statement -> IterationStatement Mark_quad .)
    RETURN          reduce using rule 94 (Statement -> IterationStatement Mark_quad .)
    LCURPAREN       reduce using rule 94 (Statement -> IterationStatement Mark_quad .)
    DO              reduce using rule 94 (Statement -> IterationStatement Mark_quad .)
    FOR             reduce using rule 94 (Statement -> IterationStatement Mark_quad .)
    IF              reduce using rule 94 (Statement -> IterationStatement Mark_quad .)
    BOOLEAN         reduce using rule 94 (Statement -> IterationStatement Mark_quad .)
    CHAR            reduce using rule 94 (Statement -> IterationStatement Mark_quad .)
    BYTE            reduce using rule 94 (Statement -> IterationStatement Mark_quad .)
    SHORT           reduce using rule 94 (Statement -> IterationStatement Mark_quad .)
    INT             reduce using rule 94 (Statement -> IterationStatement Mark_quad .)
    LONG            reduce using rule 94 (Statement -> IterationStatement Mark_quad .)
    FLOAT           reduce using rule 94 (Statement -> IterationStatement Mark_quad .)
    DOUBLE          reduce using rule 94 (Statement -> IterationStatement Mark_quad .)
    VOID            reduce using rule 94 (Statement -> IterationStatement Mark_quad .)
    OP_INC          reduce using rule 94 (Statement -> IterationStatement Mark_quad .)
    OP_DEC          reduce using rule 94 (Statement -> IterationStatement Mark_quad .)
    PLUS            reduce using rule 94 (Statement -> IterationStatement Mark_quad .)
    MINUS           reduce using rule 94 (Statement -> IterationStatement Mark_quad .)
    ~               reduce using rule 94 (Statement -> IterationStatement Mark_quad .)
    NOT             reduce using rule 94 (Statement -> IterationStatement Mark_quad .)
    THIS            reduce using rule 94 (Statement -> IterationStatement Mark_quad .)
    SUPER           reduce using rule 94 (Statement -> IterationStatement Mark_quad .)
    NULL            reduce using rule 94 (Statement -> IterationStatement Mark_quad .)
    LROUNPAREN      reduce using rule 94 (Statement -> IterationStatement Mark_quad .)
    INT_CONST       reduce using rule 94 (Statement -> IterationStatement Mark_quad .)
    FLOAT_CONST     reduce using rule 94 (Statement -> IterationStatement Mark_quad .)
    STRING          reduce using rule 94 (Statement -> IterationStatement Mark_quad .)
    CHAR_CONST      reduce using rule 94 (Statement -> IterationStatement Mark_quad .)
    BOOLEAN_CONST   reduce using rule 94 (Statement -> IterationStatement Mark_quad .)
    NEW             reduce using rule 94 (Statement -> IterationStatement Mark_quad .)
    ELSE            reduce using rule 94 (Statement -> IterationStatement Mark_quad .)


state 244

    (102) SelectionStatement -> If LROUNPAREN . Expression RROUNPAREN Mark_if Statement
    (103) SelectionStatement -> If LROUNPAREN . Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement
    (230) Expression -> . AssignmentExpression
    (224) AssignmentExpression -> . ConditionalExpression
    (225) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (220) ConditionalExpression -> . ConditionalOrExpression
    (221) ConditionalExpression -> . ConditionalOrExpression Mark_quad Ques Mark_quad Expression Mark_quad Cln Mark_quad ConditionalExpression Mark_quad
    (177) UnaryExpression -> . OP_INC UnaryExpression
    (178) UnaryExpression -> . OP_DEC UnaryExpression
    (179) UnaryExpression -> . LogicalUnaryExpression
    (180) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) ConditionalOrExpression -> . ConditionalAndExpression
    (219) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (181) LogicalUnaryExpression -> . PostfixExpression
    (182) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (185) ArithmeticUnaryOperator -> . PLUS
    (186) ArithmeticUnaryOperator -> . MINUS
    (216) ConditionalAndExpression -> . InclusiveOrExpression
    (217) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (173) PostfixExpression -> . PrimaryExpression
    (174) PostfixExpression -> . RealPostfixExpression
    (183) LogicalUnaryOperator -> . ~
    (184) LogicalUnaryOperator -> . NOT
    (214) InclusiveOrExpression -> . ExclusiveOrExpression
    (215) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (126) PrimaryExpression -> . QualifiedName
    (127) PrimaryExpression -> . NotJustName
    (175) RealPostfixExpression -> . PostfixExpression OP_INC
    (176) RealPostfixExpression -> . PostfixExpression OP_DEC
    (212) ExclusiveOrExpression -> . AndExpression
    (213) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (128) NotJustName -> . SpecialName
    (129) NotJustName -> . NewAllocationExpression
    (130) NotJustName -> . ComplexPrimary
    (210) AndExpression -> . EqualityExpression
    (211) AndExpression -> . AndExpression & EqualityExpression
    (151) SpecialName -> . THIS
    (152) SpecialName -> . SUPER
    (153) SpecialName -> . NULL
    (156) NewAllocationExpression -> . PlainNewAllocationExpression
    (157) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (131) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (132) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (207) EqualityExpression -> . RelationalExpression
    (208) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (209) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (158) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (159) PlainNewAllocationExpression -> . ClassAllocationExpression
    (160) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (161) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (162) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (133) ComplexPrimaryNoParenthesis -> . INT_CONST
    (134) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (135) ComplexPrimaryNoParenthesis -> . STRING
    (136) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (137) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (138) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (139) ComplexPrimaryNoParenthesis -> . FieldAccess
    (140) ComplexPrimaryNoParenthesis -> . MethodCall
    (202) RelationalExpression -> . ShiftExpression
    (203) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (204) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (205) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (206) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (165) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (166) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (167) ArrayAllocationExpression -> . NEW TypeName Dims
    (163) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (164) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (141) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (142) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (143) FieldAccess -> . NotJustName DOT IDENTIFIER
    (144) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (145) FieldAccess -> . QualifiedName DOT THIS
    (146) FieldAccess -> . QualifiedName DOT CLASS
    (147) FieldAccess -> . PrimitiveType DOT CLASS
    (148) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (149) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (198) ShiftExpression -> . AdditiveExpression
    (199) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (200) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (201) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (150) MethodAccess -> . QualifiedName
    (195) AdditiveExpression -> . MultiplicativeExpression
    (196) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (197) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (191) MultiplicativeExpression -> . CastExpression
    (192) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (193) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (194) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (187) CastExpression -> . UnaryExpression

    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 124
    PLUS            shift and go to state 87
    MINUS           shift and go to state 86
    ~               shift and go to state 140
    NOT             shift and go to state 117
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 89
    SUPER           shift and go to state 156
    NULL            shift and go to state 143
    LROUNPAREN      shift and go to state 92
    INT_CONST       shift and go to state 106
    FLOAT_CONST     shift and go to state 83
    STRING          shift and go to state 149
    CHAR_CONST      shift and go to state 139
    BOOLEAN_CONST   shift and go to state 155
    NEW             shift and go to state 125
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 119
    CastExpression                 shift and go to state 142
    PrimitiveType                  shift and go to state 183
    RealPostfixExpression          shift and go to state 95
    AndExpression                  shift and go to state 85
    ArrayAccess                    shift and go to state 108
    PrimaryExpression              shift and go to state 127
    EqualityExpression             shift and go to state 97
    LogicalUnaryOperator           shift and go to state 145
    ComplexPrimaryNoParenthesis    shift and go to state 99
    MultiplicativeExpression       shift and go to state 100
    ClassAllocationExpression      shift and go to state 120
    MethodCall                     shift and go to state 101
    ConditionalOrExpression        shift and go to state 131
    ShiftExpression                shift and go to state 147
    ArithmeticUnaryOperator        shift and go to state 96
    AssignmentExpression           shift and go to state 103
    NewAllocationExpression        shift and go to state 133
    NotJustName                    shift and go to state 150
    QualifiedName                  shift and go to state 185
    LogicalUnaryExpression         shift and go to state 152
    Expression                     shift and go to state 312
    AdditiveExpression             shift and go to state 135
    ArrayAllocationExpression      shift and go to state 110
    ConditionalExpression          shift and go to state 136
    UnaryExpression                shift and go to state 137
    InclusiveOrExpression          shift and go to state 138
    MethodAccess                   shift and go to state 111
    ExclusiveOrExpression          shift and go to state 113
    ConditionalAndExpression       shift and go to state 90
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    FieldAccess                    shift and go to state 154
    SpecialName                    shift and go to state 118

state 245

    (2) OP_DIM -> LSQPAREN RSQPAREN .

    LSQPAREN        reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    LCURPAREN       reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    DOT             reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    OP_INC          reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    OP_DEC          reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    EQUAL           reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    ASS_MUL         reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    ASS_ADD         reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    ASS_SUB         reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    MULT            reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    DIV             reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    MOD             reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    PLUS            reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    MINUS           reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    OP_SHL          reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    OP_SHR          reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    OP_SHRR         reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    LESS            reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    MORE            reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    OP_LE           reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    OP_GE           reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    OP_EQ           reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    OP_NE           reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    &               reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    ^               reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    |               reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    OP_LAND         reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    OP_LOR          reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    QUES            reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    SEMICOLON       reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    RROUNPAREN      reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    COLON           reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    COMMA           reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    RSQPAREN        reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    IDENTIFIER      reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)
    LROUNPAREN      reduce using rule 2 (OP_DIM -> LSQPAREN RSQPAREN .)


state 246

    (172) Dims -> Dims OP_DIM .

    LSQPAREN        reduce using rule 172 (Dims -> Dims OP_DIM .)
    LCURPAREN       reduce using rule 172 (Dims -> Dims OP_DIM .)
    DOT             reduce using rule 172 (Dims -> Dims OP_DIM .)
    OP_INC          reduce using rule 172 (Dims -> Dims OP_DIM .)
    OP_DEC          reduce using rule 172 (Dims -> Dims OP_DIM .)
    EQUAL           reduce using rule 172 (Dims -> Dims OP_DIM .)
    ASS_MUL         reduce using rule 172 (Dims -> Dims OP_DIM .)
    ASS_ADD         reduce using rule 172 (Dims -> Dims OP_DIM .)
    ASS_SUB         reduce using rule 172 (Dims -> Dims OP_DIM .)
    MULT            reduce using rule 172 (Dims -> Dims OP_DIM .)
    DIV             reduce using rule 172 (Dims -> Dims OP_DIM .)
    MOD             reduce using rule 172 (Dims -> Dims OP_DIM .)
    PLUS            reduce using rule 172 (Dims -> Dims OP_DIM .)
    MINUS           reduce using rule 172 (Dims -> Dims OP_DIM .)
    OP_SHL          reduce using rule 172 (Dims -> Dims OP_DIM .)
    OP_SHR          reduce using rule 172 (Dims -> Dims OP_DIM .)
    OP_SHRR         reduce using rule 172 (Dims -> Dims OP_DIM .)
    LESS            reduce using rule 172 (Dims -> Dims OP_DIM .)
    MORE            reduce using rule 172 (Dims -> Dims OP_DIM .)
    OP_LE           reduce using rule 172 (Dims -> Dims OP_DIM .)
    OP_GE           reduce using rule 172 (Dims -> Dims OP_DIM .)
    OP_EQ           reduce using rule 172 (Dims -> Dims OP_DIM .)
    OP_NE           reduce using rule 172 (Dims -> Dims OP_DIM .)
    &               reduce using rule 172 (Dims -> Dims OP_DIM .)
    ^               reduce using rule 172 (Dims -> Dims OP_DIM .)
    |               reduce using rule 172 (Dims -> Dims OP_DIM .)
    OP_LAND         reduce using rule 172 (Dims -> Dims OP_DIM .)
    OP_LOR          reduce using rule 172 (Dims -> Dims OP_DIM .)
    QUES            reduce using rule 172 (Dims -> Dims OP_DIM .)
    SEMICOLON       reduce using rule 172 (Dims -> Dims OP_DIM .)
    RROUNPAREN      reduce using rule 172 (Dims -> Dims OP_DIM .)
    COLON           reduce using rule 172 (Dims -> Dims OP_DIM .)
    COMMA           reduce using rule 172 (Dims -> Dims OP_DIM .)
    RSQPAREN        reduce using rule 172 (Dims -> Dims OP_DIM .)
    IDENTIFIER      reduce using rule 172 (Dims -> Dims OP_DIM .)


state 247

    (77) ConstructorDeclarator -> IDENTIFIER LROUNPAREN RROUNPAREN .

    LCURPAREN       reduce using rule 77 (ConstructorDeclarator -> IDENTIFIER LROUNPAREN RROUNPAREN .)


state 248

    (66) ParameterList -> Parameter .

    RROUNPAREN      reduce using rule 66 (ParameterList -> Parameter .)
    COMMA           reduce using rule 66 (ParameterList -> Parameter .)


state 249

    (68) Parameter -> TypeSpecifier . DeclaratorName
    (69) DeclaratorName -> . IDENTIFIER
    (70) DeclaratorName -> . DeclaratorName OP_DIM

    IDENTIFIER      shift and go to state 79

    DeclaratorName                 shift and go to state 313

state 250

    (76) ConstructorDeclarator -> IDENTIFIER LROUNPAREN ParameterList . RROUNPAREN
    (67) ParameterList -> ParameterList . COMMA Parameter

    RROUNPAREN      shift and go to state 314
    COMMA           shift and go to state 315


state 251

    (62) MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .

    SEMICOLON       reduce using rule 62 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    RCURPAREN       reduce using rule 62 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    STATIC          reduce using rule 62 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    IDENTIFIER      reduce using rule 62 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    PUBLIC          reduce using rule 62 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    PRIVATE         reduce using rule 62 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    LCURPAREN       reduce using rule 62 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    CLASS           reduce using rule 62 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    BOOLEAN         reduce using rule 62 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    CHAR            reduce using rule 62 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    BYTE            reduce using rule 62 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    SHORT           reduce using rule 62 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    INT             reduce using rule 62 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    LONG            reduce using rule 62 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    FLOAT           reduce using rule 62 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    DOUBLE          reduce using rule 62 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)
    VOID            reduce using rule 62 (MethodDeclaration -> Modifiers TypeSpecifier MethodDeclarator MethodBody .)


state 252

    (58) VariableDeclarators -> VariableDeclarators COMMA VariableDeclarator .

    COMMA           reduce using rule 58 (VariableDeclarators -> VariableDeclarators COMMA VariableDeclarator .)
    SEMICOLON       reduce using rule 58 (VariableDeclarators -> VariableDeclarators COMMA VariableDeclarator .)


state 253

    (60) VariableDeclarator -> DeclaratorName EQUAL VariableInitializer .

    SEMICOLON       reduce using rule 60 (VariableDeclarator -> DeclaratorName EQUAL VariableInitializer .)
    COMMA           reduce using rule 60 (VariableDeclarator -> DeclaratorName EQUAL VariableInitializer .)


state 254

    (61) VariableInitializer -> Expression .

    COMMA           reduce using rule 61 (VariableInitializer -> Expression .)
    SEMICOLON       reduce using rule 61 (VariableInitializer -> Expression .)


state 255

    (65) MethodDeclarator -> DeclaratorName LROUNPAREN RROUNPAREN .

    LCURPAREN       reduce using rule 65 (MethodDeclarator -> DeclaratorName LROUNPAREN RROUNPAREN .)
    SEMICOLON       reduce using rule 65 (MethodDeclarator -> DeclaratorName LROUNPAREN RROUNPAREN .)


state 256

    (64) MethodDeclarator -> DeclaratorName LROUNPAREN ParameterList . RROUNPAREN
    (67) ParameterList -> ParameterList . COMMA Parameter

    RROUNPAREN      shift and go to state 316
    COMMA           shift and go to state 315


state 257

    (72) MethodBody -> LCURPAREN RCURPAREN .

    SEMICOLON       reduce using rule 72 (MethodBody -> LCURPAREN RCURPAREN .)
    RCURPAREN       reduce using rule 72 (MethodBody -> LCURPAREN RCURPAREN .)
    STATIC          reduce using rule 72 (MethodBody -> LCURPAREN RCURPAREN .)
    IDENTIFIER      reduce using rule 72 (MethodBody -> LCURPAREN RCURPAREN .)
    PUBLIC          reduce using rule 72 (MethodBody -> LCURPAREN RCURPAREN .)
    PRIVATE         reduce using rule 72 (MethodBody -> LCURPAREN RCURPAREN .)
    LCURPAREN       reduce using rule 72 (MethodBody -> LCURPAREN RCURPAREN .)
    CLASS           reduce using rule 72 (MethodBody -> LCURPAREN RCURPAREN .)
    BOOLEAN         reduce using rule 72 (MethodBody -> LCURPAREN RCURPAREN .)
    CHAR            reduce using rule 72 (MethodBody -> LCURPAREN RCURPAREN .)
    BYTE            reduce using rule 72 (MethodBody -> LCURPAREN RCURPAREN .)
    SHORT           reduce using rule 72 (MethodBody -> LCURPAREN RCURPAREN .)
    INT             reduce using rule 72 (MethodBody -> LCURPAREN RCURPAREN .)
    LONG            reduce using rule 72 (MethodBody -> LCURPAREN RCURPAREN .)
    FLOAT           reduce using rule 72 (MethodBody -> LCURPAREN RCURPAREN .)
    DOUBLE          reduce using rule 72 (MethodBody -> LCURPAREN RCURPAREN .)
    VOID            reduce using rule 72 (MethodBody -> LCURPAREN RCURPAREN .)


state 258

    (71) MethodBody -> LCURPAREN LocalVariableDeclarationsAndStatements . RCURPAREN
    (85) LocalVariableDeclarationsAndStatements -> LocalVariableDeclarationsAndStatements . LocalVariableDeclarationOrStatement
    (86) LocalVariableDeclarationOrStatement -> . LocalVariableDeclarationStatement
    (87) LocalVariableDeclarationOrStatement -> . Statement
    (88) LocalVariableDeclarationStatement -> . TypeSpecifier VariableDeclarators SEMICOLON
    (89) Statement -> . EmptyStatement Mark_quad
    (90) Statement -> . LabelStatement Mark_quad
    (91) Statement -> . ExpressionStatement SEMICOLON Mark_quad
    (92) Statement -> . JumpStatement Mark_quad
    (93) Statement -> . Block Mark_quad
    (94) Statement -> . IterationStatement Mark_quad
    (95) Statement -> . SelectionStatement Mark_quad
    (3) TypeSpecifier -> . TypeName
    (4) TypeSpecifier -> . TypeName Dims
    (97) EmptyStatement -> . SEMICOLON
    (98) LabelStatement -> . IDENTIFIER COLON
    (99) LabelStatement -> . CASE ConstantExpression COLON
    (100) LabelStatement -> . DEFAULT COLON
    (101) ExpressionStatement -> . Expression
    (123) JumpStatement -> . BREAK SEMICOLON
    (124) JumpStatement -> . RETURN Expression SEMICOLON
    (125) JumpStatement -> . RETURN SEMICOLON
    (80) Block -> . Bl LocalVariableDeclarationsAndStatements Br
    (81) Block -> . Bl Br
    (107) IterationStatement -> . WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement
    (109) IterationStatement -> . Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON
    (112) IterationStatement -> . Fr LROUNPAREN ForInit ForExpr Mark_for ForIncr RROUNPAREN Mark_quad Statement
    (102) SelectionStatement -> . If LROUNPAREN Expression RROUNPAREN Mark_if Statement
    (103) SelectionStatement -> . If LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement
    (5) TypeName -> . PrimitiveType
    (6) TypeName -> . QualifiedName
    (230) Expression -> . AssignmentExpression
    (82) Bl -> . LCURPAREN
    (110) Do -> . DO
    (113) Fr -> . FOR
    (104) If -> . IF
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (224) AssignmentExpression -> . ConditionalExpression
    (225) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (220) ConditionalExpression -> . ConditionalOrExpression
    (221) ConditionalExpression -> . ConditionalOrExpression Mark_quad Ques Mark_quad Expression Mark_quad Cln Mark_quad ConditionalExpression Mark_quad
    (177) UnaryExpression -> . OP_INC UnaryExpression
    (178) UnaryExpression -> . OP_DEC UnaryExpression
    (179) UnaryExpression -> . LogicalUnaryExpression
    (180) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) ConditionalOrExpression -> . ConditionalAndExpression
    (219) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (181) LogicalUnaryExpression -> . PostfixExpression
    (182) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (185) ArithmeticUnaryOperator -> . PLUS
    (186) ArithmeticUnaryOperator -> . MINUS
    (216) ConditionalAndExpression -> . InclusiveOrExpression
    (217) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (173) PostfixExpression -> . PrimaryExpression
    (174) PostfixExpression -> . RealPostfixExpression
    (183) LogicalUnaryOperator -> . ~
    (184) LogicalUnaryOperator -> . NOT
    (214) InclusiveOrExpression -> . ExclusiveOrExpression
    (215) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (126) PrimaryExpression -> . QualifiedName
    (127) PrimaryExpression -> . NotJustName
    (175) RealPostfixExpression -> . PostfixExpression OP_INC
    (176) RealPostfixExpression -> . PostfixExpression OP_DEC
    (212) ExclusiveOrExpression -> . AndExpression
    (213) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (128) NotJustName -> . SpecialName
    (129) NotJustName -> . NewAllocationExpression
    (130) NotJustName -> . ComplexPrimary
    (210) AndExpression -> . EqualityExpression
    (211) AndExpression -> . AndExpression & EqualityExpression
    (151) SpecialName -> . THIS
    (152) SpecialName -> . SUPER
    (153) SpecialName -> . NULL
    (156) NewAllocationExpression -> . PlainNewAllocationExpression
    (157) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (131) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (132) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (207) EqualityExpression -> . RelationalExpression
    (208) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (209) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (158) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (159) PlainNewAllocationExpression -> . ClassAllocationExpression
    (160) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (161) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (162) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (133) ComplexPrimaryNoParenthesis -> . INT_CONST
    (134) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (135) ComplexPrimaryNoParenthesis -> . STRING
    (136) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (137) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (138) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (139) ComplexPrimaryNoParenthesis -> . FieldAccess
    (140) ComplexPrimaryNoParenthesis -> . MethodCall
    (202) RelationalExpression -> . ShiftExpression
    (203) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (204) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (205) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (206) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (165) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (166) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (167) ArrayAllocationExpression -> . NEW TypeName Dims
    (163) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (164) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (141) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (142) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (143) FieldAccess -> . NotJustName DOT IDENTIFIER
    (144) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (145) FieldAccess -> . QualifiedName DOT THIS
    (146) FieldAccess -> . QualifiedName DOT CLASS
    (147) FieldAccess -> . PrimitiveType DOT CLASS
    (148) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (149) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (198) ShiftExpression -> . AdditiveExpression
    (199) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (200) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (201) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (150) MethodAccess -> . QualifiedName
    (195) AdditiveExpression -> . MultiplicativeExpression
    (196) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (197) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (191) MultiplicativeExpression -> . CastExpression
    (192) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (193) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (194) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (187) CastExpression -> . UnaryExpression

    RCURPAREN       shift and go to state 317
    SEMICOLON       shift and go to state 130
    IDENTIFIER      shift and go to state 132
    CASE            shift and go to state 128
    DEFAULT         shift and go to state 121
    BREAK           shift and go to state 98
    RETURN          shift and go to state 94
    WHILE           shift and go to state 123
    LCURPAREN       shift and go to state 58
    DO              shift and go to state 141
    FOR             shift and go to state 104
    IF              shift and go to state 153
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 124
    PLUS            shift and go to state 87
    MINUS           shift and go to state 86
    ~               shift and go to state 140
    NOT             shift and go to state 117
    THIS            shift and go to state 89
    SUPER           shift and go to state 156
    NULL            shift and go to state 143
    LROUNPAREN      shift and go to state 92
    INT_CONST       shift and go to state 106
    FLOAT_CONST     shift and go to state 83
    STRING          shift and go to state 149
    CHAR_CONST      shift and go to state 139
    BOOLEAN_CONST   shift and go to state 155
    NEW             shift and go to state 125

    PostfixExpression              shift and go to state 112
    LabelStatement                 shift and go to state 93
    ArithmeticUnaryOperator        shift and go to state 96
    AssignmentExpression           shift and go to state 103
    ExpressionStatement            shift and go to state 81
    JumpStatement                  shift and go to state 122
    RealPostfixExpression          shift and go to state 95
    Statement                      shift and go to state 84
    AndExpression                  shift and go to state 85
    ArrayAccess                    shift and go to state 108
    MultiplicativeExpression       shift and go to state 100
    TypeSpecifier                  shift and go to state 126
    CastExpression                 shift and go to state 142
    EqualityExpression             shift and go to state 97
    Do                             shift and go to state 144
    Fr                             shift and go to state 129
    MethodAccess                   shift and go to state 111
    ComplexPrimaryNoParenthesis    shift and go to state 99
    Bl                             shift and go to state 53
    ClassAllocationExpression      shift and go to state 120
    LogicalUnaryOperator           shift and go to state 145
    TypeName                       shift and go to state 54
    LocalVariableDeclarationStatement shift and go to state 146
    ShiftExpression                shift and go to state 147
    SelectionStatement             shift and go to state 102
    NotJustName                    shift and go to state 150
    ConditionalOrExpression        shift and go to state 131
    QualifiedName                  shift and go to state 151
    ComplexPrimary                 shift and go to state 119
    MethodCall                     shift and go to state 101
    PrimitiveType                  shift and go to state 82
    LogicalUnaryExpression         shift and go to state 152
    UnaryExpression                shift and go to state 137
    Expression                     shift and go to state 134
    Block                          shift and go to state 109
    AdditiveExpression             shift and go to state 135
    ArrayAllocationExpression      shift and go to state 110
    ConditionalExpression          shift and go to state 136
    InclusiveOrExpression          shift and go to state 138
    PrimaryExpression              shift and go to state 127
    ExclusiveOrExpression          shift and go to state 113
    ConditionalAndExpression       shift and go to state 90
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    LocalVariableDeclarationOrStatement shift and go to state 239
    NewAllocationExpression        shift and go to state 133
    FieldAccess                    shift and go to state 154
    EmptyStatement                 shift and go to state 91
    SpecialName                    shift and go to state 118
    IterationStatement             shift and go to state 157
    If                             shift and go to state 158

state 259

    (91) Statement -> ExpressionStatement SEMICOLON Mark_quad .

    WHILE           reduce using rule 91 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    RCURPAREN       reduce using rule 91 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    SEMICOLON       reduce using rule 91 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    IDENTIFIER      reduce using rule 91 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    CASE            reduce using rule 91 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    DEFAULT         reduce using rule 91 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    BREAK           reduce using rule 91 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    RETURN          reduce using rule 91 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    LCURPAREN       reduce using rule 91 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    DO              reduce using rule 91 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    FOR             reduce using rule 91 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    IF              reduce using rule 91 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    BOOLEAN         reduce using rule 91 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    CHAR            reduce using rule 91 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    BYTE            reduce using rule 91 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    SHORT           reduce using rule 91 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    INT             reduce using rule 91 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    LONG            reduce using rule 91 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    FLOAT           reduce using rule 91 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    DOUBLE          reduce using rule 91 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    VOID            reduce using rule 91 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    OP_INC          reduce using rule 91 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    OP_DEC          reduce using rule 91 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    PLUS            reduce using rule 91 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    MINUS           reduce using rule 91 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    ~               reduce using rule 91 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    NOT             reduce using rule 91 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    THIS            reduce using rule 91 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    SUPER           reduce using rule 91 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    NULL            reduce using rule 91 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    LROUNPAREN      reduce using rule 91 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    INT_CONST       reduce using rule 91 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    FLOAT_CONST     reduce using rule 91 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    STRING          reduce using rule 91 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    CHAR_CONST      reduce using rule 91 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    BOOLEAN_CONST   reduce using rule 91 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    NEW             reduce using rule 91 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)
    ELSE            reduce using rule 91 (Statement -> ExpressionStatement SEMICOLON Mark_quad .)


state 260

    (147) FieldAccess -> PrimitiveType DOT CLASS .

    LSQPAREN        reduce using rule 147 (FieldAccess -> PrimitiveType DOT CLASS .)
    DOT             reduce using rule 147 (FieldAccess -> PrimitiveType DOT CLASS .)
    OP_INC          reduce using rule 147 (FieldAccess -> PrimitiveType DOT CLASS .)
    OP_DEC          reduce using rule 147 (FieldAccess -> PrimitiveType DOT CLASS .)
    EQUAL           reduce using rule 147 (FieldAccess -> PrimitiveType DOT CLASS .)
    ASS_MUL         reduce using rule 147 (FieldAccess -> PrimitiveType DOT CLASS .)
    ASS_ADD         reduce using rule 147 (FieldAccess -> PrimitiveType DOT CLASS .)
    ASS_SUB         reduce using rule 147 (FieldAccess -> PrimitiveType DOT CLASS .)
    MULT            reduce using rule 147 (FieldAccess -> PrimitiveType DOT CLASS .)
    DIV             reduce using rule 147 (FieldAccess -> PrimitiveType DOT CLASS .)
    MOD             reduce using rule 147 (FieldAccess -> PrimitiveType DOT CLASS .)
    PLUS            reduce using rule 147 (FieldAccess -> PrimitiveType DOT CLASS .)
    MINUS           reduce using rule 147 (FieldAccess -> PrimitiveType DOT CLASS .)
    OP_SHL          reduce using rule 147 (FieldAccess -> PrimitiveType DOT CLASS .)
    OP_SHR          reduce using rule 147 (FieldAccess -> PrimitiveType DOT CLASS .)
    OP_SHRR         reduce using rule 147 (FieldAccess -> PrimitiveType DOT CLASS .)
    LESS            reduce using rule 147 (FieldAccess -> PrimitiveType DOT CLASS .)
    MORE            reduce using rule 147 (FieldAccess -> PrimitiveType DOT CLASS .)
    OP_LE           reduce using rule 147 (FieldAccess -> PrimitiveType DOT CLASS .)
    OP_GE           reduce using rule 147 (FieldAccess -> PrimitiveType DOT CLASS .)
    OP_EQ           reduce using rule 147 (FieldAccess -> PrimitiveType DOT CLASS .)
    OP_NE           reduce using rule 147 (FieldAccess -> PrimitiveType DOT CLASS .)
    &               reduce using rule 147 (FieldAccess -> PrimitiveType DOT CLASS .)
    ^               reduce using rule 147 (FieldAccess -> PrimitiveType DOT CLASS .)
    |               reduce using rule 147 (FieldAccess -> PrimitiveType DOT CLASS .)
    OP_LAND         reduce using rule 147 (FieldAccess -> PrimitiveType DOT CLASS .)
    OP_LOR          reduce using rule 147 (FieldAccess -> PrimitiveType DOT CLASS .)
    QUES            reduce using rule 147 (FieldAccess -> PrimitiveType DOT CLASS .)
    SEMICOLON       reduce using rule 147 (FieldAccess -> PrimitiveType DOT CLASS .)
    RROUNPAREN      reduce using rule 147 (FieldAccess -> PrimitiveType DOT CLASS .)
    COMMA           reduce using rule 147 (FieldAccess -> PrimitiveType DOT CLASS .)
    RSQPAREN        reduce using rule 147 (FieldAccess -> PrimitiveType DOT CLASS .)
    COLON           reduce using rule 147 (FieldAccess -> PrimitiveType DOT CLASS .)


state 261

    (211) AndExpression -> AndExpression & EqualityExpression .
    (208) EqualityExpression -> EqualityExpression . OP_EQ RelationalExpression
    (209) EqualityExpression -> EqualityExpression . OP_NE RelationalExpression

    &               reduce using rule 211 (AndExpression -> AndExpression & EqualityExpression .)
    ^               reduce using rule 211 (AndExpression -> AndExpression & EqualityExpression .)
    |               reduce using rule 211 (AndExpression -> AndExpression & EqualityExpression .)
    OP_LAND         reduce using rule 211 (AndExpression -> AndExpression & EqualityExpression .)
    OP_LOR          reduce using rule 211 (AndExpression -> AndExpression & EqualityExpression .)
    QUES            reduce using rule 211 (AndExpression -> AndExpression & EqualityExpression .)
    SEMICOLON       reduce using rule 211 (AndExpression -> AndExpression & EqualityExpression .)
    RROUNPAREN      reduce using rule 211 (AndExpression -> AndExpression & EqualityExpression .)
    COLON           reduce using rule 211 (AndExpression -> AndExpression & EqualityExpression .)
    COMMA           reduce using rule 211 (AndExpression -> AndExpression & EqualityExpression .)
    RSQPAREN        reduce using rule 211 (AndExpression -> AndExpression & EqualityExpression .)
    OP_EQ           shift and go to state 193
    OP_NE           shift and go to state 192


state 262

    (217) ConditionalAndExpression -> ConditionalAndExpression OP_LAND InclusiveOrExpression .
    (215) InclusiveOrExpression -> InclusiveOrExpression . | ExclusiveOrExpression

    OP_LAND         reduce using rule 217 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND InclusiveOrExpression .)
    OP_LOR          reduce using rule 217 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND InclusiveOrExpression .)
    QUES            reduce using rule 217 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND InclusiveOrExpression .)
    RROUNPAREN      reduce using rule 217 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND InclusiveOrExpression .)
    COMMA           reduce using rule 217 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND InclusiveOrExpression .)
    COLON           reduce using rule 217 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND InclusiveOrExpression .)
    RSQPAREN        reduce using rule 217 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND InclusiveOrExpression .)
    SEMICOLON       reduce using rule 217 (ConditionalAndExpression -> ConditionalAndExpression OP_LAND InclusiveOrExpression .)
    |               shift and go to state 232


state 263

    (131) ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .

    LSQPAREN        reduce using rule 131 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    DOT             reduce using rule 131 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    OP_INC          reduce using rule 131 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    OP_DEC          reduce using rule 131 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    MULT            reduce using rule 131 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    DIV             reduce using rule 131 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    MOD             reduce using rule 131 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    PLUS            reduce using rule 131 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    MINUS           reduce using rule 131 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    OP_SHL          reduce using rule 131 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    OP_SHR          reduce using rule 131 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    OP_SHRR         reduce using rule 131 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    LESS            reduce using rule 131 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    MORE            reduce using rule 131 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    OP_LE           reduce using rule 131 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    OP_GE           reduce using rule 131 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    OP_EQ           reduce using rule 131 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    OP_NE           reduce using rule 131 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    &               reduce using rule 131 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    ^               reduce using rule 131 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    |               reduce using rule 131 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    OP_LAND         reduce using rule 131 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    OP_LOR          reduce using rule 131 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    QUES            reduce using rule 131 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    SEMICOLON       reduce using rule 131 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    RROUNPAREN      reduce using rule 131 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    COLON           reduce using rule 131 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    COMMA           reduce using rule 131 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    RSQPAREN        reduce using rule 131 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    EQUAL           reduce using rule 131 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    ASS_MUL         reduce using rule 131 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    ASS_ADD         reduce using rule 131 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)
    ASS_SUB         reduce using rule 131 (ComplexPrimary -> LROUNPAREN Expression RROUNPAREN .)


state 264

    (124) JumpStatement -> RETURN Expression SEMICOLON .

    ELSE            reduce using rule 124 (JumpStatement -> RETURN Expression SEMICOLON .)
    RCURPAREN       reduce using rule 124 (JumpStatement -> RETURN Expression SEMICOLON .)
    SEMICOLON       reduce using rule 124 (JumpStatement -> RETURN Expression SEMICOLON .)
    IDENTIFIER      reduce using rule 124 (JumpStatement -> RETURN Expression SEMICOLON .)
    CASE            reduce using rule 124 (JumpStatement -> RETURN Expression SEMICOLON .)
    DEFAULT         reduce using rule 124 (JumpStatement -> RETURN Expression SEMICOLON .)
    BREAK           reduce using rule 124 (JumpStatement -> RETURN Expression SEMICOLON .)
    RETURN          reduce using rule 124 (JumpStatement -> RETURN Expression SEMICOLON .)
    WHILE           reduce using rule 124 (JumpStatement -> RETURN Expression SEMICOLON .)
    LCURPAREN       reduce using rule 124 (JumpStatement -> RETURN Expression SEMICOLON .)
    DO              reduce using rule 124 (JumpStatement -> RETURN Expression SEMICOLON .)
    FOR             reduce using rule 124 (JumpStatement -> RETURN Expression SEMICOLON .)
    IF              reduce using rule 124 (JumpStatement -> RETURN Expression SEMICOLON .)
    BOOLEAN         reduce using rule 124 (JumpStatement -> RETURN Expression SEMICOLON .)
    CHAR            reduce using rule 124 (JumpStatement -> RETURN Expression SEMICOLON .)
    BYTE            reduce using rule 124 (JumpStatement -> RETURN Expression SEMICOLON .)
    SHORT           reduce using rule 124 (JumpStatement -> RETURN Expression SEMICOLON .)
    INT             reduce using rule 124 (JumpStatement -> RETURN Expression SEMICOLON .)
    LONG            reduce using rule 124 (JumpStatement -> RETURN Expression SEMICOLON .)
    FLOAT           reduce using rule 124 (JumpStatement -> RETURN Expression SEMICOLON .)
    DOUBLE          reduce using rule 124 (JumpStatement -> RETURN Expression SEMICOLON .)
    VOID            reduce using rule 124 (JumpStatement -> RETURN Expression SEMICOLON .)
    OP_INC          reduce using rule 124 (JumpStatement -> RETURN Expression SEMICOLON .)
    OP_DEC          reduce using rule 124 (JumpStatement -> RETURN Expression SEMICOLON .)
    PLUS            reduce using rule 124 (JumpStatement -> RETURN Expression SEMICOLON .)
    MINUS           reduce using rule 124 (JumpStatement -> RETURN Expression SEMICOLON .)
    ~               reduce using rule 124 (JumpStatement -> RETURN Expression SEMICOLON .)
    NOT             reduce using rule 124 (JumpStatement -> RETURN Expression SEMICOLON .)
    THIS            reduce using rule 124 (JumpStatement -> RETURN Expression SEMICOLON .)
    SUPER           reduce using rule 124 (JumpStatement -> RETURN Expression SEMICOLON .)
    NULL            reduce using rule 124 (JumpStatement -> RETURN Expression SEMICOLON .)
    LROUNPAREN      reduce using rule 124 (JumpStatement -> RETURN Expression SEMICOLON .)
    INT_CONST       reduce using rule 124 (JumpStatement -> RETURN Expression SEMICOLON .)
    FLOAT_CONST     reduce using rule 124 (JumpStatement -> RETURN Expression SEMICOLON .)
    STRING          reduce using rule 124 (JumpStatement -> RETURN Expression SEMICOLON .)
    CHAR_CONST      reduce using rule 124 (JumpStatement -> RETURN Expression SEMICOLON .)
    BOOLEAN_CONST   reduce using rule 124 (JumpStatement -> RETURN Expression SEMICOLON .)
    NEW             reduce using rule 124 (JumpStatement -> RETURN Expression SEMICOLON .)


state 265

    (144) FieldAccess -> RealPostfixExpression DOT IDENTIFIER .

    LSQPAREN        reduce using rule 144 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    DOT             reduce using rule 144 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    OP_INC          reduce using rule 144 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    OP_DEC          reduce using rule 144 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    EQUAL           reduce using rule 144 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    ASS_MUL         reduce using rule 144 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    ASS_ADD         reduce using rule 144 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    ASS_SUB         reduce using rule 144 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    MULT            reduce using rule 144 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    DIV             reduce using rule 144 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    MOD             reduce using rule 144 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    PLUS            reduce using rule 144 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    MINUS           reduce using rule 144 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    OP_SHL          reduce using rule 144 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    OP_SHR          reduce using rule 144 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    OP_SHRR         reduce using rule 144 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    LESS            reduce using rule 144 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    MORE            reduce using rule 144 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    OP_LE           reduce using rule 144 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    OP_GE           reduce using rule 144 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    OP_EQ           reduce using rule 144 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    OP_NE           reduce using rule 144 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    &               reduce using rule 144 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    ^               reduce using rule 144 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    |               reduce using rule 144 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    OP_LAND         reduce using rule 144 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    OP_LOR          reduce using rule 144 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    QUES            reduce using rule 144 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    SEMICOLON       reduce using rule 144 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    RROUNPAREN      reduce using rule 144 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    COMMA           reduce using rule 144 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    RSQPAREN        reduce using rule 144 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)
    COLON           reduce using rule 144 (FieldAccess -> RealPostfixExpression DOT IDENTIFIER .)


state 266

    (209) EqualityExpression -> EqualityExpression OP_NE RelationalExpression .
    (203) RelationalExpression -> RelationalExpression . LESS ShiftExpression
    (204) RelationalExpression -> RelationalExpression . MORE ShiftExpression
    (205) RelationalExpression -> RelationalExpression . OP_LE ShiftExpression
    (206) RelationalExpression -> RelationalExpression . OP_GE ShiftExpression

    OP_EQ           reduce using rule 209 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    OP_NE           reduce using rule 209 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    &               reduce using rule 209 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    ^               reduce using rule 209 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    |               reduce using rule 209 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    OP_LAND         reduce using rule 209 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    OP_LOR          reduce using rule 209 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    QUES            reduce using rule 209 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    SEMICOLON       reduce using rule 209 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    RROUNPAREN      reduce using rule 209 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    COMMA           reduce using rule 209 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    COLON           reduce using rule 209 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    RSQPAREN        reduce using rule 209 (EqualityExpression -> EqualityExpression OP_NE RelationalExpression .)
    LESS            shift and go to state 206
    MORE            shift and go to state 209
    OP_LE           shift and go to state 207
    OP_GE           shift and go to state 208


state 267

    (208) EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .
    (203) RelationalExpression -> RelationalExpression . LESS ShiftExpression
    (204) RelationalExpression -> RelationalExpression . MORE ShiftExpression
    (205) RelationalExpression -> RelationalExpression . OP_LE ShiftExpression
    (206) RelationalExpression -> RelationalExpression . OP_GE ShiftExpression

    OP_EQ           reduce using rule 208 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    OP_NE           reduce using rule 208 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    &               reduce using rule 208 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    ^               reduce using rule 208 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    |               reduce using rule 208 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    OP_LAND         reduce using rule 208 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    OP_LOR          reduce using rule 208 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    QUES            reduce using rule 208 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    SEMICOLON       reduce using rule 208 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    RROUNPAREN      reduce using rule 208 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    COMMA           reduce using rule 208 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    COLON           reduce using rule 208 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    RSQPAREN        reduce using rule 208 (EqualityExpression -> EqualityExpression OP_EQ RelationalExpression .)
    LESS            shift and go to state 206
    MORE            shift and go to state 209
    OP_LE           shift and go to state 207
    OP_GE           shift and go to state 208


state 268

    (193) MultiplicativeExpression -> MultiplicativeExpression DIV CastExpression .

    MULT            reduce using rule 193 (MultiplicativeExpression -> MultiplicativeExpression DIV CastExpression .)
    DIV             reduce using rule 193 (MultiplicativeExpression -> MultiplicativeExpression DIV CastExpression .)
    MOD             reduce using rule 193 (MultiplicativeExpression -> MultiplicativeExpression DIV CastExpression .)
    PLUS            reduce using rule 193 (MultiplicativeExpression -> MultiplicativeExpression DIV CastExpression .)
    MINUS           reduce using rule 193 (MultiplicativeExpression -> MultiplicativeExpression DIV CastExpression .)
    OP_SHL          reduce using rule 193 (MultiplicativeExpression -> MultiplicativeExpression DIV CastExpression .)
    OP_SHR          reduce using rule 193 (MultiplicativeExpression -> MultiplicativeExpression DIV CastExpression .)
    OP_SHRR         reduce using rule 193 (MultiplicativeExpression -> MultiplicativeExpression DIV CastExpression .)
    LESS            reduce using rule 193 (MultiplicativeExpression -> MultiplicativeExpression DIV CastExpression .)
    MORE            reduce using rule 193 (MultiplicativeExpression -> MultiplicativeExpression DIV CastExpression .)
    OP_LE           reduce using rule 193 (MultiplicativeExpression -> MultiplicativeExpression DIV CastExpression .)
    OP_GE           reduce using rule 193 (MultiplicativeExpression -> MultiplicativeExpression DIV CastExpression .)
    OP_EQ           reduce using rule 193 (MultiplicativeExpression -> MultiplicativeExpression DIV CastExpression .)
    OP_NE           reduce using rule 193 (MultiplicativeExpression -> MultiplicativeExpression DIV CastExpression .)
    &               reduce using rule 193 (MultiplicativeExpression -> MultiplicativeExpression DIV CastExpression .)
    ^               reduce using rule 193 (MultiplicativeExpression -> MultiplicativeExpression DIV CastExpression .)
    |               reduce using rule 193 (MultiplicativeExpression -> MultiplicativeExpression DIV CastExpression .)
    OP_LAND         reduce using rule 193 (MultiplicativeExpression -> MultiplicativeExpression DIV CastExpression .)
    OP_LOR          reduce using rule 193 (MultiplicativeExpression -> MultiplicativeExpression DIV CastExpression .)
    QUES            reduce using rule 193 (MultiplicativeExpression -> MultiplicativeExpression DIV CastExpression .)
    SEMICOLON       reduce using rule 193 (MultiplicativeExpression -> MultiplicativeExpression DIV CastExpression .)
    COMMA           reduce using rule 193 (MultiplicativeExpression -> MultiplicativeExpression DIV CastExpression .)
    RROUNPAREN      reduce using rule 193 (MultiplicativeExpression -> MultiplicativeExpression DIV CastExpression .)
    COLON           reduce using rule 193 (MultiplicativeExpression -> MultiplicativeExpression DIV CastExpression .)
    RSQPAREN        reduce using rule 193 (MultiplicativeExpression -> MultiplicativeExpression DIV CastExpression .)


state 269

    (192) MultiplicativeExpression -> MultiplicativeExpression MULT CastExpression .

    MULT            reduce using rule 192 (MultiplicativeExpression -> MultiplicativeExpression MULT CastExpression .)
    DIV             reduce using rule 192 (MultiplicativeExpression -> MultiplicativeExpression MULT CastExpression .)
    MOD             reduce using rule 192 (MultiplicativeExpression -> MultiplicativeExpression MULT CastExpression .)
    PLUS            reduce using rule 192 (MultiplicativeExpression -> MultiplicativeExpression MULT CastExpression .)
    MINUS           reduce using rule 192 (MultiplicativeExpression -> MultiplicativeExpression MULT CastExpression .)
    OP_SHL          reduce using rule 192 (MultiplicativeExpression -> MultiplicativeExpression MULT CastExpression .)
    OP_SHR          reduce using rule 192 (MultiplicativeExpression -> MultiplicativeExpression MULT CastExpression .)
    OP_SHRR         reduce using rule 192 (MultiplicativeExpression -> MultiplicativeExpression MULT CastExpression .)
    LESS            reduce using rule 192 (MultiplicativeExpression -> MultiplicativeExpression MULT CastExpression .)
    MORE            reduce using rule 192 (MultiplicativeExpression -> MultiplicativeExpression MULT CastExpression .)
    OP_LE           reduce using rule 192 (MultiplicativeExpression -> MultiplicativeExpression MULT CastExpression .)
    OP_GE           reduce using rule 192 (MultiplicativeExpression -> MultiplicativeExpression MULT CastExpression .)
    OP_EQ           reduce using rule 192 (MultiplicativeExpression -> MultiplicativeExpression MULT CastExpression .)
    OP_NE           reduce using rule 192 (MultiplicativeExpression -> MultiplicativeExpression MULT CastExpression .)
    &               reduce using rule 192 (MultiplicativeExpression -> MultiplicativeExpression MULT CastExpression .)
    ^               reduce using rule 192 (MultiplicativeExpression -> MultiplicativeExpression MULT CastExpression .)
    |               reduce using rule 192 (MultiplicativeExpression -> MultiplicativeExpression MULT CastExpression .)
    OP_LAND         reduce using rule 192 (MultiplicativeExpression -> MultiplicativeExpression MULT CastExpression .)
    OP_LOR          reduce using rule 192 (MultiplicativeExpression -> MultiplicativeExpression MULT CastExpression .)
    QUES            reduce using rule 192 (MultiplicativeExpression -> MultiplicativeExpression MULT CastExpression .)
    SEMICOLON       reduce using rule 192 (MultiplicativeExpression -> MultiplicativeExpression MULT CastExpression .)
    COMMA           reduce using rule 192 (MultiplicativeExpression -> MultiplicativeExpression MULT CastExpression .)
    RROUNPAREN      reduce using rule 192 (MultiplicativeExpression -> MultiplicativeExpression MULT CastExpression .)
    COLON           reduce using rule 192 (MultiplicativeExpression -> MultiplicativeExpression MULT CastExpression .)
    RSQPAREN        reduce using rule 192 (MultiplicativeExpression -> MultiplicativeExpression MULT CastExpression .)


state 270

    (194) MultiplicativeExpression -> MultiplicativeExpression MOD CastExpression .

    MULT            reduce using rule 194 (MultiplicativeExpression -> MultiplicativeExpression MOD CastExpression .)
    DIV             reduce using rule 194 (MultiplicativeExpression -> MultiplicativeExpression MOD CastExpression .)
    MOD             reduce using rule 194 (MultiplicativeExpression -> MultiplicativeExpression MOD CastExpression .)
    PLUS            reduce using rule 194 (MultiplicativeExpression -> MultiplicativeExpression MOD CastExpression .)
    MINUS           reduce using rule 194 (MultiplicativeExpression -> MultiplicativeExpression MOD CastExpression .)
    OP_SHL          reduce using rule 194 (MultiplicativeExpression -> MultiplicativeExpression MOD CastExpression .)
    OP_SHR          reduce using rule 194 (MultiplicativeExpression -> MultiplicativeExpression MOD CastExpression .)
    OP_SHRR         reduce using rule 194 (MultiplicativeExpression -> MultiplicativeExpression MOD CastExpression .)
    LESS            reduce using rule 194 (MultiplicativeExpression -> MultiplicativeExpression MOD CastExpression .)
    MORE            reduce using rule 194 (MultiplicativeExpression -> MultiplicativeExpression MOD CastExpression .)
    OP_LE           reduce using rule 194 (MultiplicativeExpression -> MultiplicativeExpression MOD CastExpression .)
    OP_GE           reduce using rule 194 (MultiplicativeExpression -> MultiplicativeExpression MOD CastExpression .)
    OP_EQ           reduce using rule 194 (MultiplicativeExpression -> MultiplicativeExpression MOD CastExpression .)
    OP_NE           reduce using rule 194 (MultiplicativeExpression -> MultiplicativeExpression MOD CastExpression .)
    &               reduce using rule 194 (MultiplicativeExpression -> MultiplicativeExpression MOD CastExpression .)
    ^               reduce using rule 194 (MultiplicativeExpression -> MultiplicativeExpression MOD CastExpression .)
    |               reduce using rule 194 (MultiplicativeExpression -> MultiplicativeExpression MOD CastExpression .)
    OP_LAND         reduce using rule 194 (MultiplicativeExpression -> MultiplicativeExpression MOD CastExpression .)
    OP_LOR          reduce using rule 194 (MultiplicativeExpression -> MultiplicativeExpression MOD CastExpression .)
    QUES            reduce using rule 194 (MultiplicativeExpression -> MultiplicativeExpression MOD CastExpression .)
    SEMICOLON       reduce using rule 194 (MultiplicativeExpression -> MultiplicativeExpression MOD CastExpression .)
    COMMA           reduce using rule 194 (MultiplicativeExpression -> MultiplicativeExpression MOD CastExpression .)
    RROUNPAREN      reduce using rule 194 (MultiplicativeExpression -> MultiplicativeExpression MOD CastExpression .)
    COLON           reduce using rule 194 (MultiplicativeExpression -> MultiplicativeExpression MOD CastExpression .)
    RSQPAREN        reduce using rule 194 (MultiplicativeExpression -> MultiplicativeExpression MOD CastExpression .)


state 271

    (160) PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .

    DOT             reduce using rule 160 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    OP_INC          reduce using rule 160 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    OP_DEC          reduce using rule 160 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    MULT            reduce using rule 160 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    DIV             reduce using rule 160 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    MOD             reduce using rule 160 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    PLUS            reduce using rule 160 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    MINUS           reduce using rule 160 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    OP_SHL          reduce using rule 160 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    OP_SHR          reduce using rule 160 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    OP_SHRR         reduce using rule 160 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    LESS            reduce using rule 160 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    MORE            reduce using rule 160 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    OP_LE           reduce using rule 160 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    OP_GE           reduce using rule 160 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    OP_EQ           reduce using rule 160 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    OP_NE           reduce using rule 160 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    &               reduce using rule 160 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    ^               reduce using rule 160 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    |               reduce using rule 160 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    OP_LAND         reduce using rule 160 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    OP_LOR          reduce using rule 160 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    QUES            reduce using rule 160 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    SEMICOLON       reduce using rule 160 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    RROUNPAREN      reduce using rule 160 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    COLON           reduce using rule 160 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    COMMA           reduce using rule 160 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    RSQPAREN        reduce using rule 160 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    EQUAL           reduce using rule 160 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    ASS_MUL         reduce using rule 160 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    ASS_ADD         reduce using rule 160 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)
    ASS_SUB         reduce using rule 160 (PlainNewAllocationExpression -> ArrayAllocationExpression LCURPAREN RCURPAREN .)


state 272

    (148) MethodCall -> MethodAccess LROUNPAREN ArgumentList . RROUNPAREN
    (155) ArgumentList -> ArgumentList . COMMA Expression

    RROUNPAREN      shift and go to state 318
    COMMA           shift and go to state 319


state 273

    (149) MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .

    LSQPAREN        reduce using rule 149 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    DOT             reduce using rule 149 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    OP_INC          reduce using rule 149 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    OP_DEC          reduce using rule 149 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    EQUAL           reduce using rule 149 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    ASS_MUL         reduce using rule 149 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    ASS_ADD         reduce using rule 149 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    ASS_SUB         reduce using rule 149 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    MULT            reduce using rule 149 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    DIV             reduce using rule 149 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    MOD             reduce using rule 149 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    PLUS            reduce using rule 149 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    MINUS           reduce using rule 149 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    OP_SHL          reduce using rule 149 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    OP_SHR          reduce using rule 149 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    OP_SHRR         reduce using rule 149 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    LESS            reduce using rule 149 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    MORE            reduce using rule 149 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    OP_LE           reduce using rule 149 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    OP_GE           reduce using rule 149 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    OP_EQ           reduce using rule 149 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    OP_NE           reduce using rule 149 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    &               reduce using rule 149 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    ^               reduce using rule 149 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    |               reduce using rule 149 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    OP_LAND         reduce using rule 149 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    OP_LOR          reduce using rule 149 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    QUES            reduce using rule 149 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    SEMICOLON       reduce using rule 149 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    RSQPAREN        reduce using rule 149 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    RROUNPAREN      reduce using rule 149 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    COLON           reduce using rule 149 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)
    COMMA           reduce using rule 149 (MethodCall -> MethodAccess LROUNPAREN RROUNPAREN .)


state 274

    (154) ArgumentList -> Expression .

    RROUNPAREN      reduce using rule 154 (ArgumentList -> Expression .)
    COMMA           reduce using rule 154 (ArgumentList -> Expression .)


state 275

    (213) ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .
    (211) AndExpression -> AndExpression . & EqualityExpression

    ^               reduce using rule 213 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    |               reduce using rule 213 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    OP_LAND         reduce using rule 213 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    OP_LOR          reduce using rule 213 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    QUES            reduce using rule 213 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    SEMICOLON       reduce using rule 213 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    RSQPAREN        reduce using rule 213 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    COLON           reduce using rule 213 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    COMMA           reduce using rule 213 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    RROUNPAREN      reduce using rule 213 (ExclusiveOrExpression -> ExclusiveOrExpression ^ AndExpression .)
    &               shift and go to state 180


state 276

    (203) RelationalExpression -> RelationalExpression LESS ShiftExpression .
    (199) ShiftExpression -> ShiftExpression . OP_SHL AdditiveExpression
    (200) ShiftExpression -> ShiftExpression . OP_SHR AdditiveExpression
    (201) ShiftExpression -> ShiftExpression . OP_SHRR AdditiveExpression

    LESS            reduce using rule 203 (RelationalExpression -> RelationalExpression LESS ShiftExpression .)
    MORE            reduce using rule 203 (RelationalExpression -> RelationalExpression LESS ShiftExpression .)
    OP_LE           reduce using rule 203 (RelationalExpression -> RelationalExpression LESS ShiftExpression .)
    OP_GE           reduce using rule 203 (RelationalExpression -> RelationalExpression LESS ShiftExpression .)
    OP_EQ           reduce using rule 203 (RelationalExpression -> RelationalExpression LESS ShiftExpression .)
    OP_NE           reduce using rule 203 (RelationalExpression -> RelationalExpression LESS ShiftExpression .)
    &               reduce using rule 203 (RelationalExpression -> RelationalExpression LESS ShiftExpression .)
    ^               reduce using rule 203 (RelationalExpression -> RelationalExpression LESS ShiftExpression .)
    |               reduce using rule 203 (RelationalExpression -> RelationalExpression LESS ShiftExpression .)
    OP_LAND         reduce using rule 203 (RelationalExpression -> RelationalExpression LESS ShiftExpression .)
    OP_LOR          reduce using rule 203 (RelationalExpression -> RelationalExpression LESS ShiftExpression .)
    QUES            reduce using rule 203 (RelationalExpression -> RelationalExpression LESS ShiftExpression .)
    COMMA           reduce using rule 203 (RelationalExpression -> RelationalExpression LESS ShiftExpression .)
    RROUNPAREN      reduce using rule 203 (RelationalExpression -> RelationalExpression LESS ShiftExpression .)
    SEMICOLON       reduce using rule 203 (RelationalExpression -> RelationalExpression LESS ShiftExpression .)
    RSQPAREN        reduce using rule 203 (RelationalExpression -> RelationalExpression LESS ShiftExpression .)
    COLON           reduce using rule 203 (RelationalExpression -> RelationalExpression LESS ShiftExpression .)
    OP_SHL          shift and go to state 235
    OP_SHR          shift and go to state 237
    OP_SHRR         shift and go to state 236


state 277

    (205) RelationalExpression -> RelationalExpression OP_LE ShiftExpression .
    (199) ShiftExpression -> ShiftExpression . OP_SHL AdditiveExpression
    (200) ShiftExpression -> ShiftExpression . OP_SHR AdditiveExpression
    (201) ShiftExpression -> ShiftExpression . OP_SHRR AdditiveExpression

    LESS            reduce using rule 205 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    MORE            reduce using rule 205 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    OP_LE           reduce using rule 205 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    OP_GE           reduce using rule 205 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    OP_EQ           reduce using rule 205 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    OP_NE           reduce using rule 205 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    &               reduce using rule 205 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    ^               reduce using rule 205 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    |               reduce using rule 205 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    OP_LAND         reduce using rule 205 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    OP_LOR          reduce using rule 205 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    QUES            reduce using rule 205 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    COMMA           reduce using rule 205 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    RROUNPAREN      reduce using rule 205 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    SEMICOLON       reduce using rule 205 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    RSQPAREN        reduce using rule 205 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    COLON           reduce using rule 205 (RelationalExpression -> RelationalExpression OP_LE ShiftExpression .)
    OP_SHL          shift and go to state 235
    OP_SHR          shift and go to state 237
    OP_SHRR         shift and go to state 236


state 278

    (206) RelationalExpression -> RelationalExpression OP_GE ShiftExpression .
    (199) ShiftExpression -> ShiftExpression . OP_SHL AdditiveExpression
    (200) ShiftExpression -> ShiftExpression . OP_SHR AdditiveExpression
    (201) ShiftExpression -> ShiftExpression . OP_SHRR AdditiveExpression

    LESS            reduce using rule 206 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    MORE            reduce using rule 206 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    OP_LE           reduce using rule 206 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    OP_GE           reduce using rule 206 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    OP_EQ           reduce using rule 206 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    OP_NE           reduce using rule 206 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    &               reduce using rule 206 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    ^               reduce using rule 206 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    |               reduce using rule 206 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    OP_LAND         reduce using rule 206 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    OP_LOR          reduce using rule 206 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    QUES            reduce using rule 206 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    COMMA           reduce using rule 206 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    RROUNPAREN      reduce using rule 206 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    SEMICOLON       reduce using rule 206 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    RSQPAREN        reduce using rule 206 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    COLON           reduce using rule 206 (RelationalExpression -> RelationalExpression OP_GE ShiftExpression .)
    OP_SHL          shift and go to state 235
    OP_SHR          shift and go to state 237
    OP_SHRR         shift and go to state 236


state 279

    (204) RelationalExpression -> RelationalExpression MORE ShiftExpression .
    (199) ShiftExpression -> ShiftExpression . OP_SHL AdditiveExpression
    (200) ShiftExpression -> ShiftExpression . OP_SHR AdditiveExpression
    (201) ShiftExpression -> ShiftExpression . OP_SHRR AdditiveExpression

    LESS            reduce using rule 204 (RelationalExpression -> RelationalExpression MORE ShiftExpression .)
    MORE            reduce using rule 204 (RelationalExpression -> RelationalExpression MORE ShiftExpression .)
    OP_LE           reduce using rule 204 (RelationalExpression -> RelationalExpression MORE ShiftExpression .)
    OP_GE           reduce using rule 204 (RelationalExpression -> RelationalExpression MORE ShiftExpression .)
    OP_EQ           reduce using rule 204 (RelationalExpression -> RelationalExpression MORE ShiftExpression .)
    OP_NE           reduce using rule 204 (RelationalExpression -> RelationalExpression MORE ShiftExpression .)
    &               reduce using rule 204 (RelationalExpression -> RelationalExpression MORE ShiftExpression .)
    ^               reduce using rule 204 (RelationalExpression -> RelationalExpression MORE ShiftExpression .)
    |               reduce using rule 204 (RelationalExpression -> RelationalExpression MORE ShiftExpression .)
    OP_LAND         reduce using rule 204 (RelationalExpression -> RelationalExpression MORE ShiftExpression .)
    OP_LOR          reduce using rule 204 (RelationalExpression -> RelationalExpression MORE ShiftExpression .)
    QUES            reduce using rule 204 (RelationalExpression -> RelationalExpression MORE ShiftExpression .)
    COMMA           reduce using rule 204 (RelationalExpression -> RelationalExpression MORE ShiftExpression .)
    RROUNPAREN      reduce using rule 204 (RelationalExpression -> RelationalExpression MORE ShiftExpression .)
    SEMICOLON       reduce using rule 204 (RelationalExpression -> RelationalExpression MORE ShiftExpression .)
    RSQPAREN        reduce using rule 204 (RelationalExpression -> RelationalExpression MORE ShiftExpression .)
    COLON           reduce using rule 204 (RelationalExpression -> RelationalExpression MORE ShiftExpression .)
    OP_SHL          shift and go to state 235
    OP_SHR          shift and go to state 237
    OP_SHRR         shift and go to state 236


state 280

    (142) ArrayAccess -> ComplexPrimary LSQPAREN Expression . RSQPAREN

    RSQPAREN        shift and go to state 320


state 281

    (161) PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .

    DOT             reduce using rule 161 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    OP_INC          reduce using rule 161 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    OP_DEC          reduce using rule 161 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    MULT            reduce using rule 161 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    DIV             reduce using rule 161 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    MOD             reduce using rule 161 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    PLUS            reduce using rule 161 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    MINUS           reduce using rule 161 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    OP_SHL          reduce using rule 161 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    OP_SHR          reduce using rule 161 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    OP_SHRR         reduce using rule 161 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    LESS            reduce using rule 161 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    MORE            reduce using rule 161 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    OP_LE           reduce using rule 161 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    OP_GE           reduce using rule 161 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    OP_EQ           reduce using rule 161 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    OP_NE           reduce using rule 161 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    &               reduce using rule 161 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    ^               reduce using rule 161 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    |               reduce using rule 161 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    OP_LAND         reduce using rule 161 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    OP_LOR          reduce using rule 161 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    QUES            reduce using rule 161 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    SEMICOLON       reduce using rule 161 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    RROUNPAREN      reduce using rule 161 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    COLON           reduce using rule 161 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    COMMA           reduce using rule 161 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    RSQPAREN        reduce using rule 161 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    EQUAL           reduce using rule 161 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    ASS_MUL         reduce using rule 161 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    ASS_ADD         reduce using rule 161 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)
    ASS_SUB         reduce using rule 161 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN RCURPAREN .)


state 282

    (162) PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations . RCURPAREN
    (46) FieldDeclarations -> FieldDeclarations . FieldDeclarationOptSemi
    (47) FieldDeclarationOptSemi -> . FieldDeclaration
    (48) FieldDeclarationOptSemi -> . FieldDeclaration SemiColons
    (49) FieldDeclaration -> . FieldVariableDeclaration SEMICOLON
    (50) FieldDeclaration -> . MethodDeclaration
    (51) FieldDeclaration -> . ConstructorDeclaration
    (52) FieldDeclaration -> . StaticInitializer
    (53) FieldDeclaration -> . NonStaticInitializer
    (54) FieldDeclaration -> . TypeDeclaration
    (55) FieldVariableDeclaration -> . Modifiers TypeSpecifier VariableDeclarators
    (56) FieldVariableDeclaration -> . TypeSpecifier VariableDeclarators
    (62) MethodDeclaration -> . Modifiers TypeSpecifier MethodDeclarator MethodBody
    (63) MethodDeclaration -> . TypeSpecifier MethodDeclarator MethodBody
    (74) ConstructorDeclaration -> . Modifiers ConstructorDeclarator Block
    (75) ConstructorDeclaration -> . ConstructorDeclarator Block
    (78) StaticInitializer -> . STATIC Block
    (79) NonStaticInitializer -> . Block
    (35) TypeDeclaration -> . ClassHeader LCURPAREN FieldDeclarations RCURPAREN
    (36) TypeDeclaration -> . ClassHeader LCURPAREN RCURPAREN
    (39) Modifiers -> . Modifier
    (40) Modifiers -> . Modifiers Modifier
    (3) TypeSpecifier -> . TypeName
    (4) TypeSpecifier -> . TypeName Dims
    (76) ConstructorDeclarator -> . IDENTIFIER LROUNPAREN ParameterList RROUNPAREN
    (77) ConstructorDeclarator -> . IDENTIFIER LROUNPAREN RROUNPAREN
    (80) Block -> . Bl LocalVariableDeclarationsAndStatements Br
    (81) Block -> . Bl Br
    (37) ClassHeader -> . Modifiers ClassWord IDENTIFIER
    (38) ClassHeader -> . ClassWord IDENTIFIER
    (41) Modifier -> . PUBLIC
    (42) Modifier -> . PRIVATE
    (43) Modifier -> . STATIC
    (5) TypeName -> . PrimitiveType
    (6) TypeName -> . QualifiedName
    (82) Bl -> . LCURPAREN
    (44) ClassWord -> . CLASS
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER

    RCURPAREN       shift and go to state 321
    STATIC          shift and go to state 48
    IDENTIFIER      shift and go to state 55
    PUBLIC          shift and go to state 18
    PRIVATE         shift and go to state 4
    LCURPAREN       shift and go to state 58
    CLASS           shift and go to state 6
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43

    FieldVariableDeclaration       shift and go to state 42
    TypeDeclaration                shift and go to state 44
    PrimitiveType                  shift and go to state 45
    StaticInitializer              shift and go to state 46
    NonStaticInitializer           shift and go to state 50
    TypeSpecifier                  shift and go to state 51
    QualifiedName                  shift and go to state 52
    Bl                             shift and go to state 53
    TypeName                       shift and go to state 54
    MethodDeclaration              shift and go to state 56
    Modifiers                      shift and go to state 47
    ConstructorDeclaration         shift and go to state 41
    Modifier                       shift and go to state 12
    Block                          shift and go to state 61
    ClassWord                      shift and go to state 14
    FieldDeclarationOptSemi        shift and go to state 164
    ConstructorDeclarator          shift and go to state 63
    ClassHeader                    shift and go to state 17
    FieldDeclaration               shift and go to state 69

state 283

    (107) IterationStatement -> WHILE Mark_quad LROUNPAREN . Expression RROUNPAREN Mark_while Statement
    (230) Expression -> . AssignmentExpression
    (224) AssignmentExpression -> . ConditionalExpression
    (225) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (220) ConditionalExpression -> . ConditionalOrExpression
    (221) ConditionalExpression -> . ConditionalOrExpression Mark_quad Ques Mark_quad Expression Mark_quad Cln Mark_quad ConditionalExpression Mark_quad
    (177) UnaryExpression -> . OP_INC UnaryExpression
    (178) UnaryExpression -> . OP_DEC UnaryExpression
    (179) UnaryExpression -> . LogicalUnaryExpression
    (180) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) ConditionalOrExpression -> . ConditionalAndExpression
    (219) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (181) LogicalUnaryExpression -> . PostfixExpression
    (182) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (185) ArithmeticUnaryOperator -> . PLUS
    (186) ArithmeticUnaryOperator -> . MINUS
    (216) ConditionalAndExpression -> . InclusiveOrExpression
    (217) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (173) PostfixExpression -> . PrimaryExpression
    (174) PostfixExpression -> . RealPostfixExpression
    (183) LogicalUnaryOperator -> . ~
    (184) LogicalUnaryOperator -> . NOT
    (214) InclusiveOrExpression -> . ExclusiveOrExpression
    (215) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (126) PrimaryExpression -> . QualifiedName
    (127) PrimaryExpression -> . NotJustName
    (175) RealPostfixExpression -> . PostfixExpression OP_INC
    (176) RealPostfixExpression -> . PostfixExpression OP_DEC
    (212) ExclusiveOrExpression -> . AndExpression
    (213) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (128) NotJustName -> . SpecialName
    (129) NotJustName -> . NewAllocationExpression
    (130) NotJustName -> . ComplexPrimary
    (210) AndExpression -> . EqualityExpression
    (211) AndExpression -> . AndExpression & EqualityExpression
    (151) SpecialName -> . THIS
    (152) SpecialName -> . SUPER
    (153) SpecialName -> . NULL
    (156) NewAllocationExpression -> . PlainNewAllocationExpression
    (157) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (131) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (132) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (207) EqualityExpression -> . RelationalExpression
    (208) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (209) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (158) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (159) PlainNewAllocationExpression -> . ClassAllocationExpression
    (160) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (161) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (162) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (133) ComplexPrimaryNoParenthesis -> . INT_CONST
    (134) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (135) ComplexPrimaryNoParenthesis -> . STRING
    (136) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (137) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (138) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (139) ComplexPrimaryNoParenthesis -> . FieldAccess
    (140) ComplexPrimaryNoParenthesis -> . MethodCall
    (202) RelationalExpression -> . ShiftExpression
    (203) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (204) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (205) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (206) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (165) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (166) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (167) ArrayAllocationExpression -> . NEW TypeName Dims
    (163) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (164) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (141) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (142) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (143) FieldAccess -> . NotJustName DOT IDENTIFIER
    (144) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (145) FieldAccess -> . QualifiedName DOT THIS
    (146) FieldAccess -> . QualifiedName DOT CLASS
    (147) FieldAccess -> . PrimitiveType DOT CLASS
    (148) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (149) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (198) ShiftExpression -> . AdditiveExpression
    (199) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (200) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (201) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (150) MethodAccess -> . QualifiedName
    (195) AdditiveExpression -> . MultiplicativeExpression
    (196) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (197) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (191) MultiplicativeExpression -> . CastExpression
    (192) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (193) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (194) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (187) CastExpression -> . UnaryExpression

    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 124
    PLUS            shift and go to state 87
    MINUS           shift and go to state 86
    ~               shift and go to state 140
    NOT             shift and go to state 117
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 89
    SUPER           shift and go to state 156
    NULL            shift and go to state 143
    LROUNPAREN      shift and go to state 92
    INT_CONST       shift and go to state 106
    FLOAT_CONST     shift and go to state 83
    STRING          shift and go to state 149
    CHAR_CONST      shift and go to state 139
    BOOLEAN_CONST   shift and go to state 155
    NEW             shift and go to state 125
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 119
    PrimaryExpression              shift and go to state 127
    PrimitiveType                  shift and go to state 183
    RealPostfixExpression          shift and go to state 95
    AndExpression                  shift and go to state 85
    ArrayAccess                    shift and go to state 108
    CastExpression                 shift and go to state 142
    EqualityExpression             shift and go to state 97
    LogicalUnaryOperator           shift and go to state 145
    ComplexPrimaryNoParenthesis    shift and go to state 99
    MultiplicativeExpression       shift and go to state 100
    ClassAllocationExpression      shift and go to state 120
    MethodCall                     shift and go to state 101
    ConditionalOrExpression        shift and go to state 131
    ShiftExpression                shift and go to state 147
    ArithmeticUnaryOperator        shift and go to state 96
    AssignmentExpression           shift and go to state 103
    NewAllocationExpression        shift and go to state 133
    NotJustName                    shift and go to state 150
    QualifiedName                  shift and go to state 185
    LogicalUnaryExpression         shift and go to state 152
    Expression                     shift and go to state 322
    AdditiveExpression             shift and go to state 135
    ArrayAllocationExpression      shift and go to state 110
    ConditionalExpression          shift and go to state 136
    UnaryExpression                shift and go to state 137
    InclusiveOrExpression          shift and go to state 138
    MethodAccess                   shift and go to state 111
    ExclusiveOrExpression          shift and go to state 113
    ConditionalAndExpression       shift and go to state 90
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    FieldAccess                    shift and go to state 154
    SpecialName                    shift and go to state 118

state 284

    (165) ArrayAllocationExpression -> NEW TypeName DimExprs . Dims
    (166) ArrayAllocationExpression -> NEW TypeName DimExprs .
    (169) DimExprs -> DimExprs . DimExpr
    (171) Dims -> . OP_DIM
    (172) Dims -> . Dims OP_DIM
    (170) DimExpr -> . LSQPAREN Expression RSQPAREN
    (2) OP_DIM -> . LSQPAREN RSQPAREN

    LCURPAREN       reduce using rule 166 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    DOT             reduce using rule 166 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_INC          reduce using rule 166 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_DEC          reduce using rule 166 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    EQUAL           reduce using rule 166 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    ASS_MUL         reduce using rule 166 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    ASS_ADD         reduce using rule 166 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    ASS_SUB         reduce using rule 166 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    MULT            reduce using rule 166 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    DIV             reduce using rule 166 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    MOD             reduce using rule 166 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    PLUS            reduce using rule 166 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    MINUS           reduce using rule 166 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_SHL          reduce using rule 166 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_SHR          reduce using rule 166 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_SHRR         reduce using rule 166 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    LESS            reduce using rule 166 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    MORE            reduce using rule 166 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_LE           reduce using rule 166 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_GE           reduce using rule 166 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_EQ           reduce using rule 166 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_NE           reduce using rule 166 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    &               reduce using rule 166 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    ^               reduce using rule 166 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    |               reduce using rule 166 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_LAND         reduce using rule 166 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    OP_LOR          reduce using rule 166 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    QUES            reduce using rule 166 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    RROUNPAREN      reduce using rule 166 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    SEMICOLON       reduce using rule 166 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    COLON           reduce using rule 166 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    COMMA           reduce using rule 166 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    RSQPAREN        reduce using rule 166 (ArrayAllocationExpression -> NEW TypeName DimExprs .)
    LSQPAREN        shift and go to state 285

    DimExpr                        shift and go to state 323
    Dims                           shift and go to state 324
    OP_DIM                         shift and go to state 160

state 285

    (170) DimExpr -> LSQPAREN . Expression RSQPAREN
    (2) OP_DIM -> LSQPAREN . RSQPAREN
    (230) Expression -> . AssignmentExpression
    (224) AssignmentExpression -> . ConditionalExpression
    (225) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (220) ConditionalExpression -> . ConditionalOrExpression
    (221) ConditionalExpression -> . ConditionalOrExpression Mark_quad Ques Mark_quad Expression Mark_quad Cln Mark_quad ConditionalExpression Mark_quad
    (177) UnaryExpression -> . OP_INC UnaryExpression
    (178) UnaryExpression -> . OP_DEC UnaryExpression
    (179) UnaryExpression -> . LogicalUnaryExpression
    (180) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) ConditionalOrExpression -> . ConditionalAndExpression
    (219) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (181) LogicalUnaryExpression -> . PostfixExpression
    (182) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (185) ArithmeticUnaryOperator -> . PLUS
    (186) ArithmeticUnaryOperator -> . MINUS
    (216) ConditionalAndExpression -> . InclusiveOrExpression
    (217) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (173) PostfixExpression -> . PrimaryExpression
    (174) PostfixExpression -> . RealPostfixExpression
    (183) LogicalUnaryOperator -> . ~
    (184) LogicalUnaryOperator -> . NOT
    (214) InclusiveOrExpression -> . ExclusiveOrExpression
    (215) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (126) PrimaryExpression -> . QualifiedName
    (127) PrimaryExpression -> . NotJustName
    (175) RealPostfixExpression -> . PostfixExpression OP_INC
    (176) RealPostfixExpression -> . PostfixExpression OP_DEC
    (212) ExclusiveOrExpression -> . AndExpression
    (213) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (128) NotJustName -> . SpecialName
    (129) NotJustName -> . NewAllocationExpression
    (130) NotJustName -> . ComplexPrimary
    (210) AndExpression -> . EqualityExpression
    (211) AndExpression -> . AndExpression & EqualityExpression
    (151) SpecialName -> . THIS
    (152) SpecialName -> . SUPER
    (153) SpecialName -> . NULL
    (156) NewAllocationExpression -> . PlainNewAllocationExpression
    (157) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (131) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (132) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (207) EqualityExpression -> . RelationalExpression
    (208) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (209) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (158) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (159) PlainNewAllocationExpression -> . ClassAllocationExpression
    (160) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (161) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (162) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (133) ComplexPrimaryNoParenthesis -> . INT_CONST
    (134) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (135) ComplexPrimaryNoParenthesis -> . STRING
    (136) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (137) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (138) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (139) ComplexPrimaryNoParenthesis -> . FieldAccess
    (140) ComplexPrimaryNoParenthesis -> . MethodCall
    (202) RelationalExpression -> . ShiftExpression
    (203) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (204) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (205) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (206) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (165) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (166) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (167) ArrayAllocationExpression -> . NEW TypeName Dims
    (163) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (164) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (141) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (142) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (143) FieldAccess -> . NotJustName DOT IDENTIFIER
    (144) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (145) FieldAccess -> . QualifiedName DOT THIS
    (146) FieldAccess -> . QualifiedName DOT CLASS
    (147) FieldAccess -> . PrimitiveType DOT CLASS
    (148) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (149) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (198) ShiftExpression -> . AdditiveExpression
    (199) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (200) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (201) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (150) MethodAccess -> . QualifiedName
    (195) AdditiveExpression -> . MultiplicativeExpression
    (196) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (197) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (191) MultiplicativeExpression -> . CastExpression
    (192) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (193) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (194) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (187) CastExpression -> . UnaryExpression

    RSQPAREN        shift and go to state 245
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 124
    PLUS            shift and go to state 87
    MINUS           shift and go to state 86
    ~               shift and go to state 140
    NOT             shift and go to state 117
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 89
    SUPER           shift and go to state 156
    NULL            shift and go to state 143
    LROUNPAREN      shift and go to state 92
    INT_CONST       shift and go to state 106
    FLOAT_CONST     shift and go to state 83
    STRING          shift and go to state 149
    CHAR_CONST      shift and go to state 139
    BOOLEAN_CONST   shift and go to state 155
    NEW             shift and go to state 125
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 119
    PrimaryExpression              shift and go to state 127
    PrimitiveType                  shift and go to state 183
    RealPostfixExpression          shift and go to state 95
    ArithmeticUnaryOperator        shift and go to state 96
    AndExpression                  shift and go to state 85
    ArrayAccess                    shift and go to state 108
    CastExpression                 shift and go to state 142
    EqualityExpression             shift and go to state 97
    LogicalUnaryOperator           shift and go to state 145
    ComplexPrimaryNoParenthesis    shift and go to state 99
    MultiplicativeExpression       shift and go to state 100
    ClassAllocationExpression      shift and go to state 120
    MethodCall                     shift and go to state 101
    ConditionalOrExpression        shift and go to state 131
    ShiftExpression                shift and go to state 147
    AssignmentExpression           shift and go to state 103
    NewAllocationExpression        shift and go to state 133
    NotJustName                    shift and go to state 150
    QualifiedName                  shift and go to state 185
    LogicalUnaryExpression         shift and go to state 152
    Expression                     shift and go to state 325
    AdditiveExpression             shift and go to state 135
    ArrayAllocationExpression      shift and go to state 110
    ConditionalExpression          shift and go to state 136
    UnaryExpression                shift and go to state 137
    InclusiveOrExpression          shift and go to state 138
    MethodAccess                   shift and go to state 111
    ExclusiveOrExpression          shift and go to state 113
    ConditionalAndExpression       shift and go to state 90
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    FieldAccess                    shift and go to state 154
    SpecialName                    shift and go to state 118

state 286

    (167) ArrayAllocationExpression -> NEW TypeName Dims .
    (172) Dims -> Dims . OP_DIM
    (2) OP_DIM -> . LSQPAREN RSQPAREN

    LCURPAREN       reduce using rule 167 (ArrayAllocationExpression -> NEW TypeName Dims .)
    DOT             reduce using rule 167 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_INC          reduce using rule 167 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_DEC          reduce using rule 167 (ArrayAllocationExpression -> NEW TypeName Dims .)
    EQUAL           reduce using rule 167 (ArrayAllocationExpression -> NEW TypeName Dims .)
    ASS_MUL         reduce using rule 167 (ArrayAllocationExpression -> NEW TypeName Dims .)
    ASS_ADD         reduce using rule 167 (ArrayAllocationExpression -> NEW TypeName Dims .)
    ASS_SUB         reduce using rule 167 (ArrayAllocationExpression -> NEW TypeName Dims .)
    MULT            reduce using rule 167 (ArrayAllocationExpression -> NEW TypeName Dims .)
    DIV             reduce using rule 167 (ArrayAllocationExpression -> NEW TypeName Dims .)
    MOD             reduce using rule 167 (ArrayAllocationExpression -> NEW TypeName Dims .)
    PLUS            reduce using rule 167 (ArrayAllocationExpression -> NEW TypeName Dims .)
    MINUS           reduce using rule 167 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_SHL          reduce using rule 167 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_SHR          reduce using rule 167 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_SHRR         reduce using rule 167 (ArrayAllocationExpression -> NEW TypeName Dims .)
    LESS            reduce using rule 167 (ArrayAllocationExpression -> NEW TypeName Dims .)
    MORE            reduce using rule 167 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_LE           reduce using rule 167 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_GE           reduce using rule 167 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_EQ           reduce using rule 167 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_NE           reduce using rule 167 (ArrayAllocationExpression -> NEW TypeName Dims .)
    &               reduce using rule 167 (ArrayAllocationExpression -> NEW TypeName Dims .)
    ^               reduce using rule 167 (ArrayAllocationExpression -> NEW TypeName Dims .)
    |               reduce using rule 167 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_LAND         reduce using rule 167 (ArrayAllocationExpression -> NEW TypeName Dims .)
    OP_LOR          reduce using rule 167 (ArrayAllocationExpression -> NEW TypeName Dims .)
    QUES            reduce using rule 167 (ArrayAllocationExpression -> NEW TypeName Dims .)
    RROUNPAREN      reduce using rule 167 (ArrayAllocationExpression -> NEW TypeName Dims .)
    SEMICOLON       reduce using rule 167 (ArrayAllocationExpression -> NEW TypeName Dims .)
    COLON           reduce using rule 167 (ArrayAllocationExpression -> NEW TypeName Dims .)
    COMMA           reduce using rule 167 (ArrayAllocationExpression -> NEW TypeName Dims .)
    RSQPAREN        reduce using rule 167 (ArrayAllocationExpression -> NEW TypeName Dims .)
    LSQPAREN        shift and go to state 159

    OP_DIM                         shift and go to state 246

state 287

    (168) DimExprs -> DimExpr .

    LSQPAREN        reduce using rule 168 (DimExprs -> DimExpr .)
    LCURPAREN       reduce using rule 168 (DimExprs -> DimExpr .)
    DOT             reduce using rule 168 (DimExprs -> DimExpr .)
    OP_INC          reduce using rule 168 (DimExprs -> DimExpr .)
    OP_DEC          reduce using rule 168 (DimExprs -> DimExpr .)
    EQUAL           reduce using rule 168 (DimExprs -> DimExpr .)
    ASS_MUL         reduce using rule 168 (DimExprs -> DimExpr .)
    ASS_ADD         reduce using rule 168 (DimExprs -> DimExpr .)
    ASS_SUB         reduce using rule 168 (DimExprs -> DimExpr .)
    MULT            reduce using rule 168 (DimExprs -> DimExpr .)
    DIV             reduce using rule 168 (DimExprs -> DimExpr .)
    MOD             reduce using rule 168 (DimExprs -> DimExpr .)
    PLUS            reduce using rule 168 (DimExprs -> DimExpr .)
    MINUS           reduce using rule 168 (DimExprs -> DimExpr .)
    OP_SHL          reduce using rule 168 (DimExprs -> DimExpr .)
    OP_SHR          reduce using rule 168 (DimExprs -> DimExpr .)
    OP_SHRR         reduce using rule 168 (DimExprs -> DimExpr .)
    LESS            reduce using rule 168 (DimExprs -> DimExpr .)
    MORE            reduce using rule 168 (DimExprs -> DimExpr .)
    OP_LE           reduce using rule 168 (DimExprs -> DimExpr .)
    OP_GE           reduce using rule 168 (DimExprs -> DimExpr .)
    OP_EQ           reduce using rule 168 (DimExprs -> DimExpr .)
    OP_NE           reduce using rule 168 (DimExprs -> DimExpr .)
    &               reduce using rule 168 (DimExprs -> DimExpr .)
    ^               reduce using rule 168 (DimExprs -> DimExpr .)
    |               reduce using rule 168 (DimExprs -> DimExpr .)
    OP_LAND         reduce using rule 168 (DimExprs -> DimExpr .)
    OP_LOR          reduce using rule 168 (DimExprs -> DimExpr .)
    QUES            reduce using rule 168 (DimExprs -> DimExpr .)
    SEMICOLON       reduce using rule 168 (DimExprs -> DimExpr .)
    RROUNPAREN      reduce using rule 168 (DimExprs -> DimExpr .)
    COLON           reduce using rule 168 (DimExprs -> DimExpr .)
    COMMA           reduce using rule 168 (DimExprs -> DimExpr .)
    RSQPAREN        reduce using rule 168 (DimExprs -> DimExpr .)


state 288

    (163) ClassAllocationExpression -> NEW TypeName LROUNPAREN . ArgumentList RROUNPAREN
    (164) ClassAllocationExpression -> NEW TypeName LROUNPAREN . RROUNPAREN
    (154) ArgumentList -> . Expression
    (155) ArgumentList -> . ArgumentList COMMA Expression
    (230) Expression -> . AssignmentExpression
    (224) AssignmentExpression -> . ConditionalExpression
    (225) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (220) ConditionalExpression -> . ConditionalOrExpression
    (221) ConditionalExpression -> . ConditionalOrExpression Mark_quad Ques Mark_quad Expression Mark_quad Cln Mark_quad ConditionalExpression Mark_quad
    (177) UnaryExpression -> . OP_INC UnaryExpression
    (178) UnaryExpression -> . OP_DEC UnaryExpression
    (179) UnaryExpression -> . LogicalUnaryExpression
    (180) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) ConditionalOrExpression -> . ConditionalAndExpression
    (219) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (181) LogicalUnaryExpression -> . PostfixExpression
    (182) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (185) ArithmeticUnaryOperator -> . PLUS
    (186) ArithmeticUnaryOperator -> . MINUS
    (216) ConditionalAndExpression -> . InclusiveOrExpression
    (217) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (173) PostfixExpression -> . PrimaryExpression
    (174) PostfixExpression -> . RealPostfixExpression
    (183) LogicalUnaryOperator -> . ~
    (184) LogicalUnaryOperator -> . NOT
    (214) InclusiveOrExpression -> . ExclusiveOrExpression
    (215) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (126) PrimaryExpression -> . QualifiedName
    (127) PrimaryExpression -> . NotJustName
    (175) RealPostfixExpression -> . PostfixExpression OP_INC
    (176) RealPostfixExpression -> . PostfixExpression OP_DEC
    (212) ExclusiveOrExpression -> . AndExpression
    (213) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (128) NotJustName -> . SpecialName
    (129) NotJustName -> . NewAllocationExpression
    (130) NotJustName -> . ComplexPrimary
    (210) AndExpression -> . EqualityExpression
    (211) AndExpression -> . AndExpression & EqualityExpression
    (151) SpecialName -> . THIS
    (152) SpecialName -> . SUPER
    (153) SpecialName -> . NULL
    (156) NewAllocationExpression -> . PlainNewAllocationExpression
    (157) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (131) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (132) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (207) EqualityExpression -> . RelationalExpression
    (208) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (209) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (158) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (159) PlainNewAllocationExpression -> . ClassAllocationExpression
    (160) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (161) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (162) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (133) ComplexPrimaryNoParenthesis -> . INT_CONST
    (134) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (135) ComplexPrimaryNoParenthesis -> . STRING
    (136) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (137) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (138) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (139) ComplexPrimaryNoParenthesis -> . FieldAccess
    (140) ComplexPrimaryNoParenthesis -> . MethodCall
    (202) RelationalExpression -> . ShiftExpression
    (203) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (204) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (205) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (206) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (165) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (166) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (167) ArrayAllocationExpression -> . NEW TypeName Dims
    (163) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (164) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (141) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (142) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (143) FieldAccess -> . NotJustName DOT IDENTIFIER
    (144) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (145) FieldAccess -> . QualifiedName DOT THIS
    (146) FieldAccess -> . QualifiedName DOT CLASS
    (147) FieldAccess -> . PrimitiveType DOT CLASS
    (148) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (149) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (198) ShiftExpression -> . AdditiveExpression
    (199) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (200) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (201) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (150) MethodAccess -> . QualifiedName
    (195) AdditiveExpression -> . MultiplicativeExpression
    (196) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (197) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (191) MultiplicativeExpression -> . CastExpression
    (192) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (193) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (194) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (187) CastExpression -> . UnaryExpression

    RROUNPAREN      shift and go to state 327
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 124
    PLUS            shift and go to state 87
    MINUS           shift and go to state 86
    ~               shift and go to state 140
    NOT             shift and go to state 117
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 89
    SUPER           shift and go to state 156
    NULL            shift and go to state 143
    LROUNPAREN      shift and go to state 92
    INT_CONST       shift and go to state 106
    FLOAT_CONST     shift and go to state 83
    STRING          shift and go to state 149
    CHAR_CONST      shift and go to state 139
    BOOLEAN_CONST   shift and go to state 155
    NEW             shift and go to state 125
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 119
    PrimaryExpression              shift and go to state 127
    PrimitiveType                  shift and go to state 183
    RealPostfixExpression          shift and go to state 95
    ArithmeticUnaryOperator        shift and go to state 96
    AndExpression                  shift and go to state 85
    ArrayAccess                    shift and go to state 108
    CastExpression                 shift and go to state 142
    EqualityExpression             shift and go to state 97
    ArgumentList                   shift and go to state 326
    LogicalUnaryOperator           shift and go to state 145
    ComplexPrimaryNoParenthesis    shift and go to state 99
    MultiplicativeExpression       shift and go to state 100
    ClassAllocationExpression      shift and go to state 120
    MethodCall                     shift and go to state 101
    ConditionalOrExpression        shift and go to state 131
    ShiftExpression                shift and go to state 147
    AssignmentExpression           shift and go to state 103
    NewAllocationExpression        shift and go to state 133
    NotJustName                    shift and go to state 150
    QualifiedName                  shift and go to state 185
    LogicalUnaryExpression         shift and go to state 152
    Expression                     shift and go to state 274
    AdditiveExpression             shift and go to state 135
    ArrayAllocationExpression      shift and go to state 110
    ConditionalExpression          shift and go to state 136
    UnaryExpression                shift and go to state 137
    InclusiveOrExpression          shift and go to state 138
    MethodAccess                   shift and go to state 111
    ExclusiveOrExpression          shift and go to state 113
    ConditionalAndExpression       shift and go to state 90
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    FieldAccess                    shift and go to state 154
    SpecialName                    shift and go to state 118

state 289

    (88) LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .

    RCURPAREN       reduce using rule 88 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    SEMICOLON       reduce using rule 88 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    IDENTIFIER      reduce using rule 88 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    CASE            reduce using rule 88 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    DEFAULT         reduce using rule 88 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    BREAK           reduce using rule 88 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    RETURN          reduce using rule 88 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    WHILE           reduce using rule 88 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    LCURPAREN       reduce using rule 88 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    DO              reduce using rule 88 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    FOR             reduce using rule 88 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    IF              reduce using rule 88 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    BOOLEAN         reduce using rule 88 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    CHAR            reduce using rule 88 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    BYTE            reduce using rule 88 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    SHORT           reduce using rule 88 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    INT             reduce using rule 88 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    LONG            reduce using rule 88 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    FLOAT           reduce using rule 88 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    DOUBLE          reduce using rule 88 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    VOID            reduce using rule 88 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    OP_INC          reduce using rule 88 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    OP_DEC          reduce using rule 88 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    PLUS            reduce using rule 88 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    MINUS           reduce using rule 88 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    ~               reduce using rule 88 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    NOT             reduce using rule 88 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    THIS            reduce using rule 88 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    SUPER           reduce using rule 88 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    NULL            reduce using rule 88 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    LROUNPAREN      reduce using rule 88 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    INT_CONST       reduce using rule 88 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    FLOAT_CONST     reduce using rule 88 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    STRING          reduce using rule 88 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    CHAR_CONST      reduce using rule 88 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    BOOLEAN_CONST   reduce using rule 88 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)
    NEW             reduce using rule 88 (LocalVariableDeclarationStatement -> TypeSpecifier VariableDeclarators SEMICOLON .)


state 290

    (99) LabelStatement -> CASE ConstantExpression COLON .

    ELSE            reduce using rule 99 (LabelStatement -> CASE ConstantExpression COLON .)
    RCURPAREN       reduce using rule 99 (LabelStatement -> CASE ConstantExpression COLON .)
    SEMICOLON       reduce using rule 99 (LabelStatement -> CASE ConstantExpression COLON .)
    IDENTIFIER      reduce using rule 99 (LabelStatement -> CASE ConstantExpression COLON .)
    CASE            reduce using rule 99 (LabelStatement -> CASE ConstantExpression COLON .)
    DEFAULT         reduce using rule 99 (LabelStatement -> CASE ConstantExpression COLON .)
    BREAK           reduce using rule 99 (LabelStatement -> CASE ConstantExpression COLON .)
    RETURN          reduce using rule 99 (LabelStatement -> CASE ConstantExpression COLON .)
    WHILE           reduce using rule 99 (LabelStatement -> CASE ConstantExpression COLON .)
    LCURPAREN       reduce using rule 99 (LabelStatement -> CASE ConstantExpression COLON .)
    DO              reduce using rule 99 (LabelStatement -> CASE ConstantExpression COLON .)
    FOR             reduce using rule 99 (LabelStatement -> CASE ConstantExpression COLON .)
    IF              reduce using rule 99 (LabelStatement -> CASE ConstantExpression COLON .)
    BOOLEAN         reduce using rule 99 (LabelStatement -> CASE ConstantExpression COLON .)
    CHAR            reduce using rule 99 (LabelStatement -> CASE ConstantExpression COLON .)
    BYTE            reduce using rule 99 (LabelStatement -> CASE ConstantExpression COLON .)
    SHORT           reduce using rule 99 (LabelStatement -> CASE ConstantExpression COLON .)
    INT             reduce using rule 99 (LabelStatement -> CASE ConstantExpression COLON .)
    LONG            reduce using rule 99 (LabelStatement -> CASE ConstantExpression COLON .)
    FLOAT           reduce using rule 99 (LabelStatement -> CASE ConstantExpression COLON .)
    DOUBLE          reduce using rule 99 (LabelStatement -> CASE ConstantExpression COLON .)
    VOID            reduce using rule 99 (LabelStatement -> CASE ConstantExpression COLON .)
    OP_INC          reduce using rule 99 (LabelStatement -> CASE ConstantExpression COLON .)
    OP_DEC          reduce using rule 99 (LabelStatement -> CASE ConstantExpression COLON .)
    PLUS            reduce using rule 99 (LabelStatement -> CASE ConstantExpression COLON .)
    MINUS           reduce using rule 99 (LabelStatement -> CASE ConstantExpression COLON .)
    ~               reduce using rule 99 (LabelStatement -> CASE ConstantExpression COLON .)
    NOT             reduce using rule 99 (LabelStatement -> CASE ConstantExpression COLON .)
    THIS            reduce using rule 99 (LabelStatement -> CASE ConstantExpression COLON .)
    SUPER           reduce using rule 99 (LabelStatement -> CASE ConstantExpression COLON .)
    NULL            reduce using rule 99 (LabelStatement -> CASE ConstantExpression COLON .)
    LROUNPAREN      reduce using rule 99 (LabelStatement -> CASE ConstantExpression COLON .)
    INT_CONST       reduce using rule 99 (LabelStatement -> CASE ConstantExpression COLON .)
    FLOAT_CONST     reduce using rule 99 (LabelStatement -> CASE ConstantExpression COLON .)
    STRING          reduce using rule 99 (LabelStatement -> CASE ConstantExpression COLON .)
    CHAR_CONST      reduce using rule 99 (LabelStatement -> CASE ConstantExpression COLON .)
    BOOLEAN_CONST   reduce using rule 99 (LabelStatement -> CASE ConstantExpression COLON .)
    NEW             reduce using rule 99 (LabelStatement -> CASE ConstantExpression COLON .)


state 291

    (121) ExpressionStatements -> ExpressionStatement .

    COMMA           reduce using rule 121 (ExpressionStatements -> ExpressionStatement .)
    RROUNPAREN      reduce using rule 121 (ExpressionStatements -> ExpressionStatement .)
    SEMICOLON       reduce using rule 121 (ExpressionStatements -> ExpressionStatement .)


state 292

    (112) IterationStatement -> Fr LROUNPAREN ForInit . ForExpr Mark_for ForIncr RROUNPAREN Mark_quad Statement
    (118) ForExpr -> . Mark_quad Expression SEMICOLON
    (119) ForExpr -> . Mark_quad SEMICOLON
    (96) Mark_quad -> .

    SEMICOLON       reduce using rule 96 (Mark_quad -> .)
    OP_INC          reduce using rule 96 (Mark_quad -> .)
    OP_DEC          reduce using rule 96 (Mark_quad -> .)
    PLUS            reduce using rule 96 (Mark_quad -> .)
    MINUS           reduce using rule 96 (Mark_quad -> .)
    ~               reduce using rule 96 (Mark_quad -> .)
    NOT             reduce using rule 96 (Mark_quad -> .)
    IDENTIFIER      reduce using rule 96 (Mark_quad -> .)
    THIS            reduce using rule 96 (Mark_quad -> .)
    SUPER           reduce using rule 96 (Mark_quad -> .)
    NULL            reduce using rule 96 (Mark_quad -> .)
    LROUNPAREN      reduce using rule 96 (Mark_quad -> .)
    INT_CONST       reduce using rule 96 (Mark_quad -> .)
    FLOAT_CONST     reduce using rule 96 (Mark_quad -> .)
    STRING          reduce using rule 96 (Mark_quad -> .)
    CHAR_CONST      reduce using rule 96 (Mark_quad -> .)
    BOOLEAN_CONST   reduce using rule 96 (Mark_quad -> .)
    NEW             reduce using rule 96 (Mark_quad -> .)
    BOOLEAN         reduce using rule 96 (Mark_quad -> .)
    CHAR            reduce using rule 96 (Mark_quad -> .)
    BYTE            reduce using rule 96 (Mark_quad -> .)
    SHORT           reduce using rule 96 (Mark_quad -> .)
    INT             reduce using rule 96 (Mark_quad -> .)
    LONG            reduce using rule 96 (Mark_quad -> .)
    FLOAT           reduce using rule 96 (Mark_quad -> .)
    DOUBLE          reduce using rule 96 (Mark_quad -> .)
    VOID            reduce using rule 96 (Mark_quad -> .)

    ForExpr                        shift and go to state 328
    Mark_quad                      shift and go to state 329

state 293

    (117) ForInit -> SEMICOLON .

    SEMICOLON       reduce using rule 117 (ForInit -> SEMICOLON .)
    OP_INC          reduce using rule 117 (ForInit -> SEMICOLON .)
    OP_DEC          reduce using rule 117 (ForInit -> SEMICOLON .)
    PLUS            reduce using rule 117 (ForInit -> SEMICOLON .)
    MINUS           reduce using rule 117 (ForInit -> SEMICOLON .)
    ~               reduce using rule 117 (ForInit -> SEMICOLON .)
    NOT             reduce using rule 117 (ForInit -> SEMICOLON .)
    IDENTIFIER      reduce using rule 117 (ForInit -> SEMICOLON .)
    THIS            reduce using rule 117 (ForInit -> SEMICOLON .)
    SUPER           reduce using rule 117 (ForInit -> SEMICOLON .)
    NULL            reduce using rule 117 (ForInit -> SEMICOLON .)
    LROUNPAREN      reduce using rule 117 (ForInit -> SEMICOLON .)
    INT_CONST       reduce using rule 117 (ForInit -> SEMICOLON .)
    FLOAT_CONST     reduce using rule 117 (ForInit -> SEMICOLON .)
    STRING          reduce using rule 117 (ForInit -> SEMICOLON .)
    CHAR_CONST      reduce using rule 117 (ForInit -> SEMICOLON .)
    BOOLEAN_CONST   reduce using rule 117 (ForInit -> SEMICOLON .)
    NEW             reduce using rule 117 (ForInit -> SEMICOLON .)
    BOOLEAN         reduce using rule 117 (ForInit -> SEMICOLON .)
    CHAR            reduce using rule 117 (ForInit -> SEMICOLON .)
    BYTE            reduce using rule 117 (ForInit -> SEMICOLON .)
    SHORT           reduce using rule 117 (ForInit -> SEMICOLON .)
    INT             reduce using rule 117 (ForInit -> SEMICOLON .)
    LONG            reduce using rule 117 (ForInit -> SEMICOLON .)
    FLOAT           reduce using rule 117 (ForInit -> SEMICOLON .)
    DOUBLE          reduce using rule 117 (ForInit -> SEMICOLON .)
    VOID            reduce using rule 117 (ForInit -> SEMICOLON .)


state 294

    (115) ForInit -> ExpressionStatements . SEMICOLON
    (122) ExpressionStatements -> ExpressionStatements . COMMA ExpressionStatement

    SEMICOLON       shift and go to state 331
    COMMA           shift and go to state 330


state 295

    (116) ForInit -> LocalVariableDeclarationStatement .

    SEMICOLON       reduce using rule 116 (ForInit -> LocalVariableDeclarationStatement .)
    OP_INC          reduce using rule 116 (ForInit -> LocalVariableDeclarationStatement .)
    OP_DEC          reduce using rule 116 (ForInit -> LocalVariableDeclarationStatement .)
    PLUS            reduce using rule 116 (ForInit -> LocalVariableDeclarationStatement .)
    MINUS           reduce using rule 116 (ForInit -> LocalVariableDeclarationStatement .)
    ~               reduce using rule 116 (ForInit -> LocalVariableDeclarationStatement .)
    NOT             reduce using rule 116 (ForInit -> LocalVariableDeclarationStatement .)
    IDENTIFIER      reduce using rule 116 (ForInit -> LocalVariableDeclarationStatement .)
    THIS            reduce using rule 116 (ForInit -> LocalVariableDeclarationStatement .)
    SUPER           reduce using rule 116 (ForInit -> LocalVariableDeclarationStatement .)
    NULL            reduce using rule 116 (ForInit -> LocalVariableDeclarationStatement .)
    LROUNPAREN      reduce using rule 116 (ForInit -> LocalVariableDeclarationStatement .)
    INT_CONST       reduce using rule 116 (ForInit -> LocalVariableDeclarationStatement .)
    FLOAT_CONST     reduce using rule 116 (ForInit -> LocalVariableDeclarationStatement .)
    STRING          reduce using rule 116 (ForInit -> LocalVariableDeclarationStatement .)
    CHAR_CONST      reduce using rule 116 (ForInit -> LocalVariableDeclarationStatement .)
    BOOLEAN_CONST   reduce using rule 116 (ForInit -> LocalVariableDeclarationStatement .)
    NEW             reduce using rule 116 (ForInit -> LocalVariableDeclarationStatement .)
    BOOLEAN         reduce using rule 116 (ForInit -> LocalVariableDeclarationStatement .)
    CHAR            reduce using rule 116 (ForInit -> LocalVariableDeclarationStatement .)
    BYTE            reduce using rule 116 (ForInit -> LocalVariableDeclarationStatement .)
    SHORT           reduce using rule 116 (ForInit -> LocalVariableDeclarationStatement .)
    INT             reduce using rule 116 (ForInit -> LocalVariableDeclarationStatement .)
    LONG            reduce using rule 116 (ForInit -> LocalVariableDeclarationStatement .)
    FLOAT           reduce using rule 116 (ForInit -> LocalVariableDeclarationStatement .)
    DOUBLE          reduce using rule 116 (ForInit -> LocalVariableDeclarationStatement .)
    VOID            reduce using rule 116 (ForInit -> LocalVariableDeclarationStatement .)


state 296

    (219) ConditionalOrExpression -> ConditionalOrExpression OP_LOR ConditionalAndExpression .
    (217) ConditionalAndExpression -> ConditionalAndExpression . OP_LAND InclusiveOrExpression

    OP_LOR          reduce using rule 219 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR ConditionalAndExpression .)
    QUES            reduce using rule 219 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR ConditionalAndExpression .)
    RROUNPAREN      reduce using rule 219 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR ConditionalAndExpression .)
    COMMA           reduce using rule 219 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR ConditionalAndExpression .)
    RSQPAREN        reduce using rule 219 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR ConditionalAndExpression .)
    SEMICOLON       reduce using rule 219 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR ConditionalAndExpression .)
    COLON           reduce using rule 219 (ConditionalOrExpression -> ConditionalOrExpression OP_LOR ConditionalAndExpression .)
    OP_LAND         shift and go to state 181


state 297

    (222) Ques -> QUES .

    OP_INC          reduce using rule 222 (Ques -> QUES .)
    OP_DEC          reduce using rule 222 (Ques -> QUES .)
    PLUS            reduce using rule 222 (Ques -> QUES .)
    MINUS           reduce using rule 222 (Ques -> QUES .)
    ~               reduce using rule 222 (Ques -> QUES .)
    NOT             reduce using rule 222 (Ques -> QUES .)
    IDENTIFIER      reduce using rule 222 (Ques -> QUES .)
    THIS            reduce using rule 222 (Ques -> QUES .)
    SUPER           reduce using rule 222 (Ques -> QUES .)
    NULL            reduce using rule 222 (Ques -> QUES .)
    LROUNPAREN      reduce using rule 222 (Ques -> QUES .)
    INT_CONST       reduce using rule 222 (Ques -> QUES .)
    FLOAT_CONST     reduce using rule 222 (Ques -> QUES .)
    STRING          reduce using rule 222 (Ques -> QUES .)
    CHAR_CONST      reduce using rule 222 (Ques -> QUES .)
    BOOLEAN_CONST   reduce using rule 222 (Ques -> QUES .)
    NEW             reduce using rule 222 (Ques -> QUES .)
    BOOLEAN         reduce using rule 222 (Ques -> QUES .)
    CHAR            reduce using rule 222 (Ques -> QUES .)
    BYTE            reduce using rule 222 (Ques -> QUES .)
    SHORT           reduce using rule 222 (Ques -> QUES .)
    INT             reduce using rule 222 (Ques -> QUES .)
    LONG            reduce using rule 222 (Ques -> QUES .)
    FLOAT           reduce using rule 222 (Ques -> QUES .)
    DOUBLE          reduce using rule 222 (Ques -> QUES .)
    VOID            reduce using rule 222 (Ques -> QUES .)


state 298

    (221) ConditionalExpression -> ConditionalOrExpression Mark_quad Ques . Mark_quad Expression Mark_quad Cln Mark_quad ConditionalExpression Mark_quad
    (96) Mark_quad -> .

    OP_INC          reduce using rule 96 (Mark_quad -> .)
    OP_DEC          reduce using rule 96 (Mark_quad -> .)
    PLUS            reduce using rule 96 (Mark_quad -> .)
    MINUS           reduce using rule 96 (Mark_quad -> .)
    ~               reduce using rule 96 (Mark_quad -> .)
    NOT             reduce using rule 96 (Mark_quad -> .)
    IDENTIFIER      reduce using rule 96 (Mark_quad -> .)
    THIS            reduce using rule 96 (Mark_quad -> .)
    SUPER           reduce using rule 96 (Mark_quad -> .)
    NULL            reduce using rule 96 (Mark_quad -> .)
    LROUNPAREN      reduce using rule 96 (Mark_quad -> .)
    INT_CONST       reduce using rule 96 (Mark_quad -> .)
    FLOAT_CONST     reduce using rule 96 (Mark_quad -> .)
    STRING          reduce using rule 96 (Mark_quad -> .)
    CHAR_CONST      reduce using rule 96 (Mark_quad -> .)
    BOOLEAN_CONST   reduce using rule 96 (Mark_quad -> .)
    NEW             reduce using rule 96 (Mark_quad -> .)
    BOOLEAN         reduce using rule 96 (Mark_quad -> .)
    CHAR            reduce using rule 96 (Mark_quad -> .)
    BYTE            reduce using rule 96 (Mark_quad -> .)
    SHORT           reduce using rule 96 (Mark_quad -> .)
    INT             reduce using rule 96 (Mark_quad -> .)
    LONG            reduce using rule 96 (Mark_quad -> .)
    FLOAT           reduce using rule 96 (Mark_quad -> .)
    DOUBLE          reduce using rule 96 (Mark_quad -> .)
    VOID            reduce using rule 96 (Mark_quad -> .)

    Mark_quad                      shift and go to state 332

state 299

    (196) AdditiveExpression -> AdditiveExpression PLUS MultiplicativeExpression .
    (192) MultiplicativeExpression -> MultiplicativeExpression . MULT CastExpression
    (193) MultiplicativeExpression -> MultiplicativeExpression . DIV CastExpression
    (194) MultiplicativeExpression -> MultiplicativeExpression . MOD CastExpression

    PLUS            reduce using rule 196 (AdditiveExpression -> AdditiveExpression PLUS MultiplicativeExpression .)
    MINUS           reduce using rule 196 (AdditiveExpression -> AdditiveExpression PLUS MultiplicativeExpression .)
    OP_SHL          reduce using rule 196 (AdditiveExpression -> AdditiveExpression PLUS MultiplicativeExpression .)
    OP_SHR          reduce using rule 196 (AdditiveExpression -> AdditiveExpression PLUS MultiplicativeExpression .)
    OP_SHRR         reduce using rule 196 (AdditiveExpression -> AdditiveExpression PLUS MultiplicativeExpression .)
    LESS            reduce using rule 196 (AdditiveExpression -> AdditiveExpression PLUS MultiplicativeExpression .)
    MORE            reduce using rule 196 (AdditiveExpression -> AdditiveExpression PLUS MultiplicativeExpression .)
    OP_LE           reduce using rule 196 (AdditiveExpression -> AdditiveExpression PLUS MultiplicativeExpression .)
    OP_GE           reduce using rule 196 (AdditiveExpression -> AdditiveExpression PLUS MultiplicativeExpression .)
    OP_EQ           reduce using rule 196 (AdditiveExpression -> AdditiveExpression PLUS MultiplicativeExpression .)
    OP_NE           reduce using rule 196 (AdditiveExpression -> AdditiveExpression PLUS MultiplicativeExpression .)
    &               reduce using rule 196 (AdditiveExpression -> AdditiveExpression PLUS MultiplicativeExpression .)
    ^               reduce using rule 196 (AdditiveExpression -> AdditiveExpression PLUS MultiplicativeExpression .)
    |               reduce using rule 196 (AdditiveExpression -> AdditiveExpression PLUS MultiplicativeExpression .)
    OP_LAND         reduce using rule 196 (AdditiveExpression -> AdditiveExpression PLUS MultiplicativeExpression .)
    OP_LOR          reduce using rule 196 (AdditiveExpression -> AdditiveExpression PLUS MultiplicativeExpression .)
    QUES            reduce using rule 196 (AdditiveExpression -> AdditiveExpression PLUS MultiplicativeExpression .)
    SEMICOLON       reduce using rule 196 (AdditiveExpression -> AdditiveExpression PLUS MultiplicativeExpression .)
    RROUNPAREN      reduce using rule 196 (AdditiveExpression -> AdditiveExpression PLUS MultiplicativeExpression .)
    COLON           reduce using rule 196 (AdditiveExpression -> AdditiveExpression PLUS MultiplicativeExpression .)
    COMMA           reduce using rule 196 (AdditiveExpression -> AdditiveExpression PLUS MultiplicativeExpression .)
    RSQPAREN        reduce using rule 196 (AdditiveExpression -> AdditiveExpression PLUS MultiplicativeExpression .)
    MULT            shift and go to state 196
    DIV             shift and go to state 195
    MOD             shift and go to state 197


state 300

    (197) AdditiveExpression -> AdditiveExpression MINUS MultiplicativeExpression .
    (192) MultiplicativeExpression -> MultiplicativeExpression . MULT CastExpression
    (193) MultiplicativeExpression -> MultiplicativeExpression . DIV CastExpression
    (194) MultiplicativeExpression -> MultiplicativeExpression . MOD CastExpression

    PLUS            reduce using rule 197 (AdditiveExpression -> AdditiveExpression MINUS MultiplicativeExpression .)
    MINUS           reduce using rule 197 (AdditiveExpression -> AdditiveExpression MINUS MultiplicativeExpression .)
    OP_SHL          reduce using rule 197 (AdditiveExpression -> AdditiveExpression MINUS MultiplicativeExpression .)
    OP_SHR          reduce using rule 197 (AdditiveExpression -> AdditiveExpression MINUS MultiplicativeExpression .)
    OP_SHRR         reduce using rule 197 (AdditiveExpression -> AdditiveExpression MINUS MultiplicativeExpression .)
    LESS            reduce using rule 197 (AdditiveExpression -> AdditiveExpression MINUS MultiplicativeExpression .)
    MORE            reduce using rule 197 (AdditiveExpression -> AdditiveExpression MINUS MultiplicativeExpression .)
    OP_LE           reduce using rule 197 (AdditiveExpression -> AdditiveExpression MINUS MultiplicativeExpression .)
    OP_GE           reduce using rule 197 (AdditiveExpression -> AdditiveExpression MINUS MultiplicativeExpression .)
    OP_EQ           reduce using rule 197 (AdditiveExpression -> AdditiveExpression MINUS MultiplicativeExpression .)
    OP_NE           reduce using rule 197 (AdditiveExpression -> AdditiveExpression MINUS MultiplicativeExpression .)
    &               reduce using rule 197 (AdditiveExpression -> AdditiveExpression MINUS MultiplicativeExpression .)
    ^               reduce using rule 197 (AdditiveExpression -> AdditiveExpression MINUS MultiplicativeExpression .)
    |               reduce using rule 197 (AdditiveExpression -> AdditiveExpression MINUS MultiplicativeExpression .)
    OP_LAND         reduce using rule 197 (AdditiveExpression -> AdditiveExpression MINUS MultiplicativeExpression .)
    OP_LOR          reduce using rule 197 (AdditiveExpression -> AdditiveExpression MINUS MultiplicativeExpression .)
    QUES            reduce using rule 197 (AdditiveExpression -> AdditiveExpression MINUS MultiplicativeExpression .)
    SEMICOLON       reduce using rule 197 (AdditiveExpression -> AdditiveExpression MINUS MultiplicativeExpression .)
    RROUNPAREN      reduce using rule 197 (AdditiveExpression -> AdditiveExpression MINUS MultiplicativeExpression .)
    COLON           reduce using rule 197 (AdditiveExpression -> AdditiveExpression MINUS MultiplicativeExpression .)
    COMMA           reduce using rule 197 (AdditiveExpression -> AdditiveExpression MINUS MultiplicativeExpression .)
    RSQPAREN        reduce using rule 197 (AdditiveExpression -> AdditiveExpression MINUS MultiplicativeExpression .)
    MULT            shift and go to state 196
    DIV             shift and go to state 195
    MOD             shift and go to state 197


state 301

    (225) AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression .

    RROUNPAREN      reduce using rule 225 (AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression .)
    SEMICOLON       reduce using rule 225 (AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression .)
    COMMA           reduce using rule 225 (AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression .)
    RSQPAREN        reduce using rule 225 (AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression .)
    COLON           reduce using rule 225 (AssignmentExpression -> UnaryExpression AssignmentOperator AssignmentExpression .)


state 302

    (215) InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .
    (213) ExclusiveOrExpression -> ExclusiveOrExpression . ^ AndExpression

    |               reduce using rule 215 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    OP_LAND         reduce using rule 215 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    OP_LOR          reduce using rule 215 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    QUES            reduce using rule 215 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    SEMICOLON       reduce using rule 215 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    RROUNPAREN      reduce using rule 215 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    COMMA           reduce using rule 215 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    COLON           reduce using rule 215 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    RSQPAREN        reduce using rule 215 (InclusiveOrExpression -> InclusiveOrExpression | ExclusiveOrExpression .)
    ^               shift and go to state 205


state 303

    (109) IterationStatement -> Do Mark_quad Statement . WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON

    WHILE           shift and go to state 333


state 304

    (199) ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .
    (196) AdditiveExpression -> AdditiveExpression . PLUS MultiplicativeExpression
    (197) AdditiveExpression -> AdditiveExpression . MINUS MultiplicativeExpression

    OP_SHL          reduce using rule 199 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    OP_SHR          reduce using rule 199 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    OP_SHRR         reduce using rule 199 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    LESS            reduce using rule 199 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    MORE            reduce using rule 199 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    OP_LE           reduce using rule 199 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    OP_GE           reduce using rule 199 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    OP_EQ           reduce using rule 199 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    OP_NE           reduce using rule 199 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    &               reduce using rule 199 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    ^               reduce using rule 199 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    |               reduce using rule 199 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    OP_LAND         reduce using rule 199 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    OP_LOR          reduce using rule 199 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    QUES            reduce using rule 199 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    SEMICOLON       reduce using rule 199 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    RROUNPAREN      reduce using rule 199 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    COLON           reduce using rule 199 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    COMMA           reduce using rule 199 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    RSQPAREN        reduce using rule 199 (ShiftExpression -> ShiftExpression OP_SHL AdditiveExpression .)
    PLUS            shift and go to state 225
    MINUS           shift and go to state 226


state 305

    (201) ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .
    (196) AdditiveExpression -> AdditiveExpression . PLUS MultiplicativeExpression
    (197) AdditiveExpression -> AdditiveExpression . MINUS MultiplicativeExpression

    OP_SHL          reduce using rule 201 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    OP_SHR          reduce using rule 201 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    OP_SHRR         reduce using rule 201 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    LESS            reduce using rule 201 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    MORE            reduce using rule 201 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    OP_LE           reduce using rule 201 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    OP_GE           reduce using rule 201 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    OP_EQ           reduce using rule 201 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    OP_NE           reduce using rule 201 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    &               reduce using rule 201 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    ^               reduce using rule 201 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    |               reduce using rule 201 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    OP_LAND         reduce using rule 201 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    OP_LOR          reduce using rule 201 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    QUES            reduce using rule 201 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    SEMICOLON       reduce using rule 201 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    RROUNPAREN      reduce using rule 201 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    COLON           reduce using rule 201 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    COMMA           reduce using rule 201 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    RSQPAREN        reduce using rule 201 (ShiftExpression -> ShiftExpression OP_SHRR AdditiveExpression .)
    PLUS            shift and go to state 225
    MINUS           shift and go to state 226


state 306

    (200) ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .
    (196) AdditiveExpression -> AdditiveExpression . PLUS MultiplicativeExpression
    (197) AdditiveExpression -> AdditiveExpression . MINUS MultiplicativeExpression

    OP_SHL          reduce using rule 200 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    OP_SHR          reduce using rule 200 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    OP_SHRR         reduce using rule 200 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    LESS            reduce using rule 200 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    MORE            reduce using rule 200 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    OP_LE           reduce using rule 200 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    OP_GE           reduce using rule 200 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    OP_EQ           reduce using rule 200 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    OP_NE           reduce using rule 200 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    &               reduce using rule 200 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    ^               reduce using rule 200 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    |               reduce using rule 200 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    OP_LAND         reduce using rule 200 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    OP_LOR          reduce using rule 200 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    QUES            reduce using rule 200 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    SEMICOLON       reduce using rule 200 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    RROUNPAREN      reduce using rule 200 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    COLON           reduce using rule 200 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    COMMA           reduce using rule 200 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    RSQPAREN        reduce using rule 200 (ShiftExpression -> ShiftExpression OP_SHR AdditiveExpression .)
    PLUS            shift and go to state 225
    MINUS           shift and go to state 226


state 307

    (143) FieldAccess -> NotJustName DOT IDENTIFIER .

    LSQPAREN        reduce using rule 143 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    DOT             reduce using rule 143 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    OP_INC          reduce using rule 143 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    OP_DEC          reduce using rule 143 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    EQUAL           reduce using rule 143 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    ASS_MUL         reduce using rule 143 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    ASS_ADD         reduce using rule 143 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    ASS_SUB         reduce using rule 143 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    MULT            reduce using rule 143 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    DIV             reduce using rule 143 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    MOD             reduce using rule 143 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    PLUS            reduce using rule 143 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    MINUS           reduce using rule 143 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    OP_SHL          reduce using rule 143 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    OP_SHR          reduce using rule 143 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    OP_SHRR         reduce using rule 143 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    LESS            reduce using rule 143 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    MORE            reduce using rule 143 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    OP_LE           reduce using rule 143 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    OP_GE           reduce using rule 143 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    OP_EQ           reduce using rule 143 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    OP_NE           reduce using rule 143 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    &               reduce using rule 143 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    ^               reduce using rule 143 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    |               reduce using rule 143 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    OP_LAND         reduce using rule 143 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    OP_LOR          reduce using rule 143 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    QUES            reduce using rule 143 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    SEMICOLON       reduce using rule 143 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    RROUNPAREN      reduce using rule 143 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    COMMA           reduce using rule 143 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    RSQPAREN        reduce using rule 143 (FieldAccess -> NotJustName DOT IDENTIFIER .)
    COLON           reduce using rule 143 (FieldAccess -> NotJustName DOT IDENTIFIER .)


state 308

    (141) ArrayAccess -> QualifiedName LSQPAREN Expression . RSQPAREN

    RSQPAREN        shift and go to state 334


state 309

    (145) FieldAccess -> QualifiedName DOT THIS .

    LSQPAREN        reduce using rule 145 (FieldAccess -> QualifiedName DOT THIS .)
    DOT             reduce using rule 145 (FieldAccess -> QualifiedName DOT THIS .)
    OP_INC          reduce using rule 145 (FieldAccess -> QualifiedName DOT THIS .)
    OP_DEC          reduce using rule 145 (FieldAccess -> QualifiedName DOT THIS .)
    EQUAL           reduce using rule 145 (FieldAccess -> QualifiedName DOT THIS .)
    ASS_MUL         reduce using rule 145 (FieldAccess -> QualifiedName DOT THIS .)
    ASS_ADD         reduce using rule 145 (FieldAccess -> QualifiedName DOT THIS .)
    ASS_SUB         reduce using rule 145 (FieldAccess -> QualifiedName DOT THIS .)
    MULT            reduce using rule 145 (FieldAccess -> QualifiedName DOT THIS .)
    DIV             reduce using rule 145 (FieldAccess -> QualifiedName DOT THIS .)
    MOD             reduce using rule 145 (FieldAccess -> QualifiedName DOT THIS .)
    PLUS            reduce using rule 145 (FieldAccess -> QualifiedName DOT THIS .)
    MINUS           reduce using rule 145 (FieldAccess -> QualifiedName DOT THIS .)
    OP_SHL          reduce using rule 145 (FieldAccess -> QualifiedName DOT THIS .)
    OP_SHR          reduce using rule 145 (FieldAccess -> QualifiedName DOT THIS .)
    OP_SHRR         reduce using rule 145 (FieldAccess -> QualifiedName DOT THIS .)
    LESS            reduce using rule 145 (FieldAccess -> QualifiedName DOT THIS .)
    MORE            reduce using rule 145 (FieldAccess -> QualifiedName DOT THIS .)
    OP_LE           reduce using rule 145 (FieldAccess -> QualifiedName DOT THIS .)
    OP_GE           reduce using rule 145 (FieldAccess -> QualifiedName DOT THIS .)
    OP_EQ           reduce using rule 145 (FieldAccess -> QualifiedName DOT THIS .)
    OP_NE           reduce using rule 145 (FieldAccess -> QualifiedName DOT THIS .)
    &               reduce using rule 145 (FieldAccess -> QualifiedName DOT THIS .)
    ^               reduce using rule 145 (FieldAccess -> QualifiedName DOT THIS .)
    |               reduce using rule 145 (FieldAccess -> QualifiedName DOT THIS .)
    OP_LAND         reduce using rule 145 (FieldAccess -> QualifiedName DOT THIS .)
    OP_LOR          reduce using rule 145 (FieldAccess -> QualifiedName DOT THIS .)
    QUES            reduce using rule 145 (FieldAccess -> QualifiedName DOT THIS .)
    SEMICOLON       reduce using rule 145 (FieldAccess -> QualifiedName DOT THIS .)
    RROUNPAREN      reduce using rule 145 (FieldAccess -> QualifiedName DOT THIS .)
    COMMA           reduce using rule 145 (FieldAccess -> QualifiedName DOT THIS .)
    RSQPAREN        reduce using rule 145 (FieldAccess -> QualifiedName DOT THIS .)
    COLON           reduce using rule 145 (FieldAccess -> QualifiedName DOT THIS .)


state 310

    (157) NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .

    DOT             reduce using rule 157 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    OP_INC          reduce using rule 157 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    OP_DEC          reduce using rule 157 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    EQUAL           reduce using rule 157 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    ASS_MUL         reduce using rule 157 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    ASS_ADD         reduce using rule 157 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    ASS_SUB         reduce using rule 157 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    MULT            reduce using rule 157 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    DIV             reduce using rule 157 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    MOD             reduce using rule 157 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    PLUS            reduce using rule 157 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    MINUS           reduce using rule 157 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    OP_SHL          reduce using rule 157 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    OP_SHR          reduce using rule 157 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    OP_SHRR         reduce using rule 157 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    LESS            reduce using rule 157 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    MORE            reduce using rule 157 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    OP_LE           reduce using rule 157 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    OP_GE           reduce using rule 157 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    OP_EQ           reduce using rule 157 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    OP_NE           reduce using rule 157 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    &               reduce using rule 157 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    ^               reduce using rule 157 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    |               reduce using rule 157 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    OP_LAND         reduce using rule 157 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    OP_LOR          reduce using rule 157 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    QUES            reduce using rule 157 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    SEMICOLON       reduce using rule 157 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    COLON           reduce using rule 157 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    RROUNPAREN      reduce using rule 157 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    COMMA           reduce using rule 157 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)
    RSQPAREN        reduce using rule 157 (NewAllocationExpression -> QualifiedName DOT PlainNewAllocationExpression .)


state 311

    (146) FieldAccess -> QualifiedName DOT CLASS .

    LSQPAREN        reduce using rule 146 (FieldAccess -> QualifiedName DOT CLASS .)
    DOT             reduce using rule 146 (FieldAccess -> QualifiedName DOT CLASS .)
    OP_INC          reduce using rule 146 (FieldAccess -> QualifiedName DOT CLASS .)
    OP_DEC          reduce using rule 146 (FieldAccess -> QualifiedName DOT CLASS .)
    EQUAL           reduce using rule 146 (FieldAccess -> QualifiedName DOT CLASS .)
    ASS_MUL         reduce using rule 146 (FieldAccess -> QualifiedName DOT CLASS .)
    ASS_ADD         reduce using rule 146 (FieldAccess -> QualifiedName DOT CLASS .)
    ASS_SUB         reduce using rule 146 (FieldAccess -> QualifiedName DOT CLASS .)
    MULT            reduce using rule 146 (FieldAccess -> QualifiedName DOT CLASS .)
    DIV             reduce using rule 146 (FieldAccess -> QualifiedName DOT CLASS .)
    MOD             reduce using rule 146 (FieldAccess -> QualifiedName DOT CLASS .)
    PLUS            reduce using rule 146 (FieldAccess -> QualifiedName DOT CLASS .)
    MINUS           reduce using rule 146 (FieldAccess -> QualifiedName DOT CLASS .)
    OP_SHL          reduce using rule 146 (FieldAccess -> QualifiedName DOT CLASS .)
    OP_SHR          reduce using rule 146 (FieldAccess -> QualifiedName DOT CLASS .)
    OP_SHRR         reduce using rule 146 (FieldAccess -> QualifiedName DOT CLASS .)
    LESS            reduce using rule 146 (FieldAccess -> QualifiedName DOT CLASS .)
    MORE            reduce using rule 146 (FieldAccess -> QualifiedName DOT CLASS .)
    OP_LE           reduce using rule 146 (FieldAccess -> QualifiedName DOT CLASS .)
    OP_GE           reduce using rule 146 (FieldAccess -> QualifiedName DOT CLASS .)
    OP_EQ           reduce using rule 146 (FieldAccess -> QualifiedName DOT CLASS .)
    OP_NE           reduce using rule 146 (FieldAccess -> QualifiedName DOT CLASS .)
    &               reduce using rule 146 (FieldAccess -> QualifiedName DOT CLASS .)
    ^               reduce using rule 146 (FieldAccess -> QualifiedName DOT CLASS .)
    |               reduce using rule 146 (FieldAccess -> QualifiedName DOT CLASS .)
    OP_LAND         reduce using rule 146 (FieldAccess -> QualifiedName DOT CLASS .)
    OP_LOR          reduce using rule 146 (FieldAccess -> QualifiedName DOT CLASS .)
    QUES            reduce using rule 146 (FieldAccess -> QualifiedName DOT CLASS .)
    SEMICOLON       reduce using rule 146 (FieldAccess -> QualifiedName DOT CLASS .)
    RROUNPAREN      reduce using rule 146 (FieldAccess -> QualifiedName DOT CLASS .)
    COMMA           reduce using rule 146 (FieldAccess -> QualifiedName DOT CLASS .)
    RSQPAREN        reduce using rule 146 (FieldAccess -> QualifiedName DOT CLASS .)
    COLON           reduce using rule 146 (FieldAccess -> QualifiedName DOT CLASS .)


state 312

    (102) SelectionStatement -> If LROUNPAREN Expression . RROUNPAREN Mark_if Statement
    (103) SelectionStatement -> If LROUNPAREN Expression . RROUNPAREN Mark_if Statement ELSE Mark_else Statement

    RROUNPAREN      shift and go to state 335


state 313

    (68) Parameter -> TypeSpecifier DeclaratorName .
    (70) DeclaratorName -> DeclaratorName . OP_DIM
    (2) OP_DIM -> . LSQPAREN RSQPAREN

    RROUNPAREN      reduce using rule 68 (Parameter -> TypeSpecifier DeclaratorName .)
    COMMA           reduce using rule 68 (Parameter -> TypeSpecifier DeclaratorName .)
    LSQPAREN        shift and go to state 159

    OP_DIM                         shift and go to state 173

state 314

    (76) ConstructorDeclarator -> IDENTIFIER LROUNPAREN ParameterList RROUNPAREN .

    LCURPAREN       reduce using rule 76 (ConstructorDeclarator -> IDENTIFIER LROUNPAREN ParameterList RROUNPAREN .)


state 315

    (67) ParameterList -> ParameterList COMMA . Parameter
    (68) Parameter -> . TypeSpecifier DeclaratorName
    (3) TypeSpecifier -> . TypeName
    (4) TypeSpecifier -> . TypeName Dims
    (5) TypeName -> . PrimitiveType
    (6) TypeName -> . QualifiedName
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER

    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43
    IDENTIFIER      shift and go to state 22

    QualifiedName                  shift and go to state 52
    PrimitiveType                  shift and go to state 45
    TypeName                       shift and go to state 54
    Parameter                      shift and go to state 336
    TypeSpecifier                  shift and go to state 249

state 316

    (64) MethodDeclarator -> DeclaratorName LROUNPAREN ParameterList RROUNPAREN .

    LCURPAREN       reduce using rule 64 (MethodDeclarator -> DeclaratorName LROUNPAREN ParameterList RROUNPAREN .)
    SEMICOLON       reduce using rule 64 (MethodDeclarator -> DeclaratorName LROUNPAREN ParameterList RROUNPAREN .)


state 317

    (71) MethodBody -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .

    SEMICOLON       reduce using rule 71 (MethodBody -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    RCURPAREN       reduce using rule 71 (MethodBody -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    STATIC          reduce using rule 71 (MethodBody -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    IDENTIFIER      reduce using rule 71 (MethodBody -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    PUBLIC          reduce using rule 71 (MethodBody -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    PRIVATE         reduce using rule 71 (MethodBody -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    LCURPAREN       reduce using rule 71 (MethodBody -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    CLASS           reduce using rule 71 (MethodBody -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    BOOLEAN         reduce using rule 71 (MethodBody -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    CHAR            reduce using rule 71 (MethodBody -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    BYTE            reduce using rule 71 (MethodBody -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    SHORT           reduce using rule 71 (MethodBody -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    INT             reduce using rule 71 (MethodBody -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    LONG            reduce using rule 71 (MethodBody -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    FLOAT           reduce using rule 71 (MethodBody -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    DOUBLE          reduce using rule 71 (MethodBody -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)
    VOID            reduce using rule 71 (MethodBody -> LCURPAREN LocalVariableDeclarationsAndStatements RCURPAREN .)


state 318

    (148) MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .

    LSQPAREN        reduce using rule 148 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    DOT             reduce using rule 148 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    OP_INC          reduce using rule 148 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    OP_DEC          reduce using rule 148 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    EQUAL           reduce using rule 148 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    ASS_MUL         reduce using rule 148 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    ASS_ADD         reduce using rule 148 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    ASS_SUB         reduce using rule 148 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    MULT            reduce using rule 148 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    DIV             reduce using rule 148 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    MOD             reduce using rule 148 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    PLUS            reduce using rule 148 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    MINUS           reduce using rule 148 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    OP_SHL          reduce using rule 148 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    OP_SHR          reduce using rule 148 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    OP_SHRR         reduce using rule 148 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    LESS            reduce using rule 148 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    MORE            reduce using rule 148 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    OP_LE           reduce using rule 148 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    OP_GE           reduce using rule 148 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    OP_EQ           reduce using rule 148 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    OP_NE           reduce using rule 148 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    &               reduce using rule 148 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    ^               reduce using rule 148 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    |               reduce using rule 148 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    OP_LAND         reduce using rule 148 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    OP_LOR          reduce using rule 148 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    QUES            reduce using rule 148 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    SEMICOLON       reduce using rule 148 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    RSQPAREN        reduce using rule 148 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    RROUNPAREN      reduce using rule 148 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    COLON           reduce using rule 148 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)
    COMMA           reduce using rule 148 (MethodCall -> MethodAccess LROUNPAREN ArgumentList RROUNPAREN .)


state 319

    (155) ArgumentList -> ArgumentList COMMA . Expression
    (230) Expression -> . AssignmentExpression
    (224) AssignmentExpression -> . ConditionalExpression
    (225) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (220) ConditionalExpression -> . ConditionalOrExpression
    (221) ConditionalExpression -> . ConditionalOrExpression Mark_quad Ques Mark_quad Expression Mark_quad Cln Mark_quad ConditionalExpression Mark_quad
    (177) UnaryExpression -> . OP_INC UnaryExpression
    (178) UnaryExpression -> . OP_DEC UnaryExpression
    (179) UnaryExpression -> . LogicalUnaryExpression
    (180) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) ConditionalOrExpression -> . ConditionalAndExpression
    (219) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (181) LogicalUnaryExpression -> . PostfixExpression
    (182) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (185) ArithmeticUnaryOperator -> . PLUS
    (186) ArithmeticUnaryOperator -> . MINUS
    (216) ConditionalAndExpression -> . InclusiveOrExpression
    (217) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (173) PostfixExpression -> . PrimaryExpression
    (174) PostfixExpression -> . RealPostfixExpression
    (183) LogicalUnaryOperator -> . ~
    (184) LogicalUnaryOperator -> . NOT
    (214) InclusiveOrExpression -> . ExclusiveOrExpression
    (215) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (126) PrimaryExpression -> . QualifiedName
    (127) PrimaryExpression -> . NotJustName
    (175) RealPostfixExpression -> . PostfixExpression OP_INC
    (176) RealPostfixExpression -> . PostfixExpression OP_DEC
    (212) ExclusiveOrExpression -> . AndExpression
    (213) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (128) NotJustName -> . SpecialName
    (129) NotJustName -> . NewAllocationExpression
    (130) NotJustName -> . ComplexPrimary
    (210) AndExpression -> . EqualityExpression
    (211) AndExpression -> . AndExpression & EqualityExpression
    (151) SpecialName -> . THIS
    (152) SpecialName -> . SUPER
    (153) SpecialName -> . NULL
    (156) NewAllocationExpression -> . PlainNewAllocationExpression
    (157) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (131) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (132) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (207) EqualityExpression -> . RelationalExpression
    (208) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (209) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (158) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (159) PlainNewAllocationExpression -> . ClassAllocationExpression
    (160) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (161) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (162) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (133) ComplexPrimaryNoParenthesis -> . INT_CONST
    (134) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (135) ComplexPrimaryNoParenthesis -> . STRING
    (136) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (137) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (138) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (139) ComplexPrimaryNoParenthesis -> . FieldAccess
    (140) ComplexPrimaryNoParenthesis -> . MethodCall
    (202) RelationalExpression -> . ShiftExpression
    (203) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (204) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (205) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (206) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (165) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (166) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (167) ArrayAllocationExpression -> . NEW TypeName Dims
    (163) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (164) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (141) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (142) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (143) FieldAccess -> . NotJustName DOT IDENTIFIER
    (144) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (145) FieldAccess -> . QualifiedName DOT THIS
    (146) FieldAccess -> . QualifiedName DOT CLASS
    (147) FieldAccess -> . PrimitiveType DOT CLASS
    (148) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (149) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (198) ShiftExpression -> . AdditiveExpression
    (199) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (200) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (201) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (150) MethodAccess -> . QualifiedName
    (195) AdditiveExpression -> . MultiplicativeExpression
    (196) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (197) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (191) MultiplicativeExpression -> . CastExpression
    (192) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (193) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (194) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (187) CastExpression -> . UnaryExpression

    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 124
    PLUS            shift and go to state 87
    MINUS           shift and go to state 86
    ~               shift and go to state 140
    NOT             shift and go to state 117
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 89
    SUPER           shift and go to state 156
    NULL            shift and go to state 143
    LROUNPAREN      shift and go to state 92
    INT_CONST       shift and go to state 106
    FLOAT_CONST     shift and go to state 83
    STRING          shift and go to state 149
    CHAR_CONST      shift and go to state 139
    BOOLEAN_CONST   shift and go to state 155
    NEW             shift and go to state 125
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 119
    PrimaryExpression              shift and go to state 127
    PrimitiveType                  shift and go to state 183
    RealPostfixExpression          shift and go to state 95
    ArithmeticUnaryOperator        shift and go to state 96
    AndExpression                  shift and go to state 85
    ArrayAccess                    shift and go to state 108
    CastExpression                 shift and go to state 142
    EqualityExpression             shift and go to state 97
    LogicalUnaryOperator           shift and go to state 145
    ComplexPrimaryNoParenthesis    shift and go to state 99
    MultiplicativeExpression       shift and go to state 100
    ClassAllocationExpression      shift and go to state 120
    MethodCall                     shift and go to state 101
    ConditionalOrExpression        shift and go to state 131
    ShiftExpression                shift and go to state 147
    AssignmentExpression           shift and go to state 103
    NewAllocationExpression        shift and go to state 133
    NotJustName                    shift and go to state 150
    QualifiedName                  shift and go to state 185
    LogicalUnaryExpression         shift and go to state 152
    Expression                     shift and go to state 337
    AdditiveExpression             shift and go to state 135
    ArrayAllocationExpression      shift and go to state 110
    ConditionalExpression          shift and go to state 136
    UnaryExpression                shift and go to state 137
    InclusiveOrExpression          shift and go to state 138
    MethodAccess                   shift and go to state 111
    ExclusiveOrExpression          shift and go to state 113
    ConditionalAndExpression       shift and go to state 90
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    FieldAccess                    shift and go to state 154
    SpecialName                    shift and go to state 118

state 320

    (142) ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .

    LSQPAREN        reduce using rule 142 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    DOT             reduce using rule 142 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    OP_INC          reduce using rule 142 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    OP_DEC          reduce using rule 142 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    EQUAL           reduce using rule 142 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    ASS_MUL         reduce using rule 142 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    ASS_ADD         reduce using rule 142 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    ASS_SUB         reduce using rule 142 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    MULT            reduce using rule 142 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    DIV             reduce using rule 142 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    MOD             reduce using rule 142 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    PLUS            reduce using rule 142 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    MINUS           reduce using rule 142 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    OP_SHL          reduce using rule 142 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    OP_SHR          reduce using rule 142 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    OP_SHRR         reduce using rule 142 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    LESS            reduce using rule 142 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    MORE            reduce using rule 142 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    OP_LE           reduce using rule 142 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    OP_GE           reduce using rule 142 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    OP_EQ           reduce using rule 142 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    OP_NE           reduce using rule 142 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    &               reduce using rule 142 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    ^               reduce using rule 142 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    |               reduce using rule 142 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    OP_LAND         reduce using rule 142 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    OP_LOR          reduce using rule 142 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    QUES            reduce using rule 142 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    SEMICOLON       reduce using rule 142 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    RROUNPAREN      reduce using rule 142 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    COLON           reduce using rule 142 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    COMMA           reduce using rule 142 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)
    RSQPAREN        reduce using rule 142 (ArrayAccess -> ComplexPrimary LSQPAREN Expression RSQPAREN .)


state 321

    (162) PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .

    DOT             reduce using rule 162 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    OP_INC          reduce using rule 162 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    OP_DEC          reduce using rule 162 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    MULT            reduce using rule 162 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    DIV             reduce using rule 162 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    MOD             reduce using rule 162 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    PLUS            reduce using rule 162 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    MINUS           reduce using rule 162 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    OP_SHL          reduce using rule 162 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    OP_SHR          reduce using rule 162 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    OP_SHRR         reduce using rule 162 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    LESS            reduce using rule 162 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    MORE            reduce using rule 162 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    OP_LE           reduce using rule 162 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    OP_GE           reduce using rule 162 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    OP_EQ           reduce using rule 162 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    OP_NE           reduce using rule 162 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    &               reduce using rule 162 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    ^               reduce using rule 162 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    |               reduce using rule 162 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    OP_LAND         reduce using rule 162 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    OP_LOR          reduce using rule 162 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    QUES            reduce using rule 162 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    SEMICOLON       reduce using rule 162 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    RROUNPAREN      reduce using rule 162 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    COLON           reduce using rule 162 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    COMMA           reduce using rule 162 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    RSQPAREN        reduce using rule 162 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    EQUAL           reduce using rule 162 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    ASS_MUL         reduce using rule 162 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    ASS_ADD         reduce using rule 162 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)
    ASS_SUB         reduce using rule 162 (PlainNewAllocationExpression -> ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN .)


state 322

    (107) IterationStatement -> WHILE Mark_quad LROUNPAREN Expression . RROUNPAREN Mark_while Statement

    RROUNPAREN      shift and go to state 338


state 323

    (169) DimExprs -> DimExprs DimExpr .

    LSQPAREN        reduce using rule 169 (DimExprs -> DimExprs DimExpr .)
    LCURPAREN       reduce using rule 169 (DimExprs -> DimExprs DimExpr .)
    DOT             reduce using rule 169 (DimExprs -> DimExprs DimExpr .)
    OP_INC          reduce using rule 169 (DimExprs -> DimExprs DimExpr .)
    OP_DEC          reduce using rule 169 (DimExprs -> DimExprs DimExpr .)
    EQUAL           reduce using rule 169 (DimExprs -> DimExprs DimExpr .)
    ASS_MUL         reduce using rule 169 (DimExprs -> DimExprs DimExpr .)
    ASS_ADD         reduce using rule 169 (DimExprs -> DimExprs DimExpr .)
    ASS_SUB         reduce using rule 169 (DimExprs -> DimExprs DimExpr .)
    MULT            reduce using rule 169 (DimExprs -> DimExprs DimExpr .)
    DIV             reduce using rule 169 (DimExprs -> DimExprs DimExpr .)
    MOD             reduce using rule 169 (DimExprs -> DimExprs DimExpr .)
    PLUS            reduce using rule 169 (DimExprs -> DimExprs DimExpr .)
    MINUS           reduce using rule 169 (DimExprs -> DimExprs DimExpr .)
    OP_SHL          reduce using rule 169 (DimExprs -> DimExprs DimExpr .)
    OP_SHR          reduce using rule 169 (DimExprs -> DimExprs DimExpr .)
    OP_SHRR         reduce using rule 169 (DimExprs -> DimExprs DimExpr .)
    LESS            reduce using rule 169 (DimExprs -> DimExprs DimExpr .)
    MORE            reduce using rule 169 (DimExprs -> DimExprs DimExpr .)
    OP_LE           reduce using rule 169 (DimExprs -> DimExprs DimExpr .)
    OP_GE           reduce using rule 169 (DimExprs -> DimExprs DimExpr .)
    OP_EQ           reduce using rule 169 (DimExprs -> DimExprs DimExpr .)
    OP_NE           reduce using rule 169 (DimExprs -> DimExprs DimExpr .)
    &               reduce using rule 169 (DimExprs -> DimExprs DimExpr .)
    ^               reduce using rule 169 (DimExprs -> DimExprs DimExpr .)
    |               reduce using rule 169 (DimExprs -> DimExprs DimExpr .)
    OP_LAND         reduce using rule 169 (DimExprs -> DimExprs DimExpr .)
    OP_LOR          reduce using rule 169 (DimExprs -> DimExprs DimExpr .)
    QUES            reduce using rule 169 (DimExprs -> DimExprs DimExpr .)
    SEMICOLON       reduce using rule 169 (DimExprs -> DimExprs DimExpr .)
    RROUNPAREN      reduce using rule 169 (DimExprs -> DimExprs DimExpr .)
    COLON           reduce using rule 169 (DimExprs -> DimExprs DimExpr .)
    COMMA           reduce using rule 169 (DimExprs -> DimExprs DimExpr .)
    RSQPAREN        reduce using rule 169 (DimExprs -> DimExprs DimExpr .)


state 324

    (165) ArrayAllocationExpression -> NEW TypeName DimExprs Dims .
    (172) Dims -> Dims . OP_DIM
    (2) OP_DIM -> . LSQPAREN RSQPAREN

    LCURPAREN       reduce using rule 165 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    DOT             reduce using rule 165 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_INC          reduce using rule 165 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_DEC          reduce using rule 165 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    EQUAL           reduce using rule 165 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    ASS_MUL         reduce using rule 165 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    ASS_ADD         reduce using rule 165 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    ASS_SUB         reduce using rule 165 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    MULT            reduce using rule 165 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    DIV             reduce using rule 165 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    MOD             reduce using rule 165 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    PLUS            reduce using rule 165 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    MINUS           reduce using rule 165 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_SHL          reduce using rule 165 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_SHR          reduce using rule 165 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_SHRR         reduce using rule 165 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    LESS            reduce using rule 165 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    MORE            reduce using rule 165 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_LE           reduce using rule 165 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_GE           reduce using rule 165 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_EQ           reduce using rule 165 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_NE           reduce using rule 165 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    &               reduce using rule 165 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    ^               reduce using rule 165 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    |               reduce using rule 165 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_LAND         reduce using rule 165 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    OP_LOR          reduce using rule 165 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    QUES            reduce using rule 165 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    RROUNPAREN      reduce using rule 165 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    SEMICOLON       reduce using rule 165 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    COLON           reduce using rule 165 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    COMMA           reduce using rule 165 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    RSQPAREN        reduce using rule 165 (ArrayAllocationExpression -> NEW TypeName DimExprs Dims .)
    LSQPAREN        shift and go to state 159

    OP_DIM                         shift and go to state 246

state 325

    (170) DimExpr -> LSQPAREN Expression . RSQPAREN

    RSQPAREN        shift and go to state 339


state 326

    (163) ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList . RROUNPAREN
    (155) ArgumentList -> ArgumentList . COMMA Expression

    RROUNPAREN      shift and go to state 340
    COMMA           shift and go to state 319


state 327

    (164) ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .

    LCURPAREN       reduce using rule 164 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    DOT             reduce using rule 164 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    OP_INC          reduce using rule 164 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    OP_DEC          reduce using rule 164 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    MULT            reduce using rule 164 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    DIV             reduce using rule 164 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    MOD             reduce using rule 164 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    PLUS            reduce using rule 164 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    MINUS           reduce using rule 164 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    OP_SHL          reduce using rule 164 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    OP_SHR          reduce using rule 164 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    OP_SHRR         reduce using rule 164 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    LESS            reduce using rule 164 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    MORE            reduce using rule 164 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    OP_LE           reduce using rule 164 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    OP_GE           reduce using rule 164 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    OP_EQ           reduce using rule 164 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    OP_NE           reduce using rule 164 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    &               reduce using rule 164 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    ^               reduce using rule 164 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    |               reduce using rule 164 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    OP_LAND         reduce using rule 164 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    OP_LOR          reduce using rule 164 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    QUES            reduce using rule 164 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    SEMICOLON       reduce using rule 164 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    RROUNPAREN      reduce using rule 164 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    COLON           reduce using rule 164 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    COMMA           reduce using rule 164 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    RSQPAREN        reduce using rule 164 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    EQUAL           reduce using rule 164 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    ASS_MUL         reduce using rule 164 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    ASS_ADD         reduce using rule 164 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)
    ASS_SUB         reduce using rule 164 (ClassAllocationExpression -> NEW TypeName LROUNPAREN RROUNPAREN .)


state 328

    (112) IterationStatement -> Fr LROUNPAREN ForInit ForExpr . Mark_for ForIncr RROUNPAREN Mark_quad Statement
    (114) Mark_for -> .

    OP_INC          reduce using rule 114 (Mark_for -> .)
    OP_DEC          reduce using rule 114 (Mark_for -> .)
    PLUS            reduce using rule 114 (Mark_for -> .)
    MINUS           reduce using rule 114 (Mark_for -> .)
    ~               reduce using rule 114 (Mark_for -> .)
    NOT             reduce using rule 114 (Mark_for -> .)
    IDENTIFIER      reduce using rule 114 (Mark_for -> .)
    THIS            reduce using rule 114 (Mark_for -> .)
    SUPER           reduce using rule 114 (Mark_for -> .)
    NULL            reduce using rule 114 (Mark_for -> .)
    LROUNPAREN      reduce using rule 114 (Mark_for -> .)
    INT_CONST       reduce using rule 114 (Mark_for -> .)
    FLOAT_CONST     reduce using rule 114 (Mark_for -> .)
    STRING          reduce using rule 114 (Mark_for -> .)
    CHAR_CONST      reduce using rule 114 (Mark_for -> .)
    BOOLEAN_CONST   reduce using rule 114 (Mark_for -> .)
    NEW             reduce using rule 114 (Mark_for -> .)
    BOOLEAN         reduce using rule 114 (Mark_for -> .)
    CHAR            reduce using rule 114 (Mark_for -> .)
    BYTE            reduce using rule 114 (Mark_for -> .)
    SHORT           reduce using rule 114 (Mark_for -> .)
    INT             reduce using rule 114 (Mark_for -> .)
    LONG            reduce using rule 114 (Mark_for -> .)
    FLOAT           reduce using rule 114 (Mark_for -> .)
    DOUBLE          reduce using rule 114 (Mark_for -> .)
    VOID            reduce using rule 114 (Mark_for -> .)

    Mark_for                       shift and go to state 341

state 329

    (118) ForExpr -> Mark_quad . Expression SEMICOLON
    (119) ForExpr -> Mark_quad . SEMICOLON
    (230) Expression -> . AssignmentExpression
    (224) AssignmentExpression -> . ConditionalExpression
    (225) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (220) ConditionalExpression -> . ConditionalOrExpression
    (221) ConditionalExpression -> . ConditionalOrExpression Mark_quad Ques Mark_quad Expression Mark_quad Cln Mark_quad ConditionalExpression Mark_quad
    (177) UnaryExpression -> . OP_INC UnaryExpression
    (178) UnaryExpression -> . OP_DEC UnaryExpression
    (179) UnaryExpression -> . LogicalUnaryExpression
    (180) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) ConditionalOrExpression -> . ConditionalAndExpression
    (219) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (181) LogicalUnaryExpression -> . PostfixExpression
    (182) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (185) ArithmeticUnaryOperator -> . PLUS
    (186) ArithmeticUnaryOperator -> . MINUS
    (216) ConditionalAndExpression -> . InclusiveOrExpression
    (217) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (173) PostfixExpression -> . PrimaryExpression
    (174) PostfixExpression -> . RealPostfixExpression
    (183) LogicalUnaryOperator -> . ~
    (184) LogicalUnaryOperator -> . NOT
    (214) InclusiveOrExpression -> . ExclusiveOrExpression
    (215) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (126) PrimaryExpression -> . QualifiedName
    (127) PrimaryExpression -> . NotJustName
    (175) RealPostfixExpression -> . PostfixExpression OP_INC
    (176) RealPostfixExpression -> . PostfixExpression OP_DEC
    (212) ExclusiveOrExpression -> . AndExpression
    (213) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (128) NotJustName -> . SpecialName
    (129) NotJustName -> . NewAllocationExpression
    (130) NotJustName -> . ComplexPrimary
    (210) AndExpression -> . EqualityExpression
    (211) AndExpression -> . AndExpression & EqualityExpression
    (151) SpecialName -> . THIS
    (152) SpecialName -> . SUPER
    (153) SpecialName -> . NULL
    (156) NewAllocationExpression -> . PlainNewAllocationExpression
    (157) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (131) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (132) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (207) EqualityExpression -> . RelationalExpression
    (208) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (209) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (158) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (159) PlainNewAllocationExpression -> . ClassAllocationExpression
    (160) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (161) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (162) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (133) ComplexPrimaryNoParenthesis -> . INT_CONST
    (134) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (135) ComplexPrimaryNoParenthesis -> . STRING
    (136) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (137) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (138) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (139) ComplexPrimaryNoParenthesis -> . FieldAccess
    (140) ComplexPrimaryNoParenthesis -> . MethodCall
    (202) RelationalExpression -> . ShiftExpression
    (203) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (204) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (205) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (206) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (165) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (166) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (167) ArrayAllocationExpression -> . NEW TypeName Dims
    (163) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (164) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (141) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (142) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (143) FieldAccess -> . NotJustName DOT IDENTIFIER
    (144) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (145) FieldAccess -> . QualifiedName DOT THIS
    (146) FieldAccess -> . QualifiedName DOT CLASS
    (147) FieldAccess -> . PrimitiveType DOT CLASS
    (148) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (149) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (198) ShiftExpression -> . AdditiveExpression
    (199) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (200) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (201) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (150) MethodAccess -> . QualifiedName
    (195) AdditiveExpression -> . MultiplicativeExpression
    (196) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (197) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (191) MultiplicativeExpression -> . CastExpression
    (192) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (193) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (194) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (187) CastExpression -> . UnaryExpression

    SEMICOLON       shift and go to state 342
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 124
    PLUS            shift and go to state 87
    MINUS           shift and go to state 86
    ~               shift and go to state 140
    NOT             shift and go to state 117
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 89
    SUPER           shift and go to state 156
    NULL            shift and go to state 143
    LROUNPAREN      shift and go to state 92
    INT_CONST       shift and go to state 106
    FLOAT_CONST     shift and go to state 83
    STRING          shift and go to state 149
    CHAR_CONST      shift and go to state 139
    BOOLEAN_CONST   shift and go to state 155
    NEW             shift and go to state 125
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 119
    PrimaryExpression              shift and go to state 127
    PrimitiveType                  shift and go to state 183
    RealPostfixExpression          shift and go to state 95
    ArithmeticUnaryOperator        shift and go to state 96
    AndExpression                  shift and go to state 85
    ArrayAccess                    shift and go to state 108
    CastExpression                 shift and go to state 142
    EqualityExpression             shift and go to state 97
    LogicalUnaryOperator           shift and go to state 145
    ComplexPrimaryNoParenthesis    shift and go to state 99
    MultiplicativeExpression       shift and go to state 100
    ClassAllocationExpression      shift and go to state 120
    MethodCall                     shift and go to state 101
    ConditionalOrExpression        shift and go to state 131
    ShiftExpression                shift and go to state 147
    AssignmentExpression           shift and go to state 103
    NewAllocationExpression        shift and go to state 133
    NotJustName                    shift and go to state 150
    QualifiedName                  shift and go to state 185
    LogicalUnaryExpression         shift and go to state 152
    Expression                     shift and go to state 343
    AdditiveExpression             shift and go to state 135
    ArrayAllocationExpression      shift and go to state 110
    ConditionalExpression          shift and go to state 136
    UnaryExpression                shift and go to state 137
    InclusiveOrExpression          shift and go to state 138
    MethodAccess                   shift and go to state 111
    ExclusiveOrExpression          shift and go to state 113
    ConditionalAndExpression       shift and go to state 90
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    FieldAccess                    shift and go to state 154
    SpecialName                    shift and go to state 118

state 330

    (122) ExpressionStatements -> ExpressionStatements COMMA . ExpressionStatement
    (101) ExpressionStatement -> . Expression
    (230) Expression -> . AssignmentExpression
    (224) AssignmentExpression -> . ConditionalExpression
    (225) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (220) ConditionalExpression -> . ConditionalOrExpression
    (221) ConditionalExpression -> . ConditionalOrExpression Mark_quad Ques Mark_quad Expression Mark_quad Cln Mark_quad ConditionalExpression Mark_quad
    (177) UnaryExpression -> . OP_INC UnaryExpression
    (178) UnaryExpression -> . OP_DEC UnaryExpression
    (179) UnaryExpression -> . LogicalUnaryExpression
    (180) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) ConditionalOrExpression -> . ConditionalAndExpression
    (219) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (181) LogicalUnaryExpression -> . PostfixExpression
    (182) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (185) ArithmeticUnaryOperator -> . PLUS
    (186) ArithmeticUnaryOperator -> . MINUS
    (216) ConditionalAndExpression -> . InclusiveOrExpression
    (217) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (173) PostfixExpression -> . PrimaryExpression
    (174) PostfixExpression -> . RealPostfixExpression
    (183) LogicalUnaryOperator -> . ~
    (184) LogicalUnaryOperator -> . NOT
    (214) InclusiveOrExpression -> . ExclusiveOrExpression
    (215) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (126) PrimaryExpression -> . QualifiedName
    (127) PrimaryExpression -> . NotJustName
    (175) RealPostfixExpression -> . PostfixExpression OP_INC
    (176) RealPostfixExpression -> . PostfixExpression OP_DEC
    (212) ExclusiveOrExpression -> . AndExpression
    (213) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (128) NotJustName -> . SpecialName
    (129) NotJustName -> . NewAllocationExpression
    (130) NotJustName -> . ComplexPrimary
    (210) AndExpression -> . EqualityExpression
    (211) AndExpression -> . AndExpression & EqualityExpression
    (151) SpecialName -> . THIS
    (152) SpecialName -> . SUPER
    (153) SpecialName -> . NULL
    (156) NewAllocationExpression -> . PlainNewAllocationExpression
    (157) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (131) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (132) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (207) EqualityExpression -> . RelationalExpression
    (208) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (209) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (158) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (159) PlainNewAllocationExpression -> . ClassAllocationExpression
    (160) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (161) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (162) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (133) ComplexPrimaryNoParenthesis -> . INT_CONST
    (134) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (135) ComplexPrimaryNoParenthesis -> . STRING
    (136) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (137) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (138) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (139) ComplexPrimaryNoParenthesis -> . FieldAccess
    (140) ComplexPrimaryNoParenthesis -> . MethodCall
    (202) RelationalExpression -> . ShiftExpression
    (203) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (204) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (205) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (206) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (165) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (166) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (167) ArrayAllocationExpression -> . NEW TypeName Dims
    (163) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (164) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (141) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (142) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (143) FieldAccess -> . NotJustName DOT IDENTIFIER
    (144) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (145) FieldAccess -> . QualifiedName DOT THIS
    (146) FieldAccess -> . QualifiedName DOT CLASS
    (147) FieldAccess -> . PrimitiveType DOT CLASS
    (148) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (149) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (198) ShiftExpression -> . AdditiveExpression
    (199) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (200) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (201) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (150) MethodAccess -> . QualifiedName
    (195) AdditiveExpression -> . MultiplicativeExpression
    (196) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (197) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (191) MultiplicativeExpression -> . CastExpression
    (192) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (193) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (194) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (187) CastExpression -> . UnaryExpression

    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 124
    PLUS            shift and go to state 87
    MINUS           shift and go to state 86
    ~               shift and go to state 140
    NOT             shift and go to state 117
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 89
    SUPER           shift and go to state 156
    NULL            shift and go to state 143
    LROUNPAREN      shift and go to state 92
    INT_CONST       shift and go to state 106
    FLOAT_CONST     shift and go to state 83
    STRING          shift and go to state 149
    CHAR_CONST      shift and go to state 139
    BOOLEAN_CONST   shift and go to state 155
    NEW             shift and go to state 125
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 119
    PrimaryExpression              shift and go to state 127
    ExclusiveOrExpression          shift and go to state 113
    ExpressionStatement            shift and go to state 344
    PrimitiveType                  shift and go to state 183
    RealPostfixExpression          shift and go to state 95
    ArithmeticUnaryOperator        shift and go to state 96
    AndExpression                  shift and go to state 85
    ArrayAccess                    shift and go to state 108
    CastExpression                 shift and go to state 142
    EqualityExpression             shift and go to state 97
    LogicalUnaryOperator           shift and go to state 145
    ComplexPrimaryNoParenthesis    shift and go to state 99
    MultiplicativeExpression       shift and go to state 100
    ClassAllocationExpression      shift and go to state 120
    MethodCall                     shift and go to state 101
    ConditionalOrExpression        shift and go to state 131
    ShiftExpression                shift and go to state 147
    AssignmentExpression           shift and go to state 103
    NewAllocationExpression        shift and go to state 133
    NotJustName                    shift and go to state 150
    QualifiedName                  shift and go to state 185
    LogicalUnaryExpression         shift and go to state 152
    Expression                     shift and go to state 134
    AdditiveExpression             shift and go to state 135
    ArrayAllocationExpression      shift and go to state 110
    ConditionalExpression          shift and go to state 136
    UnaryExpression                shift and go to state 137
    InclusiveOrExpression          shift and go to state 138
    MethodAccess                   shift and go to state 111
    ConditionalAndExpression       shift and go to state 90
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    FieldAccess                    shift and go to state 154
    SpecialName                    shift and go to state 118

state 331

    (115) ForInit -> ExpressionStatements SEMICOLON .

    SEMICOLON       reduce using rule 115 (ForInit -> ExpressionStatements SEMICOLON .)
    OP_INC          reduce using rule 115 (ForInit -> ExpressionStatements SEMICOLON .)
    OP_DEC          reduce using rule 115 (ForInit -> ExpressionStatements SEMICOLON .)
    PLUS            reduce using rule 115 (ForInit -> ExpressionStatements SEMICOLON .)
    MINUS           reduce using rule 115 (ForInit -> ExpressionStatements SEMICOLON .)
    ~               reduce using rule 115 (ForInit -> ExpressionStatements SEMICOLON .)
    NOT             reduce using rule 115 (ForInit -> ExpressionStatements SEMICOLON .)
    IDENTIFIER      reduce using rule 115 (ForInit -> ExpressionStatements SEMICOLON .)
    THIS            reduce using rule 115 (ForInit -> ExpressionStatements SEMICOLON .)
    SUPER           reduce using rule 115 (ForInit -> ExpressionStatements SEMICOLON .)
    NULL            reduce using rule 115 (ForInit -> ExpressionStatements SEMICOLON .)
    LROUNPAREN      reduce using rule 115 (ForInit -> ExpressionStatements SEMICOLON .)
    INT_CONST       reduce using rule 115 (ForInit -> ExpressionStatements SEMICOLON .)
    FLOAT_CONST     reduce using rule 115 (ForInit -> ExpressionStatements SEMICOLON .)
    STRING          reduce using rule 115 (ForInit -> ExpressionStatements SEMICOLON .)
    CHAR_CONST      reduce using rule 115 (ForInit -> ExpressionStatements SEMICOLON .)
    BOOLEAN_CONST   reduce using rule 115 (ForInit -> ExpressionStatements SEMICOLON .)
    NEW             reduce using rule 115 (ForInit -> ExpressionStatements SEMICOLON .)
    BOOLEAN         reduce using rule 115 (ForInit -> ExpressionStatements SEMICOLON .)
    CHAR            reduce using rule 115 (ForInit -> ExpressionStatements SEMICOLON .)
    BYTE            reduce using rule 115 (ForInit -> ExpressionStatements SEMICOLON .)
    SHORT           reduce using rule 115 (ForInit -> ExpressionStatements SEMICOLON .)
    INT             reduce using rule 115 (ForInit -> ExpressionStatements SEMICOLON .)
    LONG            reduce using rule 115 (ForInit -> ExpressionStatements SEMICOLON .)
    FLOAT           reduce using rule 115 (ForInit -> ExpressionStatements SEMICOLON .)
    DOUBLE          reduce using rule 115 (ForInit -> ExpressionStatements SEMICOLON .)
    VOID            reduce using rule 115 (ForInit -> ExpressionStatements SEMICOLON .)


state 332

    (221) ConditionalExpression -> ConditionalOrExpression Mark_quad Ques Mark_quad . Expression Mark_quad Cln Mark_quad ConditionalExpression Mark_quad
    (230) Expression -> . AssignmentExpression
    (224) AssignmentExpression -> . ConditionalExpression
    (225) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (220) ConditionalExpression -> . ConditionalOrExpression
    (221) ConditionalExpression -> . ConditionalOrExpression Mark_quad Ques Mark_quad Expression Mark_quad Cln Mark_quad ConditionalExpression Mark_quad
    (177) UnaryExpression -> . OP_INC UnaryExpression
    (178) UnaryExpression -> . OP_DEC UnaryExpression
    (179) UnaryExpression -> . LogicalUnaryExpression
    (180) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) ConditionalOrExpression -> . ConditionalAndExpression
    (219) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (181) LogicalUnaryExpression -> . PostfixExpression
    (182) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (185) ArithmeticUnaryOperator -> . PLUS
    (186) ArithmeticUnaryOperator -> . MINUS
    (216) ConditionalAndExpression -> . InclusiveOrExpression
    (217) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (173) PostfixExpression -> . PrimaryExpression
    (174) PostfixExpression -> . RealPostfixExpression
    (183) LogicalUnaryOperator -> . ~
    (184) LogicalUnaryOperator -> . NOT
    (214) InclusiveOrExpression -> . ExclusiveOrExpression
    (215) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (126) PrimaryExpression -> . QualifiedName
    (127) PrimaryExpression -> . NotJustName
    (175) RealPostfixExpression -> . PostfixExpression OP_INC
    (176) RealPostfixExpression -> . PostfixExpression OP_DEC
    (212) ExclusiveOrExpression -> . AndExpression
    (213) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (128) NotJustName -> . SpecialName
    (129) NotJustName -> . NewAllocationExpression
    (130) NotJustName -> . ComplexPrimary
    (210) AndExpression -> . EqualityExpression
    (211) AndExpression -> . AndExpression & EqualityExpression
    (151) SpecialName -> . THIS
    (152) SpecialName -> . SUPER
    (153) SpecialName -> . NULL
    (156) NewAllocationExpression -> . PlainNewAllocationExpression
    (157) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (131) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (132) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (207) EqualityExpression -> . RelationalExpression
    (208) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (209) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (158) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (159) PlainNewAllocationExpression -> . ClassAllocationExpression
    (160) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (161) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (162) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (133) ComplexPrimaryNoParenthesis -> . INT_CONST
    (134) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (135) ComplexPrimaryNoParenthesis -> . STRING
    (136) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (137) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (138) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (139) ComplexPrimaryNoParenthesis -> . FieldAccess
    (140) ComplexPrimaryNoParenthesis -> . MethodCall
    (202) RelationalExpression -> . ShiftExpression
    (203) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (204) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (205) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (206) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (165) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (166) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (167) ArrayAllocationExpression -> . NEW TypeName Dims
    (163) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (164) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (141) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (142) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (143) FieldAccess -> . NotJustName DOT IDENTIFIER
    (144) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (145) FieldAccess -> . QualifiedName DOT THIS
    (146) FieldAccess -> . QualifiedName DOT CLASS
    (147) FieldAccess -> . PrimitiveType DOT CLASS
    (148) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (149) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (198) ShiftExpression -> . AdditiveExpression
    (199) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (200) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (201) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (150) MethodAccess -> . QualifiedName
    (195) AdditiveExpression -> . MultiplicativeExpression
    (196) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (197) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (191) MultiplicativeExpression -> . CastExpression
    (192) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (193) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (194) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (187) CastExpression -> . UnaryExpression

    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 124
    PLUS            shift and go to state 87
    MINUS           shift and go to state 86
    ~               shift and go to state 140
    NOT             shift and go to state 117
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 89
    SUPER           shift and go to state 156
    NULL            shift and go to state 143
    LROUNPAREN      shift and go to state 92
    INT_CONST       shift and go to state 106
    FLOAT_CONST     shift and go to state 83
    STRING          shift and go to state 149
    CHAR_CONST      shift and go to state 139
    BOOLEAN_CONST   shift and go to state 155
    NEW             shift and go to state 125
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 119
    PrimaryExpression              shift and go to state 127
    PrimitiveType                  shift and go to state 183
    RealPostfixExpression          shift and go to state 95
    ArithmeticUnaryOperator        shift and go to state 96
    AndExpression                  shift and go to state 85
    ArrayAccess                    shift and go to state 108
    CastExpression                 shift and go to state 142
    EqualityExpression             shift and go to state 97
    LogicalUnaryOperator           shift and go to state 145
    ComplexPrimaryNoParenthesis    shift and go to state 99
    MultiplicativeExpression       shift and go to state 100
    ClassAllocationExpression      shift and go to state 120
    MethodCall                     shift and go to state 101
    ConditionalOrExpression        shift and go to state 131
    ShiftExpression                shift and go to state 147
    AssignmentExpression           shift and go to state 103
    NewAllocationExpression        shift and go to state 133
    NotJustName                    shift and go to state 150
    QualifiedName                  shift and go to state 185
    LogicalUnaryExpression         shift and go to state 152
    Expression                     shift and go to state 345
    AdditiveExpression             shift and go to state 135
    ArrayAllocationExpression      shift and go to state 110
    ConditionalExpression          shift and go to state 136
    UnaryExpression                shift and go to state 137
    InclusiveOrExpression          shift and go to state 138
    MethodAccess                   shift and go to state 111
    ExclusiveOrExpression          shift and go to state 113
    ConditionalAndExpression       shift and go to state 90
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    FieldAccess                    shift and go to state 154
    SpecialName                    shift and go to state 118

state 333

    (109) IterationStatement -> Do Mark_quad Statement WHILE . LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON

    LROUNPAREN      shift and go to state 346


state 334

    (141) ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .

    LSQPAREN        reduce using rule 141 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    DOT             reduce using rule 141 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    OP_INC          reduce using rule 141 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    OP_DEC          reduce using rule 141 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    EQUAL           reduce using rule 141 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    ASS_MUL         reduce using rule 141 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    ASS_ADD         reduce using rule 141 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    ASS_SUB         reduce using rule 141 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    MULT            reduce using rule 141 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    DIV             reduce using rule 141 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    MOD             reduce using rule 141 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    PLUS            reduce using rule 141 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    MINUS           reduce using rule 141 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    OP_SHL          reduce using rule 141 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    OP_SHR          reduce using rule 141 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    OP_SHRR         reduce using rule 141 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    LESS            reduce using rule 141 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    MORE            reduce using rule 141 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    OP_LE           reduce using rule 141 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    OP_GE           reduce using rule 141 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    OP_EQ           reduce using rule 141 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    OP_NE           reduce using rule 141 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    &               reduce using rule 141 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    ^               reduce using rule 141 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    |               reduce using rule 141 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    OP_LAND         reduce using rule 141 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    OP_LOR          reduce using rule 141 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    QUES            reduce using rule 141 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    SEMICOLON       reduce using rule 141 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    RROUNPAREN      reduce using rule 141 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    COLON           reduce using rule 141 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    COMMA           reduce using rule 141 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)
    RSQPAREN        reduce using rule 141 (ArrayAccess -> QualifiedName LSQPAREN Expression RSQPAREN .)


state 335

    (102) SelectionStatement -> If LROUNPAREN Expression RROUNPAREN . Mark_if Statement
    (103) SelectionStatement -> If LROUNPAREN Expression RROUNPAREN . Mark_if Statement ELSE Mark_else Statement
    (105) Mark_if -> .

    SEMICOLON       reduce using rule 105 (Mark_if -> .)
    IDENTIFIER      reduce using rule 105 (Mark_if -> .)
    CASE            reduce using rule 105 (Mark_if -> .)
    DEFAULT         reduce using rule 105 (Mark_if -> .)
    BREAK           reduce using rule 105 (Mark_if -> .)
    RETURN          reduce using rule 105 (Mark_if -> .)
    WHILE           reduce using rule 105 (Mark_if -> .)
    LCURPAREN       reduce using rule 105 (Mark_if -> .)
    DO              reduce using rule 105 (Mark_if -> .)
    FOR             reduce using rule 105 (Mark_if -> .)
    IF              reduce using rule 105 (Mark_if -> .)
    OP_INC          reduce using rule 105 (Mark_if -> .)
    OP_DEC          reduce using rule 105 (Mark_if -> .)
    PLUS            reduce using rule 105 (Mark_if -> .)
    MINUS           reduce using rule 105 (Mark_if -> .)
    ~               reduce using rule 105 (Mark_if -> .)
    NOT             reduce using rule 105 (Mark_if -> .)
    THIS            reduce using rule 105 (Mark_if -> .)
    SUPER           reduce using rule 105 (Mark_if -> .)
    NULL            reduce using rule 105 (Mark_if -> .)
    LROUNPAREN      reduce using rule 105 (Mark_if -> .)
    INT_CONST       reduce using rule 105 (Mark_if -> .)
    FLOAT_CONST     reduce using rule 105 (Mark_if -> .)
    STRING          reduce using rule 105 (Mark_if -> .)
    CHAR_CONST      reduce using rule 105 (Mark_if -> .)
    BOOLEAN_CONST   reduce using rule 105 (Mark_if -> .)
    NEW             reduce using rule 105 (Mark_if -> .)
    BOOLEAN         reduce using rule 105 (Mark_if -> .)
    CHAR            reduce using rule 105 (Mark_if -> .)
    BYTE            reduce using rule 105 (Mark_if -> .)
    SHORT           reduce using rule 105 (Mark_if -> .)
    INT             reduce using rule 105 (Mark_if -> .)
    LONG            reduce using rule 105 (Mark_if -> .)
    FLOAT           reduce using rule 105 (Mark_if -> .)
    DOUBLE          reduce using rule 105 (Mark_if -> .)
    VOID            reduce using rule 105 (Mark_if -> .)

    Mark_if                        shift and go to state 347

state 336

    (67) ParameterList -> ParameterList COMMA Parameter .

    RROUNPAREN      reduce using rule 67 (ParameterList -> ParameterList COMMA Parameter .)
    COMMA           reduce using rule 67 (ParameterList -> ParameterList COMMA Parameter .)


state 337

    (155) ArgumentList -> ArgumentList COMMA Expression .

    RROUNPAREN      reduce using rule 155 (ArgumentList -> ArgumentList COMMA Expression .)
    COMMA           reduce using rule 155 (ArgumentList -> ArgumentList COMMA Expression .)


state 338

    (107) IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN . Mark_while Statement
    (108) Mark_while -> .

    SEMICOLON       reduce using rule 108 (Mark_while -> .)
    IDENTIFIER      reduce using rule 108 (Mark_while -> .)
    CASE            reduce using rule 108 (Mark_while -> .)
    DEFAULT         reduce using rule 108 (Mark_while -> .)
    BREAK           reduce using rule 108 (Mark_while -> .)
    RETURN          reduce using rule 108 (Mark_while -> .)
    WHILE           reduce using rule 108 (Mark_while -> .)
    LCURPAREN       reduce using rule 108 (Mark_while -> .)
    DO              reduce using rule 108 (Mark_while -> .)
    FOR             reduce using rule 108 (Mark_while -> .)
    IF              reduce using rule 108 (Mark_while -> .)
    OP_INC          reduce using rule 108 (Mark_while -> .)
    OP_DEC          reduce using rule 108 (Mark_while -> .)
    PLUS            reduce using rule 108 (Mark_while -> .)
    MINUS           reduce using rule 108 (Mark_while -> .)
    ~               reduce using rule 108 (Mark_while -> .)
    NOT             reduce using rule 108 (Mark_while -> .)
    THIS            reduce using rule 108 (Mark_while -> .)
    SUPER           reduce using rule 108 (Mark_while -> .)
    NULL            reduce using rule 108 (Mark_while -> .)
    LROUNPAREN      reduce using rule 108 (Mark_while -> .)
    INT_CONST       reduce using rule 108 (Mark_while -> .)
    FLOAT_CONST     reduce using rule 108 (Mark_while -> .)
    STRING          reduce using rule 108 (Mark_while -> .)
    CHAR_CONST      reduce using rule 108 (Mark_while -> .)
    BOOLEAN_CONST   reduce using rule 108 (Mark_while -> .)
    NEW             reduce using rule 108 (Mark_while -> .)
    BOOLEAN         reduce using rule 108 (Mark_while -> .)
    CHAR            reduce using rule 108 (Mark_while -> .)
    BYTE            reduce using rule 108 (Mark_while -> .)
    SHORT           reduce using rule 108 (Mark_while -> .)
    INT             reduce using rule 108 (Mark_while -> .)
    LONG            reduce using rule 108 (Mark_while -> .)
    FLOAT           reduce using rule 108 (Mark_while -> .)
    DOUBLE          reduce using rule 108 (Mark_while -> .)
    VOID            reduce using rule 108 (Mark_while -> .)

    Mark_while                     shift and go to state 348

state 339

    (170) DimExpr -> LSQPAREN Expression RSQPAREN .

    LSQPAREN        reduce using rule 170 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    LCURPAREN       reduce using rule 170 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    DOT             reduce using rule 170 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    OP_INC          reduce using rule 170 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    OP_DEC          reduce using rule 170 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    EQUAL           reduce using rule 170 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    ASS_MUL         reduce using rule 170 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    ASS_ADD         reduce using rule 170 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    ASS_SUB         reduce using rule 170 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    MULT            reduce using rule 170 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    DIV             reduce using rule 170 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    MOD             reduce using rule 170 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    PLUS            reduce using rule 170 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    MINUS           reduce using rule 170 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    OP_SHL          reduce using rule 170 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    OP_SHR          reduce using rule 170 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    OP_SHRR         reduce using rule 170 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    LESS            reduce using rule 170 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    MORE            reduce using rule 170 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    OP_LE           reduce using rule 170 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    OP_GE           reduce using rule 170 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    OP_EQ           reduce using rule 170 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    OP_NE           reduce using rule 170 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    &               reduce using rule 170 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    ^               reduce using rule 170 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    |               reduce using rule 170 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    OP_LAND         reduce using rule 170 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    OP_LOR          reduce using rule 170 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    QUES            reduce using rule 170 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    SEMICOLON       reduce using rule 170 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    RROUNPAREN      reduce using rule 170 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    COLON           reduce using rule 170 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    COMMA           reduce using rule 170 (DimExpr -> LSQPAREN Expression RSQPAREN .)
    RSQPAREN        reduce using rule 170 (DimExpr -> LSQPAREN Expression RSQPAREN .)


state 340

    (163) ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .

    LCURPAREN       reduce using rule 163 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    DOT             reduce using rule 163 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    OP_INC          reduce using rule 163 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    OP_DEC          reduce using rule 163 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    MULT            reduce using rule 163 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    DIV             reduce using rule 163 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    MOD             reduce using rule 163 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    PLUS            reduce using rule 163 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    MINUS           reduce using rule 163 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    OP_SHL          reduce using rule 163 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    OP_SHR          reduce using rule 163 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    OP_SHRR         reduce using rule 163 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    LESS            reduce using rule 163 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    MORE            reduce using rule 163 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    OP_LE           reduce using rule 163 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    OP_GE           reduce using rule 163 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    OP_EQ           reduce using rule 163 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    OP_NE           reduce using rule 163 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    &               reduce using rule 163 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    ^               reduce using rule 163 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    |               reduce using rule 163 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    OP_LAND         reduce using rule 163 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    OP_LOR          reduce using rule 163 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    QUES            reduce using rule 163 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    SEMICOLON       reduce using rule 163 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    RROUNPAREN      reduce using rule 163 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    COLON           reduce using rule 163 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    COMMA           reduce using rule 163 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    RSQPAREN        reduce using rule 163 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    EQUAL           reduce using rule 163 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    ASS_MUL         reduce using rule 163 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    ASS_ADD         reduce using rule 163 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)
    ASS_SUB         reduce using rule 163 (ClassAllocationExpression -> NEW TypeName LROUNPAREN ArgumentList RROUNPAREN .)


state 341

    (112) IterationStatement -> Fr LROUNPAREN ForInit ForExpr Mark_for . ForIncr RROUNPAREN Mark_quad Statement
    (120) ForIncr -> . ExpressionStatements
    (121) ExpressionStatements -> . ExpressionStatement
    (122) ExpressionStatements -> . ExpressionStatements COMMA ExpressionStatement
    (101) ExpressionStatement -> . Expression
    (230) Expression -> . AssignmentExpression
    (224) AssignmentExpression -> . ConditionalExpression
    (225) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (220) ConditionalExpression -> . ConditionalOrExpression
    (221) ConditionalExpression -> . ConditionalOrExpression Mark_quad Ques Mark_quad Expression Mark_quad Cln Mark_quad ConditionalExpression Mark_quad
    (177) UnaryExpression -> . OP_INC UnaryExpression
    (178) UnaryExpression -> . OP_DEC UnaryExpression
    (179) UnaryExpression -> . LogicalUnaryExpression
    (180) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) ConditionalOrExpression -> . ConditionalAndExpression
    (219) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (181) LogicalUnaryExpression -> . PostfixExpression
    (182) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (185) ArithmeticUnaryOperator -> . PLUS
    (186) ArithmeticUnaryOperator -> . MINUS
    (216) ConditionalAndExpression -> . InclusiveOrExpression
    (217) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (173) PostfixExpression -> . PrimaryExpression
    (174) PostfixExpression -> . RealPostfixExpression
    (183) LogicalUnaryOperator -> . ~
    (184) LogicalUnaryOperator -> . NOT
    (214) InclusiveOrExpression -> . ExclusiveOrExpression
    (215) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (126) PrimaryExpression -> . QualifiedName
    (127) PrimaryExpression -> . NotJustName
    (175) RealPostfixExpression -> . PostfixExpression OP_INC
    (176) RealPostfixExpression -> . PostfixExpression OP_DEC
    (212) ExclusiveOrExpression -> . AndExpression
    (213) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (128) NotJustName -> . SpecialName
    (129) NotJustName -> . NewAllocationExpression
    (130) NotJustName -> . ComplexPrimary
    (210) AndExpression -> . EqualityExpression
    (211) AndExpression -> . AndExpression & EqualityExpression
    (151) SpecialName -> . THIS
    (152) SpecialName -> . SUPER
    (153) SpecialName -> . NULL
    (156) NewAllocationExpression -> . PlainNewAllocationExpression
    (157) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (131) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (132) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (207) EqualityExpression -> . RelationalExpression
    (208) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (209) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (158) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (159) PlainNewAllocationExpression -> . ClassAllocationExpression
    (160) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (161) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (162) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (133) ComplexPrimaryNoParenthesis -> . INT_CONST
    (134) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (135) ComplexPrimaryNoParenthesis -> . STRING
    (136) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (137) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (138) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (139) ComplexPrimaryNoParenthesis -> . FieldAccess
    (140) ComplexPrimaryNoParenthesis -> . MethodCall
    (202) RelationalExpression -> . ShiftExpression
    (203) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (204) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (205) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (206) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (165) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (166) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (167) ArrayAllocationExpression -> . NEW TypeName Dims
    (163) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (164) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (141) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (142) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (143) FieldAccess -> . NotJustName DOT IDENTIFIER
    (144) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (145) FieldAccess -> . QualifiedName DOT THIS
    (146) FieldAccess -> . QualifiedName DOT CLASS
    (147) FieldAccess -> . PrimitiveType DOT CLASS
    (148) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (149) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (198) ShiftExpression -> . AdditiveExpression
    (199) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (200) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (201) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (150) MethodAccess -> . QualifiedName
    (195) AdditiveExpression -> . MultiplicativeExpression
    (196) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (197) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (191) MultiplicativeExpression -> . CastExpression
    (192) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (193) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (194) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (187) CastExpression -> . UnaryExpression

    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 124
    PLUS            shift and go to state 87
    MINUS           shift and go to state 86
    ~               shift and go to state 140
    NOT             shift and go to state 117
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 89
    SUPER           shift and go to state 156
    NULL            shift and go to state 143
    LROUNPAREN      shift and go to state 92
    INT_CONST       shift and go to state 106
    FLOAT_CONST     shift and go to state 83
    STRING          shift and go to state 149
    CHAR_CONST      shift and go to state 139
    BOOLEAN_CONST   shift and go to state 155
    NEW             shift and go to state 125
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 119
    ArithmeticUnaryOperator        shift and go to state 96
    ExclusiveOrExpression          shift and go to state 113
    ExpressionStatement            shift and go to state 291
    PrimitiveType                  shift and go to state 183
    RealPostfixExpression          shift and go to state 95
    AndExpression                  shift and go to state 85
    ArrayAccess                    shift and go to state 108
    CastExpression                 shift and go to state 142
    EqualityExpression             shift and go to state 97
    ComplexPrimaryNoParenthesis    shift and go to state 99
    MultiplicativeExpression       shift and go to state 100
    ClassAllocationExpression      shift and go to state 120
    QualifiedName                  shift and go to state 185
    ConditionalOrExpression        shift and go to state 131
    ShiftExpression                shift and go to state 147
    AssignmentExpression           shift and go to state 103
    NotJustName                    shift and go to state 150
    NewAllocationExpression        shift and go to state 133
    LogicalUnaryOperator           shift and go to state 145
    MethodCall                     shift and go to state 101
    LogicalUnaryExpression         shift and go to state 152
    UnaryExpression                shift and go to state 137
    Expression                     shift and go to state 134
    AdditiveExpression             shift and go to state 135
    ArrayAllocationExpression      shift and go to state 110
    ConditionalExpression          shift and go to state 136
    InclusiveOrExpression          shift and go to state 138
    MethodAccess                   shift and go to state 111
    PrimaryExpression              shift and go to state 127
    ExpressionStatements           shift and go to state 350
    ConditionalAndExpression       shift and go to state 90
    ForIncr                        shift and go to state 349
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    FieldAccess                    shift and go to state 154
    SpecialName                    shift and go to state 118

state 342

    (119) ForExpr -> Mark_quad SEMICOLON .

    OP_INC          reduce using rule 119 (ForExpr -> Mark_quad SEMICOLON .)
    OP_DEC          reduce using rule 119 (ForExpr -> Mark_quad SEMICOLON .)
    PLUS            reduce using rule 119 (ForExpr -> Mark_quad SEMICOLON .)
    MINUS           reduce using rule 119 (ForExpr -> Mark_quad SEMICOLON .)
    ~               reduce using rule 119 (ForExpr -> Mark_quad SEMICOLON .)
    NOT             reduce using rule 119 (ForExpr -> Mark_quad SEMICOLON .)
    IDENTIFIER      reduce using rule 119 (ForExpr -> Mark_quad SEMICOLON .)
    THIS            reduce using rule 119 (ForExpr -> Mark_quad SEMICOLON .)
    SUPER           reduce using rule 119 (ForExpr -> Mark_quad SEMICOLON .)
    NULL            reduce using rule 119 (ForExpr -> Mark_quad SEMICOLON .)
    LROUNPAREN      reduce using rule 119 (ForExpr -> Mark_quad SEMICOLON .)
    INT_CONST       reduce using rule 119 (ForExpr -> Mark_quad SEMICOLON .)
    FLOAT_CONST     reduce using rule 119 (ForExpr -> Mark_quad SEMICOLON .)
    STRING          reduce using rule 119 (ForExpr -> Mark_quad SEMICOLON .)
    CHAR_CONST      reduce using rule 119 (ForExpr -> Mark_quad SEMICOLON .)
    BOOLEAN_CONST   reduce using rule 119 (ForExpr -> Mark_quad SEMICOLON .)
    NEW             reduce using rule 119 (ForExpr -> Mark_quad SEMICOLON .)
    BOOLEAN         reduce using rule 119 (ForExpr -> Mark_quad SEMICOLON .)
    CHAR            reduce using rule 119 (ForExpr -> Mark_quad SEMICOLON .)
    BYTE            reduce using rule 119 (ForExpr -> Mark_quad SEMICOLON .)
    SHORT           reduce using rule 119 (ForExpr -> Mark_quad SEMICOLON .)
    INT             reduce using rule 119 (ForExpr -> Mark_quad SEMICOLON .)
    LONG            reduce using rule 119 (ForExpr -> Mark_quad SEMICOLON .)
    FLOAT           reduce using rule 119 (ForExpr -> Mark_quad SEMICOLON .)
    DOUBLE          reduce using rule 119 (ForExpr -> Mark_quad SEMICOLON .)
    VOID            reduce using rule 119 (ForExpr -> Mark_quad SEMICOLON .)


state 343

    (118) ForExpr -> Mark_quad Expression . SEMICOLON

    SEMICOLON       shift and go to state 351


state 344

    (122) ExpressionStatements -> ExpressionStatements COMMA ExpressionStatement .

    COMMA           reduce using rule 122 (ExpressionStatements -> ExpressionStatements COMMA ExpressionStatement .)
    RROUNPAREN      reduce using rule 122 (ExpressionStatements -> ExpressionStatements COMMA ExpressionStatement .)
    SEMICOLON       reduce using rule 122 (ExpressionStatements -> ExpressionStatements COMMA ExpressionStatement .)


state 345

    (221) ConditionalExpression -> ConditionalOrExpression Mark_quad Ques Mark_quad Expression . Mark_quad Cln Mark_quad ConditionalExpression Mark_quad
    (96) Mark_quad -> .

    COLON           reduce using rule 96 (Mark_quad -> .)

    Mark_quad                      shift and go to state 352

state 346

    (109) IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN . Expression Mark_dowhile RROUNPAREN SEMICOLON
    (230) Expression -> . AssignmentExpression
    (224) AssignmentExpression -> . ConditionalExpression
    (225) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (220) ConditionalExpression -> . ConditionalOrExpression
    (221) ConditionalExpression -> . ConditionalOrExpression Mark_quad Ques Mark_quad Expression Mark_quad Cln Mark_quad ConditionalExpression Mark_quad
    (177) UnaryExpression -> . OP_INC UnaryExpression
    (178) UnaryExpression -> . OP_DEC UnaryExpression
    (179) UnaryExpression -> . LogicalUnaryExpression
    (180) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) ConditionalOrExpression -> . ConditionalAndExpression
    (219) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (181) LogicalUnaryExpression -> . PostfixExpression
    (182) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (185) ArithmeticUnaryOperator -> . PLUS
    (186) ArithmeticUnaryOperator -> . MINUS
    (216) ConditionalAndExpression -> . InclusiveOrExpression
    (217) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (173) PostfixExpression -> . PrimaryExpression
    (174) PostfixExpression -> . RealPostfixExpression
    (183) LogicalUnaryOperator -> . ~
    (184) LogicalUnaryOperator -> . NOT
    (214) InclusiveOrExpression -> . ExclusiveOrExpression
    (215) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (126) PrimaryExpression -> . QualifiedName
    (127) PrimaryExpression -> . NotJustName
    (175) RealPostfixExpression -> . PostfixExpression OP_INC
    (176) RealPostfixExpression -> . PostfixExpression OP_DEC
    (212) ExclusiveOrExpression -> . AndExpression
    (213) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (128) NotJustName -> . SpecialName
    (129) NotJustName -> . NewAllocationExpression
    (130) NotJustName -> . ComplexPrimary
    (210) AndExpression -> . EqualityExpression
    (211) AndExpression -> . AndExpression & EqualityExpression
    (151) SpecialName -> . THIS
    (152) SpecialName -> . SUPER
    (153) SpecialName -> . NULL
    (156) NewAllocationExpression -> . PlainNewAllocationExpression
    (157) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (131) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (132) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (207) EqualityExpression -> . RelationalExpression
    (208) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (209) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (158) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (159) PlainNewAllocationExpression -> . ClassAllocationExpression
    (160) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (161) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (162) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (133) ComplexPrimaryNoParenthesis -> . INT_CONST
    (134) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (135) ComplexPrimaryNoParenthesis -> . STRING
    (136) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (137) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (138) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (139) ComplexPrimaryNoParenthesis -> . FieldAccess
    (140) ComplexPrimaryNoParenthesis -> . MethodCall
    (202) RelationalExpression -> . ShiftExpression
    (203) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (204) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (205) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (206) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (165) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (166) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (167) ArrayAllocationExpression -> . NEW TypeName Dims
    (163) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (164) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (141) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (142) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (143) FieldAccess -> . NotJustName DOT IDENTIFIER
    (144) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (145) FieldAccess -> . QualifiedName DOT THIS
    (146) FieldAccess -> . QualifiedName DOT CLASS
    (147) FieldAccess -> . PrimitiveType DOT CLASS
    (148) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (149) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (198) ShiftExpression -> . AdditiveExpression
    (199) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (200) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (201) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (150) MethodAccess -> . QualifiedName
    (195) AdditiveExpression -> . MultiplicativeExpression
    (196) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (197) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (191) MultiplicativeExpression -> . CastExpression
    (192) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (193) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (194) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (187) CastExpression -> . UnaryExpression

    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 124
    PLUS            shift and go to state 87
    MINUS           shift and go to state 86
    ~               shift and go to state 140
    NOT             shift and go to state 117
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 89
    SUPER           shift and go to state 156
    NULL            shift and go to state 143
    LROUNPAREN      shift and go to state 92
    INT_CONST       shift and go to state 106
    FLOAT_CONST     shift and go to state 83
    STRING          shift and go to state 149
    CHAR_CONST      shift and go to state 139
    BOOLEAN_CONST   shift and go to state 155
    NEW             shift and go to state 125
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 119
    PrimaryExpression              shift and go to state 127
    PrimitiveType                  shift and go to state 183
    RealPostfixExpression          shift and go to state 95
    AndExpression                  shift and go to state 85
    ArrayAccess                    shift and go to state 108
    CastExpression                 shift and go to state 142
    EqualityExpression             shift and go to state 97
    LogicalUnaryOperator           shift and go to state 145
    ComplexPrimaryNoParenthesis    shift and go to state 99
    MultiplicativeExpression       shift and go to state 100
    ClassAllocationExpression      shift and go to state 120
    MethodCall                     shift and go to state 101
    ConditionalOrExpression        shift and go to state 131
    ShiftExpression                shift and go to state 147
    ArithmeticUnaryOperator        shift and go to state 96
    AssignmentExpression           shift and go to state 103
    NewAllocationExpression        shift and go to state 133
    NotJustName                    shift and go to state 150
    QualifiedName                  shift and go to state 185
    LogicalUnaryExpression         shift and go to state 152
    Expression                     shift and go to state 353
    AdditiveExpression             shift and go to state 135
    ArrayAllocationExpression      shift and go to state 110
    ConditionalExpression          shift and go to state 136
    UnaryExpression                shift and go to state 137
    InclusiveOrExpression          shift and go to state 138
    MethodAccess                   shift and go to state 111
    ExclusiveOrExpression          shift and go to state 113
    ConditionalAndExpression       shift and go to state 90
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    FieldAccess                    shift and go to state 154
    SpecialName                    shift and go to state 118

state 347

    (102) SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if . Statement
    (103) SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if . Statement ELSE Mark_else Statement
    (89) Statement -> . EmptyStatement Mark_quad
    (90) Statement -> . LabelStatement Mark_quad
    (91) Statement -> . ExpressionStatement SEMICOLON Mark_quad
    (92) Statement -> . JumpStatement Mark_quad
    (93) Statement -> . Block Mark_quad
    (94) Statement -> . IterationStatement Mark_quad
    (95) Statement -> . SelectionStatement Mark_quad
    (97) EmptyStatement -> . SEMICOLON
    (98) LabelStatement -> . IDENTIFIER COLON
    (99) LabelStatement -> . CASE ConstantExpression COLON
    (100) LabelStatement -> . DEFAULT COLON
    (101) ExpressionStatement -> . Expression
    (123) JumpStatement -> . BREAK SEMICOLON
    (124) JumpStatement -> . RETURN Expression SEMICOLON
    (125) JumpStatement -> . RETURN SEMICOLON
    (80) Block -> . Bl LocalVariableDeclarationsAndStatements Br
    (81) Block -> . Bl Br
    (107) IterationStatement -> . WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement
    (109) IterationStatement -> . Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON
    (112) IterationStatement -> . Fr LROUNPAREN ForInit ForExpr Mark_for ForIncr RROUNPAREN Mark_quad Statement
    (102) SelectionStatement -> . If LROUNPAREN Expression RROUNPAREN Mark_if Statement
    (103) SelectionStatement -> . If LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement
    (230) Expression -> . AssignmentExpression
    (82) Bl -> . LCURPAREN
    (110) Do -> . DO
    (113) Fr -> . FOR
    (104) If -> . IF
    (224) AssignmentExpression -> . ConditionalExpression
    (225) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (220) ConditionalExpression -> . ConditionalOrExpression
    (221) ConditionalExpression -> . ConditionalOrExpression Mark_quad Ques Mark_quad Expression Mark_quad Cln Mark_quad ConditionalExpression Mark_quad
    (177) UnaryExpression -> . OP_INC UnaryExpression
    (178) UnaryExpression -> . OP_DEC UnaryExpression
    (179) UnaryExpression -> . LogicalUnaryExpression
    (180) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) ConditionalOrExpression -> . ConditionalAndExpression
    (219) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (181) LogicalUnaryExpression -> . PostfixExpression
    (182) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (185) ArithmeticUnaryOperator -> . PLUS
    (186) ArithmeticUnaryOperator -> . MINUS
    (216) ConditionalAndExpression -> . InclusiveOrExpression
    (217) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (173) PostfixExpression -> . PrimaryExpression
    (174) PostfixExpression -> . RealPostfixExpression
    (183) LogicalUnaryOperator -> . ~
    (184) LogicalUnaryOperator -> . NOT
    (214) InclusiveOrExpression -> . ExclusiveOrExpression
    (215) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (126) PrimaryExpression -> . QualifiedName
    (127) PrimaryExpression -> . NotJustName
    (175) RealPostfixExpression -> . PostfixExpression OP_INC
    (176) RealPostfixExpression -> . PostfixExpression OP_DEC
    (212) ExclusiveOrExpression -> . AndExpression
    (213) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (128) NotJustName -> . SpecialName
    (129) NotJustName -> . NewAllocationExpression
    (130) NotJustName -> . ComplexPrimary
    (210) AndExpression -> . EqualityExpression
    (211) AndExpression -> . AndExpression & EqualityExpression
    (151) SpecialName -> . THIS
    (152) SpecialName -> . SUPER
    (153) SpecialName -> . NULL
    (156) NewAllocationExpression -> . PlainNewAllocationExpression
    (157) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (131) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (132) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (207) EqualityExpression -> . RelationalExpression
    (208) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (209) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (158) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (159) PlainNewAllocationExpression -> . ClassAllocationExpression
    (160) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (161) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (162) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (133) ComplexPrimaryNoParenthesis -> . INT_CONST
    (134) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (135) ComplexPrimaryNoParenthesis -> . STRING
    (136) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (137) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (138) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (139) ComplexPrimaryNoParenthesis -> . FieldAccess
    (140) ComplexPrimaryNoParenthesis -> . MethodCall
    (202) RelationalExpression -> . ShiftExpression
    (203) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (204) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (205) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (206) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (165) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (166) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (167) ArrayAllocationExpression -> . NEW TypeName Dims
    (163) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (164) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (141) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (142) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (143) FieldAccess -> . NotJustName DOT IDENTIFIER
    (144) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (145) FieldAccess -> . QualifiedName DOT THIS
    (146) FieldAccess -> . QualifiedName DOT CLASS
    (147) FieldAccess -> . PrimitiveType DOT CLASS
    (148) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (149) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (198) ShiftExpression -> . AdditiveExpression
    (199) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (200) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (201) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (150) MethodAccess -> . QualifiedName
    (195) AdditiveExpression -> . MultiplicativeExpression
    (196) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (197) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (191) MultiplicativeExpression -> . CastExpression
    (192) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (193) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (194) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (187) CastExpression -> . UnaryExpression

    SEMICOLON       shift and go to state 130
    IDENTIFIER      shift and go to state 132
    CASE            shift and go to state 128
    DEFAULT         shift and go to state 121
    BREAK           shift and go to state 98
    RETURN          shift and go to state 94
    WHILE           shift and go to state 123
    LCURPAREN       shift and go to state 58
    DO              shift and go to state 141
    FOR             shift and go to state 104
    IF              shift and go to state 153
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 124
    PLUS            shift and go to state 87
    MINUS           shift and go to state 86
    ~               shift and go to state 140
    NOT             shift and go to state 117
    THIS            shift and go to state 89
    SUPER           shift and go to state 156
    NULL            shift and go to state 143
    LROUNPAREN      shift and go to state 92
    INT_CONST       shift and go to state 106
    FLOAT_CONST     shift and go to state 83
    STRING          shift and go to state 149
    CHAR_CONST      shift and go to state 139
    BOOLEAN_CONST   shift and go to state 155
    NEW             shift and go to state 125
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    LabelStatement                 shift and go to state 93
    ArithmeticUnaryOperator        shift and go to state 96
    AssignmentExpression           shift and go to state 103
    ExpressionStatement            shift and go to state 81
    JumpStatement                  shift and go to state 122
    RealPostfixExpression          shift and go to state 95
    Statement                      shift and go to state 354
    AndExpression                  shift and go to state 85
    MultiplicativeExpression       shift and go to state 100
    ArrayAccess                    shift and go to state 108
    CastExpression                 shift and go to state 142
    EqualityExpression             shift and go to state 97
    Do                             shift and go to state 144
    Fr                             shift and go to state 129
    ComplexPrimaryNoParenthesis    shift and go to state 99
    Bl                             shift and go to state 53
    ClassAllocationExpression      shift and go to state 120
    QualifiedName                  shift and go to state 185
    ShiftExpression                shift and go to state 147
    SelectionStatement             shift and go to state 102
    NotJustName                    shift and go to state 150
    ConditionalOrExpression        shift and go to state 131
    LogicalUnaryOperator           shift and go to state 145
    ComplexPrimary                 shift and go to state 119
    MethodCall                     shift and go to state 101
    PrimitiveType                  shift and go to state 183
    LogicalUnaryExpression         shift and go to state 152
    UnaryExpression                shift and go to state 137
    Expression                     shift and go to state 134
    Block                          shift and go to state 109
    AdditiveExpression             shift and go to state 135
    ArrayAllocationExpression      shift and go to state 110
    ConditionalExpression          shift and go to state 136
    InclusiveOrExpression          shift and go to state 138
    MethodAccess                   shift and go to state 111
    PrimaryExpression              shift and go to state 127
    ExclusiveOrExpression          shift and go to state 113
    ConditionalAndExpression       shift and go to state 90
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    NewAllocationExpression        shift and go to state 133
    FieldAccess                    shift and go to state 154
    EmptyStatement                 shift and go to state 91
    SpecialName                    shift and go to state 118
    IterationStatement             shift and go to state 157
    If                             shift and go to state 158

state 348

    (107) IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while . Statement
    (89) Statement -> . EmptyStatement Mark_quad
    (90) Statement -> . LabelStatement Mark_quad
    (91) Statement -> . ExpressionStatement SEMICOLON Mark_quad
    (92) Statement -> . JumpStatement Mark_quad
    (93) Statement -> . Block Mark_quad
    (94) Statement -> . IterationStatement Mark_quad
    (95) Statement -> . SelectionStatement Mark_quad
    (97) EmptyStatement -> . SEMICOLON
    (98) LabelStatement -> . IDENTIFIER COLON
    (99) LabelStatement -> . CASE ConstantExpression COLON
    (100) LabelStatement -> . DEFAULT COLON
    (101) ExpressionStatement -> . Expression
    (123) JumpStatement -> . BREAK SEMICOLON
    (124) JumpStatement -> . RETURN Expression SEMICOLON
    (125) JumpStatement -> . RETURN SEMICOLON
    (80) Block -> . Bl LocalVariableDeclarationsAndStatements Br
    (81) Block -> . Bl Br
    (107) IterationStatement -> . WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement
    (109) IterationStatement -> . Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON
    (112) IterationStatement -> . Fr LROUNPAREN ForInit ForExpr Mark_for ForIncr RROUNPAREN Mark_quad Statement
    (102) SelectionStatement -> . If LROUNPAREN Expression RROUNPAREN Mark_if Statement
    (103) SelectionStatement -> . If LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement
    (230) Expression -> . AssignmentExpression
    (82) Bl -> . LCURPAREN
    (110) Do -> . DO
    (113) Fr -> . FOR
    (104) If -> . IF
    (224) AssignmentExpression -> . ConditionalExpression
    (225) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (220) ConditionalExpression -> . ConditionalOrExpression
    (221) ConditionalExpression -> . ConditionalOrExpression Mark_quad Ques Mark_quad Expression Mark_quad Cln Mark_quad ConditionalExpression Mark_quad
    (177) UnaryExpression -> . OP_INC UnaryExpression
    (178) UnaryExpression -> . OP_DEC UnaryExpression
    (179) UnaryExpression -> . LogicalUnaryExpression
    (180) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) ConditionalOrExpression -> . ConditionalAndExpression
    (219) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (181) LogicalUnaryExpression -> . PostfixExpression
    (182) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (185) ArithmeticUnaryOperator -> . PLUS
    (186) ArithmeticUnaryOperator -> . MINUS
    (216) ConditionalAndExpression -> . InclusiveOrExpression
    (217) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (173) PostfixExpression -> . PrimaryExpression
    (174) PostfixExpression -> . RealPostfixExpression
    (183) LogicalUnaryOperator -> . ~
    (184) LogicalUnaryOperator -> . NOT
    (214) InclusiveOrExpression -> . ExclusiveOrExpression
    (215) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (126) PrimaryExpression -> . QualifiedName
    (127) PrimaryExpression -> . NotJustName
    (175) RealPostfixExpression -> . PostfixExpression OP_INC
    (176) RealPostfixExpression -> . PostfixExpression OP_DEC
    (212) ExclusiveOrExpression -> . AndExpression
    (213) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (128) NotJustName -> . SpecialName
    (129) NotJustName -> . NewAllocationExpression
    (130) NotJustName -> . ComplexPrimary
    (210) AndExpression -> . EqualityExpression
    (211) AndExpression -> . AndExpression & EqualityExpression
    (151) SpecialName -> . THIS
    (152) SpecialName -> . SUPER
    (153) SpecialName -> . NULL
    (156) NewAllocationExpression -> . PlainNewAllocationExpression
    (157) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (131) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (132) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (207) EqualityExpression -> . RelationalExpression
    (208) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (209) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (158) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (159) PlainNewAllocationExpression -> . ClassAllocationExpression
    (160) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (161) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (162) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (133) ComplexPrimaryNoParenthesis -> . INT_CONST
    (134) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (135) ComplexPrimaryNoParenthesis -> . STRING
    (136) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (137) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (138) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (139) ComplexPrimaryNoParenthesis -> . FieldAccess
    (140) ComplexPrimaryNoParenthesis -> . MethodCall
    (202) RelationalExpression -> . ShiftExpression
    (203) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (204) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (205) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (206) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (165) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (166) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (167) ArrayAllocationExpression -> . NEW TypeName Dims
    (163) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (164) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (141) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (142) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (143) FieldAccess -> . NotJustName DOT IDENTIFIER
    (144) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (145) FieldAccess -> . QualifiedName DOT THIS
    (146) FieldAccess -> . QualifiedName DOT CLASS
    (147) FieldAccess -> . PrimitiveType DOT CLASS
    (148) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (149) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (198) ShiftExpression -> . AdditiveExpression
    (199) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (200) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (201) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (150) MethodAccess -> . QualifiedName
    (195) AdditiveExpression -> . MultiplicativeExpression
    (196) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (197) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (191) MultiplicativeExpression -> . CastExpression
    (192) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (193) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (194) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (187) CastExpression -> . UnaryExpression

    SEMICOLON       shift and go to state 130
    IDENTIFIER      shift and go to state 132
    CASE            shift and go to state 128
    DEFAULT         shift and go to state 121
    BREAK           shift and go to state 98
    RETURN          shift and go to state 94
    WHILE           shift and go to state 123
    LCURPAREN       shift and go to state 58
    DO              shift and go to state 141
    FOR             shift and go to state 104
    IF              shift and go to state 153
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 124
    PLUS            shift and go to state 87
    MINUS           shift and go to state 86
    ~               shift and go to state 140
    NOT             shift and go to state 117
    THIS            shift and go to state 89
    SUPER           shift and go to state 156
    NULL            shift and go to state 143
    LROUNPAREN      shift and go to state 92
    INT_CONST       shift and go to state 106
    FLOAT_CONST     shift and go to state 83
    STRING          shift and go to state 149
    CHAR_CONST      shift and go to state 139
    BOOLEAN_CONST   shift and go to state 155
    NEW             shift and go to state 125
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    LabelStatement                 shift and go to state 93
    ArithmeticUnaryOperator        shift and go to state 96
    AssignmentExpression           shift and go to state 103
    ExpressionStatement            shift and go to state 81
    JumpStatement                  shift and go to state 122
    RealPostfixExpression          shift and go to state 95
    Statement                      shift and go to state 355
    AndExpression                  shift and go to state 85
    MultiplicativeExpression       shift and go to state 100
    ArrayAccess                    shift and go to state 108
    CastExpression                 shift and go to state 142
    EqualityExpression             shift and go to state 97
    Do                             shift and go to state 144
    Fr                             shift and go to state 129
    ComplexPrimaryNoParenthesis    shift and go to state 99
    Bl                             shift and go to state 53
    ClassAllocationExpression      shift and go to state 120
    QualifiedName                  shift and go to state 185
    ShiftExpression                shift and go to state 147
    SelectionStatement             shift and go to state 102
    NotJustName                    shift and go to state 150
    ConditionalOrExpression        shift and go to state 131
    LogicalUnaryOperator           shift and go to state 145
    ComplexPrimary                 shift and go to state 119
    MethodCall                     shift and go to state 101
    PrimitiveType                  shift and go to state 183
    LogicalUnaryExpression         shift and go to state 152
    UnaryExpression                shift and go to state 137
    Expression                     shift and go to state 134
    Block                          shift and go to state 109
    AdditiveExpression             shift and go to state 135
    ArrayAllocationExpression      shift and go to state 110
    ConditionalExpression          shift and go to state 136
    InclusiveOrExpression          shift and go to state 138
    MethodAccess                   shift and go to state 111
    PrimaryExpression              shift and go to state 127
    ExclusiveOrExpression          shift and go to state 113
    ConditionalAndExpression       shift and go to state 90
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    NewAllocationExpression        shift and go to state 133
    FieldAccess                    shift and go to state 154
    EmptyStatement                 shift and go to state 91
    SpecialName                    shift and go to state 118
    IterationStatement             shift and go to state 157
    If                             shift and go to state 158

state 349

    (112) IterationStatement -> Fr LROUNPAREN ForInit ForExpr Mark_for ForIncr . RROUNPAREN Mark_quad Statement

    RROUNPAREN      shift and go to state 356


state 350

    (120) ForIncr -> ExpressionStatements .
    (122) ExpressionStatements -> ExpressionStatements . COMMA ExpressionStatement

    RROUNPAREN      reduce using rule 120 (ForIncr -> ExpressionStatements .)
    COMMA           shift and go to state 330


state 351

    (118) ForExpr -> Mark_quad Expression SEMICOLON .

    OP_INC          reduce using rule 118 (ForExpr -> Mark_quad Expression SEMICOLON .)
    OP_DEC          reduce using rule 118 (ForExpr -> Mark_quad Expression SEMICOLON .)
    PLUS            reduce using rule 118 (ForExpr -> Mark_quad Expression SEMICOLON .)
    MINUS           reduce using rule 118 (ForExpr -> Mark_quad Expression SEMICOLON .)
    ~               reduce using rule 118 (ForExpr -> Mark_quad Expression SEMICOLON .)
    NOT             reduce using rule 118 (ForExpr -> Mark_quad Expression SEMICOLON .)
    IDENTIFIER      reduce using rule 118 (ForExpr -> Mark_quad Expression SEMICOLON .)
    THIS            reduce using rule 118 (ForExpr -> Mark_quad Expression SEMICOLON .)
    SUPER           reduce using rule 118 (ForExpr -> Mark_quad Expression SEMICOLON .)
    NULL            reduce using rule 118 (ForExpr -> Mark_quad Expression SEMICOLON .)
    LROUNPAREN      reduce using rule 118 (ForExpr -> Mark_quad Expression SEMICOLON .)
    INT_CONST       reduce using rule 118 (ForExpr -> Mark_quad Expression SEMICOLON .)
    FLOAT_CONST     reduce using rule 118 (ForExpr -> Mark_quad Expression SEMICOLON .)
    STRING          reduce using rule 118 (ForExpr -> Mark_quad Expression SEMICOLON .)
    CHAR_CONST      reduce using rule 118 (ForExpr -> Mark_quad Expression SEMICOLON .)
    BOOLEAN_CONST   reduce using rule 118 (ForExpr -> Mark_quad Expression SEMICOLON .)
    NEW             reduce using rule 118 (ForExpr -> Mark_quad Expression SEMICOLON .)
    BOOLEAN         reduce using rule 118 (ForExpr -> Mark_quad Expression SEMICOLON .)
    CHAR            reduce using rule 118 (ForExpr -> Mark_quad Expression SEMICOLON .)
    BYTE            reduce using rule 118 (ForExpr -> Mark_quad Expression SEMICOLON .)
    SHORT           reduce using rule 118 (ForExpr -> Mark_quad Expression SEMICOLON .)
    INT             reduce using rule 118 (ForExpr -> Mark_quad Expression SEMICOLON .)
    LONG            reduce using rule 118 (ForExpr -> Mark_quad Expression SEMICOLON .)
    FLOAT           reduce using rule 118 (ForExpr -> Mark_quad Expression SEMICOLON .)
    DOUBLE          reduce using rule 118 (ForExpr -> Mark_quad Expression SEMICOLON .)
    VOID            reduce using rule 118 (ForExpr -> Mark_quad Expression SEMICOLON .)


state 352

    (221) ConditionalExpression -> ConditionalOrExpression Mark_quad Ques Mark_quad Expression Mark_quad . Cln Mark_quad ConditionalExpression Mark_quad
    (223) Cln -> . COLON

    COLON           shift and go to state 358

    Cln                            shift and go to state 357

state 353

    (109) IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression . Mark_dowhile RROUNPAREN SEMICOLON
    (111) Mark_dowhile -> .

    RROUNPAREN      reduce using rule 111 (Mark_dowhile -> .)

    Mark_dowhile                   shift and go to state 359

state 354

    (102) SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement .
    (103) SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement . ELSE Mark_else Statement

  ! shift/reduce conflict for ELSE resolved as shift
    RCURPAREN       reduce using rule 102 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    SEMICOLON       reduce using rule 102 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    IDENTIFIER      reduce using rule 102 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    CASE            reduce using rule 102 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    DEFAULT         reduce using rule 102 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    BREAK           reduce using rule 102 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    RETURN          reduce using rule 102 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    WHILE           reduce using rule 102 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    LCURPAREN       reduce using rule 102 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    DO              reduce using rule 102 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    FOR             reduce using rule 102 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    IF              reduce using rule 102 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    BOOLEAN         reduce using rule 102 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    CHAR            reduce using rule 102 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    BYTE            reduce using rule 102 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    SHORT           reduce using rule 102 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    INT             reduce using rule 102 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    LONG            reduce using rule 102 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    FLOAT           reduce using rule 102 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    DOUBLE          reduce using rule 102 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    VOID            reduce using rule 102 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    OP_INC          reduce using rule 102 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    OP_DEC          reduce using rule 102 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    PLUS            reduce using rule 102 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    MINUS           reduce using rule 102 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    ~               reduce using rule 102 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    NOT             reduce using rule 102 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    THIS            reduce using rule 102 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    SUPER           reduce using rule 102 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    NULL            reduce using rule 102 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    LROUNPAREN      reduce using rule 102 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    INT_CONST       reduce using rule 102 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    FLOAT_CONST     reduce using rule 102 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    STRING          reduce using rule 102 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    CHAR_CONST      reduce using rule 102 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    BOOLEAN_CONST   reduce using rule 102 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    NEW             reduce using rule 102 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement .)
    ELSE            shift and go to state 360

  ! ELSE            [ reduce using rule 102 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement .) ]


state 355

    (107) IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .

    ELSE            reduce using rule 107 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    RCURPAREN       reduce using rule 107 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    SEMICOLON       reduce using rule 107 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    IDENTIFIER      reduce using rule 107 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    CASE            reduce using rule 107 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    DEFAULT         reduce using rule 107 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    BREAK           reduce using rule 107 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    RETURN          reduce using rule 107 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    WHILE           reduce using rule 107 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    LCURPAREN       reduce using rule 107 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    DO              reduce using rule 107 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    FOR             reduce using rule 107 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    IF              reduce using rule 107 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    BOOLEAN         reduce using rule 107 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    CHAR            reduce using rule 107 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    BYTE            reduce using rule 107 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    SHORT           reduce using rule 107 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    INT             reduce using rule 107 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    LONG            reduce using rule 107 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    FLOAT           reduce using rule 107 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    DOUBLE          reduce using rule 107 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    VOID            reduce using rule 107 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    OP_INC          reduce using rule 107 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    OP_DEC          reduce using rule 107 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    PLUS            reduce using rule 107 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    MINUS           reduce using rule 107 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    ~               reduce using rule 107 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    NOT             reduce using rule 107 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    THIS            reduce using rule 107 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    SUPER           reduce using rule 107 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    NULL            reduce using rule 107 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    LROUNPAREN      reduce using rule 107 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    INT_CONST       reduce using rule 107 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    FLOAT_CONST     reduce using rule 107 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    STRING          reduce using rule 107 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    CHAR_CONST      reduce using rule 107 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    BOOLEAN_CONST   reduce using rule 107 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)
    NEW             reduce using rule 107 (IterationStatement -> WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement .)


state 356

    (112) IterationStatement -> Fr LROUNPAREN ForInit ForExpr Mark_for ForIncr RROUNPAREN . Mark_quad Statement
    (96) Mark_quad -> .

    SEMICOLON       reduce using rule 96 (Mark_quad -> .)
    IDENTIFIER      reduce using rule 96 (Mark_quad -> .)
    CASE            reduce using rule 96 (Mark_quad -> .)
    DEFAULT         reduce using rule 96 (Mark_quad -> .)
    BREAK           reduce using rule 96 (Mark_quad -> .)
    RETURN          reduce using rule 96 (Mark_quad -> .)
    WHILE           reduce using rule 96 (Mark_quad -> .)
    LCURPAREN       reduce using rule 96 (Mark_quad -> .)
    DO              reduce using rule 96 (Mark_quad -> .)
    FOR             reduce using rule 96 (Mark_quad -> .)
    IF              reduce using rule 96 (Mark_quad -> .)
    OP_INC          reduce using rule 96 (Mark_quad -> .)
    OP_DEC          reduce using rule 96 (Mark_quad -> .)
    PLUS            reduce using rule 96 (Mark_quad -> .)
    MINUS           reduce using rule 96 (Mark_quad -> .)
    ~               reduce using rule 96 (Mark_quad -> .)
    NOT             reduce using rule 96 (Mark_quad -> .)
    THIS            reduce using rule 96 (Mark_quad -> .)
    SUPER           reduce using rule 96 (Mark_quad -> .)
    NULL            reduce using rule 96 (Mark_quad -> .)
    LROUNPAREN      reduce using rule 96 (Mark_quad -> .)
    INT_CONST       reduce using rule 96 (Mark_quad -> .)
    FLOAT_CONST     reduce using rule 96 (Mark_quad -> .)
    STRING          reduce using rule 96 (Mark_quad -> .)
    CHAR_CONST      reduce using rule 96 (Mark_quad -> .)
    BOOLEAN_CONST   reduce using rule 96 (Mark_quad -> .)
    NEW             reduce using rule 96 (Mark_quad -> .)
    BOOLEAN         reduce using rule 96 (Mark_quad -> .)
    CHAR            reduce using rule 96 (Mark_quad -> .)
    BYTE            reduce using rule 96 (Mark_quad -> .)
    SHORT           reduce using rule 96 (Mark_quad -> .)
    INT             reduce using rule 96 (Mark_quad -> .)
    LONG            reduce using rule 96 (Mark_quad -> .)
    FLOAT           reduce using rule 96 (Mark_quad -> .)
    DOUBLE          reduce using rule 96 (Mark_quad -> .)
    VOID            reduce using rule 96 (Mark_quad -> .)

    Mark_quad                      shift and go to state 361

state 357

    (221) ConditionalExpression -> ConditionalOrExpression Mark_quad Ques Mark_quad Expression Mark_quad Cln . Mark_quad ConditionalExpression Mark_quad
    (96) Mark_quad -> .

    OP_INC          reduce using rule 96 (Mark_quad -> .)
    OP_DEC          reduce using rule 96 (Mark_quad -> .)
    PLUS            reduce using rule 96 (Mark_quad -> .)
    MINUS           reduce using rule 96 (Mark_quad -> .)
    ~               reduce using rule 96 (Mark_quad -> .)
    NOT             reduce using rule 96 (Mark_quad -> .)
    IDENTIFIER      reduce using rule 96 (Mark_quad -> .)
    THIS            reduce using rule 96 (Mark_quad -> .)
    SUPER           reduce using rule 96 (Mark_quad -> .)
    NULL            reduce using rule 96 (Mark_quad -> .)
    LROUNPAREN      reduce using rule 96 (Mark_quad -> .)
    INT_CONST       reduce using rule 96 (Mark_quad -> .)
    FLOAT_CONST     reduce using rule 96 (Mark_quad -> .)
    STRING          reduce using rule 96 (Mark_quad -> .)
    CHAR_CONST      reduce using rule 96 (Mark_quad -> .)
    BOOLEAN_CONST   reduce using rule 96 (Mark_quad -> .)
    NEW             reduce using rule 96 (Mark_quad -> .)
    BOOLEAN         reduce using rule 96 (Mark_quad -> .)
    CHAR            reduce using rule 96 (Mark_quad -> .)
    BYTE            reduce using rule 96 (Mark_quad -> .)
    SHORT           reduce using rule 96 (Mark_quad -> .)
    INT             reduce using rule 96 (Mark_quad -> .)
    LONG            reduce using rule 96 (Mark_quad -> .)
    FLOAT           reduce using rule 96 (Mark_quad -> .)
    DOUBLE          reduce using rule 96 (Mark_quad -> .)
    VOID            reduce using rule 96 (Mark_quad -> .)

    Mark_quad                      shift and go to state 362

state 358

    (223) Cln -> COLON .

    OP_INC          reduce using rule 223 (Cln -> COLON .)
    OP_DEC          reduce using rule 223 (Cln -> COLON .)
    PLUS            reduce using rule 223 (Cln -> COLON .)
    MINUS           reduce using rule 223 (Cln -> COLON .)
    ~               reduce using rule 223 (Cln -> COLON .)
    NOT             reduce using rule 223 (Cln -> COLON .)
    IDENTIFIER      reduce using rule 223 (Cln -> COLON .)
    THIS            reduce using rule 223 (Cln -> COLON .)
    SUPER           reduce using rule 223 (Cln -> COLON .)
    NULL            reduce using rule 223 (Cln -> COLON .)
    LROUNPAREN      reduce using rule 223 (Cln -> COLON .)
    INT_CONST       reduce using rule 223 (Cln -> COLON .)
    FLOAT_CONST     reduce using rule 223 (Cln -> COLON .)
    STRING          reduce using rule 223 (Cln -> COLON .)
    CHAR_CONST      reduce using rule 223 (Cln -> COLON .)
    BOOLEAN_CONST   reduce using rule 223 (Cln -> COLON .)
    NEW             reduce using rule 223 (Cln -> COLON .)
    BOOLEAN         reduce using rule 223 (Cln -> COLON .)
    CHAR            reduce using rule 223 (Cln -> COLON .)
    BYTE            reduce using rule 223 (Cln -> COLON .)
    SHORT           reduce using rule 223 (Cln -> COLON .)
    INT             reduce using rule 223 (Cln -> COLON .)
    LONG            reduce using rule 223 (Cln -> COLON .)
    FLOAT           reduce using rule 223 (Cln -> COLON .)
    DOUBLE          reduce using rule 223 (Cln -> COLON .)
    VOID            reduce using rule 223 (Cln -> COLON .)


state 359

    (109) IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile . RROUNPAREN SEMICOLON

    RROUNPAREN      shift and go to state 363


state 360

    (103) SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE . Mark_else Statement
    (106) Mark_else -> .

    SEMICOLON       reduce using rule 106 (Mark_else -> .)
    IDENTIFIER      reduce using rule 106 (Mark_else -> .)
    CASE            reduce using rule 106 (Mark_else -> .)
    DEFAULT         reduce using rule 106 (Mark_else -> .)
    BREAK           reduce using rule 106 (Mark_else -> .)
    RETURN          reduce using rule 106 (Mark_else -> .)
    WHILE           reduce using rule 106 (Mark_else -> .)
    LCURPAREN       reduce using rule 106 (Mark_else -> .)
    DO              reduce using rule 106 (Mark_else -> .)
    FOR             reduce using rule 106 (Mark_else -> .)
    IF              reduce using rule 106 (Mark_else -> .)
    OP_INC          reduce using rule 106 (Mark_else -> .)
    OP_DEC          reduce using rule 106 (Mark_else -> .)
    PLUS            reduce using rule 106 (Mark_else -> .)
    MINUS           reduce using rule 106 (Mark_else -> .)
    ~               reduce using rule 106 (Mark_else -> .)
    NOT             reduce using rule 106 (Mark_else -> .)
    THIS            reduce using rule 106 (Mark_else -> .)
    SUPER           reduce using rule 106 (Mark_else -> .)
    NULL            reduce using rule 106 (Mark_else -> .)
    LROUNPAREN      reduce using rule 106 (Mark_else -> .)
    INT_CONST       reduce using rule 106 (Mark_else -> .)
    FLOAT_CONST     reduce using rule 106 (Mark_else -> .)
    STRING          reduce using rule 106 (Mark_else -> .)
    CHAR_CONST      reduce using rule 106 (Mark_else -> .)
    BOOLEAN_CONST   reduce using rule 106 (Mark_else -> .)
    NEW             reduce using rule 106 (Mark_else -> .)
    BOOLEAN         reduce using rule 106 (Mark_else -> .)
    CHAR            reduce using rule 106 (Mark_else -> .)
    BYTE            reduce using rule 106 (Mark_else -> .)
    SHORT           reduce using rule 106 (Mark_else -> .)
    INT             reduce using rule 106 (Mark_else -> .)
    LONG            reduce using rule 106 (Mark_else -> .)
    FLOAT           reduce using rule 106 (Mark_else -> .)
    DOUBLE          reduce using rule 106 (Mark_else -> .)
    VOID            reduce using rule 106 (Mark_else -> .)

    Mark_else                      shift and go to state 364

state 361

    (112) IterationStatement -> Fr LROUNPAREN ForInit ForExpr Mark_for ForIncr RROUNPAREN Mark_quad . Statement
    (89) Statement -> . EmptyStatement Mark_quad
    (90) Statement -> . LabelStatement Mark_quad
    (91) Statement -> . ExpressionStatement SEMICOLON Mark_quad
    (92) Statement -> . JumpStatement Mark_quad
    (93) Statement -> . Block Mark_quad
    (94) Statement -> . IterationStatement Mark_quad
    (95) Statement -> . SelectionStatement Mark_quad
    (97) EmptyStatement -> . SEMICOLON
    (98) LabelStatement -> . IDENTIFIER COLON
    (99) LabelStatement -> . CASE ConstantExpression COLON
    (100) LabelStatement -> . DEFAULT COLON
    (101) ExpressionStatement -> . Expression
    (123) JumpStatement -> . BREAK SEMICOLON
    (124) JumpStatement -> . RETURN Expression SEMICOLON
    (125) JumpStatement -> . RETURN SEMICOLON
    (80) Block -> . Bl LocalVariableDeclarationsAndStatements Br
    (81) Block -> . Bl Br
    (107) IterationStatement -> . WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement
    (109) IterationStatement -> . Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON
    (112) IterationStatement -> . Fr LROUNPAREN ForInit ForExpr Mark_for ForIncr RROUNPAREN Mark_quad Statement
    (102) SelectionStatement -> . If LROUNPAREN Expression RROUNPAREN Mark_if Statement
    (103) SelectionStatement -> . If LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement
    (230) Expression -> . AssignmentExpression
    (82) Bl -> . LCURPAREN
    (110) Do -> . DO
    (113) Fr -> . FOR
    (104) If -> . IF
    (224) AssignmentExpression -> . ConditionalExpression
    (225) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (220) ConditionalExpression -> . ConditionalOrExpression
    (221) ConditionalExpression -> . ConditionalOrExpression Mark_quad Ques Mark_quad Expression Mark_quad Cln Mark_quad ConditionalExpression Mark_quad
    (177) UnaryExpression -> . OP_INC UnaryExpression
    (178) UnaryExpression -> . OP_DEC UnaryExpression
    (179) UnaryExpression -> . LogicalUnaryExpression
    (180) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) ConditionalOrExpression -> . ConditionalAndExpression
    (219) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (181) LogicalUnaryExpression -> . PostfixExpression
    (182) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (185) ArithmeticUnaryOperator -> . PLUS
    (186) ArithmeticUnaryOperator -> . MINUS
    (216) ConditionalAndExpression -> . InclusiveOrExpression
    (217) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (173) PostfixExpression -> . PrimaryExpression
    (174) PostfixExpression -> . RealPostfixExpression
    (183) LogicalUnaryOperator -> . ~
    (184) LogicalUnaryOperator -> . NOT
    (214) InclusiveOrExpression -> . ExclusiveOrExpression
    (215) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (126) PrimaryExpression -> . QualifiedName
    (127) PrimaryExpression -> . NotJustName
    (175) RealPostfixExpression -> . PostfixExpression OP_INC
    (176) RealPostfixExpression -> . PostfixExpression OP_DEC
    (212) ExclusiveOrExpression -> . AndExpression
    (213) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (128) NotJustName -> . SpecialName
    (129) NotJustName -> . NewAllocationExpression
    (130) NotJustName -> . ComplexPrimary
    (210) AndExpression -> . EqualityExpression
    (211) AndExpression -> . AndExpression & EqualityExpression
    (151) SpecialName -> . THIS
    (152) SpecialName -> . SUPER
    (153) SpecialName -> . NULL
    (156) NewAllocationExpression -> . PlainNewAllocationExpression
    (157) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (131) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (132) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (207) EqualityExpression -> . RelationalExpression
    (208) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (209) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (158) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (159) PlainNewAllocationExpression -> . ClassAllocationExpression
    (160) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (161) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (162) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (133) ComplexPrimaryNoParenthesis -> . INT_CONST
    (134) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (135) ComplexPrimaryNoParenthesis -> . STRING
    (136) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (137) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (138) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (139) ComplexPrimaryNoParenthesis -> . FieldAccess
    (140) ComplexPrimaryNoParenthesis -> . MethodCall
    (202) RelationalExpression -> . ShiftExpression
    (203) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (204) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (205) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (206) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (165) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (166) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (167) ArrayAllocationExpression -> . NEW TypeName Dims
    (163) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (164) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (141) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (142) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (143) FieldAccess -> . NotJustName DOT IDENTIFIER
    (144) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (145) FieldAccess -> . QualifiedName DOT THIS
    (146) FieldAccess -> . QualifiedName DOT CLASS
    (147) FieldAccess -> . PrimitiveType DOT CLASS
    (148) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (149) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (198) ShiftExpression -> . AdditiveExpression
    (199) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (200) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (201) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (150) MethodAccess -> . QualifiedName
    (195) AdditiveExpression -> . MultiplicativeExpression
    (196) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (197) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (191) MultiplicativeExpression -> . CastExpression
    (192) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (193) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (194) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (187) CastExpression -> . UnaryExpression

    SEMICOLON       shift and go to state 130
    IDENTIFIER      shift and go to state 132
    CASE            shift and go to state 128
    DEFAULT         shift and go to state 121
    BREAK           shift and go to state 98
    RETURN          shift and go to state 94
    WHILE           shift and go to state 123
    LCURPAREN       shift and go to state 58
    DO              shift and go to state 141
    FOR             shift and go to state 104
    IF              shift and go to state 153
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 124
    PLUS            shift and go to state 87
    MINUS           shift and go to state 86
    ~               shift and go to state 140
    NOT             shift and go to state 117
    THIS            shift and go to state 89
    SUPER           shift and go to state 156
    NULL            shift and go to state 143
    LROUNPAREN      shift and go to state 92
    INT_CONST       shift and go to state 106
    FLOAT_CONST     shift and go to state 83
    STRING          shift and go to state 149
    CHAR_CONST      shift and go to state 139
    BOOLEAN_CONST   shift and go to state 155
    NEW             shift and go to state 125
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    LabelStatement                 shift and go to state 93
    ArithmeticUnaryOperator        shift and go to state 96
    AssignmentExpression           shift and go to state 103
    ExpressionStatement            shift and go to state 81
    JumpStatement                  shift and go to state 122
    RealPostfixExpression          shift and go to state 95
    Statement                      shift and go to state 365
    AndExpression                  shift and go to state 85
    MultiplicativeExpression       shift and go to state 100
    ArrayAccess                    shift and go to state 108
    CastExpression                 shift and go to state 142
    EqualityExpression             shift and go to state 97
    Do                             shift and go to state 144
    Fr                             shift and go to state 129
    ComplexPrimaryNoParenthesis    shift and go to state 99
    Bl                             shift and go to state 53
    ClassAllocationExpression      shift and go to state 120
    QualifiedName                  shift and go to state 185
    ShiftExpression                shift and go to state 147
    SelectionStatement             shift and go to state 102
    NotJustName                    shift and go to state 150
    ConditionalOrExpression        shift and go to state 131
    LogicalUnaryOperator           shift and go to state 145
    ComplexPrimary                 shift and go to state 119
    MethodCall                     shift and go to state 101
    PrimitiveType                  shift and go to state 183
    LogicalUnaryExpression         shift and go to state 152
    UnaryExpression                shift and go to state 137
    Expression                     shift and go to state 134
    Block                          shift and go to state 109
    AdditiveExpression             shift and go to state 135
    ArrayAllocationExpression      shift and go to state 110
    ConditionalExpression          shift and go to state 136
    InclusiveOrExpression          shift and go to state 138
    MethodAccess                   shift and go to state 111
    PrimaryExpression              shift and go to state 127
    ExclusiveOrExpression          shift and go to state 113
    ConditionalAndExpression       shift and go to state 90
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    NewAllocationExpression        shift and go to state 133
    FieldAccess                    shift and go to state 154
    EmptyStatement                 shift and go to state 91
    SpecialName                    shift and go to state 118
    IterationStatement             shift and go to state 157
    If                             shift and go to state 158

state 362

    (221) ConditionalExpression -> ConditionalOrExpression Mark_quad Ques Mark_quad Expression Mark_quad Cln Mark_quad . ConditionalExpression Mark_quad
    (220) ConditionalExpression -> . ConditionalOrExpression
    (221) ConditionalExpression -> . ConditionalOrExpression Mark_quad Ques Mark_quad Expression Mark_quad Cln Mark_quad ConditionalExpression Mark_quad
    (218) ConditionalOrExpression -> . ConditionalAndExpression
    (219) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (216) ConditionalAndExpression -> . InclusiveOrExpression
    (217) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (214) InclusiveOrExpression -> . ExclusiveOrExpression
    (215) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (212) ExclusiveOrExpression -> . AndExpression
    (213) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (210) AndExpression -> . EqualityExpression
    (211) AndExpression -> . AndExpression & EqualityExpression
    (207) EqualityExpression -> . RelationalExpression
    (208) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (209) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (202) RelationalExpression -> . ShiftExpression
    (203) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (204) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (205) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (206) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (198) ShiftExpression -> . AdditiveExpression
    (199) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (200) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (201) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (195) AdditiveExpression -> . MultiplicativeExpression
    (196) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (197) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (191) MultiplicativeExpression -> . CastExpression
    (192) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (193) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (194) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (187) CastExpression -> . UnaryExpression
    (177) UnaryExpression -> . OP_INC UnaryExpression
    (178) UnaryExpression -> . OP_DEC UnaryExpression
    (179) UnaryExpression -> . LogicalUnaryExpression
    (180) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (181) LogicalUnaryExpression -> . PostfixExpression
    (182) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (185) ArithmeticUnaryOperator -> . PLUS
    (186) ArithmeticUnaryOperator -> . MINUS
    (173) PostfixExpression -> . PrimaryExpression
    (174) PostfixExpression -> . RealPostfixExpression
    (183) LogicalUnaryOperator -> . ~
    (184) LogicalUnaryOperator -> . NOT
    (126) PrimaryExpression -> . QualifiedName
    (127) PrimaryExpression -> . NotJustName
    (175) RealPostfixExpression -> . PostfixExpression OP_INC
    (176) RealPostfixExpression -> . PostfixExpression OP_DEC
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (128) NotJustName -> . SpecialName
    (129) NotJustName -> . NewAllocationExpression
    (130) NotJustName -> . ComplexPrimary
    (151) SpecialName -> . THIS
    (152) SpecialName -> . SUPER
    (153) SpecialName -> . NULL
    (156) NewAllocationExpression -> . PlainNewAllocationExpression
    (157) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (131) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (132) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (158) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (159) PlainNewAllocationExpression -> . ClassAllocationExpression
    (160) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (161) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (162) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (133) ComplexPrimaryNoParenthesis -> . INT_CONST
    (134) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (135) ComplexPrimaryNoParenthesis -> . STRING
    (136) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (137) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (138) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (139) ComplexPrimaryNoParenthesis -> . FieldAccess
    (140) ComplexPrimaryNoParenthesis -> . MethodCall
    (165) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (166) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (167) ArrayAllocationExpression -> . NEW TypeName Dims
    (163) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (164) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (141) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (142) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (143) FieldAccess -> . NotJustName DOT IDENTIFIER
    (144) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (145) FieldAccess -> . QualifiedName DOT THIS
    (146) FieldAccess -> . QualifiedName DOT CLASS
    (147) FieldAccess -> . PrimitiveType DOT CLASS
    (148) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (149) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (150) MethodAccess -> . QualifiedName

    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 124
    PLUS            shift and go to state 87
    MINUS           shift and go to state 86
    ~               shift and go to state 140
    NOT             shift and go to state 117
    IDENTIFIER      shift and go to state 22
    THIS            shift and go to state 89
    SUPER           shift and go to state 156
    NULL            shift and go to state 143
    LROUNPAREN      shift and go to state 92
    INT_CONST       shift and go to state 106
    FLOAT_CONST     shift and go to state 83
    STRING          shift and go to state 149
    CHAR_CONST      shift and go to state 139
    BOOLEAN_CONST   shift and go to state 155
    NEW             shift and go to state 125
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    ComplexPrimary                 shift and go to state 119
    CastExpression                 shift and go to state 142
    PrimitiveType                  shift and go to state 183
    RealPostfixExpression          shift and go to state 95
    ArithmeticUnaryOperator        shift and go to state 96
    AndExpression                  shift and go to state 85
    ArrayAccess                    shift and go to state 108
    PrimaryExpression              shift and go to state 127
    EqualityExpression             shift and go to state 97
    LogicalUnaryOperator           shift and go to state 145
    ComplexPrimaryNoParenthesis    shift and go to state 99
    MultiplicativeExpression       shift and go to state 100
    ClassAllocationExpression      shift and go to state 120
    MethodCall                     shift and go to state 101
    ConditionalOrExpression        shift and go to state 131
    ShiftExpression                shift and go to state 147
    NewAllocationExpression        shift and go to state 133
    NotJustName                    shift and go to state 150
    QualifiedName                  shift and go to state 185
    LogicalUnaryExpression         shift and go to state 152
    AdditiveExpression             shift and go to state 135
    ArrayAllocationExpression      shift and go to state 110
    ConditionalExpression          shift and go to state 366
    UnaryExpression                shift and go to state 191
    InclusiveOrExpression          shift and go to state 138
    FieldAccess                    shift and go to state 154
    ExclusiveOrExpression          shift and go to state 113
    ConditionalAndExpression       shift and go to state 90
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    MethodAccess                   shift and go to state 111
    SpecialName                    shift and go to state 118

state 363

    (109) IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN . SEMICOLON

    SEMICOLON       shift and go to state 367


state 364

    (103) SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else . Statement
    (89) Statement -> . EmptyStatement Mark_quad
    (90) Statement -> . LabelStatement Mark_quad
    (91) Statement -> . ExpressionStatement SEMICOLON Mark_quad
    (92) Statement -> . JumpStatement Mark_quad
    (93) Statement -> . Block Mark_quad
    (94) Statement -> . IterationStatement Mark_quad
    (95) Statement -> . SelectionStatement Mark_quad
    (97) EmptyStatement -> . SEMICOLON
    (98) LabelStatement -> . IDENTIFIER COLON
    (99) LabelStatement -> . CASE ConstantExpression COLON
    (100) LabelStatement -> . DEFAULT COLON
    (101) ExpressionStatement -> . Expression
    (123) JumpStatement -> . BREAK SEMICOLON
    (124) JumpStatement -> . RETURN Expression SEMICOLON
    (125) JumpStatement -> . RETURN SEMICOLON
    (80) Block -> . Bl LocalVariableDeclarationsAndStatements Br
    (81) Block -> . Bl Br
    (107) IterationStatement -> . WHILE Mark_quad LROUNPAREN Expression RROUNPAREN Mark_while Statement
    (109) IterationStatement -> . Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON
    (112) IterationStatement -> . Fr LROUNPAREN ForInit ForExpr Mark_for ForIncr RROUNPAREN Mark_quad Statement
    (102) SelectionStatement -> . If LROUNPAREN Expression RROUNPAREN Mark_if Statement
    (103) SelectionStatement -> . If LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement
    (230) Expression -> . AssignmentExpression
    (82) Bl -> . LCURPAREN
    (110) Do -> . DO
    (113) Fr -> . FOR
    (104) If -> . IF
    (224) AssignmentExpression -> . ConditionalExpression
    (225) AssignmentExpression -> . UnaryExpression AssignmentOperator AssignmentExpression
    (220) ConditionalExpression -> . ConditionalOrExpression
    (221) ConditionalExpression -> . ConditionalOrExpression Mark_quad Ques Mark_quad Expression Mark_quad Cln Mark_quad ConditionalExpression Mark_quad
    (177) UnaryExpression -> . OP_INC UnaryExpression
    (178) UnaryExpression -> . OP_DEC UnaryExpression
    (179) UnaryExpression -> . LogicalUnaryExpression
    (180) UnaryExpression -> . ArithmeticUnaryOperator CastExpression
    (218) ConditionalOrExpression -> . ConditionalAndExpression
    (219) ConditionalOrExpression -> . ConditionalOrExpression OP_LOR ConditionalAndExpression
    (181) LogicalUnaryExpression -> . PostfixExpression
    (182) LogicalUnaryExpression -> . LogicalUnaryOperator UnaryExpression
    (185) ArithmeticUnaryOperator -> . PLUS
    (186) ArithmeticUnaryOperator -> . MINUS
    (216) ConditionalAndExpression -> . InclusiveOrExpression
    (217) ConditionalAndExpression -> . ConditionalAndExpression OP_LAND InclusiveOrExpression
    (173) PostfixExpression -> . PrimaryExpression
    (174) PostfixExpression -> . RealPostfixExpression
    (183) LogicalUnaryOperator -> . ~
    (184) LogicalUnaryOperator -> . NOT
    (214) InclusiveOrExpression -> . ExclusiveOrExpression
    (215) InclusiveOrExpression -> . InclusiveOrExpression | ExclusiveOrExpression
    (126) PrimaryExpression -> . QualifiedName
    (127) PrimaryExpression -> . NotJustName
    (175) RealPostfixExpression -> . PostfixExpression OP_INC
    (176) RealPostfixExpression -> . PostfixExpression OP_DEC
    (212) ExclusiveOrExpression -> . AndExpression
    (213) ExclusiveOrExpression -> . ExclusiveOrExpression ^ AndExpression
    (33) QualifiedName -> . IDENTIFIER
    (34) QualifiedName -> . QualifiedName DOT IDENTIFIER
    (128) NotJustName -> . SpecialName
    (129) NotJustName -> . NewAllocationExpression
    (130) NotJustName -> . ComplexPrimary
    (210) AndExpression -> . EqualityExpression
    (211) AndExpression -> . AndExpression & EqualityExpression
    (151) SpecialName -> . THIS
    (152) SpecialName -> . SUPER
    (153) SpecialName -> . NULL
    (156) NewAllocationExpression -> . PlainNewAllocationExpression
    (157) NewAllocationExpression -> . QualifiedName DOT PlainNewAllocationExpression
    (131) ComplexPrimary -> . LROUNPAREN Expression RROUNPAREN
    (132) ComplexPrimary -> . ComplexPrimaryNoParenthesis
    (207) EqualityExpression -> . RelationalExpression
    (208) EqualityExpression -> . EqualityExpression OP_EQ RelationalExpression
    (209) EqualityExpression -> . EqualityExpression OP_NE RelationalExpression
    (158) PlainNewAllocationExpression -> . ArrayAllocationExpression
    (159) PlainNewAllocationExpression -> . ClassAllocationExpression
    (160) PlainNewAllocationExpression -> . ArrayAllocationExpression LCURPAREN RCURPAREN
    (161) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN RCURPAREN
    (162) PlainNewAllocationExpression -> . ClassAllocationExpression LCURPAREN FieldDeclarations RCURPAREN
    (133) ComplexPrimaryNoParenthesis -> . INT_CONST
    (134) ComplexPrimaryNoParenthesis -> . FLOAT_CONST
    (135) ComplexPrimaryNoParenthesis -> . STRING
    (136) ComplexPrimaryNoParenthesis -> . CHAR_CONST
    (137) ComplexPrimaryNoParenthesis -> . BOOLEAN_CONST
    (138) ComplexPrimaryNoParenthesis -> . ArrayAccess
    (139) ComplexPrimaryNoParenthesis -> . FieldAccess
    (140) ComplexPrimaryNoParenthesis -> . MethodCall
    (202) RelationalExpression -> . ShiftExpression
    (203) RelationalExpression -> . RelationalExpression LESS ShiftExpression
    (204) RelationalExpression -> . RelationalExpression MORE ShiftExpression
    (205) RelationalExpression -> . RelationalExpression OP_LE ShiftExpression
    (206) RelationalExpression -> . RelationalExpression OP_GE ShiftExpression
    (165) ArrayAllocationExpression -> . NEW TypeName DimExprs Dims
    (166) ArrayAllocationExpression -> . NEW TypeName DimExprs
    (167) ArrayAllocationExpression -> . NEW TypeName Dims
    (163) ClassAllocationExpression -> . NEW TypeName LROUNPAREN ArgumentList RROUNPAREN
    (164) ClassAllocationExpression -> . NEW TypeName LROUNPAREN RROUNPAREN
    (141) ArrayAccess -> . QualifiedName LSQPAREN Expression RSQPAREN
    (142) ArrayAccess -> . ComplexPrimary LSQPAREN Expression RSQPAREN
    (143) FieldAccess -> . NotJustName DOT IDENTIFIER
    (144) FieldAccess -> . RealPostfixExpression DOT IDENTIFIER
    (145) FieldAccess -> . QualifiedName DOT THIS
    (146) FieldAccess -> . QualifiedName DOT CLASS
    (147) FieldAccess -> . PrimitiveType DOT CLASS
    (148) MethodCall -> . MethodAccess LROUNPAREN ArgumentList RROUNPAREN
    (149) MethodCall -> . MethodAccess LROUNPAREN RROUNPAREN
    (198) ShiftExpression -> . AdditiveExpression
    (199) ShiftExpression -> . ShiftExpression OP_SHL AdditiveExpression
    (200) ShiftExpression -> . ShiftExpression OP_SHR AdditiveExpression
    (201) ShiftExpression -> . ShiftExpression OP_SHRR AdditiveExpression
    (9) PrimitiveType -> . BOOLEAN
    (10) PrimitiveType -> . CHAR
    (11) PrimitiveType -> . BYTE
    (12) PrimitiveType -> . SHORT
    (13) PrimitiveType -> . INT
    (14) PrimitiveType -> . LONG
    (15) PrimitiveType -> . FLOAT
    (16) PrimitiveType -> . DOUBLE
    (17) PrimitiveType -> . VOID
    (150) MethodAccess -> . QualifiedName
    (195) AdditiveExpression -> . MultiplicativeExpression
    (196) AdditiveExpression -> . AdditiveExpression PLUS MultiplicativeExpression
    (197) AdditiveExpression -> . AdditiveExpression MINUS MultiplicativeExpression
    (191) MultiplicativeExpression -> . CastExpression
    (192) MultiplicativeExpression -> . MultiplicativeExpression MULT CastExpression
    (193) MultiplicativeExpression -> . MultiplicativeExpression DIV CastExpression
    (194) MultiplicativeExpression -> . MultiplicativeExpression MOD CastExpression
    (187) CastExpression -> . UnaryExpression

    SEMICOLON       shift and go to state 130
    IDENTIFIER      shift and go to state 132
    CASE            shift and go to state 128
    DEFAULT         shift and go to state 121
    BREAK           shift and go to state 98
    RETURN          shift and go to state 94
    WHILE           shift and go to state 123
    LCURPAREN       shift and go to state 58
    DO              shift and go to state 141
    FOR             shift and go to state 104
    IF              shift and go to state 153
    OP_INC          shift and go to state 105
    OP_DEC          shift and go to state 124
    PLUS            shift and go to state 87
    MINUS           shift and go to state 86
    ~               shift and go to state 140
    NOT             shift and go to state 117
    THIS            shift and go to state 89
    SUPER           shift and go to state 156
    NULL            shift and go to state 143
    LROUNPAREN      shift and go to state 92
    INT_CONST       shift and go to state 106
    FLOAT_CONST     shift and go to state 83
    STRING          shift and go to state 149
    CHAR_CONST      shift and go to state 139
    BOOLEAN_CONST   shift and go to state 155
    NEW             shift and go to state 125
    BOOLEAN         shift and go to state 67
    CHAR            shift and go to state 57
    BYTE            shift and go to state 68
    SHORT           shift and go to state 40
    INT             shift and go to state 64
    LONG            shift and go to state 49
    FLOAT           shift and go to state 66
    DOUBLE          shift and go to state 65
    VOID            shift and go to state 43

    PostfixExpression              shift and go to state 112
    LabelStatement                 shift and go to state 93
    ArithmeticUnaryOperator        shift and go to state 96
    AssignmentExpression           shift and go to state 103
    ExpressionStatement            shift and go to state 81
    JumpStatement                  shift and go to state 122
    RealPostfixExpression          shift and go to state 95
    Statement                      shift and go to state 368
    AndExpression                  shift and go to state 85
    MultiplicativeExpression       shift and go to state 100
    ArrayAccess                    shift and go to state 108
    CastExpression                 shift and go to state 142
    EqualityExpression             shift and go to state 97
    Do                             shift and go to state 144
    Fr                             shift and go to state 129
    ComplexPrimaryNoParenthesis    shift and go to state 99
    Bl                             shift and go to state 53
    ClassAllocationExpression      shift and go to state 120
    QualifiedName                  shift and go to state 185
    ShiftExpression                shift and go to state 147
    SelectionStatement             shift and go to state 102
    NotJustName                    shift and go to state 150
    ConditionalOrExpression        shift and go to state 131
    LogicalUnaryOperator           shift and go to state 145
    ComplexPrimary                 shift and go to state 119
    MethodCall                     shift and go to state 101
    PrimitiveType                  shift and go to state 183
    LogicalUnaryExpression         shift and go to state 152
    UnaryExpression                shift and go to state 137
    Expression                     shift and go to state 134
    Block                          shift and go to state 109
    AdditiveExpression             shift and go to state 135
    ArrayAllocationExpression      shift and go to state 110
    ConditionalExpression          shift and go to state 136
    InclusiveOrExpression          shift and go to state 138
    MethodAccess                   shift and go to state 111
    PrimaryExpression              shift and go to state 127
    ExclusiveOrExpression          shift and go to state 113
    ConditionalAndExpression       shift and go to state 90
    RelationalExpression           shift and go to state 114
    PlainNewAllocationExpression   shift and go to state 115
    NewAllocationExpression        shift and go to state 133
    FieldAccess                    shift and go to state 154
    EmptyStatement                 shift and go to state 91
    SpecialName                    shift and go to state 118
    IterationStatement             shift and go to state 157
    If                             shift and go to state 158

state 365

    (112) IterationStatement -> Fr LROUNPAREN ForInit ForExpr Mark_for ForIncr RROUNPAREN Mark_quad Statement .

    ELSE            reduce using rule 112 (IterationStatement -> Fr LROUNPAREN ForInit ForExpr Mark_for ForIncr RROUNPAREN Mark_quad Statement .)
    RCURPAREN       reduce using rule 112 (IterationStatement -> Fr LROUNPAREN ForInit ForExpr Mark_for ForIncr RROUNPAREN Mark_quad Statement .)
    SEMICOLON       reduce using rule 112 (IterationStatement -> Fr LROUNPAREN ForInit ForExpr Mark_for ForIncr RROUNPAREN Mark_quad Statement .)
    IDENTIFIER      reduce using rule 112 (IterationStatement -> Fr LROUNPAREN ForInit ForExpr Mark_for ForIncr RROUNPAREN Mark_quad Statement .)
    CASE            reduce using rule 112 (IterationStatement -> Fr LROUNPAREN ForInit ForExpr Mark_for ForIncr RROUNPAREN Mark_quad Statement .)
    DEFAULT         reduce using rule 112 (IterationStatement -> Fr LROUNPAREN ForInit ForExpr Mark_for ForIncr RROUNPAREN Mark_quad Statement .)
    BREAK           reduce using rule 112 (IterationStatement -> Fr LROUNPAREN ForInit ForExpr Mark_for ForIncr RROUNPAREN Mark_quad Statement .)
    RETURN          reduce using rule 112 (IterationStatement -> Fr LROUNPAREN ForInit ForExpr Mark_for ForIncr RROUNPAREN Mark_quad Statement .)
    WHILE           reduce using rule 112 (IterationStatement -> Fr LROUNPAREN ForInit ForExpr Mark_for ForIncr RROUNPAREN Mark_quad Statement .)
    LCURPAREN       reduce using rule 112 (IterationStatement -> Fr LROUNPAREN ForInit ForExpr Mark_for ForIncr RROUNPAREN Mark_quad Statement .)
    DO              reduce using rule 112 (IterationStatement -> Fr LROUNPAREN ForInit ForExpr Mark_for ForIncr RROUNPAREN Mark_quad Statement .)
    FOR             reduce using rule 112 (IterationStatement -> Fr LROUNPAREN ForInit ForExpr Mark_for ForIncr RROUNPAREN Mark_quad Statement .)
    IF              reduce using rule 112 (IterationStatement -> Fr LROUNPAREN ForInit ForExpr Mark_for ForIncr RROUNPAREN Mark_quad Statement .)
    BOOLEAN         reduce using rule 112 (IterationStatement -> Fr LROUNPAREN ForInit ForExpr Mark_for ForIncr RROUNPAREN Mark_quad Statement .)
    CHAR            reduce using rule 112 (IterationStatement -> Fr LROUNPAREN ForInit ForExpr Mark_for ForIncr RROUNPAREN Mark_quad Statement .)
    BYTE            reduce using rule 112 (IterationStatement -> Fr LROUNPAREN ForInit ForExpr Mark_for ForIncr RROUNPAREN Mark_quad Statement .)
    SHORT           reduce using rule 112 (IterationStatement -> Fr LROUNPAREN ForInit ForExpr Mark_for ForIncr RROUNPAREN Mark_quad Statement .)
    INT             reduce using rule 112 (IterationStatement -> Fr LROUNPAREN ForInit ForExpr Mark_for ForIncr RROUNPAREN Mark_quad Statement .)
    LONG            reduce using rule 112 (IterationStatement -> Fr LROUNPAREN ForInit ForExpr Mark_for ForIncr RROUNPAREN Mark_quad Statement .)
    FLOAT           reduce using rule 112 (IterationStatement -> Fr LROUNPAREN ForInit ForExpr Mark_for ForIncr RROUNPAREN Mark_quad Statement .)
    DOUBLE          reduce using rule 112 (IterationStatement -> Fr LROUNPAREN ForInit ForExpr Mark_for ForIncr RROUNPAREN Mark_quad Statement .)
    VOID            reduce using rule 112 (IterationStatement -> Fr LROUNPAREN ForInit ForExpr Mark_for ForIncr RROUNPAREN Mark_quad Statement .)
    OP_INC          reduce using rule 112 (IterationStatement -> Fr LROUNPAREN ForInit ForExpr Mark_for ForIncr RROUNPAREN Mark_quad Statement .)
    OP_DEC          reduce using rule 112 (IterationStatement -> Fr LROUNPAREN ForInit ForExpr Mark_for ForIncr RROUNPAREN Mark_quad Statement .)
    PLUS            reduce using rule 112 (IterationStatement -> Fr LROUNPAREN ForInit ForExpr Mark_for ForIncr RROUNPAREN Mark_quad Statement .)
    MINUS           reduce using rule 112 (IterationStatement -> Fr LROUNPAREN ForInit ForExpr Mark_for ForIncr RROUNPAREN Mark_quad Statement .)
    ~               reduce using rule 112 (IterationStatement -> Fr LROUNPAREN ForInit ForExpr Mark_for ForIncr RROUNPAREN Mark_quad Statement .)
    NOT             reduce using rule 112 (IterationStatement -> Fr LROUNPAREN ForInit ForExpr Mark_for ForIncr RROUNPAREN Mark_quad Statement .)
    THIS            reduce using rule 112 (IterationStatement -> Fr LROUNPAREN ForInit ForExpr Mark_for ForIncr RROUNPAREN Mark_quad Statement .)
    SUPER           reduce using rule 112 (IterationStatement -> Fr LROUNPAREN ForInit ForExpr Mark_for ForIncr RROUNPAREN Mark_quad Statement .)
    NULL            reduce using rule 112 (IterationStatement -> Fr LROUNPAREN ForInit ForExpr Mark_for ForIncr RROUNPAREN Mark_quad Statement .)
    LROUNPAREN      reduce using rule 112 (IterationStatement -> Fr LROUNPAREN ForInit ForExpr Mark_for ForIncr RROUNPAREN Mark_quad Statement .)
    INT_CONST       reduce using rule 112 (IterationStatement -> Fr LROUNPAREN ForInit ForExpr Mark_for ForIncr RROUNPAREN Mark_quad Statement .)
    FLOAT_CONST     reduce using rule 112 (IterationStatement -> Fr LROUNPAREN ForInit ForExpr Mark_for ForIncr RROUNPAREN Mark_quad Statement .)
    STRING          reduce using rule 112 (IterationStatement -> Fr LROUNPAREN ForInit ForExpr Mark_for ForIncr RROUNPAREN Mark_quad Statement .)
    CHAR_CONST      reduce using rule 112 (IterationStatement -> Fr LROUNPAREN ForInit ForExpr Mark_for ForIncr RROUNPAREN Mark_quad Statement .)
    BOOLEAN_CONST   reduce using rule 112 (IterationStatement -> Fr LROUNPAREN ForInit ForExpr Mark_for ForIncr RROUNPAREN Mark_quad Statement .)
    NEW             reduce using rule 112 (IterationStatement -> Fr LROUNPAREN ForInit ForExpr Mark_for ForIncr RROUNPAREN Mark_quad Statement .)


state 366

    (221) ConditionalExpression -> ConditionalOrExpression Mark_quad Ques Mark_quad Expression Mark_quad Cln Mark_quad ConditionalExpression . Mark_quad
    (96) Mark_quad -> .

    SEMICOLON       reduce using rule 96 (Mark_quad -> .)
    RROUNPAREN      reduce using rule 96 (Mark_quad -> .)
    COLON           reduce using rule 96 (Mark_quad -> .)
    COMMA           reduce using rule 96 (Mark_quad -> .)
    RSQPAREN        reduce using rule 96 (Mark_quad -> .)

    Mark_quad                      shift and go to state 369

state 367

    (109) IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .

    ELSE            reduce using rule 109 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    RCURPAREN       reduce using rule 109 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 109 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 109 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    CASE            reduce using rule 109 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    DEFAULT         reduce using rule 109 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    BREAK           reduce using rule 109 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    RETURN          reduce using rule 109 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    WHILE           reduce using rule 109 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    LCURPAREN       reduce using rule 109 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    DO              reduce using rule 109 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    FOR             reduce using rule 109 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    IF              reduce using rule 109 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    BOOLEAN         reduce using rule 109 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    CHAR            reduce using rule 109 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    BYTE            reduce using rule 109 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    SHORT           reduce using rule 109 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    INT             reduce using rule 109 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    LONG            reduce using rule 109 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    FLOAT           reduce using rule 109 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    DOUBLE          reduce using rule 109 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    VOID            reduce using rule 109 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    OP_INC          reduce using rule 109 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    OP_DEC          reduce using rule 109 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    PLUS            reduce using rule 109 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    MINUS           reduce using rule 109 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    ~               reduce using rule 109 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    NOT             reduce using rule 109 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    THIS            reduce using rule 109 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    SUPER           reduce using rule 109 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    NULL            reduce using rule 109 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    LROUNPAREN      reduce using rule 109 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    INT_CONST       reduce using rule 109 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    FLOAT_CONST     reduce using rule 109 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    STRING          reduce using rule 109 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    CHAR_CONST      reduce using rule 109 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    BOOLEAN_CONST   reduce using rule 109 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)
    NEW             reduce using rule 109 (IterationStatement -> Do Mark_quad Statement WHILE LROUNPAREN Expression Mark_dowhile RROUNPAREN SEMICOLON .)


state 368

    (103) SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .

    ELSE            reduce using rule 103 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    RCURPAREN       reduce using rule 103 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    SEMICOLON       reduce using rule 103 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    IDENTIFIER      reduce using rule 103 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    CASE            reduce using rule 103 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    DEFAULT         reduce using rule 103 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    BREAK           reduce using rule 103 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    RETURN          reduce using rule 103 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    WHILE           reduce using rule 103 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    LCURPAREN       reduce using rule 103 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    DO              reduce using rule 103 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    FOR             reduce using rule 103 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    IF              reduce using rule 103 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    BOOLEAN         reduce using rule 103 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    CHAR            reduce using rule 103 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    BYTE            reduce using rule 103 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    SHORT           reduce using rule 103 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    INT             reduce using rule 103 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    LONG            reduce using rule 103 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    FLOAT           reduce using rule 103 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    DOUBLE          reduce using rule 103 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    VOID            reduce using rule 103 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    OP_INC          reduce using rule 103 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    OP_DEC          reduce using rule 103 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    PLUS            reduce using rule 103 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    MINUS           reduce using rule 103 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    ~               reduce using rule 103 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    NOT             reduce using rule 103 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    THIS            reduce using rule 103 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    SUPER           reduce using rule 103 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    NULL            reduce using rule 103 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    LROUNPAREN      reduce using rule 103 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    INT_CONST       reduce using rule 103 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    FLOAT_CONST     reduce using rule 103 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    STRING          reduce using rule 103 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    CHAR_CONST      reduce using rule 103 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    BOOLEAN_CONST   reduce using rule 103 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)
    NEW             reduce using rule 103 (SelectionStatement -> If LROUNPAREN Expression RROUNPAREN Mark_if Statement ELSE Mark_else Statement .)


state 369

    (221) ConditionalExpression -> ConditionalOrExpression Mark_quad Ques Mark_quad Expression Mark_quad Cln Mark_quad ConditionalExpression Mark_quad .

    RSQPAREN        reduce using rule 221 (ConditionalExpression -> ConditionalOrExpression Mark_quad Ques Mark_quad Expression Mark_quad Cln Mark_quad ConditionalExpression Mark_quad .)
    SEMICOLON       reduce using rule 221 (ConditionalExpression -> ConditionalOrExpression Mark_quad Ques Mark_quad Expression Mark_quad Cln Mark_quad ConditionalExpression Mark_quad .)
    RROUNPAREN      reduce using rule 221 (ConditionalExpression -> ConditionalOrExpression Mark_quad Ques Mark_quad Expression Mark_quad Cln Mark_quad ConditionalExpression Mark_quad .)
    COLON           reduce using rule 221 (ConditionalExpression -> ConditionalOrExpression Mark_quad Ques Mark_quad Expression Mark_quad Cln Mark_quad ConditionalExpression Mark_quad .)
    COMMA           reduce using rule 221 (ConditionalExpression -> ConditionalOrExpression Mark_quad Ques Mark_quad Expression Mark_quad Cln Mark_quad ConditionalExpression Mark_quad .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LSQPAREN in state 151 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 354 resolved as shift
